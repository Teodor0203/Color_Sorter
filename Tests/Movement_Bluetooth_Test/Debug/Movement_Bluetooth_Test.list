
Movement_Bluetooth_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008648  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  080087e8  080087e8  000097e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab4  08008ab4  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ab4  08008ab4  00009ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008abc  08008abc  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008abc  08008abc  00009abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ac0  08008ac0  00009ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008ac4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de8  20000074  08008b38  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e5c  08008b38  0000ae5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d97  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392b  00000000  00000000  00023e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  00027768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b5  00000000  00000000  00028cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197be  00000000  00000000  00029da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e41  00000000  00000000  00043563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aeba  00000000  00000000  0005b3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f625e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e0  00000000  00000000  000f62a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000fc784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080087d0 	.word	0x080087d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080087d0 	.word	0x080087d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Set_Servo_Angle>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	4613      	mov	r3, r2
 80005c8:	71fb      	strb	r3, [r7, #7]

    uint32_t pulse_length = 210 + (angle * (1050 - 210) / 180);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	4a15      	ldr	r2, [pc, #84]	@ (800062c <Set_Servo_Angle+0x70>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	441a      	add	r2, r3
 80005dc:	11d2      	asrs	r2, r2, #7
 80005de:	17db      	asrs	r3, r3, #31
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	33d2      	adds	r3, #210	@ 0xd2
 80005e4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <Set_Servo_Angle+0x3a>
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005f4:	e013      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d104      	bne.n	8000606 <Set_Servo_Angle+0x4a>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000604:	e00b      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	2b08      	cmp	r3, #8
 800060a:	d104      	bne.n	8000616 <Set_Servo_Angle+0x5a>
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000614:	e003      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800061e:	bf00      	nop
 8000620:	371c      	adds	r7, #28
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	b60b60b7 	.word	0xb60b60b7

08000630 <Init_arm>:

void Init_arm()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1); // Enable motors
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	@ 0x40
 8000638:	4831      	ldr	r0, [pc, #196]	@ (8000700 <Init_arm+0xd0>)
 800063a:	f001 fcd1 	bl	8001fe0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // A0  - M1
 800063e:	2100      	movs	r1, #0
 8000640:	4830      	ldr	r0, [pc, #192]	@ (8000704 <Init_arm+0xd4>)
 8000642:	f002 fabd 	bl	8002bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // D10 - M2
 8000646:	2100      	movs	r1, #0
 8000648:	482f      	ldr	r0, [pc, #188]	@ (8000708 <Init_arm+0xd8>)
 800064a:	f002 fab9 	bl	8002bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // D9  - M3
 800064e:	2104      	movs	r1, #4
 8000650:	482e      	ldr	r0, [pc, #184]	@ (800070c <Init_arm+0xdc>)
 8000652:	f002 fab5 	bl	8002bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // D6  - M4
 8000656:	2108      	movs	r1, #8
 8000658:	482a      	ldr	r0, [pc, #168]	@ (8000704 <Init_arm+0xd4>)
 800065a:	f002 fab1 	bl	8002bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // D5  - M5
 800065e:	2100      	movs	r1, #0
 8000660:	482a      	ldr	r0, [pc, #168]	@ (800070c <Init_arm+0xdc>)
 8000662:	f002 faad 	bl	8002bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // D3  - M6
 8000666:	2104      	movs	r1, #4
 8000668:	4826      	ldr	r0, [pc, #152]	@ (8000704 <Init_arm+0xd4>)
 800066a:	f002 faa9 	bl	8002bc0 <HAL_TIM_PWM_Start>

	// Set arm to initial position
    Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 800066e:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <Init_arm+0xe0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	4823      	ldr	r0, [pc, #140]	@ (8000704 <Init_arm+0xd4>)
 8000678:	f7ff ffa0 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000680:	f001 f992 	bl	80019a8 <HAL_Delay>

    Set_Servo_Angle(&htim4, TIM_CHANNEL_1, (180 - (current_value_shoulder - 30)));
 8000684:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <Init_arm+0xe4>)
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	481c      	ldr	r0, [pc, #112]	@ (8000708 <Init_arm+0xd8>)
 8000696:	f7ff ff91 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 800069a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800069e:	f001 f983 	bl	80019a8 <HAL_Delay>

    Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <Init_arm+0xe8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2104      	movs	r1, #4
 80006aa:	4818      	ldr	r0, [pc, #96]	@ (800070c <Init_arm+0xdc>)
 80006ac:	f7ff ff86 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006b4:	f001 f978 	bl	80019a8 <HAL_Delay>

    Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <Init_arm+0xec>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	2108      	movs	r1, #8
 80006c0:	4810      	ldr	r0, [pc, #64]	@ (8000704 <Init_arm+0xd4>)
 80006c2:	f7ff ff7b 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 80006c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ca:	f001 f96d 	bl	80019a8 <HAL_Delay>

    Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <Init_arm+0xf0>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	480d      	ldr	r0, [pc, #52]	@ (800070c <Init_arm+0xdc>)
 80006d8:	f7ff ff70 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 80006dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e0:	f001 f962 	bl	80019a8 <HAL_Delay>

    Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <Init_arm+0xf4>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	2104      	movs	r1, #4
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <Init_arm+0xd4>)
 80006ee:	f7ff ff65 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 80006f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f6:	f001 f957 	bl	80019a8 <HAL_Delay>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40020000 	.word	0x40020000
 8000704:	20000090 	.word	0x20000090
 8000708:	20000120 	.word	0x20000120
 800070c:	200000d8 	.word	0x200000d8
 8000710:	20000000 	.word	0x20000000
 8000714:	20000001 	.word	0x20000001
 8000718:	20000002 	.word	0x20000002
 800071c:	20000003 	.word	0x20000003
 8000720:	20000004 	.word	0x20000004
 8000724:	20000005 	.word	0x20000005

08000728 <MoveArm>:


void MoveArm(uint8_t base_angle, uint8_t shoulder_angle, uint8_t elbow_angle, uint8_t wrist_ver_angle, uint8_t wrist_rot_angle, uint8_t gripper_angle)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	4604      	mov	r4, r0
 8000730:	4608      	mov	r0, r1
 8000732:	4611      	mov	r1, r2
 8000734:	461a      	mov	r2, r3
 8000736:	4623      	mov	r3, r4
 8000738:	71fb      	strb	r3, [r7, #7]
 800073a:	4603      	mov	r3, r0
 800073c:	71bb      	strb	r3, [r7, #6]
 800073e:	460b      	mov	r3, r1
 8000740:	717b      	strb	r3, [r7, #5]
 8000742:	4613      	mov	r3, r2
 8000744:	713b      	strb	r3, [r7, #4]
    int isMoving = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]

    while (isMoving)
 800074a:	e0e0      	b.n	800090e <MoveArm+0x1e6>
    {
        if (current_value_base != base_angle)
 800074c:	4b74      	ldr	r3, [pc, #464]	@ (8000920 <MoveArm+0x1f8>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	429a      	cmp	r2, r3
 8000754:	d018      	beq.n	8000788 <MoveArm+0x60>
        {
            if (current_value_base > base_angle)
 8000756:	4b72      	ldr	r3, [pc, #456]	@ (8000920 <MoveArm+0x1f8>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	429a      	cmp	r2, r3
 800075e:	d206      	bcs.n	800076e <MoveArm+0x46>
            {
            	current_value_base--;
 8000760:	4b6f      	ldr	r3, [pc, #444]	@ (8000920 <MoveArm+0x1f8>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b6d      	ldr	r3, [pc, #436]	@ (8000920 <MoveArm+0x1f8>)
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e005      	b.n	800077a <MoveArm+0x52>
            }
            else
            {
            	current_value_base++;
 800076e:	4b6c      	ldr	r3, [pc, #432]	@ (8000920 <MoveArm+0x1f8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b6a      	ldr	r3, [pc, #424]	@ (8000920 <MoveArm+0x1f8>)
 8000778:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 800077a:	4b69      	ldr	r3, [pc, #420]	@ (8000920 <MoveArm+0x1f8>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	4868      	ldr	r0, [pc, #416]	@ (8000924 <MoveArm+0x1fc>)
 8000784:	f7ff ff1a 	bl	80005bc <Set_Servo_Angle>
        }

        if ((current_value_shoulder - 30) != shoulder_angle - 30)
 8000788:	4b67      	ldr	r3, [pc, #412]	@ (8000928 <MoveArm+0x200>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	79ba      	ldrb	r2, [r7, #6]
 800078e:	429a      	cmp	r2, r3
 8000790:	d01c      	beq.n	80007cc <MoveArm+0xa4>
        {
            if ((current_value_shoulder - 30) > shoulder_angle - 30)
 8000792:	4b65      	ldr	r3, [pc, #404]	@ (8000928 <MoveArm+0x200>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	79ba      	ldrb	r2, [r7, #6]
 8000798:	429a      	cmp	r2, r3
 800079a:	d206      	bcs.n	80007aa <MoveArm+0x82>
            {
            	current_value_shoulder--;
 800079c:	4b62      	ldr	r3, [pc, #392]	@ (8000928 <MoveArm+0x200>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b60      	ldr	r3, [pc, #384]	@ (8000928 <MoveArm+0x200>)
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e005      	b.n	80007b6 <MoveArm+0x8e>
            }
            else
            {
            	current_value_shoulder++;
 80007aa:	4b5f      	ldr	r3, [pc, #380]	@ (8000928 <MoveArm+0x200>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000928 <MoveArm+0x200>)
 80007b4:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim4, TIM_CHANNEL_1, (180 - (current_value_shoulder - 30)));
 80007b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000928 <MoveArm+0x200>)
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	4859      	ldr	r0, [pc, #356]	@ (800092c <MoveArm+0x204>)
 80007c8:	f7ff fef8 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_elbow != elbow_angle)
 80007cc:	4b58      	ldr	r3, [pc, #352]	@ (8000930 <MoveArm+0x208>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	797a      	ldrb	r2, [r7, #5]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d018      	beq.n	8000808 <MoveArm+0xe0>
        {
            if (current_value_elbow > elbow_angle)
 80007d6:	4b56      	ldr	r3, [pc, #344]	@ (8000930 <MoveArm+0x208>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	797a      	ldrb	r2, [r7, #5]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d206      	bcs.n	80007ee <MoveArm+0xc6>
            {
            	current_value_elbow--;
 80007e0:	4b53      	ldr	r3, [pc, #332]	@ (8000930 <MoveArm+0x208>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b51      	ldr	r3, [pc, #324]	@ (8000930 <MoveArm+0x208>)
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e005      	b.n	80007fa <MoveArm+0xd2>
            }
            else
            {
            	current_value_elbow++;
 80007ee:	4b50      	ldr	r3, [pc, #320]	@ (8000930 <MoveArm+0x208>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000930 <MoveArm+0x208>)
 80007f8:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 80007fa:	4b4d      	ldr	r3, [pc, #308]	@ (8000930 <MoveArm+0x208>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	2104      	movs	r1, #4
 8000802:	484c      	ldr	r0, [pc, #304]	@ (8000934 <MoveArm+0x20c>)
 8000804:	f7ff feda 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_wrist_ver != wrist_ver_angle)
 8000808:	4b4b      	ldr	r3, [pc, #300]	@ (8000938 <MoveArm+0x210>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	793a      	ldrb	r2, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d018      	beq.n	8000844 <MoveArm+0x11c>
        {
            if (current_value_wrist_ver > wrist_ver_angle)
 8000812:	4b49      	ldr	r3, [pc, #292]	@ (8000938 <MoveArm+0x210>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	793a      	ldrb	r2, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	d206      	bcs.n	800082a <MoveArm+0x102>
            {
            	current_value_wrist_ver--;
 800081c:	4b46      	ldr	r3, [pc, #280]	@ (8000938 <MoveArm+0x210>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b44      	ldr	r3, [pc, #272]	@ (8000938 <MoveArm+0x210>)
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	e005      	b.n	8000836 <MoveArm+0x10e>
            }
            else
            {
            	current_value_wrist_ver++;
 800082a:	4b43      	ldr	r3, [pc, #268]	@ (8000938 <MoveArm+0x210>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b41      	ldr	r3, [pc, #260]	@ (8000938 <MoveArm+0x210>)
 8000834:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 8000836:	4b40      	ldr	r3, [pc, #256]	@ (8000938 <MoveArm+0x210>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	2108      	movs	r1, #8
 800083e:	4839      	ldr	r0, [pc, #228]	@ (8000924 <MoveArm+0x1fc>)
 8000840:	f7ff febc 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_wrist_rot != wrist_rot_angle)
 8000844:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MoveArm+0x214>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	f897 2020 	ldrb.w	r2, [r7, #32]
 800084c:	429a      	cmp	r2, r3
 800084e:	d019      	beq.n	8000884 <MoveArm+0x15c>
        {
            if (current_value_wrist_rot > wrist_rot_angle)
 8000850:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MoveArm+0x214>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000858:	429a      	cmp	r2, r3
 800085a:	d206      	bcs.n	800086a <MoveArm+0x142>
            {
            	current_value_wrist_rot--;
 800085c:	4b37      	ldr	r3, [pc, #220]	@ (800093c <MoveArm+0x214>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b35      	ldr	r3, [pc, #212]	@ (800093c <MoveArm+0x214>)
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e005      	b.n	8000876 <MoveArm+0x14e>
            }
            else
                current_value_wrist_rot++;
 800086a:	4b34      	ldr	r3, [pc, #208]	@ (800093c <MoveArm+0x214>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b32      	ldr	r3, [pc, #200]	@ (800093c <MoveArm+0x214>)
 8000874:	701a      	strb	r2, [r3, #0]

            Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 8000876:	4b31      	ldr	r3, [pc, #196]	@ (800093c <MoveArm+0x214>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	482d      	ldr	r0, [pc, #180]	@ (8000934 <MoveArm+0x20c>)
 8000880:	f7ff fe9c 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_gripper != gripper_angle)
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <MoveArm+0x218>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800088c:	429a      	cmp	r2, r3
 800088e:	d019      	beq.n	80008c4 <MoveArm+0x19c>
        {
            if (current_value_gripper > gripper_angle)
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <MoveArm+0x218>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000898:	429a      	cmp	r2, r3
 800089a:	d206      	bcs.n	80008aa <MoveArm+0x182>
            {
            	current_value_gripper--;
 800089c:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <MoveArm+0x218>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <MoveArm+0x218>)
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e005      	b.n	80008b6 <MoveArm+0x18e>
            }
            else
            {
            	current_value_gripper++;
 80008aa:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <MoveArm+0x218>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <MoveArm+0x218>)
 80008b4:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80008b6:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <MoveArm+0x218>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	2104      	movs	r1, #4
 80008be:	4819      	ldr	r0, [pc, #100]	@ (8000924 <MoveArm+0x1fc>)
 80008c0:	f7ff fe7c 	bl	80005bc <Set_Servo_Angle>
        }

        osDelay(15);
 80008c4:	200f      	movs	r0, #15
 80008c6:	f004 f9ad 	bl	8004c24 <osDelay>

        if ((current_value_base == base_angle) &&
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MoveArm+0x1f8>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d11c      	bne.n	800090e <MoveArm+0x1e6>
            (current_value_shoulder + 45 == shoulder_angle + 45) &&
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MoveArm+0x200>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
        if ((current_value_base == base_angle) &&
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d117      	bne.n	800090e <MoveArm+0x1e6>
            (current_value_elbow == elbow_angle) &&
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MoveArm+0x208>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
            (current_value_shoulder + 45 == shoulder_angle + 45) &&
 80008e2:	797a      	ldrb	r2, [r7, #5]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d112      	bne.n	800090e <MoveArm+0x1e6>
            (current_value_wrist_ver == wrist_ver_angle) &&
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MoveArm+0x210>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
            (current_value_elbow == elbow_angle) &&
 80008ec:	793a      	ldrb	r2, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d10d      	bne.n	800090e <MoveArm+0x1e6>
            (current_value_wrist_rot == wrist_rot_angle) &&
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MoveArm+0x214>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_ver == wrist_ver_angle) &&
 80008f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d107      	bne.n	800090e <MoveArm+0x1e6>
            (current_value_gripper == gripper_angle))
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MoveArm+0x218>)
 8000900:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_rot == wrist_rot_angle) &&
 8000902:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000906:	429a      	cmp	r2, r3
 8000908:	d101      	bne.n	800090e <MoveArm+0x1e6>
        {
        	isMoving = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
    while (isMoving)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b00      	cmp	r3, #0
 8000912:	f47f af1b 	bne.w	800074c <MoveArm+0x24>
        }
    }
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000090 	.word	0x20000090
 8000928:	20000001 	.word	0x20000001
 800092c:	20000120 	.word	0x20000120
 8000930:	20000002 	.word	0x20000002
 8000934:	200000d8 	.word	0x200000d8
 8000938:	20000003 	.word	0x20000003
 800093c:	20000004 	.word	0x20000004
 8000940:	20000005 	.word	0x20000005

08000944 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b0a5      	sub	sp, #148	@ 0x94
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a80      	ldr	r2, [pc, #512]	@ (8000b54 <HAL_UART_RxCpltCallback+0x210>)
 8000952:	4293      	cmp	r3, r2
 8000954:	f040 80fa 	bne.w	8000b4c <HAL_UART_RxCpltCallback+0x208>
	        char response_msg[100];
	        char temp_buffer[21]; // Create a copy if you need to preserve the original
	        for(int i = 0; i < 21; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800095e:	e01b      	b.n	8000998 <HAL_UART_RxCpltCallback+0x54>
	       	        	buffer_q[index_buffer_write.value][i] = buffer[i];
 8000960:	4b7d      	ldr	r3, [pc, #500]	@ (8000b58 <HAL_UART_RxCpltCallback+0x214>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	4a7b      	ldr	r2, [pc, #492]	@ (8000b5c <HAL_UART_RxCpltCallback+0x218>)
 800096e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000972:	4413      	add	r3, r2
 8000974:	781c      	ldrb	r4, [r3, #0]
 8000976:	497a      	ldr	r1, [pc, #488]	@ (8000b60 <HAL_UART_RxCpltCallback+0x21c>)
 8000978:	4603      	mov	r3, r0
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4403      	add	r3, r0
 800097e:	00da      	lsls	r2, r3, #3
 8000980:	1ad2      	subs	r2, r2, r3
 8000982:	440a      	add	r2, r1
 8000984:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000988:	4413      	add	r3, r2
 800098a:	4622      	mov	r2, r4
 800098c:	701a      	strb	r2, [r3, #0]
	        for(int i = 0; i < 21; i++)
 800098e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000992:	3301      	adds	r3, #1
 8000994:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800099c:	2b14      	cmp	r3, #20
 800099e:	dddf      	ble.n	8000960 <HAL_UART_RxCpltCallback+0x1c>

	        strcpy(temp_buffer, buffer_q[index_buffer_read.value]); // Copy the original string
 80009a0:	4b70      	ldr	r3, [pc, #448]	@ (8000b64 <HAL_UART_RxCpltCallback+0x220>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00da      	lsls	r2, r3, #3
 80009b4:	1ad2      	subs	r2, r2, r3
 80009b6:	4b6a      	ldr	r3, [pc, #424]	@ (8000b60 <HAL_UART_RxCpltCallback+0x21c>)
 80009b8:	441a      	add	r2, r3
 80009ba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f007 f8d2 	bl	8007b6a <strcpy>



	        if(index_buffer_write.value == 7 && index_buffer_read.value == 0){
 80009c6:	4b64      	ldr	r3, [pc, #400]	@ (8000b58 <HAL_UART_RxCpltCallback+0x214>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	d10a      	bne.n	80009ea <HAL_UART_RxCpltCallback+0xa6>
 80009d4:	4b63      	ldr	r3, [pc, #396]	@ (8000b64 <HAL_UART_RxCpltCallback+0x220>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f003 0307 	and.w	r3, r3, #7
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <HAL_UART_RxCpltCallback+0xa6>
	        	is_buffer_full = 1;
 80009e2:	4b61      	ldr	r3, [pc, #388]	@ (8000b68 <HAL_UART_RxCpltCallback+0x224>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
	        	return;
 80009e8:	e0b0      	b.n	8000b4c <HAL_UART_RxCpltCallback+0x208>
	        }

	        if(++index_buffer_write.value == index_buffer_read.value)
 80009ea:	4b5b      	ldr	r3, [pc, #364]	@ (8000b58 <HAL_UART_RxCpltCallback+0x214>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	3301      	adds	r3, #1
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	b2d9      	uxtb	r1, r3
 80009fc:	4a56      	ldr	r2, [pc, #344]	@ (8000b58 <HAL_UART_RxCpltCallback+0x214>)
 80009fe:	7813      	ldrb	r3, [r2, #0]
 8000a00:	f361 0302 	bfi	r3, r1, #0, #3
 8000a04:	7013      	strb	r3, [r2, #0]
 8000a06:	4b54      	ldr	r3, [pc, #336]	@ (8000b58 <HAL_UART_RxCpltCallback+0x214>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b54      	ldr	r3, [pc, #336]	@ (8000b64 <HAL_UART_RxCpltCallback+0x220>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d103      	bne.n	8000a26 <HAL_UART_RxCpltCallback+0xe2>
	        {
	        	is_buffer_full = 1;
 8000a1e:	4b52      	ldr	r3, [pc, #328]	@ (8000b68 <HAL_UART_RxCpltCallback+0x224>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
	        	return;
 8000a24:	e092      	b.n	8000b4c <HAL_UART_RxCpltCallback+0x208>
	        }

	        char *token;

	            token = strtok(temp_buffer, ",");
 8000a26:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a2a:	4950      	ldr	r1, [pc, #320]	@ (8000b6c <HAL_UART_RxCpltCallback+0x228>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f006 ff6f 	bl	8007910 <strtok>
 8000a32:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d007      	beq.n	8000a4e <HAL_UART_RxCpltCallback+0x10a>
	                base_angle = atoi(token);
 8000a3e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a42:	f006 fdc1 	bl	80075c8 <atoi>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b49      	ldr	r3, [pc, #292]	@ (8000b70 <HAL_UART_RxCpltCallback+0x22c>)
 8000a4c:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a4e:	4947      	ldr	r1, [pc, #284]	@ (8000b6c <HAL_UART_RxCpltCallback+0x228>)
 8000a50:	2000      	movs	r0, #0
 8000a52:	f006 ff5d 	bl	8007910 <strtok>
 8000a56:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d007      	beq.n	8000a72 <HAL_UART_RxCpltCallback+0x12e>
	                shoulder_angle = atoi(token);
 8000a62:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a66:	f006 fdaf 	bl	80075c8 <atoi>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b41      	ldr	r3, [pc, #260]	@ (8000b74 <HAL_UART_RxCpltCallback+0x230>)
 8000a70:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a72:	493e      	ldr	r1, [pc, #248]	@ (8000b6c <HAL_UART_RxCpltCallback+0x228>)
 8000a74:	2000      	movs	r0, #0
 8000a76:	f006 ff4b 	bl	8007910 <strtok>
 8000a7a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d007      	beq.n	8000a96 <HAL_UART_RxCpltCallback+0x152>
	                elbow_angle = atoi(token);
 8000a86:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a8a:	f006 fd9d 	bl	80075c8 <atoi>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b39      	ldr	r3, [pc, #228]	@ (8000b78 <HAL_UART_RxCpltCallback+0x234>)
 8000a94:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a96:	4935      	ldr	r1, [pc, #212]	@ (8000b6c <HAL_UART_RxCpltCallback+0x228>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f006 ff39 	bl	8007910 <strtok>
 8000a9e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d007      	beq.n	8000aba <HAL_UART_RxCpltCallback+0x176>
	                wrist_ver_angle = atoi(token);
 8000aaa:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000aae:	f006 fd8b 	bl	80075c8 <atoi>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b31      	ldr	r3, [pc, #196]	@ (8000b7c <HAL_UART_RxCpltCallback+0x238>)
 8000ab8:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <HAL_UART_RxCpltCallback+0x228>)
 8000abc:	2000      	movs	r0, #0
 8000abe:	f006 ff27 	bl	8007910 <strtok>
 8000ac2:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <HAL_UART_RxCpltCallback+0x19a>
	            	wrist_rot_angle = atoi(token);
 8000ace:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000ad2:	f006 fd79 	bl	80075c8 <atoi>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <HAL_UART_RxCpltCallback+0x23c>)
 8000adc:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000ade:	4923      	ldr	r1, [pc, #140]	@ (8000b6c <HAL_UART_RxCpltCallback+0x228>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f006 ff15 	bl	8007910 <strtok>
 8000ae6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <HAL_UART_RxCpltCallback+0x1be>
	                detected_class = atoi(token);
 8000af2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000af6:	f006 fd67 	bl	80075c8 <atoi>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <HAL_UART_RxCpltCallback+0x240>)
 8000b00:	701a      	strb	r2, [r3, #0]
	            }
	            move_arm = 1;
 8000b02:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <HAL_UART_RxCpltCallback+0x244>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
	        // Construct the response message
	        strcpy(response_msg, "Received: ");
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000b8c <HAL_UART_RxCpltCallback+0x248>)
 8000b0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b10:	c303      	stmia	r3!, {r0, r1}
 8000b12:	801a      	strh	r2, [r3, #0]
 8000b14:	3302      	adds	r3, #2
 8000b16:	0c12      	lsrs	r2, r2, #16
 8000b18:	701a      	strb	r2, [r3, #0]
	        strcat(response_msg, (char*)buffer); // Cast to char* is fine here as it's null-terminated
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	490f      	ldr	r1, [pc, #60]	@ (8000b5c <HAL_UART_RxCpltCallback+0x218>)
 8000b20:	4618      	mov	r0, r3
 8000b22:	f006 fee6 	bl	80078f2 <strcat>

	        // Transmit the response
	        HAL_UART_Transmit(&huart1, (uint8_t*) response_msg, strlen(response_msg), HAL_MAX_DELAY);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fb58 	bl	80001e0 <strlen>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	f107 010c 	add.w	r1, r7, #12
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	4814      	ldr	r0, [pc, #80]	@ (8000b90 <HAL_UART_RxCpltCallback+0x24c>)
 8000b3e:	f002 ff35 	bl	80039ac <HAL_UART_Transmit>

	        // Re-enable the receive interrupt *after* processing the current data
	        HAL_UART_Receive_IT(&huart1, buffer, 21);
 8000b42:	2215      	movs	r2, #21
 8000b44:	4905      	ldr	r1, [pc, #20]	@ (8000b5c <HAL_UART_RxCpltCallback+0x218>)
 8000b46:	4812      	ldr	r0, [pc, #72]	@ (8000b90 <HAL_UART_RxCpltCallback+0x24c>)
 8000b48:	f002 ffbb 	bl	8003ac2 <HAL_UART_Receive_IT>

	}
}
 8000b4c:	3794      	adds	r7, #148	@ 0x94
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40011000 	.word	0x40011000
 8000b58:	20000204 	.word	0x20000204
 8000b5c:	200002b8 	.word	0x200002b8
 8000b60:	20000210 	.word	0x20000210
 8000b64:	20000208 	.word	0x20000208
 8000b68:	2000020c 	.word	0x2000020c
 8000b6c:	08008810 	.word	0x08008810
 8000b70:	200002cd 	.word	0x200002cd
 8000b74:	200002ce 	.word	0x200002ce
 8000b78:	200002cf 	.word	0x200002cf
 8000b7c:	200002d0 	.word	0x200002d0
 8000b80:	200002d1 	.word	0x200002d1
 8000b84:	200002d2 	.word	0x200002d2
 8000b88:	200002d4 	.word	0x200002d4
 8000b8c:	08008814 	.word	0x08008814
 8000b90:	20000168 	.word	0x20000168

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9a:	f000 fec3 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9e:	f000 f85d 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f000 fa9d 	bl	80010e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ba6:	f000 fa71 	bl	800108c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000baa:	f000 f8c1 	bl	8000d30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bae:	f000 f94b 	bl	8000e48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bb2:	f000 f9cb 	bl	8000f4c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000bb6:	f000 fa3f 	bl	8001038 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char temp_msg[32];
  strcpy(temp_msg, "HC-05 Initialised!\n");
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c2c <main+0x98>)
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	4615      	mov	r5, r2
 8000bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	4814      	ldr	r0, [pc, #80]	@ (8000c30 <main+0x9c>)
 8000bde:	f002 fee5 	bl	80039ac <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, buffer, 21);
 8000be2:	2215      	movs	r2, #21
 8000be4:	4913      	ldr	r1, [pc, #76]	@ (8000c34 <main+0xa0>)
 8000be6:	4812      	ldr	r0, [pc, #72]	@ (8000c30 <main+0x9c>)
 8000be8:	f002 ff6b 	bl	8003ac2 <HAL_UART_Receive_IT>

  Init_arm();
 8000bec:	f7ff fd20 	bl	8000630 <Init_arm>
  move_gripper(30);*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bf0:	f003 ff3c 	bl	8004a6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of bluetooth */
  bluetoothHandle = osThreadNew(BluetoothTask, NULL, &bluetooth_attributes);
 8000bf4:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <main+0xa4>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4810      	ldr	r0, [pc, #64]	@ (8000c3c <main+0xa8>)
 8000bfa:	f003 ff81 	bl	8004b00 <osThreadNew>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <main+0xac>)
 8000c02:	6013      	str	r3, [r2, #0]

  /* creation of moveRobotArm */
  moveRobotArmHandle = osThreadNew(MoveRobotArmTask, NULL, &moveRobotArm_attributes);
 8000c04:	4a0f      	ldr	r2, [pc, #60]	@ (8000c44 <main+0xb0>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	480f      	ldr	r0, [pc, #60]	@ (8000c48 <main+0xb4>)
 8000c0a:	f003 ff79 	bl	8004b00 <osThreadNew>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a0e      	ldr	r2, [pc, #56]	@ (8000c4c <main+0xb8>)
 8000c12:	6013      	str	r3, [r2, #0]

  /* creation of colorSensor */
  colorSensorHandle = osThreadNew(ColorSensorTask, NULL, &colorSensor_attributes);
 8000c14:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <main+0xbc>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <main+0xc0>)
 8000c1a:	f003 ff71 	bl	8004b00 <osThreadNew>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <main+0xc4>)
 8000c22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c24:	f003 ff46 	bl	8004ab4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <main+0x94>
 8000c2c:	08008820 	.word	0x08008820
 8000c30:	20000168 	.word	0x20000168
 8000c34:	200002b8 	.word	0x200002b8
 8000c38:	0800884c 	.word	0x0800884c
 8000c3c:	080011bd 	.word	0x080011bd
 8000c40:	200001f8 	.word	0x200001f8
 8000c44:	08008870 	.word	0x08008870
 8000c48:	080011cd 	.word	0x080011cd
 8000c4c:	200001fc 	.word	0x200001fc
 8000c50:	08008894 	.word	0x08008894
 8000c54:	0800121d 	.word	0x0800121d
 8000c58:	20000200 	.word	0x20000200

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	@ 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	2230      	movs	r2, #48	@ 0x30
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f006 fe39 	bl	80078e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <SystemClock_Config+0xcc>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	4a27      	ldr	r2, [pc, #156]	@ (8000d28 <SystemClock_Config+0xcc>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	4b25      	ldr	r3, [pc, #148]	@ (8000d28 <SystemClock_Config+0xcc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <SystemClock_Config+0xd0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a21      	ldr	r2, [pc, #132]	@ (8000d2c <SystemClock_Config+0xd0>)
 8000ca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <SystemClock_Config+0xd0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cd0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cd4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 f996 	bl	8002014 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cee:	f000 faaf 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fbf8 	bl	8002504 <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d1a:	f000 fa99 	bl	8001250 <Error_Handler>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3750      	adds	r7, #80	@ 0x50
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000

08000d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08e      	sub	sp, #56	@ 0x38
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	f107 0320 	add.w	r3, r7, #32
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	615a      	str	r2, [r3, #20]
 8000d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d60:	4b38      	ldr	r3, [pc, #224]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000d62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000d68:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000d6a:	22c7      	movs	r2, #199	@ 0xc7
 8000d6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b35      	ldr	r3, [pc, #212]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8000d74:	4b33      	ldr	r3, [pc, #204]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000d76:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b31      	ldr	r3, [pc, #196]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d82:	4b30      	ldr	r3, [pc, #192]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000d84:	2280      	movs	r2, #128	@ 0x80
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d88:	482e      	ldr	r0, [pc, #184]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000d8a:	f001 fe0d 	bl	80029a8 <HAL_TIM_Base_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d94:	f000 fa5c 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4827      	ldr	r0, [pc, #156]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000da6:	f002 f96d 	bl	8003084 <HAL_TIM_ConfigClockSource>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000db0:	f000 fa4e 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000db4:	4823      	ldr	r0, [pc, #140]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000db6:	f001 fea9 	bl	8002b0c <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000dc0:	f000 fa46 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 0320 	add.w	r3, r7, #32
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481c      	ldr	r0, [pc, #112]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000dd4:	f002 fd18 	bl	8003808 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dde:	f000 fa37 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	@ 0x60
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000dfa:	f002 f881 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e04:	f000 fa24 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000e10:	f002 f876 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000e1a:	f000 fa19 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2208      	movs	r2, #8
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000e26:	f002 f86b 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000e30:	f000 fa0e 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e34:	4803      	ldr	r0, [pc, #12]	@ (8000e44 <MX_TIM2_Init+0x114>)
 8000e36:	f000 fa89 	bl	800134c <HAL_TIM_MspPostInit>

}
 8000e3a:	bf00      	nop
 8000e3c:	3738      	adds	r7, #56	@ 0x38
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000090 	.word	0x20000090

08000e48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	@ 0x38
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	615a      	str	r2, [r3, #20]
 8000e76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e78:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000e7a:	4a33      	ldr	r2, [pc, #204]	@ (8000f48 <MX_TIM3_Init+0x100>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8000e7e:	4b31      	ldr	r3, [pc, #196]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000e80:	22c7      	movs	r2, #199	@ 0xc7
 8000e82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000e8c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000e9a:	2280      	movs	r2, #128	@ 0x80
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e9e:	4829      	ldr	r0, [pc, #164]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000ea0:	f001 fd82 	bl	80029a8 <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000eaa:	f000 f9d1 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4822      	ldr	r0, [pc, #136]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000ebc:	f002 f8e2 	bl	8003084 <HAL_TIM_ConfigClockSource>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ec6:	f000 f9c3 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eca:	481e      	ldr	r0, [pc, #120]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000ecc:	f001 fe1e 	bl	8002b0c <HAL_TIM_PWM_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ed6:	f000 f9bb 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4816      	ldr	r0, [pc, #88]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000eea:	f002 fc8d 	bl	8003808 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ef4:	f000 f9ac 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef8:	2360      	movs	r3, #96	@ 0x60
 8000efa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000f10:	f001 fff6 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f1a:	f000 f999 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2204      	movs	r2, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000f26:	f001 ffeb 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f30:	f000 f98e 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f34:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <MX_TIM3_Init+0xfc>)
 8000f36:	f000 fa09 	bl	800134c <HAL_TIM_MspPostInit>

}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	@ 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000d8 	.word	0x200000d8
 8000f48:	40000400 	.word	0x40000400

08000f4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	@ 0x38
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000f7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001034 <MX_TIM4_Init+0xe8>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000f82:	4b2b      	ldr	r3, [pc, #172]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000f84:	22c7      	movs	r2, #199	@ 0xc7
 8000f86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f8e:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000f90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9c:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fa2:	4823      	ldr	r0, [pc, #140]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000fa4:	f001 fd00 	bl	80029a8 <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000fae:	f000 f94f 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481c      	ldr	r0, [pc, #112]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000fc0:	f002 f860 	bl	8003084 <HAL_TIM_ConfigClockSource>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000fca:	f000 f941 	bl	8001250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fce:	4818      	ldr	r0, [pc, #96]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000fd0:	f001 fd9c 	bl	8002b0c <HAL_TIM_PWM_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000fda:	f000 f939 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	4619      	mov	r1, r3
 8000fec:	4810      	ldr	r0, [pc, #64]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8000fee:	f002 fc0b 	bl	8003808 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ff8:	f000 f92a 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffc:	2360      	movs	r3, #96	@ 0x60
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	4807      	ldr	r0, [pc, #28]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8001014:	f001 ff74 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800101e:	f000 f917 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001022:	4803      	ldr	r0, [pc, #12]	@ (8001030 <MX_TIM4_Init+0xe4>)
 8001024:	f000 f992 	bl	800134c <HAL_TIM_MspPostInit>

}
 8001028:	bf00      	nop
 800102a:	3738      	adds	r7, #56	@ 0x38
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000120 	.word	0x20000120
 8001034:	40000800 	.word	0x40000800

08001038 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <MX_USART1_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001044:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001048:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_USART1_UART_Init+0x4c>)
 8001070:	f002 fc4c 	bl	800390c <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f000 f8e9 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000168 	.word	0x20000168
 8001088:	40011000 	.word	0x40011000

0800108c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <MX_USART2_UART_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 8001098:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800109c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010c4:	f002 fc22 	bl	800390c <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ce:	f000 f8bf 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200001b0 	.word	0x200001b0
 80010dc:	40004400 	.word	0x40004400

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a2c      	ldr	r2, [pc, #176]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a25      	ldr	r2, [pc, #148]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2160      	movs	r1, #96	@ 0x60
 800116a:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <MX_GPIO_Init+0xd4>)
 800116c:	f000 ff38 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001170:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001176:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <MX_GPIO_Init+0xd8>)
 8001188:	f000 fda6 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 800118c:	2360      	movs	r3, #96	@ 0x60
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <MX_GPIO_Init+0xd4>)
 80011a4:	f000 fd98 	bl	8001cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020800 	.word	0x40020800

080011bc <BluetoothTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BluetoothTask */
void BluetoothTask(void *argument)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f003 fd2d 	bl	8004c24 <osDelay>
 80011ca:	e7fb      	b.n	80011c4 <BluetoothTask+0x8>

080011cc <MoveRobotArmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MoveRobotArmTask */
void MoveRobotArmTask(void *argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MoveRobotArmTask */
  /* Infinite loop */
  for(;;)
  {
//	  if(move_arm){
		  	  MoveArm(90, 135 , 90, 45, 90, 30);
 80011d4:	231e      	movs	r3, #30
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	235a      	movs	r3, #90	@ 0x5a
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	232d      	movs	r3, #45	@ 0x2d
 80011de:	225a      	movs	r2, #90	@ 0x5a
 80011e0:	2187      	movs	r1, #135	@ 0x87
 80011e2:	205a      	movs	r0, #90	@ 0x5a
 80011e4:	f7ff faa0 	bl	8000728 <MoveArm>
	  		  move_arm = 0;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <MoveRobotArmTask+0x48>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
	  		  index_buffer_read.value++;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MoveRobotArmTask+0x4c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	b2d9      	uxtb	r1, r3
 8001200:	4a05      	ldr	r2, [pc, #20]	@ (8001218 <MoveRobotArmTask+0x4c>)
 8001202:	7813      	ldrb	r3, [r2, #0]
 8001204:	f361 0302 	bfi	r3, r1, #0, #3
 8001208:	7013      	strb	r3, [r2, #0]
//	  	  }
    osDelay(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f003 fd0a 	bl	8004c24 <osDelay>
		  	  MoveArm(90, 135 , 90, 45, 90, 30);
 8001210:	bf00      	nop
 8001212:	e7df      	b.n	80011d4 <MoveRobotArmTask+0x8>
 8001214:	200002d4 	.word	0x200002d4
 8001218:	20000208 	.word	0x20000208

0800121c <ColorSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ColorSensorTask */
void ColorSensorTask(void *argument)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ColorSensorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f003 fcfd 	bl	8004c24 <osDelay>
 800122a:	e7fb      	b.n	8001224 <ColorSensorTask+0x8>

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800123e:	f000 fb93 	bl	8001968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40010000 	.word	0x40010000

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <Error_Handler+0x8>

0800125c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_MspInit+0x54>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a11      	ldr	r2, [pc, #68]	@ (80012b0 <HAL_MspInit+0x54>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_MspInit+0x54>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_MspInit+0x54>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <HAL_MspInit+0x54>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	@ 0x40
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <HAL_MspInit+0x54>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210f      	movs	r1, #15
 800129e:	f06f 0001 	mvn.w	r0, #1
 80012a2:	f000 fc5d 	bl	8001b60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c4:	d10e      	bne.n	80012e4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_TIM_Base_MspInit+0x8c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <HAL_TIM_Base_MspInit+0x8c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <HAL_TIM_Base_MspInit+0x8c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012e2:	e026      	b.n	8001332 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a16      	ldr	r2, [pc, #88]	@ (8001344 <HAL_TIM_Base_MspInit+0x90>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10e      	bne.n	800130c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <HAL_TIM_Base_MspInit+0x8c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <HAL_TIM_Base_MspInit+0x8c>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <HAL_TIM_Base_MspInit+0x8c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
}
 800130a:	e012      	b.n	8001332 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <HAL_TIM_Base_MspInit+0x94>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10d      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_TIM_Base_MspInit+0x8c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_TIM_Base_MspInit+0x8c>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6413      	str	r3, [r2, #64]	@ 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_TIM_Base_MspInit+0x8c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
}
 8001332:	bf00      	nop
 8001334:	371c      	adds	r7, #28
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40000400 	.word	0x40000400
 8001348:	40000800 	.word	0x40000800

0800134c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800136c:	d13d      	bne.n	80013ea <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	4b52      	ldr	r3, [pc, #328]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a51      	ldr	r2, [pc, #324]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b4f      	ldr	r3, [pc, #316]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	4b4b      	ldr	r3, [pc, #300]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a4a      	ldr	r2, [pc, #296]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b48      	ldr	r3, [pc, #288]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013b6:	2301      	movs	r3, #1
 80013b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	483f      	ldr	r0, [pc, #252]	@ (80014c0 <HAL_TIM_MspPostInit+0x174>)
 80013c2:	f000 fc89 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80013c6:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013d8:	2301      	movs	r3, #1
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4838      	ldr	r0, [pc, #224]	@ (80014c4 <HAL_TIM_MspPostInit+0x178>)
 80013e4:	f000 fc78 	bl	8001cd8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013e8:	e064      	b.n	80014b4 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a36      	ldr	r2, [pc, #216]	@ (80014c8 <HAL_TIM_MspPostInit+0x17c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d13c      	bne.n	800146e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fc:	4a2f      	ldr	r2, [pc, #188]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6313      	str	r3, [r2, #48]	@ 0x30
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800143c:	2302      	movs	r3, #2
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4821      	ldr	r0, [pc, #132]	@ (80014cc <HAL_TIM_MspPostInit+0x180>)
 8001448:	f000 fc46 	bl	8001cd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144c:	2310      	movs	r3, #16
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800145c:	2302      	movs	r3, #2
 800145e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4817      	ldr	r0, [pc, #92]	@ (80014c4 <HAL_TIM_MspPostInit+0x178>)
 8001468:	f000 fc36 	bl	8001cd8 <HAL_GPIO_Init>
}
 800146c:	e022      	b.n	80014b4 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <HAL_TIM_MspPostInit+0x184>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d11d      	bne.n	80014b4 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6313      	str	r3, [r2, #48]	@ 0x30
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_TIM_MspPostInit+0x170>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001494:	2340      	movs	r3, #64	@ 0x40
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014a4:	2302      	movs	r3, #2
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <HAL_TIM_MspPostInit+0x178>)
 80014b0:	f000 fc12 	bl	8001cd8 <HAL_GPIO_Init>
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	@ 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40000800 	.word	0x40000800

080014d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	@ 0x30
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a36      	ldr	r2, [pc, #216]	@ (80015cc <HAL_UART_MspInit+0xf8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d135      	bne.n	8001562 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	4b35      	ldr	r3, [pc, #212]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a34      	ldr	r2, [pc, #208]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b32      	ldr	r3, [pc, #200]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	4b2e      	ldr	r3, [pc, #184]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a2d      	ldr	r2, [pc, #180]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800152e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001540:	2307      	movs	r3, #7
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4822      	ldr	r0, [pc, #136]	@ (80015d4 <HAL_UART_MspInit+0x100>)
 800154c:	f000 fbc4 	bl	8001cd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2105      	movs	r1, #5
 8001554:	2025      	movs	r0, #37	@ 0x25
 8001556:	f000 fb03 	bl	8001b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800155a:	2025      	movs	r0, #37	@ 0x25
 800155c:	f000 fb1c 	bl	8001b98 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001560:	e030      	b.n	80015c4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <HAL_UART_MspInit+0x104>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d12b      	bne.n	80015c4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	4a16      	ldr	r2, [pc, #88]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 8001576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157a:	6413      	str	r3, [r2, #64]	@ 0x40
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6313      	str	r3, [r2, #48]	@ 0x30
 8001598:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <HAL_UART_MspInit+0xfc>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015a4:	230c      	movs	r3, #12
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b4:	2307      	movs	r3, #7
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <HAL_UART_MspInit+0x100>)
 80015c0:	f000 fb8a 	bl	8001cd8 <HAL_GPIO_Init>
}
 80015c4:	bf00      	nop
 80015c6:	3730      	adds	r7, #48	@ 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40011000 	.word	0x40011000
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40004400 	.word	0x40004400

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	@ 0x30
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	4b2e      	ldr	r3, [pc, #184]	@ (80016ac <HAL_InitTick+0xd0>)
 80015f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f4:	4a2d      	ldr	r2, [pc, #180]	@ (80016ac <HAL_InitTick+0xd0>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fc:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <HAL_InitTick+0xd0>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001608:	f107 020c 	add.w	r2, r7, #12
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f996 	bl	8002944 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001618:	f001 f980 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 800161c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800161e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001620:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <HAL_InitTick+0xd4>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9b      	lsrs	r3, r3, #18
 8001628:	3b01      	subs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800162c:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <HAL_InitTick+0xd8>)
 800162e:	4a22      	ldr	r2, [pc, #136]	@ (80016b8 <HAL_InitTick+0xdc>)
 8001630:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <HAL_InitTick+0xd8>)
 8001634:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001638:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800163a:	4a1e      	ldr	r2, [pc, #120]	@ (80016b4 <HAL_InitTick+0xd8>)
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <HAL_InitTick+0xd8>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_InitTick+0xd8>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_InitTick+0xd8>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001652:	4818      	ldr	r0, [pc, #96]	@ (80016b4 <HAL_InitTick+0xd8>)
 8001654:	f001 f9a8 	bl	80029a8 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800165e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11b      	bne.n	800169e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001666:	4813      	ldr	r0, [pc, #76]	@ (80016b4 <HAL_InitTick+0xd8>)
 8001668:	f001 f9ee 	bl	8002a48 <HAL_TIM_Base_Start_IT>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001672:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001676:	2b00      	cmp	r3, #0
 8001678:	d111      	bne.n	800169e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800167a:	2019      	movs	r0, #25
 800167c:	f000 fa8c 	bl	8001b98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	d808      	bhi.n	8001698 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001686:	2200      	movs	r2, #0
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	2019      	movs	r0, #25
 800168c:	f000 fa68 	bl	8001b60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001690:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <HAL_InitTick+0xe0>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e002      	b.n	800169e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800169e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3730      	adds	r7, #48	@ 0x30
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	431bde83 	.word	0x431bde83
 80016b4:	200002d8 	.word	0x200002d8
 80016b8:	40010000 	.word	0x40010000
 80016bc:	2000000c 	.word	0x2000000c

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <NMI_Handler+0x4>

080016c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <MemManage_Handler+0x4>

080016d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016fe:	f001 fb0f 	bl	8002d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002d8 	.word	0x200002d8

0800170c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <USART1_IRQHandler+0x10>)
 8001712:	f002 f9fb 	bl	8003b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000168 	.word	0x20000168

08001720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_kill>:

int _kill(int pid, int sig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800173a:	f006 f9e9 	bl	8007b10 <__errno>
 800173e:	4603      	mov	r3, r0
 8001740:	2216      	movs	r2, #22
 8001742:	601a      	str	r2, [r3, #0]
  return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_exit>:

void _exit (int status)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffe7 	bl	8001730 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001762:	bf00      	nop
 8001764:	e7fd      	b.n	8001762 <_exit+0x12>

08001766 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e00a      	b.n	800178e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001778:	f3af 8000 	nop.w
 800177c:	4601      	mov	r1, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	dbf0      	blt.n	8001778 <_read+0x12>
  }

  return len;
 8001796:	687b      	ldr	r3, [r7, #4]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e009      	b.n	80017c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	60ba      	str	r2, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbf1      	blt.n	80017b2 <_write+0x12>
  }
  return len;
 80017ce:	687b      	ldr	r3, [r7, #4]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_close>:

int _close(int file)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001800:	605a      	str	r2, [r3, #4]
  return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_isatty>:

int _isatty(int file)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	@ (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f006 f94e 	bl	8007b10 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000320 	.word	0x20000320
 80018a8:	20004e60 	.word	0x20004e60

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001908 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018d4:	f7ff ffea 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d8:	480c      	ldr	r0, [pc, #48]	@ (800190c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018da:	490d      	ldr	r1, [pc, #52]	@ (8001910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f0:	4c0a      	ldr	r4, [pc, #40]	@ (800191c <LoopFillZerobss+0x22>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fe:	f006 f90d 	bl	8007b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff f947 	bl	8000b94 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001914:	08008ac4 	.word	0x08008ac4
  ldr r2, =_sbss
 8001918:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800191c:	20004e5c 	.word	0x20004e5c

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f8fc 	bl	8001b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	200f      	movs	r0, #15
 8001954:	f7ff fe42 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fc80 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000010 	.word	0x20000010
 800198c:	20000324 	.word	0x20000324

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000324 	.word	0x20000324

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000010 	.word	0x20000010

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	@ (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	@ (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	@ (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	@ 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	@ 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff4c 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b72:	f7ff ff61 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001b76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	6978      	ldr	r0, [r7, #20]
 8001b7e:	f7ff ffb1 	bl	8001ae4 <NVIC_EncodePriority>
 8001b82:	4602      	mov	r2, r0
 8001b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff80 	bl	8001a90 <__NVIC_SetPriority>
}
 8001b90:	bf00      	nop
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff54 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bc2:	f7ff fee5 	bl	8001990 <HAL_GetTick>
 8001bc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d008      	beq.n	8001be6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2280      	movs	r2, #128	@ 0x80
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e052      	b.n	8001c8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0216 	bic.w	r2, r2, #22
 8001bf4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <HAL_DMA_Abort+0x62>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0208 	bic.w	r2, r2, #8
 8001c24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c36:	e013      	b.n	8001c60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c38:	f7ff feaa 	bl	8001990 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d90c      	bls.n	8001c60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e015      	b.n	8001c8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1e4      	bne.n	8001c38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	223f      	movs	r2, #63	@ 0x3f
 8001c74:	409a      	lsls	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d004      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2280      	movs	r2, #128	@ 0x80
 8001cac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00c      	b.n	8001ccc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e159      	b.n	8001fa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8148 	bne.w	8001fa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a2 	beq.w	8001fa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b57      	ldr	r3, [pc, #348]	@ (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	4a56      	ldr	r2, [pc, #344]	@ (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6e:	4b54      	ldr	r3, [pc, #336]	@ (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a52      	ldr	r2, [pc, #328]	@ (8001fc4 <HAL_GPIO_Init+0x2ec>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a49      	ldr	r2, [pc, #292]	@ (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x202>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a48      	ldr	r2, [pc, #288]	@ (8001fcc <HAL_GPIO_Init+0x2f4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x1fe>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a47      	ldr	r2, [pc, #284]	@ (8001fd0 <HAL_GPIO_Init+0x2f8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a46      	ldr	r2, [pc, #280]	@ (8001fd4 <HAL_GPIO_Init+0x2fc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x1f6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a45      	ldr	r2, [pc, #276]	@ (8001fd8 <HAL_GPIO_Init+0x300>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x1f2>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e008      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001eca:	2307      	movs	r3, #7
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e004      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e002      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001eda:	2300      	movs	r3, #0
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f002 0203 	and.w	r2, r2, #3
 8001ee2:	0092      	lsls	r2, r2, #2
 8001ee4:	4093      	lsls	r3, r2
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eec:	4935      	ldr	r1, [pc, #212]	@ (8001fc4 <HAL_GPIO_Init+0x2ec>)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efa:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f48:	4a24      	ldr	r2, [pc, #144]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f4e:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f72:	4a1a      	ldr	r2, [pc, #104]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fdc <HAL_GPIO_Init+0x304>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	f67f aea2 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3724      	adds	r7, #36	@ 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40013c00 	.word	0x40013c00

08001fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	4613      	mov	r3, r2
 8001fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff0:	787b      	ldrb	r3, [r7, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ffc:	e003      	b.n	8002006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	041a      	lsls	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	619a      	str	r2, [r3, #24]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e267      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d075      	beq.n	800211e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002032:	4b88      	ldr	r3, [pc, #544]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b04      	cmp	r3, #4
 800203c:	d00c      	beq.n	8002058 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203e:	4b85      	ldr	r3, [pc, #532]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002046:	2b08      	cmp	r3, #8
 8002048:	d112      	bne.n	8002070 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204a:	4b82      	ldr	r3, [pc, #520]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002052:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002056:	d10b      	bne.n	8002070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	4b7e      	ldr	r3, [pc, #504]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d05b      	beq.n	800211c <HAL_RCC_OscConfig+0x108>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d157      	bne.n	800211c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e242      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002078:	d106      	bne.n	8002088 <HAL_RCC_OscConfig+0x74>
 800207a:	4b76      	ldr	r3, [pc, #472]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a75      	ldr	r2, [pc, #468]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e01d      	b.n	80020c4 <HAL_RCC_OscConfig+0xb0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x98>
 8002092:	4b70      	ldr	r3, [pc, #448]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6f      	ldr	r2, [pc, #444]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b6d      	ldr	r3, [pc, #436]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0xb0>
 80020ac:	4b69      	ldr	r3, [pc, #420]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a68      	ldr	r2, [pc, #416]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b66      	ldr	r3, [pc, #408]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a65      	ldr	r2, [pc, #404]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80020be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff fc60 	bl	8001990 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fc5c 	bl	8001990 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	@ 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e207      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0xc0>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fc4c 	bl	8001990 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fc48 	bl	8001990 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1f3      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	4b51      	ldr	r3, [pc, #324]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0xe8>
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d063      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800212a:	4b4a      	ldr	r3, [pc, #296]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002136:	4b47      	ldr	r3, [pc, #284]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800213e:	2b08      	cmp	r3, #8
 8002140:	d11c      	bne.n	800217c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002142:	4b44      	ldr	r3, [pc, #272]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d116      	bne.n	800217c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x152>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e1c7      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b3b      	ldr	r3, [pc, #236]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4937      	ldr	r1, [pc, #220]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	e03a      	b.n	80021f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002184:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCC_OscConfig+0x244>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7ff fc01 	bl	8001990 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff fbfd 	bl	8001990 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1a8      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4925      	ldr	r1, [pc, #148]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_RCC_OscConfig+0x244>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7ff fbe0 	bl	8001990 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7ff fbdc 	bl	8001990 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e187      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d036      	beq.n	800226c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <HAL_RCC_OscConfig+0x248>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220c:	f7ff fbc0 	bl	8001990 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7ff fbbc 	bl	8001990 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e167      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_RCC_OscConfig+0x240>)
 8002228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x200>
 8002232:	e01b      	b.n	800226c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_RCC_OscConfig+0x248>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7ff fba9 	bl	8001990 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	e00e      	b.n	8002260 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002242:	f7ff fba5 	bl	8001990 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d907      	bls.n	8002260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e150      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
 8002254:	40023800 	.word	0x40023800
 8002258:	42470000 	.word	0x42470000
 800225c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b88      	ldr	r3, [pc, #544]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ea      	bne.n	8002242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8097 	beq.w	80023a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4b81      	ldr	r3, [pc, #516]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	4b7d      	ldr	r3, [pc, #500]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a7c      	ldr	r2, [pc, #496]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b7a      	ldr	r3, [pc, #488]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4b77      	ldr	r3, [pc, #476]	@ (8002488 <HAL_RCC_OscConfig+0x474>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d118      	bne.n	80022e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b6:	4b74      	ldr	r3, [pc, #464]	@ (8002488 <HAL_RCC_OscConfig+0x474>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a73      	ldr	r2, [pc, #460]	@ (8002488 <HAL_RCC_OscConfig+0x474>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c2:	f7ff fb65 	bl	8001990 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ca:	f7ff fb61 	bl	8001990 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e10c      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002488 <HAL_RCC_OscConfig+0x474>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x2ea>
 80022f0:	4b64      	ldr	r3, [pc, #400]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f4:	4a63      	ldr	r2, [pc, #396]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fc:	e01c      	b.n	8002338 <HAL_RCC_OscConfig+0x324>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b05      	cmp	r3, #5
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x30c>
 8002306:	4b5f      	ldr	r3, [pc, #380]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	4a5e      	ldr	r2, [pc, #376]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6713      	str	r3, [r2, #112]	@ 0x70
 8002312:	4b5c      	ldr	r3, [pc, #368]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	4a5b      	ldr	r2, [pc, #364]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	@ 0x70
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0x324>
 8002320:	4b58      	ldr	r3, [pc, #352]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	4a57      	ldr	r2, [pc, #348]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	@ 0x70
 800232c:	4b55      	ldr	r3, [pc, #340]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	4a54      	ldr	r2, [pc, #336]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002332:	f023 0304 	bic.w	r3, r3, #4
 8002336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d015      	beq.n	800236c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7ff fb26 	bl	8001990 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7ff fb22 	bl	8001990 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0cb      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235e:	4b49      	ldr	r3, [pc, #292]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0ee      	beq.n	8002348 <HAL_RCC_OscConfig+0x334>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236c:	f7ff fb10 	bl	8001990 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002372:	e00a      	b.n	800238a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7ff fb0c 	bl	8001990 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0b5      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238a:	4b3e      	ldr	r3, [pc, #248]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1ee      	bne.n	8002374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239c:	4b39      	ldr	r3, [pc, #228]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	4a38      	ldr	r2, [pc, #224]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a1 	beq.w	80024f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b2:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d05c      	beq.n	8002478 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d141      	bne.n	800244a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b31      	ldr	r3, [pc, #196]	@ (800248c <HAL_RCC_OscConfig+0x478>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fae0 	bl	8001990 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7ff fadc 	bl	8001990 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e087      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	4b27      	ldr	r3, [pc, #156]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	019b      	lsls	r3, r3, #6
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	491b      	ldr	r1, [pc, #108]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241c:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <HAL_RCC_OscConfig+0x478>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff fab5 	bl	8001990 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff fab1 	bl	8001990 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e05c      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x416>
 8002448:	e054      	b.n	80024f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <HAL_RCC_OscConfig+0x478>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fa9e 	bl	8001990 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff fa9a 	bl	8001990 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e045      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_RCC_OscConfig+0x470>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x444>
 8002476:	e03d      	b.n	80024f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e038      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
 8002484:	40023800 	.word	0x40023800
 8002488:	40007000 	.word	0x40007000
 800248c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <HAL_RCC_OscConfig+0x4ec>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d028      	beq.n	80024f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d121      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d11a      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024c0:	4013      	ands	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d111      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	085b      	lsrs	r3, r3, #1
 80024d8:	3b01      	subs	r3, #1
 80024da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0cc      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002518:	4b68      	ldr	r3, [pc, #416]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d90c      	bls.n	8002540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b65      	ldr	r3, [pc, #404]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b63      	ldr	r3, [pc, #396]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002558:	4b59      	ldr	r3, [pc, #356]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a58      	ldr	r2, [pc, #352]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002570:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800257a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b50      	ldr	r3, [pc, #320]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	494d      	ldr	r1, [pc, #308]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d044      	beq.n	8002624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b47      	ldr	r3, [pc, #284]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d119      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c2:	4b3f      	ldr	r3, [pc, #252]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d2:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e067      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4b37      	ldr	r3, [pc, #220]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4934      	ldr	r1, [pc, #208]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f4:	f7ff f9cc 	bl	8001990 <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7ff f9c8 	bl	8001990 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e04f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	4b2b      	ldr	r3, [pc, #172]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 020c 	and.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1eb      	bne.n	80025fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002624:	4b25      	ldr	r3, [pc, #148]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d20c      	bcs.n	800264c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e032      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4916      	ldr	r1, [pc, #88]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002676:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490e      	ldr	r1, [pc, #56]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800268a:	f000 f821 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490a      	ldr	r1, [pc, #40]	@ (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	4a09      	ldr	r2, [pc, #36]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026a6:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe ff96 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00
 80026c0:	40023800 	.word	0x40023800
 80026c4:	080088b8 	.word	0x080088b8
 80026c8:	20000008 	.word	0x20000008
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d4:	b094      	sub	sp, #80	@ 0x50
 80026d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e8:	4b79      	ldr	r3, [pc, #484]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d00d      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x40>
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	f200 80e1 	bhi.w	80028bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x34>
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d003      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x3a>
 8002702:	e0db      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b73      	ldr	r3, [pc, #460]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002706:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002708:	e0db      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800270a:	4b73      	ldr	r3, [pc, #460]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800270c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800270e:	e0d8      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002710:	4b6f      	ldr	r3, [pc, #444]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002718:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271a:	4b6d      	ldr	r3, [pc, #436]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d063      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002726:	4b6a      	ldr	r3, [pc, #424]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	2200      	movs	r2, #0
 800272e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002730:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002738:	633b      	str	r3, [r7, #48]	@ 0x30
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	@ 0x34
 800273e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002742:	4622      	mov	r2, r4
 8002744:	462b      	mov	r3, r5
 8002746:	f04f 0000 	mov.w	r0, #0
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	0159      	lsls	r1, r3, #5
 8002750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002754:	0150      	lsls	r0, r2, #5
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4621      	mov	r1, r4
 800275c:	1a51      	subs	r1, r2, r1
 800275e:	6139      	str	r1, [r7, #16]
 8002760:	4629      	mov	r1, r5
 8002762:	eb63 0301 	sbc.w	r3, r3, r1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002774:	4659      	mov	r1, fp
 8002776:	018b      	lsls	r3, r1, #6
 8002778:	4651      	mov	r1, sl
 800277a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800277e:	4651      	mov	r1, sl
 8002780:	018a      	lsls	r2, r1, #6
 8002782:	4651      	mov	r1, sl
 8002784:	ebb2 0801 	subs.w	r8, r2, r1
 8002788:	4659      	mov	r1, fp
 800278a:	eb63 0901 	sbc.w	r9, r3, r1
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800279a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800279e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027a2:	4690      	mov	r8, r2
 80027a4:	4699      	mov	r9, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	eb18 0303 	adds.w	r3, r8, r3
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	462b      	mov	r3, r5
 80027b0:	eb49 0303 	adc.w	r3, r9, r3
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027c2:	4629      	mov	r1, r5
 80027c4:	024b      	lsls	r3, r1, #9
 80027c6:	4621      	mov	r1, r4
 80027c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027cc:	4621      	mov	r1, r4
 80027ce:	024a      	lsls	r2, r1, #9
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d6:	2200      	movs	r2, #0
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027e0:	f7fd fd56 	bl	8000290 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027ec:	e058      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	2200      	movs	r2, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	4611      	mov	r1, r2
 80027fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
 8002804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	f04f 0000 	mov.w	r0, #0
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	0159      	lsls	r1, r3, #5
 8002816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281a:	0150      	lsls	r0, r2, #5
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4641      	mov	r1, r8
 8002822:	ebb2 0a01 	subs.w	sl, r2, r1
 8002826:	4649      	mov	r1, r9
 8002828:	eb63 0b01 	sbc.w	fp, r3, r1
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800283c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002840:	ebb2 040a 	subs.w	r4, r2, sl
 8002844:	eb63 050b 	sbc.w	r5, r3, fp
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	00eb      	lsls	r3, r5, #3
 8002852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002856:	00e2      	lsls	r2, r4, #3
 8002858:	4614      	mov	r4, r2
 800285a:	461d      	mov	r5, r3
 800285c:	4643      	mov	r3, r8
 800285e:	18e3      	adds	r3, r4, r3
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	464b      	mov	r3, r9
 8002864:	eb45 0303 	adc.w	r3, r5, r3
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002876:	4629      	mov	r1, r5
 8002878:	028b      	lsls	r3, r1, #10
 800287a:	4621      	mov	r1, r4
 800287c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002880:	4621      	mov	r1, r4
 8002882:	028a      	lsls	r2, r1, #10
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800288a:	2200      	movs	r2, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	61fa      	str	r2, [r7, #28]
 8002890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002894:	f7fd fcfc 	bl	8000290 <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4613      	mov	r3, r2
 800289e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	3301      	adds	r3, #1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ba:	e002      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3750      	adds	r7, #80	@ 0x50
 80028c8:	46bd      	mov	sp, r7
 80028ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	00f42400 	.word	0x00f42400
 80028d8:	007a1200 	.word	0x007a1200

080028dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000008 	.word	0x20000008

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028f8:	f7ff fff0 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4903      	ldr	r1, [pc, #12]	@ (8002918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	080088c8 	.word	0x080088c8

0800291c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002920:	f7ff ffdc 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	0b5b      	lsrs	r3, r3, #13
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4903      	ldr	r1, [pc, #12]	@ (8002940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	080088c8 	.word	0x080088c8

08002944 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	220f      	movs	r2, #15
 8002952:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0203 	and.w	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <HAL_RCC_GetClockConfig+0x5c>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_RCC_GetClockConfig+0x5c>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	08db      	lsrs	r3, r3, #3
 800297e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002986:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <HAL_RCC_GetClockConfig+0x60>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0207 	and.w	r2, r3, #7
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	601a      	str	r2, [r3, #0]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e041      	b.n	8002a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fc70 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f000 fc3c 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d001      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e044      	b.n	8002aea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002af8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d018      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8a:	d013      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1a      	ldr	r2, [pc, #104]	@ (8002afc <HAL_TIM_Base_Start_IT+0xb4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a19      	ldr	r2, [pc, #100]	@ (8002b00 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a17      	ldr	r2, [pc, #92]	@ (8002b04 <HAL_TIM_Base_Start_IT+0xbc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x6c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a16      	ldr	r2, [pc, #88]	@ (8002b08 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d111      	bne.n	8002ad8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d010      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	e007      	b.n	8002ae8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40000800 	.word	0x40000800
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40014000 	.word	0x40014000

08002b0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e041      	b.n	8002ba2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f839 	bl	8002baa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f000 fb8a 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_TIM_PWM_Start+0x24>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e022      	b.n	8002c2a <HAL_TIM_PWM_Start+0x6a>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d109      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x3e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	bf14      	ite	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	2300      	moveq	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	e015      	b.n	8002c2a <HAL_TIM_PWM_Start+0x6a>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d109      	bne.n	8002c18 <HAL_TIM_PWM_Start+0x58>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e008      	b.n	8002c2a <HAL_TIM_PWM_Start+0x6a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e068      	b.n	8002d04 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x82>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c40:	e013      	b.n	8002c6a <HAL_TIM_PWM_Start+0xaa>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_PWM_Start+0x92>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c50:	e00b      	b.n	8002c6a <HAL_TIM_PWM_Start+0xaa>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Start+0xa2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c60:	e003      	b.n	8002c6a <HAL_TIM_PWM_Start+0xaa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	6839      	ldr	r1, [r7, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fda2 	bl	80037bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a23      	ldr	r2, [pc, #140]	@ (8002d0c <HAL_TIM_PWM_Start+0x14c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d107      	bne.n	8002c92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1d      	ldr	r2, [pc, #116]	@ (8002d0c <HAL_TIM_PWM_Start+0x14c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca4:	d013      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <HAL_TIM_PWM_Start+0x150>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a17      	ldr	r2, [pc, #92]	@ (8002d14 <HAL_TIM_PWM_Start+0x154>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	@ (8002d18 <HAL_TIM_PWM_Start+0x158>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	@ (8002d1c <HAL_TIM_PWM_Start+0x15c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d111      	bne.n	8002cf2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d010      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf0:	e007      	b.n	8002d02 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800
 8002d18:	40000c00 	.word	0x40000c00
 8002d1c:	40014000 	.word	0x40014000

08002d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d020      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0202 	mvn.w	r2, #2
 8002d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fa5b 	bl	8003226 <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fa4d 	bl	8003212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fa5e 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d020      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01b      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0204 	mvn.w	r2, #4
 8002da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa35 	bl	8003226 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa27 	bl	8003212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fa38 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d020      	beq.n	8002e1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0208 	mvn.w	r2, #8
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2204      	movs	r2, #4
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa0f 	bl	8003226 <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fa01 	bl	8003212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fa12 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d020      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01b      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0210 	mvn.w	r2, #16
 8002e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9e9 	bl	8003226 <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f9db 	bl	8003212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f9ec 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0201 	mvn.w	r2, #1
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe f9d0 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fd24 	bl	80038f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00c      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f9bd 	bl	800324e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00c      	beq.n	8002ef8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0220 	mvn.w	r2, #32
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fcf6 	bl	80038e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0ae      	b.n	800307c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	f200 809f 	bhi.w	800306c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	0800306d 	.word	0x0800306d
 8002f3c:	0800306d 	.word	0x0800306d
 8002f40:	0800306d 	.word	0x0800306d
 8002f44:	08002fa9 	.word	0x08002fa9
 8002f48:	0800306d 	.word	0x0800306d
 8002f4c:	0800306d 	.word	0x0800306d
 8002f50:	0800306d 	.word	0x0800306d
 8002f54:	08002feb 	.word	0x08002feb
 8002f58:	0800306d 	.word	0x0800306d
 8002f5c:	0800306d 	.word	0x0800306d
 8002f60:	0800306d 	.word	0x0800306d
 8002f64:	0800302b 	.word	0x0800302b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f9fe 	bl	8003370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0208 	orr.w	r2, r2, #8
 8002f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0204 	bic.w	r2, r2, #4
 8002f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6999      	ldr	r1, [r3, #24]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	619a      	str	r2, [r3, #24]
      break;
 8002fa6:	e064      	b.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fa44 	bl	800343c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6999      	ldr	r1, [r3, #24]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	021a      	lsls	r2, r3, #8
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	619a      	str	r2, [r3, #24]
      break;
 8002fe8:	e043      	b.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fa8f 	bl	8003514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0208 	orr.w	r2, r2, #8
 8003004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0204 	bic.w	r2, r2, #4
 8003014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69d9      	ldr	r1, [r3, #28]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	61da      	str	r2, [r3, #28]
      break;
 8003028:	e023      	b.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fad9 	bl	80035e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69d9      	ldr	r1, [r3, #28]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	021a      	lsls	r2, r3, #8
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	61da      	str	r2, [r3, #28]
      break;
 800306a:	e002      	b.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
      break;
 8003070:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800307a:	7dfb      	ldrb	r3, [r7, #23]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_TIM_ConfigClockSource+0x1c>
 800309c:	2302      	movs	r3, #2
 800309e:	e0b4      	b.n	800320a <HAL_TIM_ConfigClockSource+0x186>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d8:	d03e      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0xd4>
 80030da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030de:	f200 8087 	bhi.w	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e6:	f000 8086 	beq.w	80031f6 <HAL_TIM_ConfigClockSource+0x172>
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ee:	d87f      	bhi.n	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
 80030f0:	2b70      	cmp	r3, #112	@ 0x70
 80030f2:	d01a      	beq.n	800312a <HAL_TIM_ConfigClockSource+0xa6>
 80030f4:	2b70      	cmp	r3, #112	@ 0x70
 80030f6:	d87b      	bhi.n	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
 80030f8:	2b60      	cmp	r3, #96	@ 0x60
 80030fa:	d050      	beq.n	800319e <HAL_TIM_ConfigClockSource+0x11a>
 80030fc:	2b60      	cmp	r3, #96	@ 0x60
 80030fe:	d877      	bhi.n	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003100:	2b50      	cmp	r3, #80	@ 0x50
 8003102:	d03c      	beq.n	800317e <HAL_TIM_ConfigClockSource+0xfa>
 8003104:	2b50      	cmp	r3, #80	@ 0x50
 8003106:	d873      	bhi.n	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b40      	cmp	r3, #64	@ 0x40
 800310a:	d058      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x13a>
 800310c:	2b40      	cmp	r3, #64	@ 0x40
 800310e:	d86f      	bhi.n	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b30      	cmp	r3, #48	@ 0x30
 8003112:	d064      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x15a>
 8003114:	2b30      	cmp	r3, #48	@ 0x30
 8003116:	d86b      	bhi.n	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d060      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x15a>
 800311c:	2b20      	cmp	r3, #32
 800311e:	d867      	bhi.n	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d05c      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x15a>
 8003124:	2b10      	cmp	r3, #16
 8003126:	d05a      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x15a>
 8003128:	e062      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800313a:	f000 fb1f 	bl	800377c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800314c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	609a      	str	r2, [r3, #8]
      break;
 8003156:	e04f      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003168:	f000 fb08 	bl	800377c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800317a:	609a      	str	r2, [r3, #8]
      break;
 800317c:	e03c      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318a:	461a      	mov	r2, r3
 800318c:	f000 fa7c 	bl	8003688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2150      	movs	r1, #80	@ 0x50
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fad5 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 800319c:	e02c      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031aa:	461a      	mov	r2, r3
 80031ac:	f000 fa9b 	bl	80036e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2160      	movs	r1, #96	@ 0x60
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fac5 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 80031bc:	e01c      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	461a      	mov	r2, r3
 80031cc:	f000 fa5c 	bl	8003688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2140      	movs	r1, #64	@ 0x40
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fab5 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 80031dc:	e00c      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f000 faac 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 80031ee:	e003      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      break;
 80031f4:	e000      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a37      	ldr	r2, [pc, #220]	@ (8003354 <TIM_Base_SetConfig+0xf0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00f      	beq.n	800329c <TIM_Base_SetConfig+0x38>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003282:	d00b      	beq.n	800329c <TIM_Base_SetConfig+0x38>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a34      	ldr	r2, [pc, #208]	@ (8003358 <TIM_Base_SetConfig+0xf4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_Base_SetConfig+0x38>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a33      	ldr	r2, [pc, #204]	@ (800335c <TIM_Base_SetConfig+0xf8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_Base_SetConfig+0x38>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a32      	ldr	r2, [pc, #200]	@ (8003360 <TIM_Base_SetConfig+0xfc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d108      	bne.n	80032ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a28      	ldr	r2, [pc, #160]	@ (8003354 <TIM_Base_SetConfig+0xf0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01b      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032bc:	d017      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a25      	ldr	r2, [pc, #148]	@ (8003358 <TIM_Base_SetConfig+0xf4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a24      	ldr	r2, [pc, #144]	@ (800335c <TIM_Base_SetConfig+0xf8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00f      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <TIM_Base_SetConfig+0xfc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a22      	ldr	r2, [pc, #136]	@ (8003364 <TIM_Base_SetConfig+0x100>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a21      	ldr	r2, [pc, #132]	@ (8003368 <TIM_Base_SetConfig+0x104>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a20      	ldr	r2, [pc, #128]	@ (800336c <TIM_Base_SetConfig+0x108>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a0c      	ldr	r2, [pc, #48]	@ (8003354 <TIM_Base_SetConfig+0xf0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d103      	bne.n	800332e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f043 0204 	orr.w	r2, r3, #4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800
 8003360:	40000c00 	.word	0x40000c00
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f023 0201 	bic.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 0302 	bic.w	r3, r3, #2
 80033b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003438 <TIM_OC1_SetConfig+0xc8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10c      	bne.n	80033e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0308 	bic.w	r3, r3, #8
 80033d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 0304 	bic.w	r3, r3, #4
 80033e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a13      	ldr	r2, [pc, #76]	@ (8003438 <TIM_OC1_SetConfig+0xc8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d111      	bne.n	8003412 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40010000 	.word	0x40010000

0800343c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f023 0210 	bic.w	r2, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800346a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0320 	bic.w	r3, r3, #32
 8003486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a1e      	ldr	r2, [pc, #120]	@ (8003510 <TIM_OC2_SetConfig+0xd4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10d      	bne.n	80034b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a15      	ldr	r2, [pc, #84]	@ (8003510 <TIM_OC2_SetConfig+0xd4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d113      	bne.n	80034e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000

08003514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800355c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <TIM_OC3_SetConfig+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10d      	bne.n	800358e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a14      	ldr	r2, [pc, #80]	@ (80035e4 <TIM_OC3_SetConfig+0xd0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d113      	bne.n	80035be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800359c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	40010000 	.word	0x40010000

080035e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800361e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	031b      	lsls	r3, r3, #12
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a10      	ldr	r2, [pc, #64]	@ (8003684 <TIM_OC4_SetConfig+0x9c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d109      	bne.n	800365c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800364e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000

08003688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0201 	bic.w	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 030a 	bic.w	r3, r3, #10
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 0210 	bic.w	r2, r3, #16
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	031b      	lsls	r3, r3, #12
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003722:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	f043 0307 	orr.w	r3, r3, #7
 8003768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	431a      	orrs	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	2201      	movs	r2, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	43db      	mvns	r3, r3
 80037de:	401a      	ands	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800381c:	2302      	movs	r3, #2
 800381e:	e050      	b.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d018      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386c:	d013      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a15      	ldr	r2, [pc, #84]	@ (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	@ (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10c      	bne.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800389c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40014000 	.word	0x40014000

080038e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e042      	b.n	80039a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fdce 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	@ 0x24
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800394e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fdd3 	bl	80044fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	@ 0x28
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d175      	bne.n	8003ab8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UART_Transmit+0x2c>
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e06e      	b.n	8003aba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2221      	movs	r2, #33	@ 0x21
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ea:	f7fd ffd1 	bl	8001990 <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a04:	d108      	bne.n	8003a18 <HAL_UART_Transmit+0x6c>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d104      	bne.n	8003a18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	e003      	b.n	8003a20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a20:	e02e      	b.n	8003a80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2180      	movs	r1, #128	@ 0x80
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fb37 	bl	80040a0 <UART_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e03a      	b.n	8003aba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10b      	bne.n	8003a62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e007      	b.n	8003a72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	781a      	ldrb	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1cb      	bne.n	8003a22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2140      	movs	r1, #64	@ 0x40
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fb03 	bl	80040a0 <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e006      	b.n	8003aba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e000      	b.n	8003aba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	4613      	mov	r3, r2
 8003ace:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d112      	bne.n	8003b02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_UART_Receive_IT+0x26>
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e00b      	b.n	8003b04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	461a      	mov	r2, r3
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fb2a 	bl	8004152 <UART_Start_Receive_IT>
 8003afe:	4603      	mov	r3, r0
 8003b00:	e000      	b.n	8003b04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
  }
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b0ba      	sub	sp, #232	@ 0xe8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10f      	bne.n	8003b72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_UART_IRQHandler+0x66>
 8003b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fc07 	bl	800437e <UART_Receive_IT>
      return;
 8003b70:	e273      	b.n	800405a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80de 	beq.w	8003d38 <HAL_UART_IRQHandler+0x22c>
 8003b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80d1 	beq.w	8003d38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0xae>
 8003ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_UART_IRQHandler+0xd2>
 8003bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f043 0202 	orr.w	r2, r3, #2
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_UART_IRQHandler+0xf6>
 8003bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f043 0204 	orr.w	r2, r3, #4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d011      	beq.n	8003c32 <HAL_UART_IRQHandler+0x126>
 8003c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d105      	bne.n	8003c26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f043 0208 	orr.w	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 820a 	beq.w	8004050 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_UART_IRQHandler+0x14e>
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fb92 	bl	800437e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c64:	2b40      	cmp	r3, #64	@ 0x40
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <HAL_UART_IRQHandler+0x17a>
 8003c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d04f      	beq.n	8003d26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa9d 	bl	80041c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d141      	bne.n	8003d1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1d9      	bne.n	8003c9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d013      	beq.n	8003d16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf2:	4a8a      	ldr	r2, [pc, #552]	@ (8003f1c <HAL_UART_IRQHandler+0x410>)
 8003cf4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd ffca 	bl	8001c94 <HAL_DMA_Abort_IT>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d10:	4610      	mov	r0, r2
 8003d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d14:	e00e      	b.n	8003d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f9ac 	bl	8004074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	e00a      	b.n	8003d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f9a8 	bl	8004074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e006      	b.n	8003d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9a4 	bl	8004074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d32:	e18d      	b.n	8004050 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	bf00      	nop
    return;
 8003d36:	e18b      	b.n	8004050 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	f040 8167 	bne.w	8004010 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8160 	beq.w	8004010 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8159 	beq.w	8004010 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	f040 80ce 	bne.w	8003f20 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a9 	beq.w	8003eec <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003da2:	429a      	cmp	r2, r3
 8003da4:	f080 80a2 	bcs.w	8003eec <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dba:	f000 8088 	beq.w	8003ece <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1d9      	bne.n	8003dbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3314      	adds	r3, #20
 8003e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e1      	bne.n	8003e0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3314      	adds	r3, #20
 8003e66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e3      	bne.n	8003e46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e9e:	f023 0310 	bic.w	r3, r3, #16
 8003ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003eb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003eb2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e3      	bne.n	8003e8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fd fe73 	bl	8001bb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f8cf 	bl	8004088 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003eea:	e0b3      	b.n	8004054 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ef0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	f040 80ad 	bne.w	8004054 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f04:	f040 80a6 	bne.w	8004054 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8b7 	bl	8004088 <HAL_UARTEx_RxEventCallback>
      return;
 8003f1a:	e09b      	b.n	8004054 <HAL_UART_IRQHandler+0x548>
 8003f1c:	0800428d 	.word	0x0800428d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 808e 	beq.w	8004058 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8089 	beq.w	8004058 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e3      	bne.n	8003f46 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3314      	adds	r3, #20
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fa2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e3      	bne.n	8003f7e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0310 	bic.w	r3, r3, #16
 8003fda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fe8:	61fa      	str	r2, [r7, #28]
 8003fea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	69b9      	ldr	r1, [r7, #24]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e3      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004002:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f83d 	bl	8004088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800400e:	e023      	b.n	8004058 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <HAL_UART_IRQHandler+0x524>
 800401c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f940 	bl	80042ae <UART_Transmit_IT>
    return;
 800402e:	e014      	b.n	800405a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00e      	beq.n	800405a <HAL_UART_IRQHandler+0x54e>
 800403c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f980 	bl	800434e <UART_EndTransmit_IT>
    return;
 800404e:	e004      	b.n	800405a <HAL_UART_IRQHandler+0x54e>
    return;
 8004050:	bf00      	nop
 8004052:	e002      	b.n	800405a <HAL_UART_IRQHandler+0x54e>
      return;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <HAL_UART_IRQHandler+0x54e>
      return;
 8004058:	bf00      	nop
  }
}
 800405a:	37e8      	adds	r7, #232	@ 0xe8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b0:	e03b      	b.n	800412a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d037      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fd fc69 	bl	8001990 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	6a3a      	ldr	r2, [r7, #32]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e03a      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d023      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0x8a>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b80      	cmp	r3, #128	@ 0x80
 80040e6:	d020      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0x8a>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b40      	cmp	r3, #64	@ 0x40
 80040ec:	d01d      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d116      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f857 	bl	80041c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2208      	movs	r2, #8
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e00f      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4013      	ands	r3, r2
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	429a      	cmp	r2, r3
 8004146:	d0b4      	beq.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	4613      	mov	r3, r2
 800415e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	88fa      	ldrh	r2, [r7, #6]
 800416a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2222      	movs	r2, #34	@ 0x22
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004196:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0220 	orr.w	r2, r2, #32
 80041b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b095      	sub	sp, #84	@ 0x54
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80041f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e5      	bne.n	80041ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	61fb      	str	r3, [r7, #28]
   return(result);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	64bb      	str	r3, [r7, #72]	@ 0x48
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004224:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	2b01      	cmp	r3, #1
 800423c:	d119      	bne.n	8004272 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	60bb      	str	r3, [r7, #8]
   return(result);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f023 0310 	bic.w	r3, r3, #16
 8004254:	647b      	str	r3, [r7, #68]	@ 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800425e:	61ba      	str	r2, [r7, #24]
 8004260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6979      	ldr	r1, [r7, #20]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	613b      	str	r3, [r7, #16]
   return(result);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e5      	bne.n	800423e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004280:	bf00      	nop
 8004282:	3754      	adds	r7, #84	@ 0x54
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff fee7 	bl	8004074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b21      	cmp	r3, #33	@ 0x21
 80042c0:	d13e      	bne.n	8004340 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ca:	d114      	bne.n	80042f6 <UART_Transmit_IT+0x48>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d110      	bne.n	80042f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	1c9a      	adds	r2, r3, #2
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	621a      	str	r2, [r3, #32]
 80042f4:	e008      	b.n	8004308 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	1c59      	adds	r1, r3, #1
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6211      	str	r1, [r2, #32]
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29b      	uxth	r3, r3
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4619      	mov	r1, r3
 8004316:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10f      	bne.n	800433c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800432a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800433a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e000      	b.n	8004342 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004364:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fe76 	bl	8004060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b08c      	sub	sp, #48	@ 0x30
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b22      	cmp	r3, #34	@ 0x22
 8004398:	f040 80aa 	bne.w	80044f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a4:	d115      	bne.n	80043d2 <UART_Receive_IT+0x54>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d111      	bne.n	80043d2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	1c9a      	adds	r2, r3, #2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80043d0:	e024      	b.n	800441c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e0:	d007      	beq.n	80043f2 <UART_Receive_IT+0x74>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <UART_Receive_IT+0x82>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e008      	b.n	8004412 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440c:	b2da      	uxtb	r2, r3
 800440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004410:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4619      	mov	r1, r3
 800442a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800442c:	2b00      	cmp	r3, #0
 800442e:	d15d      	bne.n	80044ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0220 	bic.w	r2, r2, #32
 800443e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800444e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	2b01      	cmp	r3, #1
 8004474:	d135      	bne.n	80044e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	613b      	str	r3, [r7, #16]
   return(result);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f023 0310 	bic.w	r3, r3, #16
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449c:	623a      	str	r2, [r7, #32]
 800449e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	69f9      	ldr	r1, [r7, #28]
 80044a2:	6a3a      	ldr	r2, [r7, #32]
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d10a      	bne.n	80044d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff fdd4 	bl	8004088 <HAL_UARTEx_RxEventCallback>
 80044e0:	e002      	b.n	80044e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fa2e 	bl	8000944 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e002      	b.n	80044f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3730      	adds	r7, #48	@ 0x30
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004500:	b0c0      	sub	sp, #256	@ 0x100
 8004502:	af00      	add	r7, sp, #0
 8004504:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004518:	68d9      	ldr	r1, [r3, #12]
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	ea40 0301 	orr.w	r3, r0, r1
 8004524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	431a      	orrs	r2, r3
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	431a      	orrs	r2, r3
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004554:	f021 010c 	bic.w	r1, r1, #12
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004562:	430b      	orrs	r3, r1
 8004564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004576:	6999      	ldr	r1, [r3, #24]
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	ea40 0301 	orr.w	r3, r0, r1
 8004582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b8f      	ldr	r3, [pc, #572]	@ (80047c8 <UART_SetConfig+0x2cc>)
 800458c:	429a      	cmp	r2, r3
 800458e:	d005      	beq.n	800459c <UART_SetConfig+0xa0>
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b8d      	ldr	r3, [pc, #564]	@ (80047cc <UART_SetConfig+0x2d0>)
 8004598:	429a      	cmp	r2, r3
 800459a:	d104      	bne.n	80045a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800459c:	f7fe f9be 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 80045a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045a4:	e003      	b.n	80045ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045a6:	f7fe f9a5 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 80045aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b8:	f040 810c 	bne.w	80047d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045ce:	4622      	mov	r2, r4
 80045d0:	462b      	mov	r3, r5
 80045d2:	1891      	adds	r1, r2, r2
 80045d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045d6:	415b      	adcs	r3, r3
 80045d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045de:	4621      	mov	r1, r4
 80045e0:	eb12 0801 	adds.w	r8, r2, r1
 80045e4:	4629      	mov	r1, r5
 80045e6:	eb43 0901 	adc.w	r9, r3, r1
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045fe:	4690      	mov	r8, r2
 8004600:	4699      	mov	r9, r3
 8004602:	4623      	mov	r3, r4
 8004604:	eb18 0303 	adds.w	r3, r8, r3
 8004608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800460c:	462b      	mov	r3, r5
 800460e:	eb49 0303 	adc.w	r3, r9, r3
 8004612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004622:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800462a:	460b      	mov	r3, r1
 800462c:	18db      	adds	r3, r3, r3
 800462e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004630:	4613      	mov	r3, r2
 8004632:	eb42 0303 	adc.w	r3, r2, r3
 8004636:	657b      	str	r3, [r7, #84]	@ 0x54
 8004638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800463c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004640:	f7fb fe26 	bl	8000290 <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4b61      	ldr	r3, [pc, #388]	@ (80047d0 <UART_SetConfig+0x2d4>)
 800464a:	fba3 2302 	umull	r2, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	011c      	lsls	r4, r3, #4
 8004652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800465c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	1891      	adds	r1, r2, r2
 800466a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800466c:	415b      	adcs	r3, r3
 800466e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004674:	4641      	mov	r1, r8
 8004676:	eb12 0a01 	adds.w	sl, r2, r1
 800467a:	4649      	mov	r1, r9
 800467c:	eb43 0b01 	adc.w	fp, r3, r1
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800468c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004694:	4692      	mov	sl, r2
 8004696:	469b      	mov	fp, r3
 8004698:	4643      	mov	r3, r8
 800469a:	eb1a 0303 	adds.w	r3, sl, r3
 800469e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046a2:	464b      	mov	r3, r9
 80046a4:	eb4b 0303 	adc.w	r3, fp, r3
 80046a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046c0:	460b      	mov	r3, r1
 80046c2:	18db      	adds	r3, r3, r3
 80046c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c6:	4613      	mov	r3, r2
 80046c8:	eb42 0303 	adc.w	r3, r2, r3
 80046cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046d6:	f7fb fddb 	bl	8000290 <__aeabi_uldivmod>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	4b3b      	ldr	r3, [pc, #236]	@ (80047d0 <UART_SetConfig+0x2d4>)
 80046e2:	fba3 2301 	umull	r2, r3, r3, r1
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2264      	movs	r2, #100	@ 0x64
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	1acb      	subs	r3, r1, r3
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046f6:	4b36      	ldr	r3, [pc, #216]	@ (80047d0 <UART_SetConfig+0x2d4>)
 80046f8:	fba3 2302 	umull	r2, r3, r3, r2
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004704:	441c      	add	r4, r3
 8004706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004710:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004718:	4642      	mov	r2, r8
 800471a:	464b      	mov	r3, r9
 800471c:	1891      	adds	r1, r2, r2
 800471e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004720:	415b      	adcs	r3, r3
 8004722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004728:	4641      	mov	r1, r8
 800472a:	1851      	adds	r1, r2, r1
 800472c:	6339      	str	r1, [r7, #48]	@ 0x30
 800472e:	4649      	mov	r1, r9
 8004730:	414b      	adcs	r3, r1
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004740:	4659      	mov	r1, fp
 8004742:	00cb      	lsls	r3, r1, #3
 8004744:	4651      	mov	r1, sl
 8004746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474a:	4651      	mov	r1, sl
 800474c:	00ca      	lsls	r2, r1, #3
 800474e:	4610      	mov	r0, r2
 8004750:	4619      	mov	r1, r3
 8004752:	4603      	mov	r3, r0
 8004754:	4642      	mov	r2, r8
 8004756:	189b      	adds	r3, r3, r2
 8004758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800475c:	464b      	mov	r3, r9
 800475e:	460a      	mov	r2, r1
 8004760:	eb42 0303 	adc.w	r3, r2, r3
 8004764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004774:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800477c:	460b      	mov	r3, r1
 800477e:	18db      	adds	r3, r3, r3
 8004780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004782:	4613      	mov	r3, r2
 8004784:	eb42 0303 	adc.w	r3, r2, r3
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800478a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800478e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004792:	f7fb fd7d 	bl	8000290 <__aeabi_uldivmod>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <UART_SetConfig+0x2d4>)
 800479c:	fba3 1302 	umull	r1, r3, r3, r2
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	2164      	movs	r1, #100	@ 0x64
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	3332      	adds	r3, #50	@ 0x32
 80047ae:	4a08      	ldr	r2, [pc, #32]	@ (80047d0 <UART_SetConfig+0x2d4>)
 80047b0:	fba2 2303 	umull	r2, r3, r2, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	f003 0207 	and.w	r2, r3, #7
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4422      	add	r2, r4
 80047c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047c4:	e106      	b.n	80049d4 <UART_SetConfig+0x4d8>
 80047c6:	bf00      	nop
 80047c8:	40011000 	.word	0x40011000
 80047cc:	40011400 	.word	0x40011400
 80047d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d8:	2200      	movs	r2, #0
 80047da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047e6:	4642      	mov	r2, r8
 80047e8:	464b      	mov	r3, r9
 80047ea:	1891      	adds	r1, r2, r2
 80047ec:	6239      	str	r1, [r7, #32]
 80047ee:	415b      	adcs	r3, r3
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047f6:	4641      	mov	r1, r8
 80047f8:	1854      	adds	r4, r2, r1
 80047fa:	4649      	mov	r1, r9
 80047fc:	eb43 0501 	adc.w	r5, r3, r1
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	00eb      	lsls	r3, r5, #3
 800480a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800480e:	00e2      	lsls	r2, r4, #3
 8004810:	4614      	mov	r4, r2
 8004812:	461d      	mov	r5, r3
 8004814:	4643      	mov	r3, r8
 8004816:	18e3      	adds	r3, r4, r3
 8004818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800481c:	464b      	mov	r3, r9
 800481e:	eb45 0303 	adc.w	r3, r5, r3
 8004822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004832:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004842:	4629      	mov	r1, r5
 8004844:	008b      	lsls	r3, r1, #2
 8004846:	4621      	mov	r1, r4
 8004848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800484c:	4621      	mov	r1, r4
 800484e:	008a      	lsls	r2, r1, #2
 8004850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004854:	f7fb fd1c 	bl	8000290 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4b60      	ldr	r3, [pc, #384]	@ (80049e0 <UART_SetConfig+0x4e4>)
 800485e:	fba3 2302 	umull	r2, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	011c      	lsls	r4, r3, #4
 8004866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800486a:	2200      	movs	r2, #0
 800486c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004870:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	1891      	adds	r1, r2, r2
 800487e:	61b9      	str	r1, [r7, #24]
 8004880:	415b      	adcs	r3, r3
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004888:	4641      	mov	r1, r8
 800488a:	1851      	adds	r1, r2, r1
 800488c:	6139      	str	r1, [r7, #16]
 800488e:	4649      	mov	r1, r9
 8004890:	414b      	adcs	r3, r1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048a0:	4659      	mov	r1, fp
 80048a2:	00cb      	lsls	r3, r1, #3
 80048a4:	4651      	mov	r1, sl
 80048a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048aa:	4651      	mov	r1, sl
 80048ac:	00ca      	lsls	r2, r1, #3
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	4642      	mov	r2, r8
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048bc:	464b      	mov	r3, r9
 80048be:	460a      	mov	r2, r1
 80048c0:	eb42 0303 	adc.w	r3, r2, r3
 80048c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048e0:	4649      	mov	r1, r9
 80048e2:	008b      	lsls	r3, r1, #2
 80048e4:	4641      	mov	r1, r8
 80048e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ea:	4641      	mov	r1, r8
 80048ec:	008a      	lsls	r2, r1, #2
 80048ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048f2:	f7fb fccd 	bl	8000290 <__aeabi_uldivmod>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	4b38      	ldr	r3, [pc, #224]	@ (80049e0 <UART_SetConfig+0x4e4>)
 80048fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2264      	movs	r2, #100	@ 0x64
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	1acb      	subs	r3, r1, r3
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	3332      	adds	r3, #50	@ 0x32
 8004910:	4a33      	ldr	r2, [pc, #204]	@ (80049e0 <UART_SetConfig+0x4e4>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800491c:	441c      	add	r4, r3
 800491e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004922:	2200      	movs	r2, #0
 8004924:	673b      	str	r3, [r7, #112]	@ 0x70
 8004926:	677a      	str	r2, [r7, #116]	@ 0x74
 8004928:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	415b      	adcs	r3, r3
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800493c:	4641      	mov	r1, r8
 800493e:	1851      	adds	r1, r2, r1
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	4649      	mov	r1, r9
 8004944:	414b      	adcs	r3, r1
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004954:	4659      	mov	r1, fp
 8004956:	00cb      	lsls	r3, r1, #3
 8004958:	4651      	mov	r1, sl
 800495a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495e:	4651      	mov	r1, sl
 8004960:	00ca      	lsls	r2, r1, #3
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	4603      	mov	r3, r0
 8004968:	4642      	mov	r2, r8
 800496a:	189b      	adds	r3, r3, r2
 800496c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800496e:	464b      	mov	r3, r9
 8004970:	460a      	mov	r2, r1
 8004972:	eb42 0303 	adc.w	r3, r2, r3
 8004976:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	663b      	str	r3, [r7, #96]	@ 0x60
 8004982:	667a      	str	r2, [r7, #100]	@ 0x64
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004990:	4649      	mov	r1, r9
 8004992:	008b      	lsls	r3, r1, #2
 8004994:	4641      	mov	r1, r8
 8004996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499a:	4641      	mov	r1, r8
 800499c:	008a      	lsls	r2, r1, #2
 800499e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049a2:	f7fb fc75 	bl	8000290 <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4b0d      	ldr	r3, [pc, #52]	@ (80049e0 <UART_SetConfig+0x4e4>)
 80049ac:	fba3 1302 	umull	r1, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	2164      	movs	r1, #100	@ 0x64
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	3332      	adds	r3, #50	@ 0x32
 80049be:	4a08      	ldr	r2, [pc, #32]	@ (80049e0 <UART_SetConfig+0x4e4>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	f003 020f 	and.w	r2, r3, #15
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4422      	add	r2, r4
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049da:	46bd      	mov	sp, r7
 80049dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e0:	51eb851f 	.word	0x51eb851f

080049e4 <__NVIC_SetPriority>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	6039      	str	r1, [r7, #0]
 80049ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	db0a      	blt.n	8004a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	490c      	ldr	r1, [pc, #48]	@ (8004a30 <__NVIC_SetPriority+0x4c>)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	0112      	lsls	r2, r2, #4
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	440b      	add	r3, r1
 8004a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a0c:	e00a      	b.n	8004a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	4908      	ldr	r1, [pc, #32]	@ (8004a34 <__NVIC_SetPriority+0x50>)
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	3b04      	subs	r3, #4
 8004a1c:	0112      	lsls	r2, r2, #4
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	440b      	add	r3, r1
 8004a22:	761a      	strb	r2, [r3, #24]
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	e000e100 	.word	0xe000e100
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a3c:	4b05      	ldr	r3, [pc, #20]	@ (8004a54 <SysTick_Handler+0x1c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a40:	f001 fd46 	bl	80064d0 <xTaskGetSchedulerState>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a4a:	f002 fb3d 	bl	80070c8 <xPortSysTickHandler>
  }
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	e000e010 	.word	0xe000e010

08004a58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	f06f 0004 	mvn.w	r0, #4
 8004a62:	f7ff ffbf 	bl	80049e4 <__NVIC_SetPriority>
#endif
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a72:	f3ef 8305 	mrs	r3, IPSR
 8004a76:	603b      	str	r3, [r7, #0]
  return(result);
 8004a78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a7e:	f06f 0305 	mvn.w	r3, #5
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	e00c      	b.n	8004aa0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a86:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <osKernelInitialize+0x44>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d105      	bne.n	8004a9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a8e:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <osKernelInitialize+0x44>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	e002      	b.n	8004aa0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004aa0:	687b      	ldr	r3, [r7, #4]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20000328 	.word	0x20000328

08004ab4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aba:	f3ef 8305 	mrs	r3, IPSR
 8004abe:	603b      	str	r3, [r7, #0]
  return(result);
 8004ac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ac6:	f06f 0305 	mvn.w	r3, #5
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	e010      	b.n	8004af0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ace:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <osKernelStart+0x48>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d109      	bne.n	8004aea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ad6:	f7ff ffbf 	bl	8004a58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ada:	4b08      	ldr	r3, [pc, #32]	@ (8004afc <osKernelStart+0x48>)
 8004adc:	2202      	movs	r2, #2
 8004ade:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ae0:	f001 f892 	bl	8005c08 <vTaskStartScheduler>
      stat = osOK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	e002      	b.n	8004af0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004aea:	f04f 33ff 	mov.w	r3, #4294967295
 8004aee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004af0:	687b      	ldr	r3, [r7, #4]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000328 	.word	0x20000328

08004b00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08e      	sub	sp, #56	@ 0x38
 8004b04:	af04      	add	r7, sp, #16
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b10:	f3ef 8305 	mrs	r3, IPSR
 8004b14:	617b      	str	r3, [r7, #20]
  return(result);
 8004b16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d17e      	bne.n	8004c1a <osThreadNew+0x11a>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d07b      	beq.n	8004c1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b22:	2380      	movs	r3, #128	@ 0x80
 8004b24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b26:	2318      	movs	r3, #24
 8004b28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d045      	beq.n	8004bc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <osThreadNew+0x48>
        name = attr->name;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <osThreadNew+0x6e>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2b38      	cmp	r3, #56	@ 0x38
 8004b60:	d805      	bhi.n	8004b6e <osThreadNew+0x6e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <osThreadNew+0x72>
        return (NULL);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e054      	b.n	8004c1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	089b      	lsrs	r3, r3, #2
 8004b80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00e      	beq.n	8004ba8 <osThreadNew+0xa8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004b90:	d90a      	bls.n	8004ba8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <osThreadNew+0xa8>
        mem = 1;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e010      	b.n	8004bca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10c      	bne.n	8004bca <osThreadNew+0xca>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d108      	bne.n	8004bca <osThreadNew+0xca>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d104      	bne.n	8004bca <osThreadNew+0xca>
          mem = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	e001      	b.n	8004bca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d110      	bne.n	8004bf2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bd8:	9202      	str	r2, [sp, #8]
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fe1a 	bl	8005820 <xTaskCreateStatic>
 8004bec:	4603      	mov	r3, r0
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	e013      	b.n	8004c1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d110      	bne.n	8004c1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	f107 0310 	add.w	r3, r7, #16
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fe68 	bl	80058e0 <xTaskCreate>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <osThreadNew+0x11a>
            hTask = NULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c1a:	693b      	ldr	r3, [r7, #16]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3728      	adds	r7, #40	@ 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c2c:	f3ef 8305 	mrs	r3, IPSR
 8004c30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <osDelay+0x1c>
    stat = osErrorISR;
 8004c38:	f06f 0305 	mvn.w	r3, #5
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e007      	b.n	8004c50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 ffa6 	bl	8005b9c <vTaskDelay>
    }
  }

  return (stat);
 8004c50:	68fb      	ldr	r3, [r7, #12]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a07      	ldr	r2, [pc, #28]	@ (8004c88 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	4a06      	ldr	r2, [pc, #24]	@ (8004c8c <vApplicationGetIdleTaskMemory+0x30>)
 8004c72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2280      	movs	r2, #128	@ 0x80
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	2000032c 	.word	0x2000032c
 8004c8c:	200003d4 	.word	0x200003d4

08004c90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a07      	ldr	r2, [pc, #28]	@ (8004cbc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ca0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4a06      	ldr	r2, [pc, #24]	@ (8004cc0 <vApplicationGetTimerTaskMemory+0x30>)
 8004ca6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cae:	601a      	str	r2, [r3, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	200005d4 	.word	0x200005d4
 8004cc0:	2000067c 	.word	0x2000067c

08004cc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f103 0208 	add.w	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f103 0208 	add.w	r2, r3, #8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f103 0208 	add.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d103      	bne.n	8004d86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e00c      	b.n	8004da0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	e002      	b.n	8004d94 <vListInsert+0x2e>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d2f6      	bcs.n	8004d8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6892      	ldr	r2, [r2, #8]
 8004dee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6852      	ldr	r2, [r2, #4]
 8004df8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d103      	bne.n	8004e0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	1e5a      	subs	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	e7fd      	b.n	8004e54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e58:	f002 f8a6 	bl	8006fa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	441a      	add	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	441a      	add	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	22ff      	movs	r2, #255	@ 0xff
 8004e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	22ff      	movs	r2, #255	@ 0xff
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d114      	bne.n	8004ed8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01a      	beq.n	8004eec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3310      	adds	r3, #16
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 f942 	bl	8006144 <xTaskRemoveFromEventList>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d012      	beq.n	8004eec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8004efc <xQueueGenericReset+0xd0>)
 8004ec8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	e009      	b.n	8004eec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3310      	adds	r3, #16
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fef1 	bl	8004cc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3324      	adds	r3, #36	@ 0x24
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff feec 	bl	8004cc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004eec:	f002 f88e 	bl	800700c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ef0:	2301      	movs	r3, #1
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	e000ed04 	.word	0xe000ed04

08004f00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08e      	sub	sp, #56	@ 0x38
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10b      	bne.n	8004f2c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <xQueueGenericCreateStatic+0x56>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <xQueueGenericCreateStatic+0x5a>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <xQueueGenericCreateStatic+0x5c>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	623b      	str	r3, [r7, #32]
}
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
 8004f76:	e7fd      	b.n	8004f74 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <xQueueGenericCreateStatic+0x84>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <xQueueGenericCreateStatic+0x88>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <xQueueGenericCreateStatic+0x8a>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	61fb      	str	r3, [r7, #28]
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	e7fd      	b.n	8004fa2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fa6:	2350      	movs	r3, #80	@ 0x50
 8004fa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b50      	cmp	r3, #80	@ 0x50
 8004fae:	d00b      	beq.n	8004fc8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	61bb      	str	r3, [r7, #24]
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00d      	beq.n	8004ff0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fdc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f805 	bl	8004ffa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3730      	adds	r7, #48	@ 0x30
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e002      	b.n	800501c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005028:	2101      	movs	r1, #1
 800502a:	69b8      	ldr	r0, [r7, #24]
 800502c:	f7ff fefe 	bl	8004e2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08e      	sub	sp, #56	@ 0x38
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800504e:	2300      	movs	r3, #0
 8005050:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <xQueueGenericSend+0x34>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800506e:	bf00      	nop
 8005070:	bf00      	nop
 8005072:	e7fd      	b.n	8005070 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <xQueueGenericSend+0x42>
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <xQueueGenericSend+0x46>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <xQueueGenericSend+0x48>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xQueueGenericSend+0x64>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d103      	bne.n	80050b2 <xQueueGenericSend+0x72>
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <xQueueGenericSend+0x76>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <xQueueGenericSend+0x78>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xQueueGenericSend+0x94>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	623b      	str	r3, [r7, #32]
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050d4:	f001 f9fc 	bl	80064d0 <xTaskGetSchedulerState>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d102      	bne.n	80050e4 <xQueueGenericSend+0xa4>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <xQueueGenericSend+0xa8>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <xQueueGenericSend+0xaa>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <xQueueGenericSend+0xc6>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	61fb      	str	r3, [r7, #28]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005106:	f001 ff4f 	bl	8006fa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <xQueueGenericSend+0xdc>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d129      	bne.n	8005170 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005122:	f000 fa0f 	bl	8005544 <prvCopyDataToQueue>
 8005126:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d010      	beq.n	8005152 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005132:	3324      	adds	r3, #36	@ 0x24
 8005134:	4618      	mov	r0, r3
 8005136:	f001 f805 	bl	8006144 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d013      	beq.n	8005168 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005140:	4b3f      	ldr	r3, [pc, #252]	@ (8005240 <xQueueGenericSend+0x200>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	e00a      	b.n	8005168 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005158:	4b39      	ldr	r3, [pc, #228]	@ (8005240 <xQueueGenericSend+0x200>)
 800515a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005168:	f001 ff50 	bl	800700c <vPortExitCritical>
				return pdPASS;
 800516c:	2301      	movs	r3, #1
 800516e:	e063      	b.n	8005238 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d103      	bne.n	800517e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005176:	f001 ff49 	bl	800700c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800517a:	2300      	movs	r3, #0
 800517c:	e05c      	b.n	8005238 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800517e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	4618      	mov	r0, r3
 800518a:	f001 f83f 	bl	800620c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800518e:	2301      	movs	r3, #1
 8005190:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005192:	f001 ff3b 	bl	800700c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005196:	f000 fda7 	bl	8005ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800519a:	f001 ff05 	bl	8006fa8 <vPortEnterCritical>
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051a4:	b25b      	sxtb	r3, r3
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d103      	bne.n	80051b4 <xQueueGenericSend+0x174>
 80051ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ba:	b25b      	sxtb	r3, r3
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d103      	bne.n	80051ca <xQueueGenericSend+0x18a>
 80051c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051ca:	f001 ff1f 	bl	800700c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ce:	1d3a      	adds	r2, r7, #4
 80051d0:	f107 0314 	add.w	r3, r7, #20
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 f82e 	bl	8006238 <xTaskCheckForTimeOut>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d124      	bne.n	800522c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051e4:	f000 faa6 	bl	8005734 <prvIsQueueFull>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	3310      	adds	r3, #16
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	4611      	mov	r1, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 ff52 	bl	80060a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051fe:	f000 fa31 	bl	8005664 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005202:	f000 fd7f 	bl	8005d04 <xTaskResumeAll>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	f47f af7c 	bne.w	8005106 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800520e:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <xQueueGenericSend+0x200>)
 8005210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	e772      	b.n	8005106 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005222:	f000 fa1f 	bl	8005664 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005226:	f000 fd6d 	bl	8005d04 <xTaskResumeAll>
 800522a:	e76c      	b.n	8005106 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800522c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800522e:	f000 fa19 	bl	8005664 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005232:	f000 fd67 	bl	8005d04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005236:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005238:	4618      	mov	r0, r3
 800523a:	3738      	adds	r7, #56	@ 0x38
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b090      	sub	sp, #64	@ 0x40
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <xQueueGenericSendFromISR+0x3e>
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <xQueueGenericSendFromISR+0x42>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <xQueueGenericSendFromISR+0x44>
 8005286:	2300      	movs	r3, #0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10b      	bne.n	80052a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d103      	bne.n	80052b2 <xQueueGenericSendFromISR+0x6e>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <xQueueGenericSendFromISR+0x72>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <xQueueGenericSendFromISR+0x74>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	623b      	str	r3, [r7, #32]
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052d4:	f001 ff48 	bl	8007168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052d8:	f3ef 8211 	mrs	r2, BASEPRI
 80052dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61fa      	str	r2, [r7, #28]
 80052ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d302      	bcc.n	8005306 <xQueueGenericSendFromISR+0xc2>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d12f      	bne.n	8005366 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005308:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800530c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800531c:	f000 f912 	bl	8005544 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005320:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d112      	bne.n	8005350 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005334:	3324      	adds	r3, #36	@ 0x24
 8005336:	4618      	mov	r0, r3
 8005338:	f000 ff04 	bl	8006144 <xTaskRemoveFromEventList>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00e      	beq.n	8005360 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00b      	beq.n	8005360 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e007      	b.n	8005360 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005350:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005354:	3301      	adds	r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	b25a      	sxtb	r2, r3
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005360:	2301      	movs	r3, #1
 8005362:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005364:	e001      	b.n	800536a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005366:	2300      	movs	r3, #0
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800536a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005374:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005378:	4618      	mov	r0, r3
 800537a:	3740      	adds	r7, #64	@ 0x40
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	@ 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <xQueueReceive+0x32>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	623b      	str	r3, [r7, #32]
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	e7fd      	b.n	80053ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <xQueueReceive+0x40>
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <xQueueReceive+0x44>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <xQueueReceive+0x46>
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <xQueueReceive+0x62>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	61fb      	str	r3, [r7, #28]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053e2:	f001 f875 	bl	80064d0 <xTaskGetSchedulerState>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d102      	bne.n	80053f2 <xQueueReceive+0x72>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <xQueueReceive+0x76>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <xQueueReceive+0x78>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <xQueueReceive+0x94>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	61bb      	str	r3, [r7, #24]
}
 800540e:	bf00      	nop
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005414:	f001 fdc8 	bl	8006fa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01f      	beq.n	8005464 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005428:	f000 f8f6 	bl	8005618 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	1e5a      	subs	r2, r3, #1
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00f      	beq.n	800545c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	3310      	adds	r3, #16
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fe7f 	bl	8006144 <xTaskRemoveFromEventList>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800544c:	4b3c      	ldr	r3, [pc, #240]	@ (8005540 <xQueueReceive+0x1c0>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800545c:	f001 fdd6 	bl	800700c <vPortExitCritical>
				return pdPASS;
 8005460:	2301      	movs	r3, #1
 8005462:	e069      	b.n	8005538 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800546a:	f001 fdcf 	bl	800700c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800546e:	2300      	movs	r3, #0
 8005470:	e062      	b.n	8005538 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005478:	f107 0310 	add.w	r3, r7, #16
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fec5 	bl	800620c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005482:	2301      	movs	r3, #1
 8005484:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005486:	f001 fdc1 	bl	800700c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800548a:	f000 fc2d 	bl	8005ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800548e:	f001 fd8b 	bl	8006fa8 <vPortEnterCritical>
 8005492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005498:	b25b      	sxtb	r3, r3
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d103      	bne.n	80054a8 <xQueueReceive+0x128>
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d103      	bne.n	80054be <xQueueReceive+0x13e>
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054be:	f001 fda5 	bl	800700c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054c2:	1d3a      	adds	r2, r7, #4
 80054c4:	f107 0310 	add.w	r3, r7, #16
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 feb4 	bl	8006238 <xTaskCheckForTimeOut>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d123      	bne.n	800551e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d8:	f000 f916 	bl	8005708 <prvIsQueueEmpty>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d017      	beq.n	8005512 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	3324      	adds	r3, #36	@ 0x24
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fdd8 	bl	80060a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054f2:	f000 f8b7 	bl	8005664 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054f6:	f000 fc05 	bl	8005d04 <xTaskResumeAll>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d189      	bne.n	8005414 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005500:	4b0f      	ldr	r3, [pc, #60]	@ (8005540 <xQueueReceive+0x1c0>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	e780      	b.n	8005414 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005514:	f000 f8a6 	bl	8005664 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005518:	f000 fbf4 	bl	8005d04 <xTaskResumeAll>
 800551c:	e77a      	b.n	8005414 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800551e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005520:	f000 f8a0 	bl	8005664 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005524:	f000 fbee 	bl	8005d04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800552a:	f000 f8ed 	bl	8005708 <prvIsQueueEmpty>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	f43f af6f 	beq.w	8005414 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005536:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005538:	4618      	mov	r0, r3
 800553a:	3730      	adds	r7, #48	@ 0x30
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10d      	bne.n	800557e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d14d      	bne.n	8005606 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 ffcc 	bl	800650c <xTaskPriorityDisinherit>
 8005574:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	e043      	b.n	8005606 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d119      	bne.n	80055b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6858      	ldr	r0, [r3, #4]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558c:	461a      	mov	r2, r3
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	f002 faf3 	bl	8007b7a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	441a      	add	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d32b      	bcc.n	8005606 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	e026      	b.n	8005606 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68d8      	ldr	r0, [r3, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	461a      	mov	r2, r3
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	f002 fad9 	bl	8007b7a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d0:	425b      	negs	r3, r3
 80055d2:	441a      	add	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d207      	bcs.n	80055f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ec:	425b      	negs	r3, r3
 80055ee:	441a      	add	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d105      	bne.n	8005606 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3b01      	subs	r3, #1
 8005604:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800560e:	697b      	ldr	r3, [r7, #20]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	441a      	add	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	429a      	cmp	r2, r3
 8005642:	d303      	bcc.n	800564c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68d9      	ldr	r1, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005654:	461a      	mov	r2, r3
 8005656:	6838      	ldr	r0, [r7, #0]
 8005658:	f002 fa8f 	bl	8007b7a <memcpy>
	}
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800566c:	f001 fc9c 	bl	8006fa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005676:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005678:	e011      	b.n	800569e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	d012      	beq.n	80056a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3324      	adds	r3, #36	@ 0x24
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fd5c 	bl	8006144 <xTaskRemoveFromEventList>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005692:	f000 fe35 	bl	8006300 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	3b01      	subs	r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800569e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	dce9      	bgt.n	800567a <prvUnlockQueue+0x16>
 80056a6:	e000      	b.n	80056aa <prvUnlockQueue+0x46>
					break;
 80056a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	22ff      	movs	r2, #255	@ 0xff
 80056ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056b2:	f001 fcab 	bl	800700c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056b6:	f001 fc77 	bl	8006fa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056c2:	e011      	b.n	80056e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3310      	adds	r3, #16
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fd37 	bl	8006144 <xTaskRemoveFromEventList>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056dc:	f000 fe10 	bl	8006300 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056e0:	7bbb      	ldrb	r3, [r7, #14]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dce9      	bgt.n	80056c4 <prvUnlockQueue+0x60>
 80056f0:	e000      	b.n	80056f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	22ff      	movs	r2, #255	@ 0xff
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80056fc:	f001 fc86 	bl	800700c <vPortExitCritical>
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005710:	f001 fc4a 	bl	8006fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800571c:	2301      	movs	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	e001      	b.n	8005726 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005726:	f001 fc71 	bl	800700c <vPortExitCritical>

	return xReturn;
 800572a:	68fb      	ldr	r3, [r7, #12]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800573c:	f001 fc34 	bl	8006fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005748:	429a      	cmp	r2, r3
 800574a:	d102      	bne.n	8005752 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800574c:	2301      	movs	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	e001      	b.n	8005756 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005756:	f001 fc59 	bl	800700c <vPortExitCritical>

	return xReturn;
 800575a:	68fb      	ldr	r3, [r7, #12]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	e014      	b.n	800579e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005774:	4a0f      	ldr	r2, [pc, #60]	@ (80057b4 <vQueueAddToRegistry+0x50>)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10b      	bne.n	8005798 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005780:	490c      	ldr	r1, [pc, #48]	@ (80057b4 <vQueueAddToRegistry+0x50>)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800578a:	4a0a      	ldr	r2, [pc, #40]	@ (80057b4 <vQueueAddToRegistry+0x50>)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4413      	add	r3, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005796:	e006      	b.n	80057a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3301      	adds	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b07      	cmp	r3, #7
 80057a2:	d9e7      	bls.n	8005774 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000a7c 	.word	0x20000a7c

080057b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057c8:	f001 fbee 	bl	8006fa8 <vPortEnterCritical>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057d2:	b25b      	sxtb	r3, r3
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d103      	bne.n	80057e2 <vQueueWaitForMessageRestricted+0x2a>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057e8:	b25b      	sxtb	r3, r3
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d103      	bne.n	80057f8 <vQueueWaitForMessageRestricted+0x40>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057f8:	f001 fc08 	bl	800700c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	3324      	adds	r3, #36	@ 0x24
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fc6d 	bl	80060ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005812:	6978      	ldr	r0, [r7, #20]
 8005814:	f7ff ff26 	bl	8005664 <prvUnlockQueue>
	}
 8005818:	bf00      	nop
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08e      	sub	sp, #56	@ 0x38
 8005824:	af04      	add	r7, sp, #16
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800582e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	623b      	str	r3, [r7, #32]
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	61fb      	str	r3, [r7, #28]
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	e7fd      	b.n	8005866 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800586a:	23a8      	movs	r3, #168	@ 0xa8
 800586c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2ba8      	cmp	r3, #168	@ 0xa8
 8005872:	d00b      	beq.n	800588c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	61bb      	str	r3, [r7, #24]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800588c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01e      	beq.n	80058d2 <xTaskCreateStatic+0xb2>
 8005894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01b      	beq.n	80058d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058ac:	2300      	movs	r3, #0
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	9302      	str	r3, [sp, #8]
 80058b4:	f107 0314 	add.w	r3, r7, #20
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f851 	bl	800596c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058cc:	f000 f8f6 	bl	8005abc <prvAddNewTaskToReadyList>
 80058d0:	e001      	b.n	80058d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058d6:	697b      	ldr	r3, [r7, #20]
	}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	@ 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	@ 0x30
 80058e4:	af04      	add	r7, sp, #16
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f001 fc79 	bl	80071ec <pvPortMalloc>
 80058fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00e      	beq.n	8005920 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005902:	20a8      	movs	r0, #168	@ 0xa8
 8005904:	f001 fc72 	bl	80071ec <pvPortMalloc>
 8005908:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30
 8005916:	e005      	b.n	8005924 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005918:	6978      	ldr	r0, [r7, #20]
 800591a:	f001 fd35 	bl	8007388 <vPortFree>
 800591e:	e001      	b.n	8005924 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d017      	beq.n	800595a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005932:	88fa      	ldrh	r2, [r7, #6]
 8005934:	2300      	movs	r3, #0
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f80f 	bl	800596c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800594e:	69f8      	ldr	r0, [r7, #28]
 8005950:	f000 f8b4 	bl	8005abc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005954:	2301      	movs	r3, #1
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	e002      	b.n	8005960 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800595a:	f04f 33ff 	mov.w	r3, #4294967295
 800595e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005960:	69bb      	ldr	r3, [r7, #24]
	}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	461a      	mov	r2, r3
 8005984:	21a5      	movs	r1, #165	@ 0xa5
 8005986:	f001 ffac 	bl	80078e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005994:	3b01      	subs	r3, #1
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f023 0307 	bic.w	r3, r3, #7
 80059a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	617b      	str	r3, [r7, #20]
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	e7fd      	b.n	80059c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01f      	beq.n	8005a0c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	e012      	b.n	80059f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	7819      	ldrb	r1, [r3, #0]
 80059da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	3334      	adds	r3, #52	@ 0x34
 80059e2:	460a      	mov	r2, r1
 80059e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	3301      	adds	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	2b0f      	cmp	r3, #15
 80059fc:	d9e9      	bls.n	80059d2 <prvInitialiseNewTask+0x66>
 80059fe:	e000      	b.n	8005a02 <prvInitialiseNewTask+0x96>
			{
				break;
 8005a00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a0a:	e003      	b.n	8005a14 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	2b37      	cmp	r3, #55	@ 0x37
 8005a18:	d901      	bls.n	8005a1e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a1a:	2337      	movs	r3, #55	@ 0x37
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff f965 	bl	8004d04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff f960 	bl	8004d04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	3354      	adds	r3, #84	@ 0x54
 8005a6e:	224c      	movs	r2, #76	@ 0x4c
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 ff35 	bl	80078e2 <memset>
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ab0 <prvInitialiseNewTask+0x144>)
 8005a7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a80:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab4 <prvInitialiseNewTask+0x148>)
 8005a82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab8 <prvInitialiseNewTask+0x14c>)
 8005a88:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	68f9      	ldr	r1, [r7, #12]
 8005a8e:	69b8      	ldr	r0, [r7, #24]
 8005a90:	f001 f95a 	bl	8006d48 <pxPortInitialiseStack>
 8005a94:	4602      	mov	r2, r0
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	3720      	adds	r7, #32
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20004d10 	.word	0x20004d10
 8005ab4:	20004d78 	.word	0x20004d78
 8005ab8:	20004de0 	.word	0x20004de0

08005abc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ac4:	f001 fa70 	bl	8006fa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b80 <prvAddNewTaskToReadyList+0xc4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3301      	adds	r3, #1
 8005ace:	4a2c      	ldr	r2, [pc, #176]	@ (8005b80 <prvAddNewTaskToReadyList+0xc4>)
 8005ad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8005b84 <prvAddNewTaskToReadyList+0xc8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ada:	4a2a      	ldr	r2, [pc, #168]	@ (8005b84 <prvAddNewTaskToReadyList+0xc8>)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ae0:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <prvAddNewTaskToReadyList+0xc4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d110      	bne.n	8005b0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ae8:	f000 fc2e 	bl	8006348 <prvInitialiseTaskLists>
 8005aec:	e00d      	b.n	8005b0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aee:	4b26      	ldr	r3, [pc, #152]	@ (8005b88 <prvAddNewTaskToReadyList+0xcc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005af6:	4b23      	ldr	r3, [pc, #140]	@ (8005b84 <prvAddNewTaskToReadyList+0xc8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d802      	bhi.n	8005b0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b04:	4a1f      	ldr	r2, [pc, #124]	@ (8005b84 <prvAddNewTaskToReadyList+0xc8>)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b0a:	4b20      	ldr	r3, [pc, #128]	@ (8005b8c <prvAddNewTaskToReadyList+0xd0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a1e      	ldr	r2, [pc, #120]	@ (8005b8c <prvAddNewTaskToReadyList+0xd0>)
 8005b12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b14:	4b1d      	ldr	r3, [pc, #116]	@ (8005b8c <prvAddNewTaskToReadyList+0xd0>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b20:	4b1b      	ldr	r3, [pc, #108]	@ (8005b90 <prvAddNewTaskToReadyList+0xd4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d903      	bls.n	8005b30 <prvAddNewTaskToReadyList+0x74>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	4a18      	ldr	r2, [pc, #96]	@ (8005b90 <prvAddNewTaskToReadyList+0xd4>)
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4a15      	ldr	r2, [pc, #84]	@ (8005b94 <prvAddNewTaskToReadyList+0xd8>)
 8005b3e:	441a      	add	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4619      	mov	r1, r3
 8005b46:	4610      	mov	r0, r2
 8005b48:	f7ff f8e9 	bl	8004d1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b4c:	f001 fa5e 	bl	800700c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b50:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <prvAddNewTaskToReadyList+0xcc>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00e      	beq.n	8005b76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b58:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <prvAddNewTaskToReadyList+0xc8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d207      	bcs.n	8005b76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b66:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <prvAddNewTaskToReadyList+0xdc>)
 8005b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000f90 	.word	0x20000f90
 8005b84:	20000abc 	.word	0x20000abc
 8005b88:	20000f9c 	.word	0x20000f9c
 8005b8c:	20000fac 	.word	0x20000fac
 8005b90:	20000f98 	.word	0x20000f98
 8005b94:	20000ac0 	.word	0x20000ac0
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d018      	beq.n	8005be0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bae:	4b14      	ldr	r3, [pc, #80]	@ (8005c00 <vTaskDelay+0x64>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <vTaskDelay+0x32>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	60bb      	str	r3, [r7, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	e7fd      	b.n	8005bca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bce:	f000 f88b 	bl	8005ce8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fd09 	bl	80065ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bda:	f000 f893 	bl	8005d04 <xTaskResumeAll>
 8005bde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d107      	bne.n	8005bf6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005be6:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <vTaskDelay+0x68>)
 8005be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000fb8 	.word	0x20000fb8
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c16:	463a      	mov	r2, r7
 8005c18:	1d39      	adds	r1, r7, #4
 8005c1a:	f107 0308 	add.w	r3, r7, #8
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff f81c 	bl	8004c5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	9202      	str	r2, [sp, #8]
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	2300      	movs	r3, #0
 8005c34:	460a      	mov	r2, r1
 8005c36:	4924      	ldr	r1, [pc, #144]	@ (8005cc8 <vTaskStartScheduler+0xc0>)
 8005c38:	4824      	ldr	r0, [pc, #144]	@ (8005ccc <vTaskStartScheduler+0xc4>)
 8005c3a:	f7ff fdf1 	bl	8005820 <xTaskCreateStatic>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4a23      	ldr	r2, [pc, #140]	@ (8005cd0 <vTaskStartScheduler+0xc8>)
 8005c42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c44:	4b22      	ldr	r3, [pc, #136]	@ (8005cd0 <vTaskStartScheduler+0xc8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e001      	b.n	8005c56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d102      	bne.n	8005c62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c5c:	f000 fd1a 	bl	8006694 <xTimerCreateTimerTask>
 8005c60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d11b      	bne.n	8005ca0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	613b      	str	r3, [r7, #16]
}
 8005c7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c7c:	4b15      	ldr	r3, [pc, #84]	@ (8005cd4 <vTaskStartScheduler+0xcc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3354      	adds	r3, #84	@ 0x54
 8005c82:	4a15      	ldr	r2, [pc, #84]	@ (8005cd8 <vTaskStartScheduler+0xd0>)
 8005c84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c86:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <vTaskStartScheduler+0xd4>)
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c8e:	4b14      	ldr	r3, [pc, #80]	@ (8005ce0 <vTaskStartScheduler+0xd8>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c94:	4b13      	ldr	r3, [pc, #76]	@ (8005ce4 <vTaskStartScheduler+0xdc>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c9a:	f001 f8e1 	bl	8006e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c9e:	e00f      	b.n	8005cc0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d10b      	bne.n	8005cc0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	60fb      	str	r3, [r7, #12]
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <vTaskStartScheduler+0xb4>
}
 8005cc0:	bf00      	nop
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	08008834 	.word	0x08008834
 8005ccc:	08006319 	.word	0x08006319
 8005cd0:	20000fb4 	.word	0x20000fb4
 8005cd4:	20000abc 	.word	0x20000abc
 8005cd8:	20000024 	.word	0x20000024
 8005cdc:	20000fb0 	.word	0x20000fb0
 8005ce0:	20000f9c 	.word	0x20000f9c
 8005ce4:	20000f94 	.word	0x20000f94

08005ce8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cec:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <vTaskSuspendAll+0x18>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	4a03      	ldr	r2, [pc, #12]	@ (8005d00 <vTaskSuspendAll+0x18>)
 8005cf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	20000fb8 	.word	0x20000fb8

08005d04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d12:	4b42      	ldr	r3, [pc, #264]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <xTaskResumeAll+0x2e>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	603b      	str	r3, [r7, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	e7fd      	b.n	8005d2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d32:	f001 f939 	bl	8006fa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d36:	4b39      	ldr	r3, [pc, #228]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	4a37      	ldr	r2, [pc, #220]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d40:	4b36      	ldr	r3, [pc, #216]	@ (8005e1c <xTaskResumeAll+0x118>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d162      	bne.n	8005e0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d48:	4b35      	ldr	r3, [pc, #212]	@ (8005e20 <xTaskResumeAll+0x11c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05e      	beq.n	8005e0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d50:	e02f      	b.n	8005db2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d52:	4b34      	ldr	r3, [pc, #208]	@ (8005e24 <xTaskResumeAll+0x120>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff f83a 	bl	8004dd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff f835 	bl	8004dd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d72:	4b2d      	ldr	r3, [pc, #180]	@ (8005e28 <xTaskResumeAll+0x124>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d903      	bls.n	8005d82 <xTaskResumeAll+0x7e>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8005e28 <xTaskResumeAll+0x124>)
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4a27      	ldr	r2, [pc, #156]	@ (8005e2c <xTaskResumeAll+0x128>)
 8005d90:	441a      	add	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f7fe ffc0 	bl	8004d1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da2:	4b23      	ldr	r3, [pc, #140]	@ (8005e30 <xTaskResumeAll+0x12c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d302      	bcc.n	8005db2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005dac:	4b21      	ldr	r3, [pc, #132]	@ (8005e34 <xTaskResumeAll+0x130>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005db2:	4b1c      	ldr	r3, [pc, #112]	@ (8005e24 <xTaskResumeAll+0x120>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1cb      	bne.n	8005d52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dc0:	f000 fb66 	bl	8006490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e38 <xTaskResumeAll+0x134>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d010      	beq.n	8005df2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dd0:	f000 f846 	bl	8005e60 <xTaskIncrementTick>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005dda:	4b16      	ldr	r3, [pc, #88]	@ (8005e34 <xTaskResumeAll+0x130>)
 8005ddc:	2201      	movs	r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f1      	bne.n	8005dd0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005dec:	4b12      	ldr	r3, [pc, #72]	@ (8005e38 <xTaskResumeAll+0x134>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005df2:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <xTaskResumeAll+0x130>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8005e3c <xTaskResumeAll+0x138>)
 8005e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e0e:	f001 f8fd 	bl	800700c <vPortExitCritical>

	return xAlreadyYielded;
 8005e12:	68bb      	ldr	r3, [r7, #8]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20000fb8 	.word	0x20000fb8
 8005e20:	20000f90 	.word	0x20000f90
 8005e24:	20000f50 	.word	0x20000f50
 8005e28:	20000f98 	.word	0x20000f98
 8005e2c:	20000ac0 	.word	0x20000ac0
 8005e30:	20000abc 	.word	0x20000abc
 8005e34:	20000fa4 	.word	0x20000fa4
 8005e38:	20000fa0 	.word	0x20000fa0
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e46:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <xTaskGetTickCount+0x1c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e4c:	687b      	ldr	r3, [r7, #4]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	20000f94 	.word	0x20000f94

08005e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa8 <xTaskIncrementTick+0x148>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f040 8090 	bne.w	8005f94 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e74:	4b4d      	ldr	r3, [pc, #308]	@ (8005fac <xTaskIncrementTick+0x14c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8005fac <xTaskIncrementTick+0x14c>)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d121      	bne.n	8005ecc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e88:	4b49      	ldr	r3, [pc, #292]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	603b      	str	r3, [r7, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <xTaskIncrementTick+0x46>
 8005eaa:	4b41      	ldr	r3, [pc, #260]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	4b40      	ldr	r3, [pc, #256]	@ (8005fb4 <xTaskIncrementTick+0x154>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb4 <xTaskIncrementTick+0x154>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb8 <xTaskIncrementTick+0x158>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb8 <xTaskIncrementTick+0x158>)
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	f000 fae2 	bl	8006490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8005fbc <xTaskIncrementTick+0x15c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d349      	bcc.n	8005f6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ed6:	4b36      	ldr	r3, [pc, #216]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee0:	4b36      	ldr	r3, [pc, #216]	@ (8005fbc <xTaskIncrementTick+0x15c>)
 8005ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee6:	601a      	str	r2, [r3, #0]
					break;
 8005ee8:	e03f      	b.n	8005f6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eea:	4b31      	ldr	r3, [pc, #196]	@ (8005fb0 <xTaskIncrementTick+0x150>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d203      	bcs.n	8005f0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f02:	4a2e      	ldr	r2, [pc, #184]	@ (8005fbc <xTaskIncrementTick+0x15c>)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f08:	e02f      	b.n	8005f6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe ff62 	bl	8004dd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	3318      	adds	r3, #24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe ff59 	bl	8004dd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2a:	4b25      	ldr	r3, [pc, #148]	@ (8005fc0 <xTaskIncrementTick+0x160>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d903      	bls.n	8005f3a <xTaskIncrementTick+0xda>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f36:	4a22      	ldr	r2, [pc, #136]	@ (8005fc0 <xTaskIncrementTick+0x160>)
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <xTaskIncrementTick+0x164>)
 8005f48:	441a      	add	r2, r3
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7fe fee4 	bl	8004d1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc8 <xTaskIncrementTick+0x168>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d3b8      	bcc.n	8005ed6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f68:	e7b5      	b.n	8005ed6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f6a:	4b17      	ldr	r3, [pc, #92]	@ (8005fc8 <xTaskIncrementTick+0x168>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f70:	4914      	ldr	r1, [pc, #80]	@ (8005fc4 <xTaskIncrementTick+0x164>)
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d901      	bls.n	8005f86 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005f82:	2301      	movs	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f86:	4b11      	ldr	r3, [pc, #68]	@ (8005fcc <xTaskIncrementTick+0x16c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	e004      	b.n	8005f9e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f94:	4b0e      	ldr	r3, [pc, #56]	@ (8005fd0 <xTaskIncrementTick+0x170>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005fd0 <xTaskIncrementTick+0x170>)
 8005f9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f9e:	697b      	ldr	r3, [r7, #20]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20000fb8 	.word	0x20000fb8
 8005fac:	20000f94 	.word	0x20000f94
 8005fb0:	20000f48 	.word	0x20000f48
 8005fb4:	20000f4c 	.word	0x20000f4c
 8005fb8:	20000fa8 	.word	0x20000fa8
 8005fbc:	20000fb0 	.word	0x20000fb0
 8005fc0:	20000f98 	.word	0x20000f98
 8005fc4:	20000ac0 	.word	0x20000ac0
 8005fc8:	20000abc 	.word	0x20000abc
 8005fcc:	20000fa4 	.word	0x20000fa4
 8005fd0:	20000fa0 	.word	0x20000fa0

08005fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fda:	4b2b      	ldr	r3, [pc, #172]	@ (8006088 <vTaskSwitchContext+0xb4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800608c <vTaskSwitchContext+0xb8>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fe8:	e047      	b.n	800607a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005fea:	4b28      	ldr	r3, [pc, #160]	@ (800608c <vTaskSwitchContext+0xb8>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff0:	4b27      	ldr	r3, [pc, #156]	@ (8006090 <vTaskSwitchContext+0xbc>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	e011      	b.n	800601c <vTaskSwitchContext+0x48>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <vTaskSwitchContext+0x42>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	607b      	str	r3, [r7, #4]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <vTaskSwitchContext+0x3e>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3b01      	subs	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	491d      	ldr	r1, [pc, #116]	@ (8006094 <vTaskSwitchContext+0xc0>)
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0e3      	beq.n	8005ff8 <vTaskSwitchContext+0x24>
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4a16      	ldr	r2, [pc, #88]	@ (8006094 <vTaskSwitchContext+0xc0>)
 800603c:	4413      	add	r3, r2
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	3308      	adds	r3, #8
 8006052:	429a      	cmp	r2, r3
 8006054:	d104      	bne.n	8006060 <vTaskSwitchContext+0x8c>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	605a      	str	r2, [r3, #4]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	4a0c      	ldr	r2, [pc, #48]	@ (8006098 <vTaskSwitchContext+0xc4>)
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	4a09      	ldr	r2, [pc, #36]	@ (8006090 <vTaskSwitchContext+0xbc>)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006070:	4b09      	ldr	r3, [pc, #36]	@ (8006098 <vTaskSwitchContext+0xc4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3354      	adds	r3, #84	@ 0x54
 8006076:	4a09      	ldr	r2, [pc, #36]	@ (800609c <vTaskSwitchContext+0xc8>)
 8006078:	6013      	str	r3, [r2, #0]
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	20000fb8 	.word	0x20000fb8
 800608c:	20000fa4 	.word	0x20000fa4
 8006090:	20000f98 	.word	0x20000f98
 8006094:	20000ac0 	.word	0x20000ac0
 8006098:	20000abc 	.word	0x20000abc
 800609c:	20000024 	.word	0x20000024

080060a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060c8:	4b07      	ldr	r3, [pc, #28]	@ (80060e8 <vTaskPlaceOnEventList+0x48>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3318      	adds	r3, #24
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fe fe48 	bl	8004d66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060d6:	2101      	movs	r1, #1
 80060d8:	6838      	ldr	r0, [r7, #0]
 80060da:	f000 fa87 	bl	80065ec <prvAddCurrentTaskToDelayedList>
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000abc 	.word	0x20000abc

080060ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	617b      	str	r3, [r7, #20]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006116:	4b0a      	ldr	r3, [pc, #40]	@ (8006140 <vTaskPlaceOnEventListRestricted+0x54>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3318      	adds	r3, #24
 800611c:	4619      	mov	r1, r3
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7fe fdfd 	bl	8004d1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295
 800612e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	68b8      	ldr	r0, [r7, #8]
 8006134:	f000 fa5a 	bl	80065ec <prvAddCurrentTaskToDelayedList>
	}
 8006138:	bf00      	nop
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000abc 	.word	0x20000abc

08006144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	60fb      	str	r3, [r7, #12]
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	e7fd      	b.n	800616e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3318      	adds	r3, #24
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fe2e 	bl	8004dd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800617c:	4b1d      	ldr	r3, [pc, #116]	@ (80061f4 <xTaskRemoveFromEventList+0xb0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d11d      	bne.n	80061c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	3304      	adds	r3, #4
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe fe25 	bl	8004dd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006192:	4b19      	ldr	r3, [pc, #100]	@ (80061f8 <xTaskRemoveFromEventList+0xb4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d903      	bls.n	80061a2 <xTaskRemoveFromEventList+0x5e>
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	4a16      	ldr	r2, [pc, #88]	@ (80061f8 <xTaskRemoveFromEventList+0xb4>)
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4a13      	ldr	r2, [pc, #76]	@ (80061fc <xTaskRemoveFromEventList+0xb8>)
 80061b0:	441a      	add	r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4619      	mov	r1, r3
 80061b8:	4610      	mov	r0, r2
 80061ba:	f7fe fdb0 	bl	8004d1e <vListInsertEnd>
 80061be:	e005      	b.n	80061cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	3318      	adds	r3, #24
 80061c4:	4619      	mov	r1, r3
 80061c6:	480e      	ldr	r0, [pc, #56]	@ (8006200 <xTaskRemoveFromEventList+0xbc>)
 80061c8:	f7fe fda9 	bl	8004d1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006204 <xTaskRemoveFromEventList+0xc0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d905      	bls.n	80061e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061da:	2301      	movs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061de:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <xTaskRemoveFromEventList+0xc4>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e001      	b.n	80061ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061ea:	697b      	ldr	r3, [r7, #20]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000fb8 	.word	0x20000fb8
 80061f8:	20000f98 	.word	0x20000f98
 80061fc:	20000ac0 	.word	0x20000ac0
 8006200:	20000f50 	.word	0x20000f50
 8006204:	20000abc 	.word	0x20000abc
 8006208:	20000fa4 	.word	0x20000fa4

0800620c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006214:	4b06      	ldr	r3, [pc, #24]	@ (8006230 <vTaskInternalSetTimeOutState+0x24>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800621c:	4b05      	ldr	r3, [pc, #20]	@ (8006234 <vTaskInternalSetTimeOutState+0x28>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	605a      	str	r2, [r3, #4]
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	20000fa8 	.word	0x20000fa8
 8006234:	20000f94 	.word	0x20000f94

08006238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	613b      	str	r3, [r7, #16]
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	e7fd      	b.n	800625c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10b      	bne.n	800627e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60fb      	str	r3, [r7, #12]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800627e:	f000 fe93 	bl	8006fa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006282:	4b1d      	ldr	r3, [pc, #116]	@ (80062f8 <xTaskCheckForTimeOut+0xc0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	d102      	bne.n	80062a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800629c:	2300      	movs	r3, #0
 800629e:	61fb      	str	r3, [r7, #28]
 80062a0:	e023      	b.n	80062ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b15      	ldr	r3, [pc, #84]	@ (80062fc <xTaskCheckForTimeOut+0xc4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d007      	beq.n	80062be <xTaskCheckForTimeOut+0x86>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d302      	bcc.n	80062be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062b8:	2301      	movs	r3, #1
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	e015      	b.n	80062ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d20b      	bcs.n	80062e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff ff99 	bl	800620c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	e004      	b.n	80062ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062e6:	2301      	movs	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062ea:	f000 fe8f 	bl	800700c <vPortExitCritical>

	return xReturn;
 80062ee:	69fb      	ldr	r3, [r7, #28]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3720      	adds	r7, #32
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000f94 	.word	0x20000f94
 80062fc:	20000fa8 	.word	0x20000fa8

08006300 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006304:	4b03      	ldr	r3, [pc, #12]	@ (8006314 <vTaskMissedYield+0x14>)
 8006306:	2201      	movs	r2, #1
 8006308:	601a      	str	r2, [r3, #0]
}
 800630a:	bf00      	nop
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	20000fa4 	.word	0x20000fa4

08006318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006320:	f000 f852 	bl	80063c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006324:	4b06      	ldr	r3, [pc, #24]	@ (8006340 <prvIdleTask+0x28>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d9f9      	bls.n	8006320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800632c:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <prvIdleTask+0x2c>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800633c:	e7f0      	b.n	8006320 <prvIdleTask+0x8>
 800633e:	bf00      	nop
 8006340:	20000ac0 	.word	0x20000ac0
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800634e:	2300      	movs	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
 8006352:	e00c      	b.n	800636e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4a12      	ldr	r2, [pc, #72]	@ (80063a8 <prvInitialiseTaskLists+0x60>)
 8006360:	4413      	add	r3, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fcae 	bl	8004cc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3301      	adds	r3, #1
 800636c:	607b      	str	r3, [r7, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b37      	cmp	r3, #55	@ 0x37
 8006372:	d9ef      	bls.n	8006354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006374:	480d      	ldr	r0, [pc, #52]	@ (80063ac <prvInitialiseTaskLists+0x64>)
 8006376:	f7fe fca5 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800637a:	480d      	ldr	r0, [pc, #52]	@ (80063b0 <prvInitialiseTaskLists+0x68>)
 800637c:	f7fe fca2 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006380:	480c      	ldr	r0, [pc, #48]	@ (80063b4 <prvInitialiseTaskLists+0x6c>)
 8006382:	f7fe fc9f 	bl	8004cc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006386:	480c      	ldr	r0, [pc, #48]	@ (80063b8 <prvInitialiseTaskLists+0x70>)
 8006388:	f7fe fc9c 	bl	8004cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800638c:	480b      	ldr	r0, [pc, #44]	@ (80063bc <prvInitialiseTaskLists+0x74>)
 800638e:	f7fe fc99 	bl	8004cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006392:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <prvInitialiseTaskLists+0x78>)
 8006394:	4a05      	ldr	r2, [pc, #20]	@ (80063ac <prvInitialiseTaskLists+0x64>)
 8006396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006398:	4b0a      	ldr	r3, [pc, #40]	@ (80063c4 <prvInitialiseTaskLists+0x7c>)
 800639a:	4a05      	ldr	r2, [pc, #20]	@ (80063b0 <prvInitialiseTaskLists+0x68>)
 800639c:	601a      	str	r2, [r3, #0]
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000ac0 	.word	0x20000ac0
 80063ac:	20000f20 	.word	0x20000f20
 80063b0:	20000f34 	.word	0x20000f34
 80063b4:	20000f50 	.word	0x20000f50
 80063b8:	20000f64 	.word	0x20000f64
 80063bc:	20000f7c 	.word	0x20000f7c
 80063c0:	20000f48 	.word	0x20000f48
 80063c4:	20000f4c 	.word	0x20000f4c

080063c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ce:	e019      	b.n	8006404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063d0:	f000 fdea 	bl	8006fa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d4:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <prvCheckTasksWaitingTermination+0x50>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3304      	adds	r3, #4
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe fcf9 	bl	8004dd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063e6:	4b0d      	ldr	r3, [pc, #52]	@ (800641c <prvCheckTasksWaitingTermination+0x54>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	4a0b      	ldr	r2, [pc, #44]	@ (800641c <prvCheckTasksWaitingTermination+0x54>)
 80063ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006420 <prvCheckTasksWaitingTermination+0x58>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006420 <prvCheckTasksWaitingTermination+0x58>)
 80063f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063fa:	f000 fe07 	bl	800700c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f810 	bl	8006424 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006404:	4b06      	ldr	r3, [pc, #24]	@ (8006420 <prvCheckTasksWaitingTermination+0x58>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e1      	bne.n	80063d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800640c:	bf00      	nop
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000f64 	.word	0x20000f64
 800641c:	20000f90 	.word	0x20000f90
 8006420:	20000f78 	.word	0x20000f78

08006424 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3354      	adds	r3, #84	@ 0x54
 8006430:	4618      	mov	r0, r3
 8006432:	f001 fad9 	bl	80079e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800643c:	2b00      	cmp	r3, #0
 800643e:	d108      	bne.n	8006452 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006444:	4618      	mov	r0, r3
 8006446:	f000 ff9f 	bl	8007388 <vPortFree>
				vPortFree( pxTCB );
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 ff9c 	bl	8007388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006450:	e019      	b.n	8006486 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006458:	2b01      	cmp	r3, #1
 800645a:	d103      	bne.n	8006464 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 ff93 	bl	8007388 <vPortFree>
	}
 8006462:	e010      	b.n	8006486 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800646a:	2b02      	cmp	r3, #2
 800646c:	d00b      	beq.n	8006486 <prvDeleteTCB+0x62>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	60fb      	str	r3, [r7, #12]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <prvDeleteTCB+0x5e>
	}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006496:	4b0c      	ldr	r3, [pc, #48]	@ (80064c8 <prvResetNextTaskUnblockTime+0x38>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064a0:	4b0a      	ldr	r3, [pc, #40]	@ (80064cc <prvResetNextTaskUnblockTime+0x3c>)
 80064a2:	f04f 32ff 	mov.w	r2, #4294967295
 80064a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064a8:	e008      	b.n	80064bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064aa:	4b07      	ldr	r3, [pc, #28]	@ (80064c8 <prvResetNextTaskUnblockTime+0x38>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	4a04      	ldr	r2, [pc, #16]	@ (80064cc <prvResetNextTaskUnblockTime+0x3c>)
 80064ba:	6013      	str	r3, [r2, #0]
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	20000f48 	.word	0x20000f48
 80064cc:	20000fb0 	.word	0x20000fb0

080064d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <xTaskGetSchedulerState+0x34>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d102      	bne.n	80064e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064de:	2301      	movs	r3, #1
 80064e0:	607b      	str	r3, [r7, #4]
 80064e2:	e008      	b.n	80064f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064e4:	4b08      	ldr	r3, [pc, #32]	@ (8006508 <xTaskGetSchedulerState+0x38>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064ec:	2302      	movs	r3, #2
 80064ee:	607b      	str	r3, [r7, #4]
 80064f0:	e001      	b.n	80064f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064f2:	2300      	movs	r3, #0
 80064f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064f6:	687b      	ldr	r3, [r7, #4]
	}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	20000f9c 	.word	0x20000f9c
 8006508:	20000fb8 	.word	0x20000fb8

0800650c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d058      	beq.n	80065d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006522:	4b2f      	ldr	r3, [pc, #188]	@ (80065e0 <xTaskPriorityDisinherit+0xd4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	429a      	cmp	r2, r3
 800652a:	d00b      	beq.n	8006544 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	e7fd      	b.n	8006540 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60bb      	str	r3, [r7, #8]
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	e7fd      	b.n	8006560 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006568:	1e5a      	subs	r2, r3, #1
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006576:	429a      	cmp	r2, r3
 8006578:	d02c      	beq.n	80065d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800657e:	2b00      	cmp	r3, #0
 8006580:	d128      	bne.n	80065d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	3304      	adds	r3, #4
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe fc26 	bl	8004dd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006598:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a4:	4b0f      	ldr	r3, [pc, #60]	@ (80065e4 <xTaskPriorityDisinherit+0xd8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d903      	bls.n	80065b4 <xTaskPriorityDisinherit+0xa8>
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	4a0c      	ldr	r2, [pc, #48]	@ (80065e4 <xTaskPriorityDisinherit+0xd8>)
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4a09      	ldr	r2, [pc, #36]	@ (80065e8 <xTaskPriorityDisinherit+0xdc>)
 80065c2:	441a      	add	r2, r3
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4619      	mov	r1, r3
 80065ca:	4610      	mov	r0, r2
 80065cc:	f7fe fba7 	bl	8004d1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065d0:	2301      	movs	r3, #1
 80065d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065d4:	697b      	ldr	r3, [r7, #20]
	}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000abc 	.word	0x20000abc
 80065e4:	20000f98 	.word	0x20000f98
 80065e8:	20000ac0 	.word	0x20000ac0

080065ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065f6:	4b21      	ldr	r3, [pc, #132]	@ (800667c <prvAddCurrentTaskToDelayedList+0x90>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065fc:	4b20      	ldr	r3, [pc, #128]	@ (8006680 <prvAddCurrentTaskToDelayedList+0x94>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3304      	adds	r3, #4
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fbe8 	bl	8004dd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d10a      	bne.n	8006626 <prvAddCurrentTaskToDelayedList+0x3a>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006616:	4b1a      	ldr	r3, [pc, #104]	@ (8006680 <prvAddCurrentTaskToDelayedList+0x94>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4819      	ldr	r0, [pc, #100]	@ (8006684 <prvAddCurrentTaskToDelayedList+0x98>)
 8006620:	f7fe fb7d 	bl	8004d1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006624:	e026      	b.n	8006674 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4413      	add	r3, r2
 800662c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800662e:	4b14      	ldr	r3, [pc, #80]	@ (8006680 <prvAddCurrentTaskToDelayedList+0x94>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	d209      	bcs.n	8006652 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800663e:	4b12      	ldr	r3, [pc, #72]	@ (8006688 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b0f      	ldr	r3, [pc, #60]	@ (8006680 <prvAddCurrentTaskToDelayedList+0x94>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f7fe fb8b 	bl	8004d66 <vListInsert>
}
 8006650:	e010      	b.n	8006674 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006652:	4b0e      	ldr	r3, [pc, #56]	@ (800668c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b0a      	ldr	r3, [pc, #40]	@ (8006680 <prvAddCurrentTaskToDelayedList+0x94>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3304      	adds	r3, #4
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f7fe fb81 	bl	8004d66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006664:	4b0a      	ldr	r3, [pc, #40]	@ (8006690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	d202      	bcs.n	8006674 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800666e:	4a08      	ldr	r2, [pc, #32]	@ (8006690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6013      	str	r3, [r2, #0]
}
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000f94 	.word	0x20000f94
 8006680:	20000abc 	.word	0x20000abc
 8006684:	20000f7c 	.word	0x20000f7c
 8006688:	20000f4c 	.word	0x20000f4c
 800668c:	20000f48 	.word	0x20000f48
 8006690:	20000fb0 	.word	0x20000fb0

08006694 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	@ 0x28
 8006698:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800669e:	f000 fb13 	bl	8006cc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006718 <xTimerCreateTimerTask+0x84>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d021      	beq.n	80066ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066b2:	1d3a      	adds	r2, r7, #4
 80066b4:	f107 0108 	add.w	r1, r7, #8
 80066b8:	f107 030c 	add.w	r3, r7, #12
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fe fae7 	bl	8004c90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	9202      	str	r2, [sp, #8]
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	2302      	movs	r3, #2
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	2300      	movs	r3, #0
 80066d2:	460a      	mov	r2, r1
 80066d4:	4911      	ldr	r1, [pc, #68]	@ (800671c <xTimerCreateTimerTask+0x88>)
 80066d6:	4812      	ldr	r0, [pc, #72]	@ (8006720 <xTimerCreateTimerTask+0x8c>)
 80066d8:	f7ff f8a2 	bl	8005820 <xTaskCreateStatic>
 80066dc:	4603      	mov	r3, r0
 80066de:	4a11      	ldr	r2, [pc, #68]	@ (8006724 <xTimerCreateTimerTask+0x90>)
 80066e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066e2:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <xTimerCreateTimerTask+0x90>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066ea:	2301      	movs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	613b      	str	r3, [r7, #16]
}
 8006706:	bf00      	nop
 8006708:	bf00      	nop
 800670a:	e7fd      	b.n	8006708 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800670c:	697b      	ldr	r3, [r7, #20]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000fec 	.word	0x20000fec
 800671c:	0800883c 	.word	0x0800883c
 8006720:	08006861 	.word	0x08006861
 8006724:	20000ff0 	.word	0x20000ff0

08006728 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	@ 0x28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006736:	2300      	movs	r3, #0
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10b      	bne.n	8006758 <xTimerGenericCommand+0x30>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	623b      	str	r3, [r7, #32]
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006758:	4b19      	ldr	r3, [pc, #100]	@ (80067c0 <xTimerGenericCommand+0x98>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d02a      	beq.n	80067b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b05      	cmp	r3, #5
 8006770:	dc18      	bgt.n	80067a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006772:	f7ff fead 	bl	80064d0 <xTaskGetSchedulerState>
 8006776:	4603      	mov	r3, r0
 8006778:	2b02      	cmp	r3, #2
 800677a:	d109      	bne.n	8006790 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800677c:	4b10      	ldr	r3, [pc, #64]	@ (80067c0 <xTimerGenericCommand+0x98>)
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	f107 0110 	add.w	r1, r7, #16
 8006784:	2300      	movs	r3, #0
 8006786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006788:	f7fe fc5a 	bl	8005040 <xQueueGenericSend>
 800678c:	6278      	str	r0, [r7, #36]	@ 0x24
 800678e:	e012      	b.n	80067b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006790:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <xTimerGenericCommand+0x98>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	f107 0110 	add.w	r1, r7, #16
 8006798:	2300      	movs	r3, #0
 800679a:	2200      	movs	r2, #0
 800679c:	f7fe fc50 	bl	8005040 <xQueueGenericSend>
 80067a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80067a2:	e008      	b.n	80067b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067a4:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <xTimerGenericCommand+0x98>)
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	f107 0110 	add.w	r1, r7, #16
 80067ac:	2300      	movs	r3, #0
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	f7fe fd48 	bl	8005244 <xQueueGenericSendFromISR>
 80067b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3728      	adds	r7, #40	@ 0x28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20000fec 	.word	0x20000fec

080067c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ce:	4b23      	ldr	r3, [pc, #140]	@ (800685c <prvProcessExpiredTimer+0x98>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	3304      	adds	r3, #4
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe fafb 	bl	8004dd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d023      	beq.n	8006838 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	18d1      	adds	r1, r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	6978      	ldr	r0, [r7, #20]
 80067fe:	f000 f8d5 	bl	80069ac <prvInsertTimerInActiveList>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d020      	beq.n	800684a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006808:	2300      	movs	r3, #0
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	2300      	movs	r3, #0
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	2100      	movs	r1, #0
 8006812:	6978      	ldr	r0, [r7, #20]
 8006814:	f7ff ff88 	bl	8006728 <xTimerGenericCommand>
 8006818:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d114      	bne.n	800684a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60fb      	str	r3, [r7, #12]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	6978      	ldr	r0, [r7, #20]
 8006850:	4798      	blx	r3
}
 8006852:	bf00      	nop
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000fe4 	.word	0x20000fe4

08006860 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006868:	f107 0308 	add.w	r3, r7, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f000 f859 	bl	8006924 <prvGetNextExpireTime>
 8006872:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4619      	mov	r1, r3
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f805 	bl	8006888 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800687e:	f000 f8d7 	bl	8006a30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006882:	bf00      	nop
 8006884:	e7f0      	b.n	8006868 <prvTimerTask+0x8>
	...

08006888 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006892:	f7ff fa29 	bl	8005ce8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006896:	f107 0308 	add.w	r3, r7, #8
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f866 	bl	800696c <prvSampleTimeNow>
 80068a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d130      	bne.n	800690a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <prvProcessTimerOrBlockTask+0x3c>
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d806      	bhi.n	80068c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068b6:	f7ff fa25 	bl	8005d04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff ff81 	bl	80067c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068c2:	e024      	b.n	800690e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d008      	beq.n	80068dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068ca:	4b13      	ldr	r3, [pc, #76]	@ (8006918 <prvProcessTimerOrBlockTask+0x90>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <prvProcessTimerOrBlockTask+0x50>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <prvProcessTimerOrBlockTask+0x52>
 80068d8:	2300      	movs	r3, #0
 80068da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068dc:	4b0f      	ldr	r3, [pc, #60]	@ (800691c <prvProcessTimerOrBlockTask+0x94>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	4619      	mov	r1, r3
 80068ea:	f7fe ff65 	bl	80057b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068ee:	f7ff fa09 	bl	8005d04 <xTaskResumeAll>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068f8:	4b09      	ldr	r3, [pc, #36]	@ (8006920 <prvProcessTimerOrBlockTask+0x98>)
 80068fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	f3bf 8f6f 	isb	sy
}
 8006908:	e001      	b.n	800690e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800690a:	f7ff f9fb 	bl	8005d04 <xTaskResumeAll>
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20000fe8 	.word	0x20000fe8
 800691c:	20000fec 	.word	0x20000fec
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800692c:	4b0e      	ldr	r3, [pc, #56]	@ (8006968 <prvGetNextExpireTime+0x44>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <prvGetNextExpireTime+0x16>
 8006936:	2201      	movs	r2, #1
 8006938:	e000      	b.n	800693c <prvGetNextExpireTime+0x18>
 800693a:	2200      	movs	r2, #0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006948:	4b07      	ldr	r3, [pc, #28]	@ (8006968 <prvGetNextExpireTime+0x44>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e001      	b.n	8006958 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006958:	68fb      	ldr	r3, [r7, #12]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	20000fe4 	.word	0x20000fe4

0800696c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006974:	f7ff fa64 	bl	8005e40 <xTaskGetTickCount>
 8006978:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800697a:	4b0b      	ldr	r3, [pc, #44]	@ (80069a8 <prvSampleTimeNow+0x3c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	429a      	cmp	r2, r3
 8006982:	d205      	bcs.n	8006990 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006984:	f000 f93a 	bl	8006bfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	e002      	b.n	8006996 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006996:	4a04      	ldr	r2, [pc, #16]	@ (80069a8 <prvSampleTimeNow+0x3c>)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800699c:	68fb      	ldr	r3, [r7, #12]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000ff4 	.word	0x20000ff4

080069ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d812      	bhi.n	80069f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d302      	bcc.n	80069e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069e0:	2301      	movs	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	e01b      	b.n	8006a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069e6:	4b10      	ldr	r3, [pc, #64]	@ (8006a28 <prvInsertTimerInActiveList+0x7c>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3304      	adds	r3, #4
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f7fe f9b8 	bl	8004d66 <vListInsert>
 80069f6:	e012      	b.n	8006a1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d206      	bcs.n	8006a0e <prvInsertTimerInActiveList+0x62>
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d302      	bcc.n	8006a0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	e007      	b.n	8006a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a0e:	4b07      	ldr	r3, [pc, #28]	@ (8006a2c <prvInsertTimerInActiveList+0x80>)
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f7fe f9a4 	bl	8004d66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a1e:	697b      	ldr	r3, [r7, #20]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000fe8 	.word	0x20000fe8
 8006a2c:	20000fe4 	.word	0x20000fe4

08006a30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08e      	sub	sp, #56	@ 0x38
 8006a34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a36:	e0ce      	b.n	8006bd6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	da19      	bge.n	8006a72 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a3e:	1d3b      	adds	r3, r7, #4
 8006a40:	3304      	adds	r3, #4
 8006a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	61fb      	str	r3, [r7, #28]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a68:	6850      	ldr	r0, [r2, #4]
 8006a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a6c:	6892      	ldr	r2, [r2, #8]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f2c0 80ae 	blt.w	8006bd6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d004      	beq.n	8006a90 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe f9a4 	bl	8004dd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a90:	463b      	mov	r3, r7
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff ff6a 	bl	800696c <prvSampleTimeNow>
 8006a98:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b09      	cmp	r3, #9
 8006a9e:	f200 8097 	bhi.w	8006bd0 <prvProcessReceivedCommands+0x1a0>
 8006aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <prvProcessReceivedCommands+0x78>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006ad1 	.word	0x08006ad1
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006ad1 	.word	0x08006ad1
 8006ab4:	08006b47 	.word	0x08006b47
 8006ab8:	08006b5b 	.word	0x08006b5b
 8006abc:	08006ba7 	.word	0x08006ba7
 8006ac0:	08006ad1 	.word	0x08006ad1
 8006ac4:	08006ad1 	.word	0x08006ad1
 8006ac8:	08006b47 	.word	0x08006b47
 8006acc:	08006b5b 	.word	0x08006b5b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ade:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	18d1      	adds	r1, r2, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af0:	f7ff ff5c 	bl	80069ac <prvInsertTimerInActiveList>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d06c      	beq.n	8006bd4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d061      	beq.n	8006bd4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	441a      	add	r2, r3
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2100      	movs	r1, #0
 8006b20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b22:	f7ff fe01 	bl	8006728 <xTimerGenericCommand>
 8006b26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d152      	bne.n	8006bd4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	61bb      	str	r3, [r7, #24]
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	e7fd      	b.n	8006b42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b58:	e03d      	b.n	8006bd6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	617b      	str	r3, [r7, #20]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	18d1      	adds	r1, r2, r3
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ba0:	f7ff ff04 	bl	80069ac <prvInsertTimerInActiveList>
					break;
 8006ba4:	e017      	b.n	8006bd6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bb6:	f000 fbe7 	bl	8007388 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bba:	e00c      	b.n	8006bd6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bc2:	f023 0301 	bic.w	r3, r3, #1
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006bce:	e002      	b.n	8006bd6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006bd0:	bf00      	nop
 8006bd2:	e000      	b.n	8006bd6 <prvProcessReceivedCommands+0x1a6>
					break;
 8006bd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bd6:	4b08      	ldr	r3, [pc, #32]	@ (8006bf8 <prvProcessReceivedCommands+0x1c8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	1d39      	adds	r1, r7, #4
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fbce 	bl	8005380 <xQueueReceive>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f47f af26 	bne.w	8006a38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006bec:	bf00      	nop
 8006bee:	bf00      	nop
 8006bf0:	3730      	adds	r7, #48	@ 0x30
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000fec 	.word	0x20000fec

08006bfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c02:	e049      	b.n	8006c98 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c04:	4b2e      	ldr	r3, [pc, #184]	@ (8006cc0 <prvSwitchTimerLists+0xc4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006cc0 <prvSwitchTimerLists+0xc4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fe f8db 	bl	8004dd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d02f      	beq.n	8006c98 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4413      	add	r3, r2
 8006c40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d90e      	bls.n	8006c68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c56:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc0 <prvSwitchTimerLists+0xc4>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4610      	mov	r0, r2
 8006c62:	f7fe f880 	bl	8004d66 <vListInsert>
 8006c66:	e017      	b.n	8006c98 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	2100      	movs	r1, #0
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff fd58 	bl	8006728 <xTimerGenericCommand>
 8006c78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10b      	bne.n	8006c98 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	603b      	str	r3, [r7, #0]
}
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	e7fd      	b.n	8006c94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c98:	4b09      	ldr	r3, [pc, #36]	@ (8006cc0 <prvSwitchTimerLists+0xc4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1b0      	bne.n	8006c04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ca2:	4b07      	ldr	r3, [pc, #28]	@ (8006cc0 <prvSwitchTimerLists+0xc4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ca8:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <prvSwitchTimerLists+0xc8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a04      	ldr	r2, [pc, #16]	@ (8006cc0 <prvSwitchTimerLists+0xc4>)
 8006cae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006cb0:	4a04      	ldr	r2, [pc, #16]	@ (8006cc4 <prvSwitchTimerLists+0xc8>)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	6013      	str	r3, [r2, #0]
}
 8006cb6:	bf00      	nop
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000fe4 	.word	0x20000fe4
 8006cc4:	20000fe8 	.word	0x20000fe8

08006cc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006cce:	f000 f96b 	bl	8006fa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006cd2:	4b15      	ldr	r3, [pc, #84]	@ (8006d28 <prvCheckForValidListAndQueue+0x60>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d120      	bne.n	8006d1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cda:	4814      	ldr	r0, [pc, #80]	@ (8006d2c <prvCheckForValidListAndQueue+0x64>)
 8006cdc:	f7fd fff2 	bl	8004cc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ce0:	4813      	ldr	r0, [pc, #76]	@ (8006d30 <prvCheckForValidListAndQueue+0x68>)
 8006ce2:	f7fd ffef 	bl	8004cc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ce6:	4b13      	ldr	r3, [pc, #76]	@ (8006d34 <prvCheckForValidListAndQueue+0x6c>)
 8006ce8:	4a10      	ldr	r2, [pc, #64]	@ (8006d2c <prvCheckForValidListAndQueue+0x64>)
 8006cea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006cec:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <prvCheckForValidListAndQueue+0x70>)
 8006cee:	4a10      	ldr	r2, [pc, #64]	@ (8006d30 <prvCheckForValidListAndQueue+0x68>)
 8006cf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	4b11      	ldr	r3, [pc, #68]	@ (8006d3c <prvCheckForValidListAndQueue+0x74>)
 8006cf8:	4a11      	ldr	r2, [pc, #68]	@ (8006d40 <prvCheckForValidListAndQueue+0x78>)
 8006cfa:	2110      	movs	r1, #16
 8006cfc:	200a      	movs	r0, #10
 8006cfe:	f7fe f8ff 	bl	8004f00 <xQueueGenericCreateStatic>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4a08      	ldr	r2, [pc, #32]	@ (8006d28 <prvCheckForValidListAndQueue+0x60>)
 8006d06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d08:	4b07      	ldr	r3, [pc, #28]	@ (8006d28 <prvCheckForValidListAndQueue+0x60>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d10:	4b05      	ldr	r3, [pc, #20]	@ (8006d28 <prvCheckForValidListAndQueue+0x60>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	490b      	ldr	r1, [pc, #44]	@ (8006d44 <prvCheckForValidListAndQueue+0x7c>)
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fd24 	bl	8005764 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d1c:	f000 f976 	bl	800700c <vPortExitCritical>
}
 8006d20:	bf00      	nop
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000fec 	.word	0x20000fec
 8006d2c:	20000fbc 	.word	0x20000fbc
 8006d30:	20000fd0 	.word	0x20000fd0
 8006d34:	20000fe4 	.word	0x20000fe4
 8006d38:	20000fe8 	.word	0x20000fe8
 8006d3c:	20001098 	.word	0x20001098
 8006d40:	20000ff8 	.word	0x20000ff8
 8006d44:	08008844 	.word	0x08008844

08006d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3b04      	subs	r3, #4
 8006d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3b04      	subs	r3, #4
 8006d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f023 0201 	bic.w	r2, r3, #1
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3b04      	subs	r3, #4
 8006d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d78:	4a0c      	ldr	r2, [pc, #48]	@ (8006dac <pxPortInitialiseStack+0x64>)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3b14      	subs	r3, #20
 8006d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3b04      	subs	r3, #4
 8006d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f06f 0202 	mvn.w	r2, #2
 8006d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3b20      	subs	r3, #32
 8006d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	08006db1 	.word	0x08006db1

08006db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dba:	4b13      	ldr	r3, [pc, #76]	@ (8006e08 <prvTaskExitError+0x58>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d00b      	beq.n	8006ddc <prvTaskExitError+0x2c>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60fb      	str	r3, [r7, #12]
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	e7fd      	b.n	8006dd8 <prvTaskExitError+0x28>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	60bb      	str	r3, [r7, #8]
}
 8006dee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006df0:	bf00      	nop
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0fc      	beq.n	8006df2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	20000014 	.word	0x20000014
 8006e0c:	00000000 	.word	0x00000000

08006e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e10:	4b07      	ldr	r3, [pc, #28]	@ (8006e30 <pxCurrentTCBConst2>)
 8006e12:	6819      	ldr	r1, [r3, #0]
 8006e14:	6808      	ldr	r0, [r1, #0]
 8006e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1a:	f380 8809 	msr	PSP, r0
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f380 8811 	msr	BASEPRI, r0
 8006e2a:	4770      	bx	lr
 8006e2c:	f3af 8000 	nop.w

08006e30 <pxCurrentTCBConst2>:
 8006e30:	20000abc 	.word	0x20000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop

08006e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e38:	4808      	ldr	r0, [pc, #32]	@ (8006e5c <prvPortStartFirstTask+0x24>)
 8006e3a:	6800      	ldr	r0, [r0, #0]
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f380 8808 	msr	MSP, r0
 8006e42:	f04f 0000 	mov.w	r0, #0
 8006e46:	f380 8814 	msr	CONTROL, r0
 8006e4a:	b662      	cpsie	i
 8006e4c:	b661      	cpsie	f
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	df00      	svc	0
 8006e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e5a:	bf00      	nop
 8006e5c:	e000ed08 	.word	0xe000ed08

08006e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e66:	4b47      	ldr	r3, [pc, #284]	@ (8006f84 <xPortStartScheduler+0x124>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a47      	ldr	r2, [pc, #284]	@ (8006f88 <xPortStartScheduler+0x128>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10b      	bne.n	8006e88 <xPortStartScheduler+0x28>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
}
 8006e82:	bf00      	nop
 8006e84:	bf00      	nop
 8006e86:	e7fd      	b.n	8006e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e88:	4b3e      	ldr	r3, [pc, #248]	@ (8006f84 <xPortStartScheduler+0x124>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f8c <xPortStartScheduler+0x12c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d10b      	bne.n	8006eaa <xPortStartScheduler+0x4a>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	613b      	str	r3, [r7, #16]
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop
 8006ea8:	e7fd      	b.n	8006ea6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006eaa:	4b39      	ldr	r3, [pc, #228]	@ (8006f90 <xPortStartScheduler+0x130>)
 8006eac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	22ff      	movs	r2, #255	@ 0xff
 8006eba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	4b31      	ldr	r3, [pc, #196]	@ (8006f94 <xPortStartScheduler+0x134>)
 8006ed0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ed2:	4b31      	ldr	r3, [pc, #196]	@ (8006f98 <xPortStartScheduler+0x138>)
 8006ed4:	2207      	movs	r2, #7
 8006ed6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ed8:	e009      	b.n	8006eee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006eda:	4b2f      	ldr	r3, [pc, #188]	@ (8006f98 <xPortStartScheduler+0x138>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8006f98 <xPortStartScheduler+0x138>)
 8006ee2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef6:	2b80      	cmp	r3, #128	@ 0x80
 8006ef8:	d0ef      	beq.n	8006eda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006efa:	4b27      	ldr	r3, [pc, #156]	@ (8006f98 <xPortStartScheduler+0x138>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f1c3 0307 	rsb	r3, r3, #7
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d00b      	beq.n	8006f1e <xPortStartScheduler+0xbe>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60bb      	str	r3, [r7, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f98 <xPortStartScheduler+0x138>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	4a1c      	ldr	r2, [pc, #112]	@ (8006f98 <xPortStartScheduler+0x138>)
 8006f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f28:	4b1b      	ldr	r3, [pc, #108]	@ (8006f98 <xPortStartScheduler+0x138>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f30:	4a19      	ldr	r2, [pc, #100]	@ (8006f98 <xPortStartScheduler+0x138>)
 8006f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f3c:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <xPortStartScheduler+0x13c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a16      	ldr	r2, [pc, #88]	@ (8006f9c <xPortStartScheduler+0x13c>)
 8006f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f48:	4b14      	ldr	r3, [pc, #80]	@ (8006f9c <xPortStartScheduler+0x13c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a13      	ldr	r2, [pc, #76]	@ (8006f9c <xPortStartScheduler+0x13c>)
 8006f4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f54:	f000 f8da 	bl	800710c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f58:	4b11      	ldr	r3, [pc, #68]	@ (8006fa0 <xPortStartScheduler+0x140>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f5e:	f000 f8f9 	bl	8007154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f62:	4b10      	ldr	r3, [pc, #64]	@ (8006fa4 <xPortStartScheduler+0x144>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a0f      	ldr	r2, [pc, #60]	@ (8006fa4 <xPortStartScheduler+0x144>)
 8006f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006f6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f6e:	f7ff ff63 	bl	8006e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f72:	f7ff f82f 	bl	8005fd4 <vTaskSwitchContext>
	prvTaskExitError();
 8006f76:	f7ff ff1b 	bl	8006db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	e000ed00 	.word	0xe000ed00
 8006f88:	410fc271 	.word	0x410fc271
 8006f8c:	410fc270 	.word	0x410fc270
 8006f90:	e000e400 	.word	0xe000e400
 8006f94:	200010e8 	.word	0x200010e8
 8006f98:	200010ec 	.word	0x200010ec
 8006f9c:	e000ed20 	.word	0xe000ed20
 8006fa0:	20000014 	.word	0x20000014
 8006fa4:	e000ef34 	.word	0xe000ef34

08006fa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	607b      	str	r3, [r7, #4]
}
 8006fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fc2:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <vPortEnterCritical+0x5c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8007004 <vPortEnterCritical+0x5c>)
 8006fca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8007004 <vPortEnterCritical+0x5c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d110      	bne.n	8006ff6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007008 <vPortEnterCritical+0x60>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00b      	beq.n	8006ff6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	603b      	str	r3, [r7, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	e7fd      	b.n	8006ff2 <vPortEnterCritical+0x4a>
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000014 	.word	0x20000014
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007012:	4b12      	ldr	r3, [pc, #72]	@ (800705c <vPortExitCritical+0x50>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10b      	bne.n	8007032 <vPortExitCritical+0x26>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	607b      	str	r3, [r7, #4]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007032:	4b0a      	ldr	r3, [pc, #40]	@ (800705c <vPortExitCritical+0x50>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3b01      	subs	r3, #1
 8007038:	4a08      	ldr	r2, [pc, #32]	@ (800705c <vPortExitCritical+0x50>)
 800703a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800703c:	4b07      	ldr	r3, [pc, #28]	@ (800705c <vPortExitCritical+0x50>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d105      	bne.n	8007050 <vPortExitCritical+0x44>
 8007044:	2300      	movs	r3, #0
 8007046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	f383 8811 	msr	BASEPRI, r3
}
 800704e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000014 	.word	0x20000014

08007060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007060:	f3ef 8009 	mrs	r0, PSP
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	4b15      	ldr	r3, [pc, #84]	@ (80070c0 <pxCurrentTCBConst>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	f01e 0f10 	tst.w	lr, #16
 8007070:	bf08      	it	eq
 8007072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707a:	6010      	str	r0, [r2, #0]
 800707c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007084:	f380 8811 	msr	BASEPRI, r0
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f7fe ffa0 	bl	8005fd4 <vTaskSwitchContext>
 8007094:	f04f 0000 	mov.w	r0, #0
 8007098:	f380 8811 	msr	BASEPRI, r0
 800709c:	bc09      	pop	{r0, r3}
 800709e:	6819      	ldr	r1, [r3, #0]
 80070a0:	6808      	ldr	r0, [r1, #0]
 80070a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a6:	f01e 0f10 	tst.w	lr, #16
 80070aa:	bf08      	it	eq
 80070ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070b0:	f380 8809 	msr	PSP, r0
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	f3af 8000 	nop.w

080070c0 <pxCurrentTCBConst>:
 80070c0:	20000abc 	.word	0x20000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop

080070c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	607b      	str	r3, [r7, #4]
}
 80070e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070e2:	f7fe febd 	bl	8005e60 <xTaskIncrementTick>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070ec:	4b06      	ldr	r3, [pc, #24]	@ (8007108 <xPortSysTickHandler+0x40>)
 80070ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	2300      	movs	r3, #0
 80070f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	f383 8811 	msr	BASEPRI, r3
}
 80070fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	e000ed04 	.word	0xe000ed04

0800710c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007110:	4b0b      	ldr	r3, [pc, #44]	@ (8007140 <vPortSetupTimerInterrupt+0x34>)
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007116:	4b0b      	ldr	r3, [pc, #44]	@ (8007144 <vPortSetupTimerInterrupt+0x38>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800711c:	4b0a      	ldr	r3, [pc, #40]	@ (8007148 <vPortSetupTimerInterrupt+0x3c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a0a      	ldr	r2, [pc, #40]	@ (800714c <vPortSetupTimerInterrupt+0x40>)
 8007122:	fba2 2303 	umull	r2, r3, r2, r3
 8007126:	099b      	lsrs	r3, r3, #6
 8007128:	4a09      	ldr	r2, [pc, #36]	@ (8007150 <vPortSetupTimerInterrupt+0x44>)
 800712a:	3b01      	subs	r3, #1
 800712c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800712e:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <vPortSetupTimerInterrupt+0x34>)
 8007130:	2207      	movs	r2, #7
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	bf00      	nop
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	e000e010 	.word	0xe000e010
 8007144:	e000e018 	.word	0xe000e018
 8007148:	20000008 	.word	0x20000008
 800714c:	10624dd3 	.word	0x10624dd3
 8007150:	e000e014 	.word	0xe000e014

08007154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007164 <vPortEnableVFP+0x10>
 8007158:	6801      	ldr	r1, [r0, #0]
 800715a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800715e:	6001      	str	r1, [r0, #0]
 8007160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007162:	bf00      	nop
 8007164:	e000ed88 	.word	0xe000ed88

08007168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800716e:	f3ef 8305 	mrs	r3, IPSR
 8007172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b0f      	cmp	r3, #15
 8007178:	d915      	bls.n	80071a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800717a:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <vPortValidateInterruptPriority+0x74>)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007184:	4b16      	ldr	r3, [pc, #88]	@ (80071e0 <vPortValidateInterruptPriority+0x78>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	7afa      	ldrb	r2, [r7, #11]
 800718a:	429a      	cmp	r2, r3
 800718c:	d20b      	bcs.n	80071a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	607b      	str	r3, [r7, #4]
}
 80071a0:	bf00      	nop
 80071a2:	bf00      	nop
 80071a4:	e7fd      	b.n	80071a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071a6:	4b0f      	ldr	r3, [pc, #60]	@ (80071e4 <vPortValidateInterruptPriority+0x7c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80071ae:	4b0e      	ldr	r3, [pc, #56]	@ (80071e8 <vPortValidateInterruptPriority+0x80>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d90b      	bls.n	80071ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	603b      	str	r3, [r7, #0]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <vPortValidateInterruptPriority+0x62>
	}
 80071ce:	bf00      	nop
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	e000e3f0 	.word	0xe000e3f0
 80071e0:	200010e8 	.word	0x200010e8
 80071e4:	e000ed0c 	.word	0xe000ed0c
 80071e8:	200010ec 	.word	0x200010ec

080071ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	@ 0x28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071f8:	f7fe fd76 	bl	8005ce8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007370 <pvPortMalloc+0x184>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007204:	f000 f924 	bl	8007450 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007208:	4b5a      	ldr	r3, [pc, #360]	@ (8007374 <pvPortMalloc+0x188>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4013      	ands	r3, r2
 8007210:	2b00      	cmp	r3, #0
 8007212:	f040 8095 	bne.w	8007340 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01e      	beq.n	800725a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800721c:	2208      	movs	r2, #8
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4413      	add	r3, r2
 8007222:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	2b00      	cmp	r3, #0
 800722c:	d015      	beq.n	800725a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f023 0307 	bic.w	r3, r3, #7
 8007234:	3308      	adds	r3, #8
 8007236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00b      	beq.n	800725a <pvPortMalloc+0x6e>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	617b      	str	r3, [r7, #20]
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	e7fd      	b.n	8007256 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d06f      	beq.n	8007340 <pvPortMalloc+0x154>
 8007260:	4b45      	ldr	r3, [pc, #276]	@ (8007378 <pvPortMalloc+0x18c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d86a      	bhi.n	8007340 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800726a:	4b44      	ldr	r3, [pc, #272]	@ (800737c <pvPortMalloc+0x190>)
 800726c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800726e:	4b43      	ldr	r3, [pc, #268]	@ (800737c <pvPortMalloc+0x190>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007274:	e004      	b.n	8007280 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	429a      	cmp	r2, r3
 8007288:	d903      	bls.n	8007292 <pvPortMalloc+0xa6>
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f1      	bne.n	8007276 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007292:	4b37      	ldr	r3, [pc, #220]	@ (8007370 <pvPortMalloc+0x184>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007298:	429a      	cmp	r2, r3
 800729a:	d051      	beq.n	8007340 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2208      	movs	r2, #8
 80072a2:	4413      	add	r3, r2
 80072a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	1ad2      	subs	r2, r2, r3
 80072b6:	2308      	movs	r3, #8
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d920      	bls.n	8007300 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4413      	add	r3, r2
 80072c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00b      	beq.n	80072e8 <pvPortMalloc+0xfc>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	613b      	str	r3, [r7, #16]
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	1ad2      	subs	r2, r2, r3
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072fa:	69b8      	ldr	r0, [r7, #24]
 80072fc:	f000 f90a 	bl	8007514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007300:	4b1d      	ldr	r3, [pc, #116]	@ (8007378 <pvPortMalloc+0x18c>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	4a1b      	ldr	r2, [pc, #108]	@ (8007378 <pvPortMalloc+0x18c>)
 800730c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800730e:	4b1a      	ldr	r3, [pc, #104]	@ (8007378 <pvPortMalloc+0x18c>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b1b      	ldr	r3, [pc, #108]	@ (8007380 <pvPortMalloc+0x194>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d203      	bcs.n	8007322 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800731a:	4b17      	ldr	r3, [pc, #92]	@ (8007378 <pvPortMalloc+0x18c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a18      	ldr	r2, [pc, #96]	@ (8007380 <pvPortMalloc+0x194>)
 8007320:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	4b13      	ldr	r3, [pc, #76]	@ (8007374 <pvPortMalloc+0x188>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	431a      	orrs	r2, r3
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007336:	4b13      	ldr	r3, [pc, #76]	@ (8007384 <pvPortMalloc+0x198>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3301      	adds	r3, #1
 800733c:	4a11      	ldr	r2, [pc, #68]	@ (8007384 <pvPortMalloc+0x198>)
 800733e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007340:	f7fe fce0 	bl	8005d04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <pvPortMalloc+0x17a>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60fb      	str	r3, [r7, #12]
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	e7fd      	b.n	8007362 <pvPortMalloc+0x176>
	return pvReturn;
 8007366:	69fb      	ldr	r3, [r7, #28]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3728      	adds	r7, #40	@ 0x28
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20004cf8 	.word	0x20004cf8
 8007374:	20004d0c 	.word	0x20004d0c
 8007378:	20004cfc 	.word	0x20004cfc
 800737c:	20004cf0 	.word	0x20004cf0
 8007380:	20004d00 	.word	0x20004d00
 8007384:	20004d04 	.word	0x20004d04

08007388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d04f      	beq.n	800743a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800739a:	2308      	movs	r3, #8
 800739c:	425b      	negs	r3, r3
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4413      	add	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	4b25      	ldr	r3, [pc, #148]	@ (8007444 <vPortFree+0xbc>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10b      	bne.n	80073ce <vPortFree+0x46>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	60fb      	str	r3, [r7, #12]
}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop
 80073cc:	e7fd      	b.n	80073ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <vPortFree+0x66>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	60bb      	str	r3, [r7, #8]
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	e7fd      	b.n	80073ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	4b14      	ldr	r3, [pc, #80]	@ (8007444 <vPortFree+0xbc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01e      	beq.n	800743a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d11a      	bne.n	800743a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	4b0e      	ldr	r3, [pc, #56]	@ (8007444 <vPortFree+0xbc>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	43db      	mvns	r3, r3
 800740e:	401a      	ands	r2, r3
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007414:	f7fe fc68 	bl	8005ce8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	4b0a      	ldr	r3, [pc, #40]	@ (8007448 <vPortFree+0xc0>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4413      	add	r3, r2
 8007422:	4a09      	ldr	r2, [pc, #36]	@ (8007448 <vPortFree+0xc0>)
 8007424:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007426:	6938      	ldr	r0, [r7, #16]
 8007428:	f000 f874 	bl	8007514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800742c:	4b07      	ldr	r3, [pc, #28]	@ (800744c <vPortFree+0xc4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3301      	adds	r3, #1
 8007432:	4a06      	ldr	r2, [pc, #24]	@ (800744c <vPortFree+0xc4>)
 8007434:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007436:	f7fe fc65 	bl	8005d04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800743a:	bf00      	nop
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20004d0c 	.word	0x20004d0c
 8007448:	20004cfc 	.word	0x20004cfc
 800744c:	20004d08 	.word	0x20004d08

08007450 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007456:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800745a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800745c:	4b27      	ldr	r3, [pc, #156]	@ (80074fc <prvHeapInit+0xac>)
 800745e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00c      	beq.n	8007484 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3307      	adds	r3, #7
 800746e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0307 	bic.w	r3, r3, #7
 8007476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	4a1f      	ldr	r2, [pc, #124]	@ (80074fc <prvHeapInit+0xac>)
 8007480:	4413      	add	r3, r2
 8007482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007488:	4a1d      	ldr	r2, [pc, #116]	@ (8007500 <prvHeapInit+0xb0>)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800748e:	4b1c      	ldr	r3, [pc, #112]	@ (8007500 <prvHeapInit+0xb0>)
 8007490:	2200      	movs	r2, #0
 8007492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	4413      	add	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800749c:	2208      	movs	r2, #8
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1a9b      	subs	r3, r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0307 	bic.w	r3, r3, #7
 80074aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4a15      	ldr	r2, [pc, #84]	@ (8007504 <prvHeapInit+0xb4>)
 80074b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074b2:	4b14      	ldr	r3, [pc, #80]	@ (8007504 <prvHeapInit+0xb4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2200      	movs	r2, #0
 80074b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074ba:	4b12      	ldr	r3, [pc, #72]	@ (8007504 <prvHeapInit+0xb4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007504 <prvHeapInit+0xb4>)
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007508 <prvHeapInit+0xb8>)
 80074de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	4a09      	ldr	r2, [pc, #36]	@ (800750c <prvHeapInit+0xbc>)
 80074e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074e8:	4b09      	ldr	r3, [pc, #36]	@ (8007510 <prvHeapInit+0xc0>)
 80074ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80074ee:	601a      	str	r2, [r3, #0]
}
 80074f0:	bf00      	nop
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	200010f0 	.word	0x200010f0
 8007500:	20004cf0 	.word	0x20004cf0
 8007504:	20004cf8 	.word	0x20004cf8
 8007508:	20004d00 	.word	0x20004d00
 800750c:	20004cfc 	.word	0x20004cfc
 8007510:	20004d0c 	.word	0x20004d0c

08007514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800751c:	4b28      	ldr	r3, [pc, #160]	@ (80075c0 <prvInsertBlockIntoFreeList+0xac>)
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e002      	b.n	8007528 <prvInsertBlockIntoFreeList+0x14>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	429a      	cmp	r2, r3
 8007530:	d8f7      	bhi.n	8007522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	4413      	add	r3, r2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	429a      	cmp	r2, r3
 8007542:	d108      	bne.n	8007556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	441a      	add	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	441a      	add	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	429a      	cmp	r2, r3
 8007568:	d118      	bne.n	800759c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b15      	ldr	r3, [pc, #84]	@ (80075c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d00d      	beq.n	8007592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	441a      	add	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	e008      	b.n	80075a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007592:	4b0c      	ldr	r3, [pc, #48]	@ (80075c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	e003      	b.n	80075a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d002      	beq.n	80075b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20004cf0 	.word	0x20004cf0
 80075c4:	20004cf8 	.word	0x20004cf8

080075c8 <atoi>:
 80075c8:	220a      	movs	r2, #10
 80075ca:	2100      	movs	r1, #0
 80075cc:	f000 b87a 	b.w	80076c4 <strtol>

080075d0 <_strtol_l.isra.0>:
 80075d0:	2b24      	cmp	r3, #36	@ 0x24
 80075d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d6:	4686      	mov	lr, r0
 80075d8:	4690      	mov	r8, r2
 80075da:	d801      	bhi.n	80075e0 <_strtol_l.isra.0+0x10>
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d106      	bne.n	80075ee <_strtol_l.isra.0+0x1e>
 80075e0:	f000 fa96 	bl	8007b10 <__errno>
 80075e4:	2316      	movs	r3, #22
 80075e6:	6003      	str	r3, [r0, #0]
 80075e8:	2000      	movs	r0, #0
 80075ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ee:	4834      	ldr	r0, [pc, #208]	@ (80076c0 <_strtol_l.isra.0+0xf0>)
 80075f0:	460d      	mov	r5, r1
 80075f2:	462a      	mov	r2, r5
 80075f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075f8:	5d06      	ldrb	r6, [r0, r4]
 80075fa:	f016 0608 	ands.w	r6, r6, #8
 80075fe:	d1f8      	bne.n	80075f2 <_strtol_l.isra.0+0x22>
 8007600:	2c2d      	cmp	r4, #45	@ 0x2d
 8007602:	d110      	bne.n	8007626 <_strtol_l.isra.0+0x56>
 8007604:	782c      	ldrb	r4, [r5, #0]
 8007606:	2601      	movs	r6, #1
 8007608:	1c95      	adds	r5, r2, #2
 800760a:	f033 0210 	bics.w	r2, r3, #16
 800760e:	d115      	bne.n	800763c <_strtol_l.isra.0+0x6c>
 8007610:	2c30      	cmp	r4, #48	@ 0x30
 8007612:	d10d      	bne.n	8007630 <_strtol_l.isra.0+0x60>
 8007614:	782a      	ldrb	r2, [r5, #0]
 8007616:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800761a:	2a58      	cmp	r2, #88	@ 0x58
 800761c:	d108      	bne.n	8007630 <_strtol_l.isra.0+0x60>
 800761e:	786c      	ldrb	r4, [r5, #1]
 8007620:	3502      	adds	r5, #2
 8007622:	2310      	movs	r3, #16
 8007624:	e00a      	b.n	800763c <_strtol_l.isra.0+0x6c>
 8007626:	2c2b      	cmp	r4, #43	@ 0x2b
 8007628:	bf04      	itt	eq
 800762a:	782c      	ldrbeq	r4, [r5, #0]
 800762c:	1c95      	addeq	r5, r2, #2
 800762e:	e7ec      	b.n	800760a <_strtol_l.isra.0+0x3a>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f6      	bne.n	8007622 <_strtol_l.isra.0+0x52>
 8007634:	2c30      	cmp	r4, #48	@ 0x30
 8007636:	bf14      	ite	ne
 8007638:	230a      	movne	r3, #10
 800763a:	2308      	moveq	r3, #8
 800763c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007640:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007644:	2200      	movs	r2, #0
 8007646:	fbbc f9f3 	udiv	r9, ip, r3
 800764a:	4610      	mov	r0, r2
 800764c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007650:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007654:	2f09      	cmp	r7, #9
 8007656:	d80f      	bhi.n	8007678 <_strtol_l.isra.0+0xa8>
 8007658:	463c      	mov	r4, r7
 800765a:	42a3      	cmp	r3, r4
 800765c:	dd1b      	ble.n	8007696 <_strtol_l.isra.0+0xc6>
 800765e:	1c57      	adds	r7, r2, #1
 8007660:	d007      	beq.n	8007672 <_strtol_l.isra.0+0xa2>
 8007662:	4581      	cmp	r9, r0
 8007664:	d314      	bcc.n	8007690 <_strtol_l.isra.0+0xc0>
 8007666:	d101      	bne.n	800766c <_strtol_l.isra.0+0x9c>
 8007668:	45a2      	cmp	sl, r4
 800766a:	db11      	blt.n	8007690 <_strtol_l.isra.0+0xc0>
 800766c:	fb00 4003 	mla	r0, r0, r3, r4
 8007670:	2201      	movs	r2, #1
 8007672:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007676:	e7eb      	b.n	8007650 <_strtol_l.isra.0+0x80>
 8007678:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800767c:	2f19      	cmp	r7, #25
 800767e:	d801      	bhi.n	8007684 <_strtol_l.isra.0+0xb4>
 8007680:	3c37      	subs	r4, #55	@ 0x37
 8007682:	e7ea      	b.n	800765a <_strtol_l.isra.0+0x8a>
 8007684:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007688:	2f19      	cmp	r7, #25
 800768a:	d804      	bhi.n	8007696 <_strtol_l.isra.0+0xc6>
 800768c:	3c57      	subs	r4, #87	@ 0x57
 800768e:	e7e4      	b.n	800765a <_strtol_l.isra.0+0x8a>
 8007690:	f04f 32ff 	mov.w	r2, #4294967295
 8007694:	e7ed      	b.n	8007672 <_strtol_l.isra.0+0xa2>
 8007696:	1c53      	adds	r3, r2, #1
 8007698:	d108      	bne.n	80076ac <_strtol_l.isra.0+0xdc>
 800769a:	2322      	movs	r3, #34	@ 0x22
 800769c:	f8ce 3000 	str.w	r3, [lr]
 80076a0:	4660      	mov	r0, ip
 80076a2:	f1b8 0f00 	cmp.w	r8, #0
 80076a6:	d0a0      	beq.n	80075ea <_strtol_l.isra.0+0x1a>
 80076a8:	1e69      	subs	r1, r5, #1
 80076aa:	e006      	b.n	80076ba <_strtol_l.isra.0+0xea>
 80076ac:	b106      	cbz	r6, 80076b0 <_strtol_l.isra.0+0xe0>
 80076ae:	4240      	negs	r0, r0
 80076b0:	f1b8 0f00 	cmp.w	r8, #0
 80076b4:	d099      	beq.n	80075ea <_strtol_l.isra.0+0x1a>
 80076b6:	2a00      	cmp	r2, #0
 80076b8:	d1f6      	bne.n	80076a8 <_strtol_l.isra.0+0xd8>
 80076ba:	f8c8 1000 	str.w	r1, [r8]
 80076be:	e794      	b.n	80075ea <_strtol_l.isra.0+0x1a>
 80076c0:	080088d1 	.word	0x080088d1

080076c4 <strtol>:
 80076c4:	4613      	mov	r3, r2
 80076c6:	460a      	mov	r2, r1
 80076c8:	4601      	mov	r1, r0
 80076ca:	4802      	ldr	r0, [pc, #8]	@ (80076d4 <strtol+0x10>)
 80076cc:	6800      	ldr	r0, [r0, #0]
 80076ce:	f7ff bf7f 	b.w	80075d0 <_strtol_l.isra.0>
 80076d2:	bf00      	nop
 80076d4:	20000024 	.word	0x20000024

080076d8 <std>:
 80076d8:	2300      	movs	r3, #0
 80076da:	b510      	push	{r4, lr}
 80076dc:	4604      	mov	r4, r0
 80076de:	e9c0 3300 	strd	r3, r3, [r0]
 80076e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076e6:	6083      	str	r3, [r0, #8]
 80076e8:	8181      	strh	r1, [r0, #12]
 80076ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80076ec:	81c2      	strh	r2, [r0, #14]
 80076ee:	6183      	str	r3, [r0, #24]
 80076f0:	4619      	mov	r1, r3
 80076f2:	2208      	movs	r2, #8
 80076f4:	305c      	adds	r0, #92	@ 0x5c
 80076f6:	f000 f8f4 	bl	80078e2 <memset>
 80076fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007730 <std+0x58>)
 80076fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80076fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <std+0x5c>)
 8007700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007702:	4b0d      	ldr	r3, [pc, #52]	@ (8007738 <std+0x60>)
 8007704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007706:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <std+0x64>)
 8007708:	6323      	str	r3, [r4, #48]	@ 0x30
 800770a:	4b0d      	ldr	r3, [pc, #52]	@ (8007740 <std+0x68>)
 800770c:	6224      	str	r4, [r4, #32]
 800770e:	429c      	cmp	r4, r3
 8007710:	d006      	beq.n	8007720 <std+0x48>
 8007712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007716:	4294      	cmp	r4, r2
 8007718:	d002      	beq.n	8007720 <std+0x48>
 800771a:	33d0      	adds	r3, #208	@ 0xd0
 800771c:	429c      	cmp	r4, r3
 800771e:	d105      	bne.n	800772c <std+0x54>
 8007720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007728:	f000 ba1c 	b.w	8007b64 <__retarget_lock_init_recursive>
 800772c:	bd10      	pop	{r4, pc}
 800772e:	bf00      	nop
 8007730:	0800785d 	.word	0x0800785d
 8007734:	0800787f 	.word	0x0800787f
 8007738:	080078b7 	.word	0x080078b7
 800773c:	080078db 	.word	0x080078db
 8007740:	20004d10 	.word	0x20004d10

08007744 <stdio_exit_handler>:
 8007744:	4a02      	ldr	r2, [pc, #8]	@ (8007750 <stdio_exit_handler+0xc>)
 8007746:	4903      	ldr	r1, [pc, #12]	@ (8007754 <stdio_exit_handler+0x10>)
 8007748:	4803      	ldr	r0, [pc, #12]	@ (8007758 <stdio_exit_handler+0x14>)
 800774a:	f000 b869 	b.w	8007820 <_fwalk_sglue>
 800774e:	bf00      	nop
 8007750:	20000018 	.word	0x20000018
 8007754:	08007edd 	.word	0x08007edd
 8007758:	20000028 	.word	0x20000028

0800775c <cleanup_stdio>:
 800775c:	6841      	ldr	r1, [r0, #4]
 800775e:	4b0c      	ldr	r3, [pc, #48]	@ (8007790 <cleanup_stdio+0x34>)
 8007760:	4299      	cmp	r1, r3
 8007762:	b510      	push	{r4, lr}
 8007764:	4604      	mov	r4, r0
 8007766:	d001      	beq.n	800776c <cleanup_stdio+0x10>
 8007768:	f000 fbb8 	bl	8007edc <_fflush_r>
 800776c:	68a1      	ldr	r1, [r4, #8]
 800776e:	4b09      	ldr	r3, [pc, #36]	@ (8007794 <cleanup_stdio+0x38>)
 8007770:	4299      	cmp	r1, r3
 8007772:	d002      	beq.n	800777a <cleanup_stdio+0x1e>
 8007774:	4620      	mov	r0, r4
 8007776:	f000 fbb1 	bl	8007edc <_fflush_r>
 800777a:	68e1      	ldr	r1, [r4, #12]
 800777c:	4b06      	ldr	r3, [pc, #24]	@ (8007798 <cleanup_stdio+0x3c>)
 800777e:	4299      	cmp	r1, r3
 8007780:	d004      	beq.n	800778c <cleanup_stdio+0x30>
 8007782:	4620      	mov	r0, r4
 8007784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007788:	f000 bba8 	b.w	8007edc <_fflush_r>
 800778c:	bd10      	pop	{r4, pc}
 800778e:	bf00      	nop
 8007790:	20004d10 	.word	0x20004d10
 8007794:	20004d78 	.word	0x20004d78
 8007798:	20004de0 	.word	0x20004de0

0800779c <global_stdio_init.part.0>:
 800779c:	b510      	push	{r4, lr}
 800779e:	4b0b      	ldr	r3, [pc, #44]	@ (80077cc <global_stdio_init.part.0+0x30>)
 80077a0:	4c0b      	ldr	r4, [pc, #44]	@ (80077d0 <global_stdio_init.part.0+0x34>)
 80077a2:	4a0c      	ldr	r2, [pc, #48]	@ (80077d4 <global_stdio_init.part.0+0x38>)
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	4620      	mov	r0, r4
 80077a8:	2200      	movs	r2, #0
 80077aa:	2104      	movs	r1, #4
 80077ac:	f7ff ff94 	bl	80076d8 <std>
 80077b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077b4:	2201      	movs	r2, #1
 80077b6:	2109      	movs	r1, #9
 80077b8:	f7ff ff8e 	bl	80076d8 <std>
 80077bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077c0:	2202      	movs	r2, #2
 80077c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c6:	2112      	movs	r1, #18
 80077c8:	f7ff bf86 	b.w	80076d8 <std>
 80077cc:	20004e48 	.word	0x20004e48
 80077d0:	20004d10 	.word	0x20004d10
 80077d4:	08007745 	.word	0x08007745

080077d8 <__sfp_lock_acquire>:
 80077d8:	4801      	ldr	r0, [pc, #4]	@ (80077e0 <__sfp_lock_acquire+0x8>)
 80077da:	f000 b9c4 	b.w	8007b66 <__retarget_lock_acquire_recursive>
 80077de:	bf00      	nop
 80077e0:	20004e51 	.word	0x20004e51

080077e4 <__sfp_lock_release>:
 80077e4:	4801      	ldr	r0, [pc, #4]	@ (80077ec <__sfp_lock_release+0x8>)
 80077e6:	f000 b9bf 	b.w	8007b68 <__retarget_lock_release_recursive>
 80077ea:	bf00      	nop
 80077ec:	20004e51 	.word	0x20004e51

080077f0 <__sinit>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4604      	mov	r4, r0
 80077f4:	f7ff fff0 	bl	80077d8 <__sfp_lock_acquire>
 80077f8:	6a23      	ldr	r3, [r4, #32]
 80077fa:	b11b      	cbz	r3, 8007804 <__sinit+0x14>
 80077fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007800:	f7ff bff0 	b.w	80077e4 <__sfp_lock_release>
 8007804:	4b04      	ldr	r3, [pc, #16]	@ (8007818 <__sinit+0x28>)
 8007806:	6223      	str	r3, [r4, #32]
 8007808:	4b04      	ldr	r3, [pc, #16]	@ (800781c <__sinit+0x2c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f5      	bne.n	80077fc <__sinit+0xc>
 8007810:	f7ff ffc4 	bl	800779c <global_stdio_init.part.0>
 8007814:	e7f2      	b.n	80077fc <__sinit+0xc>
 8007816:	bf00      	nop
 8007818:	0800775d 	.word	0x0800775d
 800781c:	20004e48 	.word	0x20004e48

08007820 <_fwalk_sglue>:
 8007820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007824:	4607      	mov	r7, r0
 8007826:	4688      	mov	r8, r1
 8007828:	4614      	mov	r4, r2
 800782a:	2600      	movs	r6, #0
 800782c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007830:	f1b9 0901 	subs.w	r9, r9, #1
 8007834:	d505      	bpl.n	8007842 <_fwalk_sglue+0x22>
 8007836:	6824      	ldr	r4, [r4, #0]
 8007838:	2c00      	cmp	r4, #0
 800783a:	d1f7      	bne.n	800782c <_fwalk_sglue+0xc>
 800783c:	4630      	mov	r0, r6
 800783e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007842:	89ab      	ldrh	r3, [r5, #12]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d907      	bls.n	8007858 <_fwalk_sglue+0x38>
 8007848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800784c:	3301      	adds	r3, #1
 800784e:	d003      	beq.n	8007858 <_fwalk_sglue+0x38>
 8007850:	4629      	mov	r1, r5
 8007852:	4638      	mov	r0, r7
 8007854:	47c0      	blx	r8
 8007856:	4306      	orrs	r6, r0
 8007858:	3568      	adds	r5, #104	@ 0x68
 800785a:	e7e9      	b.n	8007830 <_fwalk_sglue+0x10>

0800785c <__sread>:
 800785c:	b510      	push	{r4, lr}
 800785e:	460c      	mov	r4, r1
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	f000 f930 	bl	8007ac8 <_read_r>
 8007868:	2800      	cmp	r0, #0
 800786a:	bfab      	itete	ge
 800786c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800786e:	89a3      	ldrhlt	r3, [r4, #12]
 8007870:	181b      	addge	r3, r3, r0
 8007872:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007876:	bfac      	ite	ge
 8007878:	6563      	strge	r3, [r4, #84]	@ 0x54
 800787a:	81a3      	strhlt	r3, [r4, #12]
 800787c:	bd10      	pop	{r4, pc}

0800787e <__swrite>:
 800787e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007882:	461f      	mov	r7, r3
 8007884:	898b      	ldrh	r3, [r1, #12]
 8007886:	05db      	lsls	r3, r3, #23
 8007888:	4605      	mov	r5, r0
 800788a:	460c      	mov	r4, r1
 800788c:	4616      	mov	r6, r2
 800788e:	d505      	bpl.n	800789c <__swrite+0x1e>
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	2302      	movs	r3, #2
 8007896:	2200      	movs	r2, #0
 8007898:	f000 f904 	bl	8007aa4 <_lseek_r>
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	4628      	mov	r0, r5
 80078ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b2:	f000 b91b 	b.w	8007aec <_write_r>

080078b6 <__sseek>:
 80078b6:	b510      	push	{r4, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078be:	f000 f8f1 	bl	8007aa4 <_lseek_r>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	bf15      	itete	ne
 80078c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078d2:	81a3      	strheq	r3, [r4, #12]
 80078d4:	bf18      	it	ne
 80078d6:	81a3      	strhne	r3, [r4, #12]
 80078d8:	bd10      	pop	{r4, pc}

080078da <__sclose>:
 80078da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078de:	f000 b873 	b.w	80079c8 <_close_r>

080078e2 <memset>:
 80078e2:	4402      	add	r2, r0
 80078e4:	4603      	mov	r3, r0
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d100      	bne.n	80078ec <memset+0xa>
 80078ea:	4770      	bx	lr
 80078ec:	f803 1b01 	strb.w	r1, [r3], #1
 80078f0:	e7f9      	b.n	80078e6 <memset+0x4>

080078f2 <strcat>:
 80078f2:	b510      	push	{r4, lr}
 80078f4:	4602      	mov	r2, r0
 80078f6:	7814      	ldrb	r4, [r2, #0]
 80078f8:	4613      	mov	r3, r2
 80078fa:	3201      	adds	r2, #1
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	d1fa      	bne.n	80078f6 <strcat+0x4>
 8007900:	3b01      	subs	r3, #1
 8007902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800790a:	2a00      	cmp	r2, #0
 800790c:	d1f9      	bne.n	8007902 <strcat+0x10>
 800790e:	bd10      	pop	{r4, pc}

08007910 <strtok>:
 8007910:	4b16      	ldr	r3, [pc, #88]	@ (800796c <strtok+0x5c>)
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	681f      	ldr	r7, [r3, #0]
 8007918:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800791a:	4605      	mov	r5, r0
 800791c:	460e      	mov	r6, r1
 800791e:	b9ec      	cbnz	r4, 800795c <strtok+0x4c>
 8007920:	2050      	movs	r0, #80	@ 0x50
 8007922:	f000 f9a1 	bl	8007c68 <malloc>
 8007926:	4602      	mov	r2, r0
 8007928:	6478      	str	r0, [r7, #68]	@ 0x44
 800792a:	b920      	cbnz	r0, 8007936 <strtok+0x26>
 800792c:	4b10      	ldr	r3, [pc, #64]	@ (8007970 <strtok+0x60>)
 800792e:	4811      	ldr	r0, [pc, #68]	@ (8007974 <strtok+0x64>)
 8007930:	215b      	movs	r1, #91	@ 0x5b
 8007932:	f000 f931 	bl	8007b98 <__assert_func>
 8007936:	e9c0 4400 	strd	r4, r4, [r0]
 800793a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800793e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007942:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007946:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800794a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800794e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007952:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007956:	6184      	str	r4, [r0, #24]
 8007958:	7704      	strb	r4, [r0, #28]
 800795a:	6244      	str	r4, [r0, #36]	@ 0x24
 800795c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	2301      	movs	r3, #1
 8007964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007968:	f000 b806 	b.w	8007978 <__strtok_r>
 800796c:	20000024 	.word	0x20000024
 8007970:	080089d1 	.word	0x080089d1
 8007974:	080089e8 	.word	0x080089e8

08007978 <__strtok_r>:
 8007978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800797a:	4604      	mov	r4, r0
 800797c:	b908      	cbnz	r0, 8007982 <__strtok_r+0xa>
 800797e:	6814      	ldr	r4, [r2, #0]
 8007980:	b144      	cbz	r4, 8007994 <__strtok_r+0x1c>
 8007982:	4620      	mov	r0, r4
 8007984:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007988:	460f      	mov	r7, r1
 800798a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800798e:	b91e      	cbnz	r6, 8007998 <__strtok_r+0x20>
 8007990:	b965      	cbnz	r5, 80079ac <__strtok_r+0x34>
 8007992:	6015      	str	r5, [r2, #0]
 8007994:	2000      	movs	r0, #0
 8007996:	e005      	b.n	80079a4 <__strtok_r+0x2c>
 8007998:	42b5      	cmp	r5, r6
 800799a:	d1f6      	bne.n	800798a <__strtok_r+0x12>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f0      	bne.n	8007982 <__strtok_r+0xa>
 80079a0:	6014      	str	r4, [r2, #0]
 80079a2:	7003      	strb	r3, [r0, #0]
 80079a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a6:	461c      	mov	r4, r3
 80079a8:	e00c      	b.n	80079c4 <__strtok_r+0x4c>
 80079aa:	b91d      	cbnz	r5, 80079b4 <__strtok_r+0x3c>
 80079ac:	4627      	mov	r7, r4
 80079ae:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079b2:	460e      	mov	r6, r1
 80079b4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079b8:	42ab      	cmp	r3, r5
 80079ba:	d1f6      	bne.n	80079aa <__strtok_r+0x32>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0f2      	beq.n	80079a6 <__strtok_r+0x2e>
 80079c0:	2300      	movs	r3, #0
 80079c2:	703b      	strb	r3, [r7, #0]
 80079c4:	6014      	str	r4, [r2, #0]
 80079c6:	e7ed      	b.n	80079a4 <__strtok_r+0x2c>

080079c8 <_close_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d06      	ldr	r5, [pc, #24]	@ (80079e4 <_close_r+0x1c>)
 80079cc:	2300      	movs	r3, #0
 80079ce:	4604      	mov	r4, r0
 80079d0:	4608      	mov	r0, r1
 80079d2:	602b      	str	r3, [r5, #0]
 80079d4:	f7f9 ff00 	bl	80017d8 <_close>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d102      	bne.n	80079e2 <_close_r+0x1a>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	b103      	cbz	r3, 80079e2 <_close_r+0x1a>
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	20004e4c 	.word	0x20004e4c

080079e8 <_reclaim_reent>:
 80079e8:	4b2d      	ldr	r3, [pc, #180]	@ (8007aa0 <_reclaim_reent+0xb8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4283      	cmp	r3, r0
 80079ee:	b570      	push	{r4, r5, r6, lr}
 80079f0:	4604      	mov	r4, r0
 80079f2:	d053      	beq.n	8007a9c <_reclaim_reent+0xb4>
 80079f4:	69c3      	ldr	r3, [r0, #28]
 80079f6:	b31b      	cbz	r3, 8007a40 <_reclaim_reent+0x58>
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	b163      	cbz	r3, 8007a16 <_reclaim_reent+0x2e>
 80079fc:	2500      	movs	r5, #0
 80079fe:	69e3      	ldr	r3, [r4, #28]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	5959      	ldr	r1, [r3, r5]
 8007a04:	b9b1      	cbnz	r1, 8007a34 <_reclaim_reent+0x4c>
 8007a06:	3504      	adds	r5, #4
 8007a08:	2d80      	cmp	r5, #128	@ 0x80
 8007a0a:	d1f8      	bne.n	80079fe <_reclaim_reent+0x16>
 8007a0c:	69e3      	ldr	r3, [r4, #28]
 8007a0e:	4620      	mov	r0, r4
 8007a10:	68d9      	ldr	r1, [r3, #12]
 8007a12:	f000 f8df 	bl	8007bd4 <_free_r>
 8007a16:	69e3      	ldr	r3, [r4, #28]
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	b111      	cbz	r1, 8007a22 <_reclaim_reent+0x3a>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 f8d9 	bl	8007bd4 <_free_r>
 8007a22:	69e3      	ldr	r3, [r4, #28]
 8007a24:	689d      	ldr	r5, [r3, #8]
 8007a26:	b15d      	cbz	r5, 8007a40 <_reclaim_reent+0x58>
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	682d      	ldr	r5, [r5, #0]
 8007a2e:	f000 f8d1 	bl	8007bd4 <_free_r>
 8007a32:	e7f8      	b.n	8007a26 <_reclaim_reent+0x3e>
 8007a34:	680e      	ldr	r6, [r1, #0]
 8007a36:	4620      	mov	r0, r4
 8007a38:	f000 f8cc 	bl	8007bd4 <_free_r>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	e7e1      	b.n	8007a04 <_reclaim_reent+0x1c>
 8007a40:	6961      	ldr	r1, [r4, #20]
 8007a42:	b111      	cbz	r1, 8007a4a <_reclaim_reent+0x62>
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 f8c5 	bl	8007bd4 <_free_r>
 8007a4a:	69e1      	ldr	r1, [r4, #28]
 8007a4c:	b111      	cbz	r1, 8007a54 <_reclaim_reent+0x6c>
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f000 f8c0 	bl	8007bd4 <_free_r>
 8007a54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a56:	b111      	cbz	r1, 8007a5e <_reclaim_reent+0x76>
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 f8bb 	bl	8007bd4 <_free_r>
 8007a5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a60:	b111      	cbz	r1, 8007a68 <_reclaim_reent+0x80>
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f8b6 	bl	8007bd4 <_free_r>
 8007a68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a6a:	b111      	cbz	r1, 8007a72 <_reclaim_reent+0x8a>
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 f8b1 	bl	8007bd4 <_free_r>
 8007a72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a74:	b111      	cbz	r1, 8007a7c <_reclaim_reent+0x94>
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 f8ac 	bl	8007bd4 <_free_r>
 8007a7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a7e:	b111      	cbz	r1, 8007a86 <_reclaim_reent+0x9e>
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 f8a7 	bl	8007bd4 <_free_r>
 8007a86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a88:	b111      	cbz	r1, 8007a90 <_reclaim_reent+0xa8>
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 f8a2 	bl	8007bd4 <_free_r>
 8007a90:	6a23      	ldr	r3, [r4, #32]
 8007a92:	b11b      	cbz	r3, 8007a9c <_reclaim_reent+0xb4>
 8007a94:	4620      	mov	r0, r4
 8007a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a9a:	4718      	bx	r3
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000024 	.word	0x20000024

08007aa4 <_lseek_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4d07      	ldr	r5, [pc, #28]	@ (8007ac4 <_lseek_r+0x20>)
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	4608      	mov	r0, r1
 8007aac:	4611      	mov	r1, r2
 8007aae:	2200      	movs	r2, #0
 8007ab0:	602a      	str	r2, [r5, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f7f9 feb7 	bl	8001826 <_lseek>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	d102      	bne.n	8007ac2 <_lseek_r+0x1e>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	b103      	cbz	r3, 8007ac2 <_lseek_r+0x1e>
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	bd38      	pop	{r3, r4, r5, pc}
 8007ac4:	20004e4c 	.word	0x20004e4c

08007ac8 <_read_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d07      	ldr	r5, [pc, #28]	@ (8007ae8 <_read_r+0x20>)
 8007acc:	4604      	mov	r4, r0
 8007ace:	4608      	mov	r0, r1
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	602a      	str	r2, [r5, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f7f9 fe45 	bl	8001766 <_read>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_read_r+0x1e>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_read_r+0x1e>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	20004e4c 	.word	0x20004e4c

08007aec <_write_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d07      	ldr	r5, [pc, #28]	@ (8007b0c <_write_r+0x20>)
 8007af0:	4604      	mov	r4, r0
 8007af2:	4608      	mov	r0, r1
 8007af4:	4611      	mov	r1, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	602a      	str	r2, [r5, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f7f9 fe50 	bl	80017a0 <_write>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_write_r+0x1e>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_write_r+0x1e>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	20004e4c 	.word	0x20004e4c

08007b10 <__errno>:
 8007b10:	4b01      	ldr	r3, [pc, #4]	@ (8007b18 <__errno+0x8>)
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	20000024 	.word	0x20000024

08007b1c <__libc_init_array>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007b54 <__libc_init_array+0x38>)
 8007b20:	4c0d      	ldr	r4, [pc, #52]	@ (8007b58 <__libc_init_array+0x3c>)
 8007b22:	1b64      	subs	r4, r4, r5
 8007b24:	10a4      	asrs	r4, r4, #2
 8007b26:	2600      	movs	r6, #0
 8007b28:	42a6      	cmp	r6, r4
 8007b2a:	d109      	bne.n	8007b40 <__libc_init_array+0x24>
 8007b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b5c <__libc_init_array+0x40>)
 8007b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8007b60 <__libc_init_array+0x44>)
 8007b30:	f000 fe4e 	bl	80087d0 <_init>
 8007b34:	1b64      	subs	r4, r4, r5
 8007b36:	10a4      	asrs	r4, r4, #2
 8007b38:	2600      	movs	r6, #0
 8007b3a:	42a6      	cmp	r6, r4
 8007b3c:	d105      	bne.n	8007b4a <__libc_init_array+0x2e>
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b44:	4798      	blx	r3
 8007b46:	3601      	adds	r6, #1
 8007b48:	e7ee      	b.n	8007b28 <__libc_init_array+0xc>
 8007b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4e:	4798      	blx	r3
 8007b50:	3601      	adds	r6, #1
 8007b52:	e7f2      	b.n	8007b3a <__libc_init_array+0x1e>
 8007b54:	08008abc 	.word	0x08008abc
 8007b58:	08008abc 	.word	0x08008abc
 8007b5c:	08008abc 	.word	0x08008abc
 8007b60:	08008ac0 	.word	0x08008ac0

08007b64 <__retarget_lock_init_recursive>:
 8007b64:	4770      	bx	lr

08007b66 <__retarget_lock_acquire_recursive>:
 8007b66:	4770      	bx	lr

08007b68 <__retarget_lock_release_recursive>:
 8007b68:	4770      	bx	lr

08007b6a <strcpy>:
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b70:	f803 2b01 	strb.w	r2, [r3], #1
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	d1f9      	bne.n	8007b6c <strcpy+0x2>
 8007b78:	4770      	bx	lr

08007b7a <memcpy>:
 8007b7a:	440a      	add	r2, r1
 8007b7c:	4291      	cmp	r1, r2
 8007b7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b82:	d100      	bne.n	8007b86 <memcpy+0xc>
 8007b84:	4770      	bx	lr
 8007b86:	b510      	push	{r4, lr}
 8007b88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b90:	4291      	cmp	r1, r2
 8007b92:	d1f9      	bne.n	8007b88 <memcpy+0xe>
 8007b94:	bd10      	pop	{r4, pc}
	...

08007b98 <__assert_func>:
 8007b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b9a:	4614      	mov	r4, r2
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4b09      	ldr	r3, [pc, #36]	@ (8007bc4 <__assert_func+0x2c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	68d8      	ldr	r0, [r3, #12]
 8007ba6:	b14c      	cbz	r4, 8007bbc <__assert_func+0x24>
 8007ba8:	4b07      	ldr	r3, [pc, #28]	@ (8007bc8 <__assert_func+0x30>)
 8007baa:	9100      	str	r1, [sp, #0]
 8007bac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bb0:	4906      	ldr	r1, [pc, #24]	@ (8007bcc <__assert_func+0x34>)
 8007bb2:	462b      	mov	r3, r5
 8007bb4:	f000 f9ba 	bl	8007f2c <fiprintf>
 8007bb8:	f000 f9da 	bl	8007f70 <abort>
 8007bbc:	4b04      	ldr	r3, [pc, #16]	@ (8007bd0 <__assert_func+0x38>)
 8007bbe:	461c      	mov	r4, r3
 8007bc0:	e7f3      	b.n	8007baa <__assert_func+0x12>
 8007bc2:	bf00      	nop
 8007bc4:	20000024 	.word	0x20000024
 8007bc8:	08008a42 	.word	0x08008a42
 8007bcc:	08008a4f 	.word	0x08008a4f
 8007bd0:	08008a7d 	.word	0x08008a7d

08007bd4 <_free_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	d041      	beq.n	8007c60 <_free_r+0x8c>
 8007bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be0:	1f0c      	subs	r4, r1, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfb8      	it	lt
 8007be6:	18e4      	addlt	r4, r4, r3
 8007be8:	f000 f8e8 	bl	8007dbc <__malloc_lock>
 8007bec:	4a1d      	ldr	r2, [pc, #116]	@ (8007c64 <_free_r+0x90>)
 8007bee:	6813      	ldr	r3, [r2, #0]
 8007bf0:	b933      	cbnz	r3, 8007c00 <_free_r+0x2c>
 8007bf2:	6063      	str	r3, [r4, #4]
 8007bf4:	6014      	str	r4, [r2, #0]
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bfc:	f000 b8e4 	b.w	8007dc8 <__malloc_unlock>
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	d908      	bls.n	8007c16 <_free_r+0x42>
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	1821      	adds	r1, r4, r0
 8007c08:	428b      	cmp	r3, r1
 8007c0a:	bf01      	itttt	eq
 8007c0c:	6819      	ldreq	r1, [r3, #0]
 8007c0e:	685b      	ldreq	r3, [r3, #4]
 8007c10:	1809      	addeq	r1, r1, r0
 8007c12:	6021      	streq	r1, [r4, #0]
 8007c14:	e7ed      	b.n	8007bf2 <_free_r+0x1e>
 8007c16:	461a      	mov	r2, r3
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	b10b      	cbz	r3, 8007c20 <_free_r+0x4c>
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	d9fa      	bls.n	8007c16 <_free_r+0x42>
 8007c20:	6811      	ldr	r1, [r2, #0]
 8007c22:	1850      	adds	r0, r2, r1
 8007c24:	42a0      	cmp	r0, r4
 8007c26:	d10b      	bne.n	8007c40 <_free_r+0x6c>
 8007c28:	6820      	ldr	r0, [r4, #0]
 8007c2a:	4401      	add	r1, r0
 8007c2c:	1850      	adds	r0, r2, r1
 8007c2e:	4283      	cmp	r3, r0
 8007c30:	6011      	str	r1, [r2, #0]
 8007c32:	d1e0      	bne.n	8007bf6 <_free_r+0x22>
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	6053      	str	r3, [r2, #4]
 8007c3a:	4408      	add	r0, r1
 8007c3c:	6010      	str	r0, [r2, #0]
 8007c3e:	e7da      	b.n	8007bf6 <_free_r+0x22>
 8007c40:	d902      	bls.n	8007c48 <_free_r+0x74>
 8007c42:	230c      	movs	r3, #12
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	e7d6      	b.n	8007bf6 <_free_r+0x22>
 8007c48:	6820      	ldr	r0, [r4, #0]
 8007c4a:	1821      	adds	r1, r4, r0
 8007c4c:	428b      	cmp	r3, r1
 8007c4e:	bf04      	itt	eq
 8007c50:	6819      	ldreq	r1, [r3, #0]
 8007c52:	685b      	ldreq	r3, [r3, #4]
 8007c54:	6063      	str	r3, [r4, #4]
 8007c56:	bf04      	itt	eq
 8007c58:	1809      	addeq	r1, r1, r0
 8007c5a:	6021      	streq	r1, [r4, #0]
 8007c5c:	6054      	str	r4, [r2, #4]
 8007c5e:	e7ca      	b.n	8007bf6 <_free_r+0x22>
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	bf00      	nop
 8007c64:	20004e58 	.word	0x20004e58

08007c68 <malloc>:
 8007c68:	4b02      	ldr	r3, [pc, #8]	@ (8007c74 <malloc+0xc>)
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	f000 b825 	b.w	8007cbc <_malloc_r>
 8007c72:	bf00      	nop
 8007c74:	20000024 	.word	0x20000024

08007c78 <sbrk_aligned>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8007cb8 <sbrk_aligned+0x40>)
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	6831      	ldr	r1, [r6, #0]
 8007c80:	4605      	mov	r5, r0
 8007c82:	b911      	cbnz	r1, 8007c8a <sbrk_aligned+0x12>
 8007c84:	f000 f964 	bl	8007f50 <_sbrk_r>
 8007c88:	6030      	str	r0, [r6, #0]
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f000 f95f 	bl	8007f50 <_sbrk_r>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d103      	bne.n	8007c9e <sbrk_aligned+0x26>
 8007c96:	f04f 34ff 	mov.w	r4, #4294967295
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	bd70      	pop	{r4, r5, r6, pc}
 8007c9e:	1cc4      	adds	r4, r0, #3
 8007ca0:	f024 0403 	bic.w	r4, r4, #3
 8007ca4:	42a0      	cmp	r0, r4
 8007ca6:	d0f8      	beq.n	8007c9a <sbrk_aligned+0x22>
 8007ca8:	1a21      	subs	r1, r4, r0
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 f950 	bl	8007f50 <_sbrk_r>
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d1f2      	bne.n	8007c9a <sbrk_aligned+0x22>
 8007cb4:	e7ef      	b.n	8007c96 <sbrk_aligned+0x1e>
 8007cb6:	bf00      	nop
 8007cb8:	20004e54 	.word	0x20004e54

08007cbc <_malloc_r>:
 8007cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc0:	1ccd      	adds	r5, r1, #3
 8007cc2:	f025 0503 	bic.w	r5, r5, #3
 8007cc6:	3508      	adds	r5, #8
 8007cc8:	2d0c      	cmp	r5, #12
 8007cca:	bf38      	it	cc
 8007ccc:	250c      	movcc	r5, #12
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	db01      	blt.n	8007cd8 <_malloc_r+0x1c>
 8007cd4:	42a9      	cmp	r1, r5
 8007cd6:	d904      	bls.n	8007ce2 <_malloc_r+0x26>
 8007cd8:	230c      	movs	r3, #12
 8007cda:	6033      	str	r3, [r6, #0]
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007db8 <_malloc_r+0xfc>
 8007ce6:	f000 f869 	bl	8007dbc <__malloc_lock>
 8007cea:	f8d8 3000 	ldr.w	r3, [r8]
 8007cee:	461c      	mov	r4, r3
 8007cf0:	bb44      	cbnz	r4, 8007d44 <_malloc_r+0x88>
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f7ff ffbf 	bl	8007c78 <sbrk_aligned>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	d158      	bne.n	8007db2 <_malloc_r+0xf6>
 8007d00:	f8d8 4000 	ldr.w	r4, [r8]
 8007d04:	4627      	mov	r7, r4
 8007d06:	2f00      	cmp	r7, #0
 8007d08:	d143      	bne.n	8007d92 <_malloc_r+0xd6>
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	d04b      	beq.n	8007da6 <_malloc_r+0xea>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	4639      	mov	r1, r7
 8007d12:	4630      	mov	r0, r6
 8007d14:	eb04 0903 	add.w	r9, r4, r3
 8007d18:	f000 f91a 	bl	8007f50 <_sbrk_r>
 8007d1c:	4581      	cmp	r9, r0
 8007d1e:	d142      	bne.n	8007da6 <_malloc_r+0xea>
 8007d20:	6821      	ldr	r1, [r4, #0]
 8007d22:	1a6d      	subs	r5, r5, r1
 8007d24:	4629      	mov	r1, r5
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7ff ffa6 	bl	8007c78 <sbrk_aligned>
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d03a      	beq.n	8007da6 <_malloc_r+0xea>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	442b      	add	r3, r5
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	f8d8 3000 	ldr.w	r3, [r8]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	bb62      	cbnz	r2, 8007d98 <_malloc_r+0xdc>
 8007d3e:	f8c8 7000 	str.w	r7, [r8]
 8007d42:	e00f      	b.n	8007d64 <_malloc_r+0xa8>
 8007d44:	6822      	ldr	r2, [r4, #0]
 8007d46:	1b52      	subs	r2, r2, r5
 8007d48:	d420      	bmi.n	8007d8c <_malloc_r+0xd0>
 8007d4a:	2a0b      	cmp	r2, #11
 8007d4c:	d917      	bls.n	8007d7e <_malloc_r+0xc2>
 8007d4e:	1961      	adds	r1, r4, r5
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	6025      	str	r5, [r4, #0]
 8007d54:	bf18      	it	ne
 8007d56:	6059      	strne	r1, [r3, #4]
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	bf08      	it	eq
 8007d5c:	f8c8 1000 	streq.w	r1, [r8]
 8007d60:	5162      	str	r2, [r4, r5]
 8007d62:	604b      	str	r3, [r1, #4]
 8007d64:	4630      	mov	r0, r6
 8007d66:	f000 f82f 	bl	8007dc8 <__malloc_unlock>
 8007d6a:	f104 000b 	add.w	r0, r4, #11
 8007d6e:	1d23      	adds	r3, r4, #4
 8007d70:	f020 0007 	bic.w	r0, r0, #7
 8007d74:	1ac2      	subs	r2, r0, r3
 8007d76:	bf1c      	itt	ne
 8007d78:	1a1b      	subne	r3, r3, r0
 8007d7a:	50a3      	strne	r3, [r4, r2]
 8007d7c:	e7af      	b.n	8007cde <_malloc_r+0x22>
 8007d7e:	6862      	ldr	r2, [r4, #4]
 8007d80:	42a3      	cmp	r3, r4
 8007d82:	bf0c      	ite	eq
 8007d84:	f8c8 2000 	streq.w	r2, [r8]
 8007d88:	605a      	strne	r2, [r3, #4]
 8007d8a:	e7eb      	b.n	8007d64 <_malloc_r+0xa8>
 8007d8c:	4623      	mov	r3, r4
 8007d8e:	6864      	ldr	r4, [r4, #4]
 8007d90:	e7ae      	b.n	8007cf0 <_malloc_r+0x34>
 8007d92:	463c      	mov	r4, r7
 8007d94:	687f      	ldr	r7, [r7, #4]
 8007d96:	e7b6      	b.n	8007d06 <_malloc_r+0x4a>
 8007d98:	461a      	mov	r2, r3
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	d1fb      	bne.n	8007d98 <_malloc_r+0xdc>
 8007da0:	2300      	movs	r3, #0
 8007da2:	6053      	str	r3, [r2, #4]
 8007da4:	e7de      	b.n	8007d64 <_malloc_r+0xa8>
 8007da6:	230c      	movs	r3, #12
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	4630      	mov	r0, r6
 8007dac:	f000 f80c 	bl	8007dc8 <__malloc_unlock>
 8007db0:	e794      	b.n	8007cdc <_malloc_r+0x20>
 8007db2:	6005      	str	r5, [r0, #0]
 8007db4:	e7d6      	b.n	8007d64 <_malloc_r+0xa8>
 8007db6:	bf00      	nop
 8007db8:	20004e58 	.word	0x20004e58

08007dbc <__malloc_lock>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	@ (8007dc4 <__malloc_lock+0x8>)
 8007dbe:	f7ff bed2 	b.w	8007b66 <__retarget_lock_acquire_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	20004e50 	.word	0x20004e50

08007dc8 <__malloc_unlock>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	@ (8007dd0 <__malloc_unlock+0x8>)
 8007dca:	f7ff becd 	b.w	8007b68 <__retarget_lock_release_recursive>
 8007dce:	bf00      	nop
 8007dd0:	20004e50 	.word	0x20004e50

08007dd4 <__sflush_r>:
 8007dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ddc:	0716      	lsls	r6, r2, #28
 8007dde:	4605      	mov	r5, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	d454      	bmi.n	8007e8e <__sflush_r+0xba>
 8007de4:	684b      	ldr	r3, [r1, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dc02      	bgt.n	8007df0 <__sflush_r+0x1c>
 8007dea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	dd48      	ble.n	8007e82 <__sflush_r+0xae>
 8007df0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007df2:	2e00      	cmp	r6, #0
 8007df4:	d045      	beq.n	8007e82 <__sflush_r+0xae>
 8007df6:	2300      	movs	r3, #0
 8007df8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007dfc:	682f      	ldr	r7, [r5, #0]
 8007dfe:	6a21      	ldr	r1, [r4, #32]
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	d030      	beq.n	8007e66 <__sflush_r+0x92>
 8007e04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	0759      	lsls	r1, r3, #29
 8007e0a:	d505      	bpl.n	8007e18 <__sflush_r+0x44>
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e12:	b10b      	cbz	r3, 8007e18 <__sflush_r+0x44>
 8007e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e16:	1ad2      	subs	r2, r2, r3
 8007e18:	2300      	movs	r3, #0
 8007e1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e1c:	6a21      	ldr	r1, [r4, #32]
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47b0      	blx	r6
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	d106      	bne.n	8007e36 <__sflush_r+0x62>
 8007e28:	6829      	ldr	r1, [r5, #0]
 8007e2a:	291d      	cmp	r1, #29
 8007e2c:	d82b      	bhi.n	8007e86 <__sflush_r+0xb2>
 8007e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ed8 <__sflush_r+0x104>)
 8007e30:	40ca      	lsrs	r2, r1
 8007e32:	07d6      	lsls	r6, r2, #31
 8007e34:	d527      	bpl.n	8007e86 <__sflush_r+0xb2>
 8007e36:	2200      	movs	r2, #0
 8007e38:	6062      	str	r2, [r4, #4]
 8007e3a:	04d9      	lsls	r1, r3, #19
 8007e3c:	6922      	ldr	r2, [r4, #16]
 8007e3e:	6022      	str	r2, [r4, #0]
 8007e40:	d504      	bpl.n	8007e4c <__sflush_r+0x78>
 8007e42:	1c42      	adds	r2, r0, #1
 8007e44:	d101      	bne.n	8007e4a <__sflush_r+0x76>
 8007e46:	682b      	ldr	r3, [r5, #0]
 8007e48:	b903      	cbnz	r3, 8007e4c <__sflush_r+0x78>
 8007e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e4e:	602f      	str	r7, [r5, #0]
 8007e50:	b1b9      	cbz	r1, 8007e82 <__sflush_r+0xae>
 8007e52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e56:	4299      	cmp	r1, r3
 8007e58:	d002      	beq.n	8007e60 <__sflush_r+0x8c>
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f7ff feba 	bl	8007bd4 <_free_r>
 8007e60:	2300      	movs	r3, #0
 8007e62:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e64:	e00d      	b.n	8007e82 <__sflush_r+0xae>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b0      	blx	r6
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	1c50      	adds	r0, r2, #1
 8007e70:	d1c9      	bne.n	8007e06 <__sflush_r+0x32>
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0c6      	beq.n	8007e06 <__sflush_r+0x32>
 8007e78:	2b1d      	cmp	r3, #29
 8007e7a:	d001      	beq.n	8007e80 <__sflush_r+0xac>
 8007e7c:	2b16      	cmp	r3, #22
 8007e7e:	d11e      	bne.n	8007ebe <__sflush_r+0xea>
 8007e80:	602f      	str	r7, [r5, #0]
 8007e82:	2000      	movs	r0, #0
 8007e84:	e022      	b.n	8007ecc <__sflush_r+0xf8>
 8007e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e8a:	b21b      	sxth	r3, r3
 8007e8c:	e01b      	b.n	8007ec6 <__sflush_r+0xf2>
 8007e8e:	690f      	ldr	r7, [r1, #16]
 8007e90:	2f00      	cmp	r7, #0
 8007e92:	d0f6      	beq.n	8007e82 <__sflush_r+0xae>
 8007e94:	0793      	lsls	r3, r2, #30
 8007e96:	680e      	ldr	r6, [r1, #0]
 8007e98:	bf08      	it	eq
 8007e9a:	694b      	ldreq	r3, [r1, #20]
 8007e9c:	600f      	str	r7, [r1, #0]
 8007e9e:	bf18      	it	ne
 8007ea0:	2300      	movne	r3, #0
 8007ea2:	eba6 0807 	sub.w	r8, r6, r7
 8007ea6:	608b      	str	r3, [r1, #8]
 8007ea8:	f1b8 0f00 	cmp.w	r8, #0
 8007eac:	dde9      	ble.n	8007e82 <__sflush_r+0xae>
 8007eae:	6a21      	ldr	r1, [r4, #32]
 8007eb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007eb2:	4643      	mov	r3, r8
 8007eb4:	463a      	mov	r2, r7
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b0      	blx	r6
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	dc08      	bgt.n	8007ed0 <__sflush_r+0xfc>
 8007ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed0:	4407      	add	r7, r0
 8007ed2:	eba8 0800 	sub.w	r8, r8, r0
 8007ed6:	e7e7      	b.n	8007ea8 <__sflush_r+0xd4>
 8007ed8:	20400001 	.word	0x20400001

08007edc <_fflush_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	690b      	ldr	r3, [r1, #16]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	b913      	cbnz	r3, 8007eec <_fflush_r+0x10>
 8007ee6:	2500      	movs	r5, #0
 8007ee8:	4628      	mov	r0, r5
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	b118      	cbz	r0, 8007ef6 <_fflush_r+0x1a>
 8007eee:	6a03      	ldr	r3, [r0, #32]
 8007ef0:	b90b      	cbnz	r3, 8007ef6 <_fflush_r+0x1a>
 8007ef2:	f7ff fc7d 	bl	80077f0 <__sinit>
 8007ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f3      	beq.n	8007ee6 <_fflush_r+0xa>
 8007efe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f00:	07d0      	lsls	r0, r2, #31
 8007f02:	d404      	bmi.n	8007f0e <_fflush_r+0x32>
 8007f04:	0599      	lsls	r1, r3, #22
 8007f06:	d402      	bmi.n	8007f0e <_fflush_r+0x32>
 8007f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f0a:	f7ff fe2c 	bl	8007b66 <__retarget_lock_acquire_recursive>
 8007f0e:	4628      	mov	r0, r5
 8007f10:	4621      	mov	r1, r4
 8007f12:	f7ff ff5f 	bl	8007dd4 <__sflush_r>
 8007f16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f18:	07da      	lsls	r2, r3, #31
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	d4e4      	bmi.n	8007ee8 <_fflush_r+0xc>
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	059b      	lsls	r3, r3, #22
 8007f22:	d4e1      	bmi.n	8007ee8 <_fflush_r+0xc>
 8007f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f26:	f7ff fe1f 	bl	8007b68 <__retarget_lock_release_recursive>
 8007f2a:	e7dd      	b.n	8007ee8 <_fflush_r+0xc>

08007f2c <fiprintf>:
 8007f2c:	b40e      	push	{r1, r2, r3}
 8007f2e:	b503      	push	{r0, r1, lr}
 8007f30:	4601      	mov	r1, r0
 8007f32:	ab03      	add	r3, sp, #12
 8007f34:	4805      	ldr	r0, [pc, #20]	@ (8007f4c <fiprintf+0x20>)
 8007f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	f000 f847 	bl	8007fd0 <_vfiprintf_r>
 8007f42:	b002      	add	sp, #8
 8007f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f48:	b003      	add	sp, #12
 8007f4a:	4770      	bx	lr
 8007f4c:	20000024 	.word	0x20000024

08007f50 <_sbrk_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d06      	ldr	r5, [pc, #24]	@ (8007f6c <_sbrk_r+0x1c>)
 8007f54:	2300      	movs	r3, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	f7f9 fc70 	bl	8001840 <_sbrk>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d102      	bne.n	8007f6a <_sbrk_r+0x1a>
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	b103      	cbz	r3, 8007f6a <_sbrk_r+0x1a>
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	20004e4c 	.word	0x20004e4c

08007f70 <abort>:
 8007f70:	b508      	push	{r3, lr}
 8007f72:	2006      	movs	r0, #6
 8007f74:	f000 fb8c 	bl	8008690 <raise>
 8007f78:	2001      	movs	r0, #1
 8007f7a:	f7f9 fbe9 	bl	8001750 <_exit>

08007f7e <__sfputc_r>:
 8007f7e:	6893      	ldr	r3, [r2, #8]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	b410      	push	{r4}
 8007f86:	6093      	str	r3, [r2, #8]
 8007f88:	da08      	bge.n	8007f9c <__sfputc_r+0x1e>
 8007f8a:	6994      	ldr	r4, [r2, #24]
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	db01      	blt.n	8007f94 <__sfputc_r+0x16>
 8007f90:	290a      	cmp	r1, #10
 8007f92:	d103      	bne.n	8007f9c <__sfputc_r+0x1e>
 8007f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f98:	f000 babe 	b.w	8008518 <__swbuf_r>
 8007f9c:	6813      	ldr	r3, [r2, #0]
 8007f9e:	1c58      	adds	r0, r3, #1
 8007fa0:	6010      	str	r0, [r2, #0]
 8007fa2:	7019      	strb	r1, [r3, #0]
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <__sfputs_r>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	4614      	mov	r4, r2
 8007fb4:	18d5      	adds	r5, r2, r3
 8007fb6:	42ac      	cmp	r4, r5
 8007fb8:	d101      	bne.n	8007fbe <__sfputs_r+0x12>
 8007fba:	2000      	movs	r0, #0
 8007fbc:	e007      	b.n	8007fce <__sfputs_r+0x22>
 8007fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc2:	463a      	mov	r2, r7
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7ff ffda 	bl	8007f7e <__sfputc_r>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	d1f3      	bne.n	8007fb6 <__sfputs_r+0xa>
 8007fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fd0 <_vfiprintf_r>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	b09d      	sub	sp, #116	@ 0x74
 8007fd8:	4614      	mov	r4, r2
 8007fda:	4698      	mov	r8, r3
 8007fdc:	4606      	mov	r6, r0
 8007fde:	b118      	cbz	r0, 8007fe8 <_vfiprintf_r+0x18>
 8007fe0:	6a03      	ldr	r3, [r0, #32]
 8007fe2:	b90b      	cbnz	r3, 8007fe8 <_vfiprintf_r+0x18>
 8007fe4:	f7ff fc04 	bl	80077f0 <__sinit>
 8007fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fea:	07d9      	lsls	r1, r3, #31
 8007fec:	d405      	bmi.n	8007ffa <_vfiprintf_r+0x2a>
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	059a      	lsls	r2, r3, #22
 8007ff2:	d402      	bmi.n	8007ffa <_vfiprintf_r+0x2a>
 8007ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ff6:	f7ff fdb6 	bl	8007b66 <__retarget_lock_acquire_recursive>
 8007ffa:	89ab      	ldrh	r3, [r5, #12]
 8007ffc:	071b      	lsls	r3, r3, #28
 8007ffe:	d501      	bpl.n	8008004 <_vfiprintf_r+0x34>
 8008000:	692b      	ldr	r3, [r5, #16]
 8008002:	b99b      	cbnz	r3, 800802c <_vfiprintf_r+0x5c>
 8008004:	4629      	mov	r1, r5
 8008006:	4630      	mov	r0, r6
 8008008:	f000 fac4 	bl	8008594 <__swsetup_r>
 800800c:	b170      	cbz	r0, 800802c <_vfiprintf_r+0x5c>
 800800e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008010:	07dc      	lsls	r4, r3, #31
 8008012:	d504      	bpl.n	800801e <_vfiprintf_r+0x4e>
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	b01d      	add	sp, #116	@ 0x74
 800801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	0598      	lsls	r0, r3, #22
 8008022:	d4f7      	bmi.n	8008014 <_vfiprintf_r+0x44>
 8008024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008026:	f7ff fd9f 	bl	8007b68 <__retarget_lock_release_recursive>
 800802a:	e7f3      	b.n	8008014 <_vfiprintf_r+0x44>
 800802c:	2300      	movs	r3, #0
 800802e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008030:	2320      	movs	r3, #32
 8008032:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008036:	f8cd 800c 	str.w	r8, [sp, #12]
 800803a:	2330      	movs	r3, #48	@ 0x30
 800803c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081ec <_vfiprintf_r+0x21c>
 8008040:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008044:	f04f 0901 	mov.w	r9, #1
 8008048:	4623      	mov	r3, r4
 800804a:	469a      	mov	sl, r3
 800804c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008050:	b10a      	cbz	r2, 8008056 <_vfiprintf_r+0x86>
 8008052:	2a25      	cmp	r2, #37	@ 0x25
 8008054:	d1f9      	bne.n	800804a <_vfiprintf_r+0x7a>
 8008056:	ebba 0b04 	subs.w	fp, sl, r4
 800805a:	d00b      	beq.n	8008074 <_vfiprintf_r+0xa4>
 800805c:	465b      	mov	r3, fp
 800805e:	4622      	mov	r2, r4
 8008060:	4629      	mov	r1, r5
 8008062:	4630      	mov	r0, r6
 8008064:	f7ff ffa2 	bl	8007fac <__sfputs_r>
 8008068:	3001      	adds	r0, #1
 800806a:	f000 80a7 	beq.w	80081bc <_vfiprintf_r+0x1ec>
 800806e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008070:	445a      	add	r2, fp
 8008072:	9209      	str	r2, [sp, #36]	@ 0x24
 8008074:	f89a 3000 	ldrb.w	r3, [sl]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 809f 	beq.w	80081bc <_vfiprintf_r+0x1ec>
 800807e:	2300      	movs	r3, #0
 8008080:	f04f 32ff 	mov.w	r2, #4294967295
 8008084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008088:	f10a 0a01 	add.w	sl, sl, #1
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	9307      	str	r3, [sp, #28]
 8008090:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008094:	931a      	str	r3, [sp, #104]	@ 0x68
 8008096:	4654      	mov	r4, sl
 8008098:	2205      	movs	r2, #5
 800809a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809e:	4853      	ldr	r0, [pc, #332]	@ (80081ec <_vfiprintf_r+0x21c>)
 80080a0:	f7f8 f8a6 	bl	80001f0 <memchr>
 80080a4:	9a04      	ldr	r2, [sp, #16]
 80080a6:	b9d8      	cbnz	r0, 80080e0 <_vfiprintf_r+0x110>
 80080a8:	06d1      	lsls	r1, r2, #27
 80080aa:	bf44      	itt	mi
 80080ac:	2320      	movmi	r3, #32
 80080ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080b2:	0713      	lsls	r3, r2, #28
 80080b4:	bf44      	itt	mi
 80080b6:	232b      	movmi	r3, #43	@ 0x2b
 80080b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080bc:	f89a 3000 	ldrb.w	r3, [sl]
 80080c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080c2:	d015      	beq.n	80080f0 <_vfiprintf_r+0x120>
 80080c4:	9a07      	ldr	r2, [sp, #28]
 80080c6:	4654      	mov	r4, sl
 80080c8:	2000      	movs	r0, #0
 80080ca:	f04f 0c0a 	mov.w	ip, #10
 80080ce:	4621      	mov	r1, r4
 80080d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080d4:	3b30      	subs	r3, #48	@ 0x30
 80080d6:	2b09      	cmp	r3, #9
 80080d8:	d94b      	bls.n	8008172 <_vfiprintf_r+0x1a2>
 80080da:	b1b0      	cbz	r0, 800810a <_vfiprintf_r+0x13a>
 80080dc:	9207      	str	r2, [sp, #28]
 80080de:	e014      	b.n	800810a <_vfiprintf_r+0x13a>
 80080e0:	eba0 0308 	sub.w	r3, r0, r8
 80080e4:	fa09 f303 	lsl.w	r3, r9, r3
 80080e8:	4313      	orrs	r3, r2
 80080ea:	9304      	str	r3, [sp, #16]
 80080ec:	46a2      	mov	sl, r4
 80080ee:	e7d2      	b.n	8008096 <_vfiprintf_r+0xc6>
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	1d19      	adds	r1, r3, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	9103      	str	r1, [sp, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	bfbb      	ittet	lt
 80080fc:	425b      	neglt	r3, r3
 80080fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008102:	9307      	strge	r3, [sp, #28]
 8008104:	9307      	strlt	r3, [sp, #28]
 8008106:	bfb8      	it	lt
 8008108:	9204      	strlt	r2, [sp, #16]
 800810a:	7823      	ldrb	r3, [r4, #0]
 800810c:	2b2e      	cmp	r3, #46	@ 0x2e
 800810e:	d10a      	bne.n	8008126 <_vfiprintf_r+0x156>
 8008110:	7863      	ldrb	r3, [r4, #1]
 8008112:	2b2a      	cmp	r3, #42	@ 0x2a
 8008114:	d132      	bne.n	800817c <_vfiprintf_r+0x1ac>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	1d1a      	adds	r2, r3, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	9203      	str	r2, [sp, #12]
 800811e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008122:	3402      	adds	r4, #2
 8008124:	9305      	str	r3, [sp, #20]
 8008126:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081fc <_vfiprintf_r+0x22c>
 800812a:	7821      	ldrb	r1, [r4, #0]
 800812c:	2203      	movs	r2, #3
 800812e:	4650      	mov	r0, sl
 8008130:	f7f8 f85e 	bl	80001f0 <memchr>
 8008134:	b138      	cbz	r0, 8008146 <_vfiprintf_r+0x176>
 8008136:	9b04      	ldr	r3, [sp, #16]
 8008138:	eba0 000a 	sub.w	r0, r0, sl
 800813c:	2240      	movs	r2, #64	@ 0x40
 800813e:	4082      	lsls	r2, r0
 8008140:	4313      	orrs	r3, r2
 8008142:	3401      	adds	r4, #1
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814a:	4829      	ldr	r0, [pc, #164]	@ (80081f0 <_vfiprintf_r+0x220>)
 800814c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008150:	2206      	movs	r2, #6
 8008152:	f7f8 f84d 	bl	80001f0 <memchr>
 8008156:	2800      	cmp	r0, #0
 8008158:	d03f      	beq.n	80081da <_vfiprintf_r+0x20a>
 800815a:	4b26      	ldr	r3, [pc, #152]	@ (80081f4 <_vfiprintf_r+0x224>)
 800815c:	bb1b      	cbnz	r3, 80081a6 <_vfiprintf_r+0x1d6>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	3307      	adds	r3, #7
 8008162:	f023 0307 	bic.w	r3, r3, #7
 8008166:	3308      	adds	r3, #8
 8008168:	9303      	str	r3, [sp, #12]
 800816a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800816c:	443b      	add	r3, r7
 800816e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008170:	e76a      	b.n	8008048 <_vfiprintf_r+0x78>
 8008172:	fb0c 3202 	mla	r2, ip, r2, r3
 8008176:	460c      	mov	r4, r1
 8008178:	2001      	movs	r0, #1
 800817a:	e7a8      	b.n	80080ce <_vfiprintf_r+0xfe>
 800817c:	2300      	movs	r3, #0
 800817e:	3401      	adds	r4, #1
 8008180:	9305      	str	r3, [sp, #20]
 8008182:	4619      	mov	r1, r3
 8008184:	f04f 0c0a 	mov.w	ip, #10
 8008188:	4620      	mov	r0, r4
 800818a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800818e:	3a30      	subs	r2, #48	@ 0x30
 8008190:	2a09      	cmp	r2, #9
 8008192:	d903      	bls.n	800819c <_vfiprintf_r+0x1cc>
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0c6      	beq.n	8008126 <_vfiprintf_r+0x156>
 8008198:	9105      	str	r1, [sp, #20]
 800819a:	e7c4      	b.n	8008126 <_vfiprintf_r+0x156>
 800819c:	fb0c 2101 	mla	r1, ip, r1, r2
 80081a0:	4604      	mov	r4, r0
 80081a2:	2301      	movs	r3, #1
 80081a4:	e7f0      	b.n	8008188 <_vfiprintf_r+0x1b8>
 80081a6:	ab03      	add	r3, sp, #12
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	462a      	mov	r2, r5
 80081ac:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <_vfiprintf_r+0x228>)
 80081ae:	a904      	add	r1, sp, #16
 80081b0:	4630      	mov	r0, r6
 80081b2:	f3af 8000 	nop.w
 80081b6:	4607      	mov	r7, r0
 80081b8:	1c78      	adds	r0, r7, #1
 80081ba:	d1d6      	bne.n	800816a <_vfiprintf_r+0x19a>
 80081bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081be:	07d9      	lsls	r1, r3, #31
 80081c0:	d405      	bmi.n	80081ce <_vfiprintf_r+0x1fe>
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	059a      	lsls	r2, r3, #22
 80081c6:	d402      	bmi.n	80081ce <_vfiprintf_r+0x1fe>
 80081c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ca:	f7ff fccd 	bl	8007b68 <__retarget_lock_release_recursive>
 80081ce:	89ab      	ldrh	r3, [r5, #12]
 80081d0:	065b      	lsls	r3, r3, #25
 80081d2:	f53f af1f 	bmi.w	8008014 <_vfiprintf_r+0x44>
 80081d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081d8:	e71e      	b.n	8008018 <_vfiprintf_r+0x48>
 80081da:	ab03      	add	r3, sp, #12
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	462a      	mov	r2, r5
 80081e0:	4b05      	ldr	r3, [pc, #20]	@ (80081f8 <_vfiprintf_r+0x228>)
 80081e2:	a904      	add	r1, sp, #16
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 f879 	bl	80082dc <_printf_i>
 80081ea:	e7e4      	b.n	80081b6 <_vfiprintf_r+0x1e6>
 80081ec:	08008a7e 	.word	0x08008a7e
 80081f0:	08008a88 	.word	0x08008a88
 80081f4:	00000000 	.word	0x00000000
 80081f8:	08007fad 	.word	0x08007fad
 80081fc:	08008a84 	.word	0x08008a84

08008200 <_printf_common>:
 8008200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	4616      	mov	r6, r2
 8008206:	4698      	mov	r8, r3
 8008208:	688a      	ldr	r2, [r1, #8]
 800820a:	690b      	ldr	r3, [r1, #16]
 800820c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008210:	4293      	cmp	r3, r2
 8008212:	bfb8      	it	lt
 8008214:	4613      	movlt	r3, r2
 8008216:	6033      	str	r3, [r6, #0]
 8008218:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800821c:	4607      	mov	r7, r0
 800821e:	460c      	mov	r4, r1
 8008220:	b10a      	cbz	r2, 8008226 <_printf_common+0x26>
 8008222:	3301      	adds	r3, #1
 8008224:	6033      	str	r3, [r6, #0]
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	0699      	lsls	r1, r3, #26
 800822a:	bf42      	ittt	mi
 800822c:	6833      	ldrmi	r3, [r6, #0]
 800822e:	3302      	addmi	r3, #2
 8008230:	6033      	strmi	r3, [r6, #0]
 8008232:	6825      	ldr	r5, [r4, #0]
 8008234:	f015 0506 	ands.w	r5, r5, #6
 8008238:	d106      	bne.n	8008248 <_printf_common+0x48>
 800823a:	f104 0a19 	add.w	sl, r4, #25
 800823e:	68e3      	ldr	r3, [r4, #12]
 8008240:	6832      	ldr	r2, [r6, #0]
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	42ab      	cmp	r3, r5
 8008246:	dc26      	bgt.n	8008296 <_printf_common+0x96>
 8008248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800824c:	6822      	ldr	r2, [r4, #0]
 800824e:	3b00      	subs	r3, #0
 8008250:	bf18      	it	ne
 8008252:	2301      	movne	r3, #1
 8008254:	0692      	lsls	r2, r2, #26
 8008256:	d42b      	bmi.n	80082b0 <_printf_common+0xb0>
 8008258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800825c:	4641      	mov	r1, r8
 800825e:	4638      	mov	r0, r7
 8008260:	47c8      	blx	r9
 8008262:	3001      	adds	r0, #1
 8008264:	d01e      	beq.n	80082a4 <_printf_common+0xa4>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	6922      	ldr	r2, [r4, #16]
 800826a:	f003 0306 	and.w	r3, r3, #6
 800826e:	2b04      	cmp	r3, #4
 8008270:	bf02      	ittt	eq
 8008272:	68e5      	ldreq	r5, [r4, #12]
 8008274:	6833      	ldreq	r3, [r6, #0]
 8008276:	1aed      	subeq	r5, r5, r3
 8008278:	68a3      	ldr	r3, [r4, #8]
 800827a:	bf0c      	ite	eq
 800827c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008280:	2500      	movne	r5, #0
 8008282:	4293      	cmp	r3, r2
 8008284:	bfc4      	itt	gt
 8008286:	1a9b      	subgt	r3, r3, r2
 8008288:	18ed      	addgt	r5, r5, r3
 800828a:	2600      	movs	r6, #0
 800828c:	341a      	adds	r4, #26
 800828e:	42b5      	cmp	r5, r6
 8008290:	d11a      	bne.n	80082c8 <_printf_common+0xc8>
 8008292:	2000      	movs	r0, #0
 8008294:	e008      	b.n	80082a8 <_printf_common+0xa8>
 8008296:	2301      	movs	r3, #1
 8008298:	4652      	mov	r2, sl
 800829a:	4641      	mov	r1, r8
 800829c:	4638      	mov	r0, r7
 800829e:	47c8      	blx	r9
 80082a0:	3001      	adds	r0, #1
 80082a2:	d103      	bne.n	80082ac <_printf_common+0xac>
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ac:	3501      	adds	r5, #1
 80082ae:	e7c6      	b.n	800823e <_printf_common+0x3e>
 80082b0:	18e1      	adds	r1, r4, r3
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	2030      	movs	r0, #48	@ 0x30
 80082b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082ba:	4422      	add	r2, r4
 80082bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082c4:	3302      	adds	r3, #2
 80082c6:	e7c7      	b.n	8008258 <_printf_common+0x58>
 80082c8:	2301      	movs	r3, #1
 80082ca:	4622      	mov	r2, r4
 80082cc:	4641      	mov	r1, r8
 80082ce:	4638      	mov	r0, r7
 80082d0:	47c8      	blx	r9
 80082d2:	3001      	adds	r0, #1
 80082d4:	d0e6      	beq.n	80082a4 <_printf_common+0xa4>
 80082d6:	3601      	adds	r6, #1
 80082d8:	e7d9      	b.n	800828e <_printf_common+0x8e>
	...

080082dc <_printf_i>:
 80082dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e0:	7e0f      	ldrb	r7, [r1, #24]
 80082e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082e4:	2f78      	cmp	r7, #120	@ 0x78
 80082e6:	4691      	mov	r9, r2
 80082e8:	4680      	mov	r8, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	469a      	mov	sl, r3
 80082ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082f2:	d807      	bhi.n	8008304 <_printf_i+0x28>
 80082f4:	2f62      	cmp	r7, #98	@ 0x62
 80082f6:	d80a      	bhi.n	800830e <_printf_i+0x32>
 80082f8:	2f00      	cmp	r7, #0
 80082fa:	f000 80d1 	beq.w	80084a0 <_printf_i+0x1c4>
 80082fe:	2f58      	cmp	r7, #88	@ 0x58
 8008300:	f000 80b8 	beq.w	8008474 <_printf_i+0x198>
 8008304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800830c:	e03a      	b.n	8008384 <_printf_i+0xa8>
 800830e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008312:	2b15      	cmp	r3, #21
 8008314:	d8f6      	bhi.n	8008304 <_printf_i+0x28>
 8008316:	a101      	add	r1, pc, #4	@ (adr r1, 800831c <_printf_i+0x40>)
 8008318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800831c:	08008375 	.word	0x08008375
 8008320:	08008389 	.word	0x08008389
 8008324:	08008305 	.word	0x08008305
 8008328:	08008305 	.word	0x08008305
 800832c:	08008305 	.word	0x08008305
 8008330:	08008305 	.word	0x08008305
 8008334:	08008389 	.word	0x08008389
 8008338:	08008305 	.word	0x08008305
 800833c:	08008305 	.word	0x08008305
 8008340:	08008305 	.word	0x08008305
 8008344:	08008305 	.word	0x08008305
 8008348:	08008487 	.word	0x08008487
 800834c:	080083b3 	.word	0x080083b3
 8008350:	08008441 	.word	0x08008441
 8008354:	08008305 	.word	0x08008305
 8008358:	08008305 	.word	0x08008305
 800835c:	080084a9 	.word	0x080084a9
 8008360:	08008305 	.word	0x08008305
 8008364:	080083b3 	.word	0x080083b3
 8008368:	08008305 	.word	0x08008305
 800836c:	08008305 	.word	0x08008305
 8008370:	08008449 	.word	0x08008449
 8008374:	6833      	ldr	r3, [r6, #0]
 8008376:	1d1a      	adds	r2, r3, #4
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6032      	str	r2, [r6, #0]
 800837c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008384:	2301      	movs	r3, #1
 8008386:	e09c      	b.n	80084c2 <_printf_i+0x1e6>
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	6820      	ldr	r0, [r4, #0]
 800838c:	1d19      	adds	r1, r3, #4
 800838e:	6031      	str	r1, [r6, #0]
 8008390:	0606      	lsls	r6, r0, #24
 8008392:	d501      	bpl.n	8008398 <_printf_i+0xbc>
 8008394:	681d      	ldr	r5, [r3, #0]
 8008396:	e003      	b.n	80083a0 <_printf_i+0xc4>
 8008398:	0645      	lsls	r5, r0, #25
 800839a:	d5fb      	bpl.n	8008394 <_printf_i+0xb8>
 800839c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083a0:	2d00      	cmp	r5, #0
 80083a2:	da03      	bge.n	80083ac <_printf_i+0xd0>
 80083a4:	232d      	movs	r3, #45	@ 0x2d
 80083a6:	426d      	negs	r5, r5
 80083a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083ac:	4858      	ldr	r0, [pc, #352]	@ (8008510 <_printf_i+0x234>)
 80083ae:	230a      	movs	r3, #10
 80083b0:	e011      	b.n	80083d6 <_printf_i+0xfa>
 80083b2:	6821      	ldr	r1, [r4, #0]
 80083b4:	6833      	ldr	r3, [r6, #0]
 80083b6:	0608      	lsls	r0, r1, #24
 80083b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80083bc:	d402      	bmi.n	80083c4 <_printf_i+0xe8>
 80083be:	0649      	lsls	r1, r1, #25
 80083c0:	bf48      	it	mi
 80083c2:	b2ad      	uxthmi	r5, r5
 80083c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80083c6:	4852      	ldr	r0, [pc, #328]	@ (8008510 <_printf_i+0x234>)
 80083c8:	6033      	str	r3, [r6, #0]
 80083ca:	bf14      	ite	ne
 80083cc:	230a      	movne	r3, #10
 80083ce:	2308      	moveq	r3, #8
 80083d0:	2100      	movs	r1, #0
 80083d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083d6:	6866      	ldr	r6, [r4, #4]
 80083d8:	60a6      	str	r6, [r4, #8]
 80083da:	2e00      	cmp	r6, #0
 80083dc:	db05      	blt.n	80083ea <_printf_i+0x10e>
 80083de:	6821      	ldr	r1, [r4, #0]
 80083e0:	432e      	orrs	r6, r5
 80083e2:	f021 0104 	bic.w	r1, r1, #4
 80083e6:	6021      	str	r1, [r4, #0]
 80083e8:	d04b      	beq.n	8008482 <_printf_i+0x1a6>
 80083ea:	4616      	mov	r6, r2
 80083ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80083f0:	fb03 5711 	mls	r7, r3, r1, r5
 80083f4:	5dc7      	ldrb	r7, [r0, r7]
 80083f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083fa:	462f      	mov	r7, r5
 80083fc:	42bb      	cmp	r3, r7
 80083fe:	460d      	mov	r5, r1
 8008400:	d9f4      	bls.n	80083ec <_printf_i+0x110>
 8008402:	2b08      	cmp	r3, #8
 8008404:	d10b      	bne.n	800841e <_printf_i+0x142>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	07df      	lsls	r7, r3, #31
 800840a:	d508      	bpl.n	800841e <_printf_i+0x142>
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	6861      	ldr	r1, [r4, #4]
 8008410:	4299      	cmp	r1, r3
 8008412:	bfde      	ittt	le
 8008414:	2330      	movle	r3, #48	@ 0x30
 8008416:	f806 3c01 	strble.w	r3, [r6, #-1]
 800841a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800841e:	1b92      	subs	r2, r2, r6
 8008420:	6122      	str	r2, [r4, #16]
 8008422:	f8cd a000 	str.w	sl, [sp]
 8008426:	464b      	mov	r3, r9
 8008428:	aa03      	add	r2, sp, #12
 800842a:	4621      	mov	r1, r4
 800842c:	4640      	mov	r0, r8
 800842e:	f7ff fee7 	bl	8008200 <_printf_common>
 8008432:	3001      	adds	r0, #1
 8008434:	d14a      	bne.n	80084cc <_printf_i+0x1f0>
 8008436:	f04f 30ff 	mov.w	r0, #4294967295
 800843a:	b004      	add	sp, #16
 800843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	f043 0320 	orr.w	r3, r3, #32
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	4832      	ldr	r0, [pc, #200]	@ (8008514 <_printf_i+0x238>)
 800844a:	2778      	movs	r7, #120	@ 0x78
 800844c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	6831      	ldr	r1, [r6, #0]
 8008454:	061f      	lsls	r7, r3, #24
 8008456:	f851 5b04 	ldr.w	r5, [r1], #4
 800845a:	d402      	bmi.n	8008462 <_printf_i+0x186>
 800845c:	065f      	lsls	r7, r3, #25
 800845e:	bf48      	it	mi
 8008460:	b2ad      	uxthmi	r5, r5
 8008462:	6031      	str	r1, [r6, #0]
 8008464:	07d9      	lsls	r1, r3, #31
 8008466:	bf44      	itt	mi
 8008468:	f043 0320 	orrmi.w	r3, r3, #32
 800846c:	6023      	strmi	r3, [r4, #0]
 800846e:	b11d      	cbz	r5, 8008478 <_printf_i+0x19c>
 8008470:	2310      	movs	r3, #16
 8008472:	e7ad      	b.n	80083d0 <_printf_i+0xf4>
 8008474:	4826      	ldr	r0, [pc, #152]	@ (8008510 <_printf_i+0x234>)
 8008476:	e7e9      	b.n	800844c <_printf_i+0x170>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	f023 0320 	bic.w	r3, r3, #32
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	e7f6      	b.n	8008470 <_printf_i+0x194>
 8008482:	4616      	mov	r6, r2
 8008484:	e7bd      	b.n	8008402 <_printf_i+0x126>
 8008486:	6833      	ldr	r3, [r6, #0]
 8008488:	6825      	ldr	r5, [r4, #0]
 800848a:	6961      	ldr	r1, [r4, #20]
 800848c:	1d18      	adds	r0, r3, #4
 800848e:	6030      	str	r0, [r6, #0]
 8008490:	062e      	lsls	r6, r5, #24
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	d501      	bpl.n	800849a <_printf_i+0x1be>
 8008496:	6019      	str	r1, [r3, #0]
 8008498:	e002      	b.n	80084a0 <_printf_i+0x1c4>
 800849a:	0668      	lsls	r0, r5, #25
 800849c:	d5fb      	bpl.n	8008496 <_printf_i+0x1ba>
 800849e:	8019      	strh	r1, [r3, #0]
 80084a0:	2300      	movs	r3, #0
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	4616      	mov	r6, r2
 80084a6:	e7bc      	b.n	8008422 <_printf_i+0x146>
 80084a8:	6833      	ldr	r3, [r6, #0]
 80084aa:	1d1a      	adds	r2, r3, #4
 80084ac:	6032      	str	r2, [r6, #0]
 80084ae:	681e      	ldr	r6, [r3, #0]
 80084b0:	6862      	ldr	r2, [r4, #4]
 80084b2:	2100      	movs	r1, #0
 80084b4:	4630      	mov	r0, r6
 80084b6:	f7f7 fe9b 	bl	80001f0 <memchr>
 80084ba:	b108      	cbz	r0, 80084c0 <_printf_i+0x1e4>
 80084bc:	1b80      	subs	r0, r0, r6
 80084be:	6060      	str	r0, [r4, #4]
 80084c0:	6863      	ldr	r3, [r4, #4]
 80084c2:	6123      	str	r3, [r4, #16]
 80084c4:	2300      	movs	r3, #0
 80084c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084ca:	e7aa      	b.n	8008422 <_printf_i+0x146>
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	4632      	mov	r2, r6
 80084d0:	4649      	mov	r1, r9
 80084d2:	4640      	mov	r0, r8
 80084d4:	47d0      	blx	sl
 80084d6:	3001      	adds	r0, #1
 80084d8:	d0ad      	beq.n	8008436 <_printf_i+0x15a>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	079b      	lsls	r3, r3, #30
 80084de:	d413      	bmi.n	8008508 <_printf_i+0x22c>
 80084e0:	68e0      	ldr	r0, [r4, #12]
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	4298      	cmp	r0, r3
 80084e6:	bfb8      	it	lt
 80084e8:	4618      	movlt	r0, r3
 80084ea:	e7a6      	b.n	800843a <_printf_i+0x15e>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4632      	mov	r2, r6
 80084f0:	4649      	mov	r1, r9
 80084f2:	4640      	mov	r0, r8
 80084f4:	47d0      	blx	sl
 80084f6:	3001      	adds	r0, #1
 80084f8:	d09d      	beq.n	8008436 <_printf_i+0x15a>
 80084fa:	3501      	adds	r5, #1
 80084fc:	68e3      	ldr	r3, [r4, #12]
 80084fe:	9903      	ldr	r1, [sp, #12]
 8008500:	1a5b      	subs	r3, r3, r1
 8008502:	42ab      	cmp	r3, r5
 8008504:	dcf2      	bgt.n	80084ec <_printf_i+0x210>
 8008506:	e7eb      	b.n	80084e0 <_printf_i+0x204>
 8008508:	2500      	movs	r5, #0
 800850a:	f104 0619 	add.w	r6, r4, #25
 800850e:	e7f5      	b.n	80084fc <_printf_i+0x220>
 8008510:	08008a8f 	.word	0x08008a8f
 8008514:	08008aa0 	.word	0x08008aa0

08008518 <__swbuf_r>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	460e      	mov	r6, r1
 800851c:	4614      	mov	r4, r2
 800851e:	4605      	mov	r5, r0
 8008520:	b118      	cbz	r0, 800852a <__swbuf_r+0x12>
 8008522:	6a03      	ldr	r3, [r0, #32]
 8008524:	b90b      	cbnz	r3, 800852a <__swbuf_r+0x12>
 8008526:	f7ff f963 	bl	80077f0 <__sinit>
 800852a:	69a3      	ldr	r3, [r4, #24]
 800852c:	60a3      	str	r3, [r4, #8]
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	071a      	lsls	r2, r3, #28
 8008532:	d501      	bpl.n	8008538 <__swbuf_r+0x20>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	b943      	cbnz	r3, 800854a <__swbuf_r+0x32>
 8008538:	4621      	mov	r1, r4
 800853a:	4628      	mov	r0, r5
 800853c:	f000 f82a 	bl	8008594 <__swsetup_r>
 8008540:	b118      	cbz	r0, 800854a <__swbuf_r+0x32>
 8008542:	f04f 37ff 	mov.w	r7, #4294967295
 8008546:	4638      	mov	r0, r7
 8008548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	6922      	ldr	r2, [r4, #16]
 800854e:	1a98      	subs	r0, r3, r2
 8008550:	6963      	ldr	r3, [r4, #20]
 8008552:	b2f6      	uxtb	r6, r6
 8008554:	4283      	cmp	r3, r0
 8008556:	4637      	mov	r7, r6
 8008558:	dc05      	bgt.n	8008566 <__swbuf_r+0x4e>
 800855a:	4621      	mov	r1, r4
 800855c:	4628      	mov	r0, r5
 800855e:	f7ff fcbd 	bl	8007edc <_fflush_r>
 8008562:	2800      	cmp	r0, #0
 8008564:	d1ed      	bne.n	8008542 <__swbuf_r+0x2a>
 8008566:	68a3      	ldr	r3, [r4, #8]
 8008568:	3b01      	subs	r3, #1
 800856a:	60a3      	str	r3, [r4, #8]
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	6022      	str	r2, [r4, #0]
 8008572:	701e      	strb	r6, [r3, #0]
 8008574:	6962      	ldr	r2, [r4, #20]
 8008576:	1c43      	adds	r3, r0, #1
 8008578:	429a      	cmp	r2, r3
 800857a:	d004      	beq.n	8008586 <__swbuf_r+0x6e>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	07db      	lsls	r3, r3, #31
 8008580:	d5e1      	bpl.n	8008546 <__swbuf_r+0x2e>
 8008582:	2e0a      	cmp	r6, #10
 8008584:	d1df      	bne.n	8008546 <__swbuf_r+0x2e>
 8008586:	4621      	mov	r1, r4
 8008588:	4628      	mov	r0, r5
 800858a:	f7ff fca7 	bl	8007edc <_fflush_r>
 800858e:	2800      	cmp	r0, #0
 8008590:	d0d9      	beq.n	8008546 <__swbuf_r+0x2e>
 8008592:	e7d6      	b.n	8008542 <__swbuf_r+0x2a>

08008594 <__swsetup_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4b29      	ldr	r3, [pc, #164]	@ (800863c <__swsetup_r+0xa8>)
 8008598:	4605      	mov	r5, r0
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	460c      	mov	r4, r1
 800859e:	b118      	cbz	r0, 80085a8 <__swsetup_r+0x14>
 80085a0:	6a03      	ldr	r3, [r0, #32]
 80085a2:	b90b      	cbnz	r3, 80085a8 <__swsetup_r+0x14>
 80085a4:	f7ff f924 	bl	80077f0 <__sinit>
 80085a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ac:	0719      	lsls	r1, r3, #28
 80085ae:	d422      	bmi.n	80085f6 <__swsetup_r+0x62>
 80085b0:	06da      	lsls	r2, r3, #27
 80085b2:	d407      	bmi.n	80085c4 <__swsetup_r+0x30>
 80085b4:	2209      	movs	r2, #9
 80085b6:	602a      	str	r2, [r5, #0]
 80085b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	e033      	b.n	800862c <__swsetup_r+0x98>
 80085c4:	0758      	lsls	r0, r3, #29
 80085c6:	d512      	bpl.n	80085ee <__swsetup_r+0x5a>
 80085c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085ca:	b141      	cbz	r1, 80085de <__swsetup_r+0x4a>
 80085cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085d0:	4299      	cmp	r1, r3
 80085d2:	d002      	beq.n	80085da <__swsetup_r+0x46>
 80085d4:	4628      	mov	r0, r5
 80085d6:	f7ff fafd 	bl	8007bd4 <_free_r>
 80085da:	2300      	movs	r3, #0
 80085dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085e4:	81a3      	strh	r3, [r4, #12]
 80085e6:	2300      	movs	r3, #0
 80085e8:	6063      	str	r3, [r4, #4]
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f043 0308 	orr.w	r3, r3, #8
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	b94b      	cbnz	r3, 800860e <__swsetup_r+0x7a>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008604:	d003      	beq.n	800860e <__swsetup_r+0x7a>
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f000 f883 	bl	8008714 <__smakebuf_r>
 800860e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008612:	f013 0201 	ands.w	r2, r3, #1
 8008616:	d00a      	beq.n	800862e <__swsetup_r+0x9a>
 8008618:	2200      	movs	r2, #0
 800861a:	60a2      	str	r2, [r4, #8]
 800861c:	6962      	ldr	r2, [r4, #20]
 800861e:	4252      	negs	r2, r2
 8008620:	61a2      	str	r2, [r4, #24]
 8008622:	6922      	ldr	r2, [r4, #16]
 8008624:	b942      	cbnz	r2, 8008638 <__swsetup_r+0xa4>
 8008626:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800862a:	d1c5      	bne.n	80085b8 <__swsetup_r+0x24>
 800862c:	bd38      	pop	{r3, r4, r5, pc}
 800862e:	0799      	lsls	r1, r3, #30
 8008630:	bf58      	it	pl
 8008632:	6962      	ldrpl	r2, [r4, #20]
 8008634:	60a2      	str	r2, [r4, #8]
 8008636:	e7f4      	b.n	8008622 <__swsetup_r+0x8e>
 8008638:	2000      	movs	r0, #0
 800863a:	e7f7      	b.n	800862c <__swsetup_r+0x98>
 800863c:	20000024 	.word	0x20000024

08008640 <_raise_r>:
 8008640:	291f      	cmp	r1, #31
 8008642:	b538      	push	{r3, r4, r5, lr}
 8008644:	4605      	mov	r5, r0
 8008646:	460c      	mov	r4, r1
 8008648:	d904      	bls.n	8008654 <_raise_r+0x14>
 800864a:	2316      	movs	r3, #22
 800864c:	6003      	str	r3, [r0, #0]
 800864e:	f04f 30ff 	mov.w	r0, #4294967295
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008656:	b112      	cbz	r2, 800865e <_raise_r+0x1e>
 8008658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800865c:	b94b      	cbnz	r3, 8008672 <_raise_r+0x32>
 800865e:	4628      	mov	r0, r5
 8008660:	f000 f830 	bl	80086c4 <_getpid_r>
 8008664:	4622      	mov	r2, r4
 8008666:	4601      	mov	r1, r0
 8008668:	4628      	mov	r0, r5
 800866a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800866e:	f000 b817 	b.w	80086a0 <_kill_r>
 8008672:	2b01      	cmp	r3, #1
 8008674:	d00a      	beq.n	800868c <_raise_r+0x4c>
 8008676:	1c59      	adds	r1, r3, #1
 8008678:	d103      	bne.n	8008682 <_raise_r+0x42>
 800867a:	2316      	movs	r3, #22
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	2001      	movs	r0, #1
 8008680:	e7e7      	b.n	8008652 <_raise_r+0x12>
 8008682:	2100      	movs	r1, #0
 8008684:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008688:	4620      	mov	r0, r4
 800868a:	4798      	blx	r3
 800868c:	2000      	movs	r0, #0
 800868e:	e7e0      	b.n	8008652 <_raise_r+0x12>

08008690 <raise>:
 8008690:	4b02      	ldr	r3, [pc, #8]	@ (800869c <raise+0xc>)
 8008692:	4601      	mov	r1, r0
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f7ff bfd3 	b.w	8008640 <_raise_r>
 800869a:	bf00      	nop
 800869c:	20000024 	.word	0x20000024

080086a0 <_kill_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d07      	ldr	r5, [pc, #28]	@ (80086c0 <_kill_r+0x20>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	4611      	mov	r1, r2
 80086ac:	602b      	str	r3, [r5, #0]
 80086ae:	f7f9 f83f 	bl	8001730 <_kill>
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	d102      	bne.n	80086bc <_kill_r+0x1c>
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	b103      	cbz	r3, 80086bc <_kill_r+0x1c>
 80086ba:	6023      	str	r3, [r4, #0]
 80086bc:	bd38      	pop	{r3, r4, r5, pc}
 80086be:	bf00      	nop
 80086c0:	20004e4c 	.word	0x20004e4c

080086c4 <_getpid_r>:
 80086c4:	f7f9 b82c 	b.w	8001720 <_getpid>

080086c8 <__swhatbuf_r>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	460c      	mov	r4, r1
 80086cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d0:	2900      	cmp	r1, #0
 80086d2:	b096      	sub	sp, #88	@ 0x58
 80086d4:	4615      	mov	r5, r2
 80086d6:	461e      	mov	r6, r3
 80086d8:	da0d      	bge.n	80086f6 <__swhatbuf_r+0x2e>
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086e0:	f04f 0100 	mov.w	r1, #0
 80086e4:	bf14      	ite	ne
 80086e6:	2340      	movne	r3, #64	@ 0x40
 80086e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086ec:	2000      	movs	r0, #0
 80086ee:	6031      	str	r1, [r6, #0]
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	b016      	add	sp, #88	@ 0x58
 80086f4:	bd70      	pop	{r4, r5, r6, pc}
 80086f6:	466a      	mov	r2, sp
 80086f8:	f000 f848 	bl	800878c <_fstat_r>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	dbec      	blt.n	80086da <__swhatbuf_r+0x12>
 8008700:	9901      	ldr	r1, [sp, #4]
 8008702:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008706:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800870a:	4259      	negs	r1, r3
 800870c:	4159      	adcs	r1, r3
 800870e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008712:	e7eb      	b.n	80086ec <__swhatbuf_r+0x24>

08008714 <__smakebuf_r>:
 8008714:	898b      	ldrh	r3, [r1, #12]
 8008716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008718:	079d      	lsls	r5, r3, #30
 800871a:	4606      	mov	r6, r0
 800871c:	460c      	mov	r4, r1
 800871e:	d507      	bpl.n	8008730 <__smakebuf_r+0x1c>
 8008720:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	6123      	str	r3, [r4, #16]
 8008728:	2301      	movs	r3, #1
 800872a:	6163      	str	r3, [r4, #20]
 800872c:	b003      	add	sp, #12
 800872e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008730:	ab01      	add	r3, sp, #4
 8008732:	466a      	mov	r2, sp
 8008734:	f7ff ffc8 	bl	80086c8 <__swhatbuf_r>
 8008738:	9f00      	ldr	r7, [sp, #0]
 800873a:	4605      	mov	r5, r0
 800873c:	4639      	mov	r1, r7
 800873e:	4630      	mov	r0, r6
 8008740:	f7ff fabc 	bl	8007cbc <_malloc_r>
 8008744:	b948      	cbnz	r0, 800875a <__smakebuf_r+0x46>
 8008746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874a:	059a      	lsls	r2, r3, #22
 800874c:	d4ee      	bmi.n	800872c <__smakebuf_r+0x18>
 800874e:	f023 0303 	bic.w	r3, r3, #3
 8008752:	f043 0302 	orr.w	r3, r3, #2
 8008756:	81a3      	strh	r3, [r4, #12]
 8008758:	e7e2      	b.n	8008720 <__smakebuf_r+0xc>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	6020      	str	r0, [r4, #0]
 800875e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008762:	81a3      	strh	r3, [r4, #12]
 8008764:	9b01      	ldr	r3, [sp, #4]
 8008766:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800876a:	b15b      	cbz	r3, 8008784 <__smakebuf_r+0x70>
 800876c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008770:	4630      	mov	r0, r6
 8008772:	f000 f81d 	bl	80087b0 <_isatty_r>
 8008776:	b128      	cbz	r0, 8008784 <__smakebuf_r+0x70>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	f023 0303 	bic.w	r3, r3, #3
 800877e:	f043 0301 	orr.w	r3, r3, #1
 8008782:	81a3      	strh	r3, [r4, #12]
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	431d      	orrs	r5, r3
 8008788:	81a5      	strh	r5, [r4, #12]
 800878a:	e7cf      	b.n	800872c <__smakebuf_r+0x18>

0800878c <_fstat_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d07      	ldr	r5, [pc, #28]	@ (80087ac <_fstat_r+0x20>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	4611      	mov	r1, r2
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	f7f9 f829 	bl	80017f0 <_fstat>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	d102      	bne.n	80087a8 <_fstat_r+0x1c>
 80087a2:	682b      	ldr	r3, [r5, #0]
 80087a4:	b103      	cbz	r3, 80087a8 <_fstat_r+0x1c>
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
 80087aa:	bf00      	nop
 80087ac:	20004e4c 	.word	0x20004e4c

080087b0 <_isatty_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d06      	ldr	r5, [pc, #24]	@ (80087cc <_isatty_r+0x1c>)
 80087b4:	2300      	movs	r3, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	f7f9 f828 	bl	8001810 <_isatty>
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d102      	bne.n	80087ca <_isatty_r+0x1a>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	b103      	cbz	r3, 80087ca <_isatty_r+0x1a>
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	20004e4c 	.word	0x20004e4c

080087d0 <_init>:
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d2:	bf00      	nop
 80087d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d6:	bc08      	pop	{r3}
 80087d8:	469e      	mov	lr, r3
 80087da:	4770      	bx	lr

080087dc <_fini>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	bf00      	nop
 80087e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e2:	bc08      	pop	{r3}
 80087e4:	469e      	mov	lr, r3
 80087e6:	4770      	bx	lr
