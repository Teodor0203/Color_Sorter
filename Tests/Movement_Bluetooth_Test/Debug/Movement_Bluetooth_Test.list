
Movement_Bluetooth_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008688  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08008828  08008828  00009828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af4  08008af4  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008af4  08008af4  00009af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008afc  08008afc  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008afc  08008afc  00009afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b00  08008b00  00009b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008b04  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de8  20000074  08008b78  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e5c  08008b78  0000ae5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d97  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392b  00000000  00000000  00023e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  00027768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b5  00000000  00000000  00028cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197be  00000000  00000000  00029da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e5c  00000000  00000000  00043563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aeba  00000000  00000000  0005b3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6279  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e4  00000000  00000000  000f62bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000fc7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008810 	.word	0x08008810

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008810 	.word	0x08008810

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Set_Servo_Angle>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	4613      	mov	r3, r2
 80005c8:	71fb      	strb	r3, [r7, #7]

    uint32_t pulse_length = 210 + (angle * (1050 - 210) / 180);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	4a15      	ldr	r2, [pc, #84]	@ (800062c <Set_Servo_Angle+0x70>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	441a      	add	r2, r3
 80005dc:	11d2      	asrs	r2, r2, #7
 80005de:	17db      	asrs	r3, r3, #31
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	33d2      	adds	r3, #210	@ 0xd2
 80005e4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <Set_Servo_Angle+0x3a>
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005f4:	e013      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d104      	bne.n	8000606 <Set_Servo_Angle+0x4a>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000604:	e00b      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	2b08      	cmp	r3, #8
 800060a:	d104      	bne.n	8000616 <Set_Servo_Angle+0x5a>
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000614:	e003      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800061e:	bf00      	nop
 8000620:	371c      	adds	r7, #28
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	b60b60b7 	.word	0xb60b60b7

08000630 <Init_arm>:

void Init_arm()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1); // Enable motors
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	@ 0x40
 8000638:	482f      	ldr	r0, [pc, #188]	@ (80006f8 <Init_arm+0xc8>)
 800063a:	f001 fcf1 	bl	8002020 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // A0  - M1
 800063e:	2100      	movs	r1, #0
 8000640:	482e      	ldr	r0, [pc, #184]	@ (80006fc <Init_arm+0xcc>)
 8000642:	f002 fadd 	bl	8002c00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // D10 - M2
 8000646:	2100      	movs	r1, #0
 8000648:	482d      	ldr	r0, [pc, #180]	@ (8000700 <Init_arm+0xd0>)
 800064a:	f002 fad9 	bl	8002c00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // D9  - M3
 800064e:	2104      	movs	r1, #4
 8000650:	482c      	ldr	r0, [pc, #176]	@ (8000704 <Init_arm+0xd4>)
 8000652:	f002 fad5 	bl	8002c00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // D6  - M4
 8000656:	2108      	movs	r1, #8
 8000658:	4828      	ldr	r0, [pc, #160]	@ (80006fc <Init_arm+0xcc>)
 800065a:	f002 fad1 	bl	8002c00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // D5  - M5
 800065e:	2100      	movs	r1, #0
 8000660:	4828      	ldr	r0, [pc, #160]	@ (8000704 <Init_arm+0xd4>)
 8000662:	f002 facd 	bl	8002c00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // D3  - M6
 8000666:	2104      	movs	r1, #4
 8000668:	4824      	ldr	r0, [pc, #144]	@ (80006fc <Init_arm+0xcc>)
 800066a:	f002 fac9 	bl	8002c00 <HAL_TIM_PWM_Start>

	// Set arm to initial position
    Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <Init_arm+0xd8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	4821      	ldr	r0, [pc, #132]	@ (80006fc <Init_arm+0xcc>)
 8000678:	f7ff ffa0 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000680:	f001 f9b2 	bl	80019e8 <HAL_Delay>

    Set_Servo_Angle(&htim4, TIM_CHANNEL_1, current_value_shoulder);
 8000684:	4b21      	ldr	r3, [pc, #132]	@ (800070c <Init_arm+0xdc>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	481c      	ldr	r0, [pc, #112]	@ (8000700 <Init_arm+0xd0>)
 800068e:	f7ff ff95 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 8000692:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000696:	f001 f9a7 	bl	80019e8 <HAL_Delay>

    Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 800069a:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <Init_arm+0xe0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	2104      	movs	r1, #4
 80006a2:	4818      	ldr	r0, [pc, #96]	@ (8000704 <Init_arm+0xd4>)
 80006a4:	f7ff ff8a 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ac:	f001 f99c 	bl	80019e8 <HAL_Delay>

    Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 80006b0:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <Init_arm+0xe4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	2108      	movs	r1, #8
 80006b8:	4810      	ldr	r0, [pc, #64]	@ (80006fc <Init_arm+0xcc>)
 80006ba:	f7ff ff7f 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c2:	f001 f991 	bl	80019e8 <HAL_Delay>

    Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <Init_arm+0xe8>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	480d      	ldr	r0, [pc, #52]	@ (8000704 <Init_arm+0xd4>)
 80006d0:	f7ff ff74 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 80006d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006d8:	f001 f986 	bl	80019e8 <HAL_Delay>

    Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <Init_arm+0xec>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	2104      	movs	r1, #4
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <Init_arm+0xcc>)
 80006e6:	f7ff ff69 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1000);
 80006ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ee:	f001 f97b 	bl	80019e8 <HAL_Delay>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40020000 	.word	0x40020000
 80006fc:	20000090 	.word	0x20000090
 8000700:	20000120 	.word	0x20000120
 8000704:	200000d8 	.word	0x200000d8
 8000708:	20000000 	.word	0x20000000
 800070c:	20000001 	.word	0x20000001
 8000710:	20000002 	.word	0x20000002
 8000714:	20000003 	.word	0x20000003
 8000718:	20000004 	.word	0x20000004
 800071c:	20000005 	.word	0x20000005

08000720 <MoveArm>:


void MoveArm(uint8_t base_angle, uint8_t shoulder_angle, uint8_t elbow_angle, uint8_t wrist_ver_angle, uint8_t wrist_rot_angle, uint8_t gripper_angle)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	4604      	mov	r4, r0
 8000728:	4608      	mov	r0, r1
 800072a:	4611      	mov	r1, r2
 800072c:	461a      	mov	r2, r3
 800072e:	4623      	mov	r3, r4
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	4603      	mov	r3, r0
 8000734:	71bb      	strb	r3, [r7, #6]
 8000736:	460b      	mov	r3, r1
 8000738:	717b      	strb	r3, [r7, #5]
 800073a:	4613      	mov	r3, r2
 800073c:	713b      	strb	r3, [r7, #4]
    int isMoving = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]

    while (isMoving)
 8000742:	e0f3      	b.n	800092c <MoveArm+0x20c>
    {

        while (current_value_elbow != elbow_angle)
        {
            if (current_value_elbow > elbow_angle)
 8000744:	4b7e      	ldr	r3, [pc, #504]	@ (8000940 <MoveArm+0x220>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	797a      	ldrb	r2, [r7, #5]
 800074a:	429a      	cmp	r2, r3
 800074c:	d206      	bcs.n	800075c <MoveArm+0x3c>
            {
            	current_value_elbow--;
 800074e:	4b7c      	ldr	r3, [pc, #496]	@ (8000940 <MoveArm+0x220>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b7a      	ldr	r3, [pc, #488]	@ (8000940 <MoveArm+0x220>)
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	e005      	b.n	8000768 <MoveArm+0x48>
            }
            else
            {
            	current_value_elbow++;
 800075c:	4b78      	ldr	r3, [pc, #480]	@ (8000940 <MoveArm+0x220>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b76      	ldr	r3, [pc, #472]	@ (8000940 <MoveArm+0x220>)
 8000766:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 8000768:	4b75      	ldr	r3, [pc, #468]	@ (8000940 <MoveArm+0x220>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	2104      	movs	r1, #4
 8000770:	4874      	ldr	r0, [pc, #464]	@ (8000944 <MoveArm+0x224>)
 8000772:	f7ff ff23 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 8000776:	200f      	movs	r0, #15
 8000778:	f004 fa74 	bl	8004c64 <osDelay>
        while (current_value_elbow != elbow_angle)
 800077c:	4b70      	ldr	r3, [pc, #448]	@ (8000940 <MoveArm+0x220>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	797a      	ldrb	r2, [r7, #5]
 8000782:	429a      	cmp	r2, r3
 8000784:	d1de      	bne.n	8000744 <MoveArm+0x24>
        }

        while (current_value_base != base_angle)
 8000786:	e01b      	b.n	80007c0 <MoveArm+0xa0>
        {
            if (current_value_base > base_angle)
 8000788:	4b6f      	ldr	r3, [pc, #444]	@ (8000948 <MoveArm+0x228>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	429a      	cmp	r2, r3
 8000790:	d206      	bcs.n	80007a0 <MoveArm+0x80>
            {
            	current_value_base--;
 8000792:	4b6d      	ldr	r3, [pc, #436]	@ (8000948 <MoveArm+0x228>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b6b      	ldr	r3, [pc, #428]	@ (8000948 <MoveArm+0x228>)
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e005      	b.n	80007ac <MoveArm+0x8c>
            }
            else
            {
            	current_value_base++;
 80007a0:	4b69      	ldr	r3, [pc, #420]	@ (8000948 <MoveArm+0x228>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b67      	ldr	r3, [pc, #412]	@ (8000948 <MoveArm+0x228>)
 80007aa:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 80007ac:	4b66      	ldr	r3, [pc, #408]	@ (8000948 <MoveArm+0x228>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	4865      	ldr	r0, [pc, #404]	@ (800094c <MoveArm+0x22c>)
 80007b6:	f7ff ff01 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f004 fa52 	bl	8004c64 <osDelay>
        while (current_value_base != base_angle)
 80007c0:	4b61      	ldr	r3, [pc, #388]	@ (8000948 <MoveArm+0x228>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	79fa      	ldrb	r2, [r7, #7]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d1de      	bne.n	8000788 <MoveArm+0x68>
        }

        while ((current_value_shoulder) != shoulder_angle)
 80007ca:	e01b      	b.n	8000804 <MoveArm+0xe4>
        {
            if ((current_value_shoulder) > shoulder_angle)
 80007cc:	4b60      	ldr	r3, [pc, #384]	@ (8000950 <MoveArm+0x230>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	79ba      	ldrb	r2, [r7, #6]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d206      	bcs.n	80007e4 <MoveArm+0xc4>
            {
            	current_value_shoulder--;
 80007d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000950 <MoveArm+0x230>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b5c      	ldr	r3, [pc, #368]	@ (8000950 <MoveArm+0x230>)
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	e005      	b.n	80007f0 <MoveArm+0xd0>
            }
            else
            {
            	current_value_shoulder++;
 80007e4:	4b5a      	ldr	r3, [pc, #360]	@ (8000950 <MoveArm+0x230>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b58      	ldr	r3, [pc, #352]	@ (8000950 <MoveArm+0x230>)
 80007ee:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim4, TIM_CHANNEL_1, current_value_shoulder);
 80007f0:	4b57      	ldr	r3, [pc, #348]	@ (8000950 <MoveArm+0x230>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	4856      	ldr	r0, [pc, #344]	@ (8000954 <MoveArm+0x234>)
 80007fa:	f7ff fedf 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 80007fe:	200f      	movs	r0, #15
 8000800:	f004 fa30 	bl	8004c64 <osDelay>
        while ((current_value_shoulder) != shoulder_angle)
 8000804:	4b52      	ldr	r3, [pc, #328]	@ (8000950 <MoveArm+0x230>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	429a      	cmp	r2, r3
 800080c:	d1de      	bne.n	80007cc <MoveArm+0xac>
        }

        while (current_value_wrist_ver != wrist_ver_angle)
 800080e:	e01b      	b.n	8000848 <MoveArm+0x128>
        {
            if (current_value_wrist_ver > wrist_ver_angle)
 8000810:	4b51      	ldr	r3, [pc, #324]	@ (8000958 <MoveArm+0x238>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	793a      	ldrb	r2, [r7, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	d206      	bcs.n	8000828 <MoveArm+0x108>
            {
            	current_value_wrist_ver--;
 800081a:	4b4f      	ldr	r3, [pc, #316]	@ (8000958 <MoveArm+0x238>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3b01      	subs	r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b4d      	ldr	r3, [pc, #308]	@ (8000958 <MoveArm+0x238>)
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	e005      	b.n	8000834 <MoveArm+0x114>
            }
            else
            {
            	current_value_wrist_ver++;
 8000828:	4b4b      	ldr	r3, [pc, #300]	@ (8000958 <MoveArm+0x238>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b49      	ldr	r3, [pc, #292]	@ (8000958 <MoveArm+0x238>)
 8000832:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 8000834:	4b48      	ldr	r3, [pc, #288]	@ (8000958 <MoveArm+0x238>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	2108      	movs	r1, #8
 800083c:	4843      	ldr	r0, [pc, #268]	@ (800094c <MoveArm+0x22c>)
 800083e:	f7ff febd 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 8000842:	200f      	movs	r0, #15
 8000844:	f004 fa0e 	bl	8004c64 <osDelay>
        while (current_value_wrist_ver != wrist_ver_angle)
 8000848:	4b43      	ldr	r3, [pc, #268]	@ (8000958 <MoveArm+0x238>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	793a      	ldrb	r2, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	d1de      	bne.n	8000810 <MoveArm+0xf0>
        }

        while (current_value_wrist_rot != wrist_rot_angle)
 8000852:	e01c      	b.n	800088e <MoveArm+0x16e>
        {
            if (current_value_wrist_rot > wrist_rot_angle)
 8000854:	4b41      	ldr	r3, [pc, #260]	@ (800095c <MoveArm+0x23c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	f897 2020 	ldrb.w	r2, [r7, #32]
 800085c:	429a      	cmp	r2, r3
 800085e:	d206      	bcs.n	800086e <MoveArm+0x14e>
            {
            	current_value_wrist_rot--;
 8000860:	4b3e      	ldr	r3, [pc, #248]	@ (800095c <MoveArm+0x23c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	3b01      	subs	r3, #1
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b3c      	ldr	r3, [pc, #240]	@ (800095c <MoveArm+0x23c>)
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	e005      	b.n	800087a <MoveArm+0x15a>
            }
            else
                current_value_wrist_rot++;
 800086e:	4b3b      	ldr	r3, [pc, #236]	@ (800095c <MoveArm+0x23c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b39      	ldr	r3, [pc, #228]	@ (800095c <MoveArm+0x23c>)
 8000878:	701a      	strb	r2, [r3, #0]

            Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 800087a:	4b38      	ldr	r3, [pc, #224]	@ (800095c <MoveArm+0x23c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	4830      	ldr	r0, [pc, #192]	@ (8000944 <MoveArm+0x224>)
 8000884:	f7ff fe9a 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 8000888:	200f      	movs	r0, #15
 800088a:	f004 f9eb 	bl	8004c64 <osDelay>
        while (current_value_wrist_rot != wrist_rot_angle)
 800088e:	4b33      	ldr	r3, [pc, #204]	@ (800095c <MoveArm+0x23c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	d1dc      	bne.n	8000854 <MoveArm+0x134>
        }

        while (current_value_gripper != gripper_angle)
 800089a:	e01c      	b.n	80008d6 <MoveArm+0x1b6>
        {
            if (current_value_gripper > gripper_angle)
 800089c:	4b30      	ldr	r3, [pc, #192]	@ (8000960 <MoveArm+0x240>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d206      	bcs.n	80008b6 <MoveArm+0x196>
            {
            	current_value_gripper--;
 80008a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000960 <MoveArm+0x240>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <MoveArm+0x240>)
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e005      	b.n	80008c2 <MoveArm+0x1a2>
            }
            else
            {
            	current_value_gripper++;
 80008b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <MoveArm+0x240>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <MoveArm+0x240>)
 80008c0:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80008c2:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <MoveArm+0x240>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	2104      	movs	r1, #4
 80008ca:	4820      	ldr	r0, [pc, #128]	@ (800094c <MoveArm+0x22c>)
 80008cc:	f7ff fe76 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 80008d0:	200f      	movs	r0, #15
 80008d2:	f004 f9c7 	bl	8004c64 <osDelay>
        while (current_value_gripper != gripper_angle)
 80008d6:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MoveArm+0x240>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80008de:	429a      	cmp	r2, r3
 80008e0:	d1dc      	bne.n	800089c <MoveArm+0x17c>
        }

        osDelay(15);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f004 f9be 	bl	8004c64 <osDelay>

        if ((current_value_base == base_angle) &&
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MoveArm+0x228>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	79fa      	ldrb	r2, [r7, #7]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d11c      	bne.n	800092c <MoveArm+0x20c>
            (current_value_shoulder + 45 == shoulder_angle + 45) &&
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MoveArm+0x230>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
        if ((current_value_base == base_angle) &&
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d117      	bne.n	800092c <MoveArm+0x20c>
            (current_value_elbow == elbow_angle) &&
 80008fc:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MoveArm+0x220>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
            (current_value_shoulder + 45 == shoulder_angle + 45) &&
 8000900:	797a      	ldrb	r2, [r7, #5]
 8000902:	429a      	cmp	r2, r3
 8000904:	d112      	bne.n	800092c <MoveArm+0x20c>
            (current_value_wrist_ver == wrist_ver_angle) &&
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MoveArm+0x238>)
 8000908:	781b      	ldrb	r3, [r3, #0]
            (current_value_elbow == elbow_angle) &&
 800090a:	793a      	ldrb	r2, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	d10d      	bne.n	800092c <MoveArm+0x20c>
            (current_value_wrist_rot == wrist_rot_angle) &&
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MoveArm+0x23c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_ver == wrist_ver_angle) &&
 8000914:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000918:	429a      	cmp	r2, r3
 800091a:	d107      	bne.n	800092c <MoveArm+0x20c>
            (current_value_gripper == gripper_angle))
 800091c:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MoveArm+0x240>)
 800091e:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_rot == wrist_rot_angle) &&
 8000920:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000924:	429a      	cmp	r2, r3
 8000926:	d101      	bne.n	800092c <MoveArm+0x20c>
        {
        	isMoving = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
    while (isMoving)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	f47f af24 	bne.w	800077c <MoveArm+0x5c>
        }
    }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	bf00      	nop
 8000940:	20000002 	.word	0x20000002
 8000944:	200000d8 	.word	0x200000d8
 8000948:	20000000 	.word	0x20000000
 800094c:	20000090 	.word	0x20000090
 8000950:	20000001 	.word	0x20000001
 8000954:	20000120 	.word	0x20000120
 8000958:	20000003 	.word	0x20000003
 800095c:	20000004 	.word	0x20000004
 8000960:	20000005 	.word	0x20000005

08000964 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b0a5      	sub	sp, #148	@ 0x94
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a80      	ldr	r2, [pc, #512]	@ (8000b74 <HAL_UART_RxCpltCallback+0x210>)
 8000972:	4293      	cmp	r3, r2
 8000974:	f040 80fa 	bne.w	8000b6c <HAL_UART_RxCpltCallback+0x208>
	        char response_msg[100];
	        char temp_buffer[21]; // Create a copy if you need to preserve the original
	        for(int i = 0; i < 21; i++)
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800097e:	e01b      	b.n	80009b8 <HAL_UART_RxCpltCallback+0x54>
	       	        	buffer_q[index_buffer_write.value][i] = buffer[i];
 8000980:	4b7d      	ldr	r3, [pc, #500]	@ (8000b78 <HAL_UART_RxCpltCallback+0x214>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	4a7b      	ldr	r2, [pc, #492]	@ (8000b7c <HAL_UART_RxCpltCallback+0x218>)
 800098e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000992:	4413      	add	r3, r2
 8000994:	781c      	ldrb	r4, [r3, #0]
 8000996:	497a      	ldr	r1, [pc, #488]	@ (8000b80 <HAL_UART_RxCpltCallback+0x21c>)
 8000998:	4603      	mov	r3, r0
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4403      	add	r3, r0
 800099e:	00da      	lsls	r2, r3, #3
 80009a0:	1ad2      	subs	r2, r2, r3
 80009a2:	440a      	add	r2, r1
 80009a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009a8:	4413      	add	r3, r2
 80009aa:	4622      	mov	r2, r4
 80009ac:	701a      	strb	r2, [r3, #0]
	        for(int i = 0; i < 21; i++)
 80009ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009b2:	3301      	adds	r3, #1
 80009b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80009b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009bc:	2b14      	cmp	r3, #20
 80009be:	dddf      	ble.n	8000980 <HAL_UART_RxCpltCallback+0x1c>

	        strcpy(temp_buffer, buffer_q[index_buffer_read.value]); // Copy the original string
 80009c0:	4b70      	ldr	r3, [pc, #448]	@ (8000b84 <HAL_UART_RxCpltCallback+0x220>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	00da      	lsls	r2, r3, #3
 80009d4:	1ad2      	subs	r2, r2, r3
 80009d6:	4b6a      	ldr	r3, [pc, #424]	@ (8000b80 <HAL_UART_RxCpltCallback+0x21c>)
 80009d8:	441a      	add	r2, r3
 80009da:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f007 f8e2 	bl	8007baa <strcpy>



	        if(index_buffer_write.value == 7 && index_buffer_read.value == 0){
 80009e6:	4b64      	ldr	r3, [pc, #400]	@ (8000b78 <HAL_UART_RxCpltCallback+0x214>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b07      	cmp	r3, #7
 80009f2:	d10a      	bne.n	8000a0a <HAL_UART_RxCpltCallback+0xa6>
 80009f4:	4b63      	ldr	r3, [pc, #396]	@ (8000b84 <HAL_UART_RxCpltCallback+0x220>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	f003 0307 	and.w	r3, r3, #7
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <HAL_UART_RxCpltCallback+0xa6>
	        	is_buffer_full = 1;
 8000a02:	4b61      	ldr	r3, [pc, #388]	@ (8000b88 <HAL_UART_RxCpltCallback+0x224>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
	        	return;
 8000a08:	e0b0      	b.n	8000b6c <HAL_UART_RxCpltCallback+0x208>
	        }

	        if(++index_buffer_write.value == index_buffer_read.value)
 8000a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8000b78 <HAL_UART_RxCpltCallback+0x214>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	3301      	adds	r3, #1
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	b2d9      	uxtb	r1, r3
 8000a1c:	4a56      	ldr	r2, [pc, #344]	@ (8000b78 <HAL_UART_RxCpltCallback+0x214>)
 8000a1e:	7813      	ldrb	r3, [r2, #0]
 8000a20:	f361 0302 	bfi	r3, r1, #0, #3
 8000a24:	7013      	strb	r3, [r2, #0]
 8000a26:	4b54      	ldr	r3, [pc, #336]	@ (8000b78 <HAL_UART_RxCpltCallback+0x214>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b54      	ldr	r3, [pc, #336]	@ (8000b84 <HAL_UART_RxCpltCallback+0x220>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d103      	bne.n	8000a46 <HAL_UART_RxCpltCallback+0xe2>
	        {
	        	is_buffer_full = 1;
 8000a3e:	4b52      	ldr	r3, [pc, #328]	@ (8000b88 <HAL_UART_RxCpltCallback+0x224>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
	        	return;
 8000a44:	e092      	b.n	8000b6c <HAL_UART_RxCpltCallback+0x208>
	        }

	        char *token;

	            token = strtok(temp_buffer, ",");
 8000a46:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a4a:	4950      	ldr	r1, [pc, #320]	@ (8000b8c <HAL_UART_RxCpltCallback+0x228>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f006 ff7f 	bl	8007950 <strtok>
 8000a52:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d007      	beq.n	8000a6e <HAL_UART_RxCpltCallback+0x10a>
	                base_angle = atoi(token);
 8000a5e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a62:	f006 fdd1 	bl	8007608 <atoi>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b49      	ldr	r3, [pc, #292]	@ (8000b90 <HAL_UART_RxCpltCallback+0x22c>)
 8000a6c:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a6e:	4947      	ldr	r1, [pc, #284]	@ (8000b8c <HAL_UART_RxCpltCallback+0x228>)
 8000a70:	2000      	movs	r0, #0
 8000a72:	f006 ff6d 	bl	8007950 <strtok>
 8000a76:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d007      	beq.n	8000a92 <HAL_UART_RxCpltCallback+0x12e>
	                shoulder_angle = atoi(token);
 8000a82:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a86:	f006 fdbf 	bl	8007608 <atoi>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b41      	ldr	r3, [pc, #260]	@ (8000b94 <HAL_UART_RxCpltCallback+0x230>)
 8000a90:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a92:	493e      	ldr	r1, [pc, #248]	@ (8000b8c <HAL_UART_RxCpltCallback+0x228>)
 8000a94:	2000      	movs	r0, #0
 8000a96:	f006 ff5b 	bl	8007950 <strtok>
 8000a9a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <HAL_UART_RxCpltCallback+0x152>
	                elbow_angle = atoi(token);
 8000aa6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000aaa:	f006 fdad 	bl	8007608 <atoi>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b39      	ldr	r3, [pc, #228]	@ (8000b98 <HAL_UART_RxCpltCallback+0x234>)
 8000ab4:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000ab6:	4935      	ldr	r1, [pc, #212]	@ (8000b8c <HAL_UART_RxCpltCallback+0x228>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f006 ff49 	bl	8007950 <strtok>
 8000abe:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <HAL_UART_RxCpltCallback+0x176>
	                wrist_ver_angle = atoi(token);
 8000aca:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000ace:	f006 fd9b 	bl	8007608 <atoi>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b31      	ldr	r3, [pc, #196]	@ (8000b9c <HAL_UART_RxCpltCallback+0x238>)
 8000ad8:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000ada:	492c      	ldr	r1, [pc, #176]	@ (8000b8c <HAL_UART_RxCpltCallback+0x228>)
 8000adc:	2000      	movs	r0, #0
 8000ade:	f006 ff37 	bl	8007950 <strtok>
 8000ae2:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d007      	beq.n	8000afe <HAL_UART_RxCpltCallback+0x19a>
	            	wrist_rot_angle = atoi(token);
 8000aee:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000af2:	f006 fd89 	bl	8007608 <atoi>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <HAL_UART_RxCpltCallback+0x23c>)
 8000afc:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000afe:	4923      	ldr	r1, [pc, #140]	@ (8000b8c <HAL_UART_RxCpltCallback+0x228>)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f006 ff25 	bl	8007950 <strtok>
 8000b06:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d007      	beq.n	8000b22 <HAL_UART_RxCpltCallback+0x1be>
	                detected_class = atoi(token);
 8000b12:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000b16:	f006 fd77 	bl	8007608 <atoi>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x240>)
 8000b20:	701a      	strb	r2, [r3, #0]
	            }
	            move_arm = 1;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x244>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
	        // Construct the response message
	        strcpy(response_msg, "Received: ");
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bac <HAL_UART_RxCpltCallback+0x248>)
 8000b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b30:	c303      	stmia	r3!, {r0, r1}
 8000b32:	801a      	strh	r2, [r3, #0]
 8000b34:	3302      	adds	r3, #2
 8000b36:	0c12      	lsrs	r2, r2, #16
 8000b38:	701a      	strb	r2, [r3, #0]
	        strcat(response_msg, (char*)buffer); // Cast to char* is fine here as it's null-terminated
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	490f      	ldr	r1, [pc, #60]	@ (8000b7c <HAL_UART_RxCpltCallback+0x218>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f006 fef6 	bl	8007932 <strcat>

	        // Transmit the response
	        HAL_UART_Transmit(&huart1, (uint8_t*) response_msg, strlen(response_msg), HAL_MAX_DELAY);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fb48 	bl	80001e0 <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	f107 010c 	add.w	r1, r7, #12
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	4814      	ldr	r0, [pc, #80]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x24c>)
 8000b5e:	f002 ff45 	bl	80039ec <HAL_UART_Transmit>

	        // Re-enable the receive interrupt *after* processing the current data
	        HAL_UART_Receive_IT(&huart1, buffer, 21);
 8000b62:	2215      	movs	r2, #21
 8000b64:	4905      	ldr	r1, [pc, #20]	@ (8000b7c <HAL_UART_RxCpltCallback+0x218>)
 8000b66:	4812      	ldr	r0, [pc, #72]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x24c>)
 8000b68:	f002 ffcb 	bl	8003b02 <HAL_UART_Receive_IT>
	}
}
 8000b6c:	3794      	adds	r7, #148	@ 0x94
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40011000 	.word	0x40011000
 8000b78:	20000204 	.word	0x20000204
 8000b7c:	200002b8 	.word	0x200002b8
 8000b80:	20000210 	.word	0x20000210
 8000b84:	20000208 	.word	0x20000208
 8000b88:	2000020c 	.word	0x2000020c
 8000b8c:	08008850 	.word	0x08008850
 8000b90:	200002cd 	.word	0x200002cd
 8000b94:	200002ce 	.word	0x200002ce
 8000b98:	200002cf 	.word	0x200002cf
 8000b9c:	200002d0 	.word	0x200002d0
 8000ba0:	200002d1 	.word	0x200002d1
 8000ba4:	200002d2 	.word	0x200002d2
 8000ba8:	200002d4 	.word	0x200002d4
 8000bac:	08008854 	.word	0x08008854
 8000bb0:	20000168 	.word	0x20000168

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b5b0      	push	{r4, r5, r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bba:	f000 fed3 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbe:	f000 f85d 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc2:	f000 fa9d 	bl	8001100 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bc6:	f000 fa71 	bl	80010ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000bca:	f000 f8c1 	bl	8000d50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bce:	f000 f94b 	bl	8000e68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bd2:	f000 f9cb 	bl	8000f6c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000bd6:	f000 fa3f 	bl	8001058 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char temp_msg[32];
  strcpy(temp_msg, "HC-05 Initialised!\n");
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <main+0x98>)
 8000bde:	461c      	mov	r4, r3
 8000be0:	4615      	mov	r5, r2
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	682b      	ldr	r3, [r5, #0]
 8000be8:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000bea:	463b      	mov	r3, r7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff faf7 	bl	80001e0 <strlen>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4639      	mov	r1, r7
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	4814      	ldr	r0, [pc, #80]	@ (8000c50 <main+0x9c>)
 8000bfe:	f002 fef5 	bl	80039ec <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, buffer, 21);
 8000c02:	2215      	movs	r2, #21
 8000c04:	4913      	ldr	r1, [pc, #76]	@ (8000c54 <main+0xa0>)
 8000c06:	4812      	ldr	r0, [pc, #72]	@ (8000c50 <main+0x9c>)
 8000c08:	f002 ff7b 	bl	8003b02 <HAL_UART_Receive_IT>

  Init_arm();
 8000c0c:	f7ff fd10 	bl	8000630 <Init_arm>
  move_gripper(30);*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c10:	f003 ff4c 	bl	8004aac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of bluetooth */
  bluetoothHandle = osThreadNew(BluetoothTask, NULL, &bluetooth_attributes);
 8000c14:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <main+0xa4>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4810      	ldr	r0, [pc, #64]	@ (8000c5c <main+0xa8>)
 8000c1a:	f003 ff91 	bl	8004b40 <osThreadNew>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <main+0xac>)
 8000c22:	6013      	str	r3, [r2, #0]

  /* creation of moveRobotArm */
  moveRobotArmHandle = osThreadNew(MoveRobotArmTask, NULL, &moveRobotArm_attributes);
 8000c24:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <main+0xb0>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	480f      	ldr	r0, [pc, #60]	@ (8000c68 <main+0xb4>)
 8000c2a:	f003 ff89 	bl	8004b40 <osThreadNew>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a0e      	ldr	r2, [pc, #56]	@ (8000c6c <main+0xb8>)
 8000c32:	6013      	str	r3, [r2, #0]

  /* creation of colorSensor */
  colorSensorHandle = osThreadNew(ColorSensorTask, NULL, &colorSensor_attributes);
 8000c34:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <main+0xbc>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	480e      	ldr	r0, [pc, #56]	@ (8000c74 <main+0xc0>)
 8000c3a:	f003 ff81 	bl	8004b40 <osThreadNew>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <main+0xc4>)
 8000c42:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c44:	f003 ff56 	bl	8004af4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <main+0x94>
 8000c4c:	08008860 	.word	0x08008860
 8000c50:	20000168 	.word	0x20000168
 8000c54:	200002b8 	.word	0x200002b8
 8000c58:	0800888c 	.word	0x0800888c
 8000c5c:	080011dd 	.word	0x080011dd
 8000c60:	200001f8 	.word	0x200001f8
 8000c64:	080088b0 	.word	0x080088b0
 8000c68:	080011ed 	.word	0x080011ed
 8000c6c:	200001fc 	.word	0x200001fc
 8000c70:	080088d4 	.word	0x080088d4
 8000c74:	0800125d 	.word	0x0800125d
 8000c78:	20000200 	.word	0x20000200

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	@ 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	@ 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f006 fe49 	bl	8007922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	4a27      	ldr	r2, [pc, #156]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb0:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a21      	ldr	r2, [pc, #132]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cec:	2310      	movs	r3, #16
 8000cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 f9a6 	bl	8002054 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d0e:	f000 fabf 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2302      	movs	r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fc08 	bl	8002544 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d3a:	f000 faa9 	bl	8001290 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	@ 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	@ 0x38
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d80:	4b38      	ldr	r3, [pc, #224]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000d82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000d88:	4b36      	ldr	r3, [pc, #216]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000d8a:	22c7      	movs	r2, #199	@ 0xc7
 8000d8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b35      	ldr	r3, [pc, #212]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8000d94:	4b33      	ldr	r3, [pc, #204]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000d96:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b31      	ldr	r3, [pc, #196]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000da2:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da8:	482e      	ldr	r0, [pc, #184]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000daa:	f001 fe1d 	bl	80029e8 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000db4:	f000 fa6c 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4827      	ldr	r0, [pc, #156]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000dc6:	f002 f97d 	bl	80030c4 <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000dd0:	f000 fa5e 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dd4:	4823      	ldr	r0, [pc, #140]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000dd6:	f001 feb9 	bl	8002b4c <HAL_TIM_PWM_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000de0:	f000 fa56 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4619      	mov	r1, r3
 8000df2:	481c      	ldr	r0, [pc, #112]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000df4:	f002 fd28 	bl	8003848 <HAL_TIMEx_MasterConfigSynchronization>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dfe:	f000 fa47 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e02:	2360      	movs	r3, #96	@ 0x60
 8000e04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	4812      	ldr	r0, [pc, #72]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000e1a:	f002 f891 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e24:	f000 fa34 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480d      	ldr	r0, [pc, #52]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000e30:	f002 f886 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000e3a:	f000 fa29 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2208      	movs	r2, #8
 8000e42:	4619      	mov	r1, r3
 8000e44:	4807      	ldr	r0, [pc, #28]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000e46:	f002 f87b 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000e50:	f000 fa1e 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e54:	4803      	ldr	r0, [pc, #12]	@ (8000e64 <MX_TIM2_Init+0x114>)
 8000e56:	f000 fa99 	bl	800138c <HAL_TIM_MspPostInit>

}
 8000e5a:	bf00      	nop
 8000e5c:	3738      	adds	r7, #56	@ 0x38
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000090 	.word	0x20000090

08000e68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	@ 0x38
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e98:	4b32      	ldr	r3, [pc, #200]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000e9a:	4a33      	ldr	r2, [pc, #204]	@ (8000f68 <MX_TIM3_Init+0x100>)
 8000e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8000e9e:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000ea0:	22c7      	movs	r2, #199	@ 0xc7
 8000ea2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000eac:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000eb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000eba:	2280      	movs	r2, #128	@ 0x80
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ebe:	4829      	ldr	r0, [pc, #164]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000ec0:	f001 fd92 	bl	80029e8 <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000eca:	f000 f9e1 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ed4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4822      	ldr	r0, [pc, #136]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000edc:	f002 f8f2 	bl	80030c4 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ee6:	f000 f9d3 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eea:	481e      	ldr	r0, [pc, #120]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000eec:	f001 fe2e 	bl	8002b4c <HAL_TIM_PWM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ef6:	f000 f9cb 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4619      	mov	r1, r3
 8000f08:	4816      	ldr	r0, [pc, #88]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000f0a:	f002 fc9d 	bl	8003848 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f14:	f000 f9bc 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	@ 0x60
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000f30:	f002 f806 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f3a:	f000 f9a9 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2204      	movs	r2, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000f46:	f001 fffb 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f50:	f000 f99e 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f54:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <MX_TIM3_Init+0xfc>)
 8000f56:	f000 fa19 	bl	800138c <HAL_TIM_MspPostInit>

}
 8000f5a:	bf00      	nop
 8000f5c:	3738      	adds	r7, #56	@ 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000d8 	.word	0x200000d8
 8000f68:	40000400 	.word	0x40000400

08000f6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	@ 0x38
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8000f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001054 <MX_TIM4_Init+0xe8>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8000fa4:	22c7      	movs	r2, #199	@ 0xc7
 8000fa6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b29      	ldr	r3, [pc, #164]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fae:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8000fb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b24      	ldr	r3, [pc, #144]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fc2:	4823      	ldr	r0, [pc, #140]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8000fc4:	f001 fd10 	bl	80029e8 <HAL_TIM_Base_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000fce:	f000 f95f 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fd8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481c      	ldr	r0, [pc, #112]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8000fe0:	f002 f870 	bl	80030c4 <HAL_TIM_ConfigClockSource>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000fea:	f000 f951 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fee:	4818      	ldr	r0, [pc, #96]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8000ff0:	f001 fdac 	bl	8002b4c <HAL_TIM_PWM_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ffa:	f000 f949 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	4619      	mov	r1, r3
 800100c:	4810      	ldr	r0, [pc, #64]	@ (8001050 <MX_TIM4_Init+0xe4>)
 800100e:	f002 fc1b 	bl	8003848 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001018:	f000 f93a 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101c:	2360      	movs	r3, #96	@ 0x60
 800101e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	4807      	ldr	r0, [pc, #28]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8001034:	f001 ff84 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800103e:	f000 f927 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001042:	4803      	ldr	r0, [pc, #12]	@ (8001050 <MX_TIM4_Init+0xe4>)
 8001044:	f000 f9a2 	bl	800138c <HAL_TIM_MspPostInit>

}
 8001048:	bf00      	nop
 800104a:	3738      	adds	r7, #56	@ 0x38
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000120 	.word	0x20000120
 8001054:	40000800 	.word	0x40000800

08001058 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <MX_USART1_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001064:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001090:	f002 fc5c 	bl	800394c <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f000 f8f9 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000168 	.word	0x20000168
 80010a8:	40011000 	.word	0x40011000

080010ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <MX_USART2_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010e4:	f002 fc32 	bl	800394c <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 f8cf 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001b0 	.word	0x200001b0
 80010fc:	40004400 	.word	0x40004400

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a2c      	ldr	r2, [pc, #176]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b26      	ldr	r3, [pc, #152]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a25      	ldr	r2, [pc, #148]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a1e      	ldr	r2, [pc, #120]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2160      	movs	r1, #96	@ 0x60
 800118a:	4812      	ldr	r0, [pc, #72]	@ (80011d4 <MX_GPIO_Init+0xd4>)
 800118c:	f000 ff48 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001190:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001196:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <MX_GPIO_Init+0xd8>)
 80011a8:	f000 fdb6 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80011ac:	2360      	movs	r3, #96	@ 0x60
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <MX_GPIO_Init+0xd4>)
 80011c4:	f000 fda8 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	@ 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020800 	.word	0x40020800

080011dc <BluetoothTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BluetoothTask */
void BluetoothTask(void *argument)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f003 fd3d 	bl	8004c64 <osDelay>
 80011ea:	e7fb      	b.n	80011e4 <BluetoothTask+0x8>

080011ec <MoveRobotArmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MoveRobotArmTask */
void MoveRobotArmTask(void *argument)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MoveRobotArmTask */
  /* Infinite loop */
  for(;;)
  {
//	  if(move_arm){
		  	  MoveArm(base_angle, shoulder_angle , elbow_angle, wrist_ver_angle, wrist_rot_angle, 10);
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MoveRobotArmTask+0x54>)
 80011f6:	7818      	ldrb	r0, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MoveRobotArmTask+0x58>)
 80011fa:	7819      	ldrb	r1, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <MoveRobotArmTask+0x5c>)
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <MoveRobotArmTask+0x60>)
 8001202:	781c      	ldrb	r4, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MoveRobotArmTask+0x64>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	250a      	movs	r5, #10
 800120a:	9501      	str	r5, [sp, #4]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	4623      	mov	r3, r4
 8001210:	f7ff fa86 	bl	8000720 <MoveArm>
	  		  move_arm = 0;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MoveRobotArmTask+0x68>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
	  		  index_buffer_read.value++;
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MoveRobotArmTask+0x6c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3301      	adds	r3, #1
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	b2d9      	uxtb	r1, r3
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <MoveRobotArmTask+0x6c>)
 800122e:	7813      	ldrb	r3, [r2, #0]
 8001230:	f361 0302 	bfi	r3, r1, #0, #3
 8001234:	7013      	strb	r3, [r2, #0]
//	  	  }
    osDelay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f003 fd14 	bl	8004c64 <osDelay>
		  	  MoveArm(base_angle, shoulder_angle , elbow_angle, wrist_ver_angle, wrist_rot_angle, 10);
 800123c:	bf00      	nop
 800123e:	e7d9      	b.n	80011f4 <MoveRobotArmTask+0x8>
 8001240:	200002cd 	.word	0x200002cd
 8001244:	200002ce 	.word	0x200002ce
 8001248:	200002cf 	.word	0x200002cf
 800124c:	200002d0 	.word	0x200002d0
 8001250:	200002d1 	.word	0x200002d1
 8001254:	200002d4 	.word	0x200002d4
 8001258:	20000208 	.word	0x20000208

0800125c <ColorSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ColorSensorTask */
void ColorSensorTask(void *argument)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ColorSensorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f003 fcfd 	bl	8004c64 <osDelay>
 800126a:	e7fb      	b.n	8001264 <ColorSensorTask+0x8>

0800126c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800127e:	f000 fb93 	bl	80019a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40010000 	.word	0x40010000

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <Error_Handler+0x8>

0800129c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_MspInit+0x54>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_MspInit+0x54>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_MspInit+0x54>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <HAL_MspInit+0x54>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <HAL_MspInit+0x54>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_MspInit+0x54>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	210f      	movs	r1, #15
 80012de:	f06f 0001 	mvn.w	r0, #1
 80012e2:	f000 fc5d 	bl	8001ba0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001304:	d10e      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_TIM_Base_MspInit+0x8c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a1c      	ldr	r2, [pc, #112]	@ (8001380 <HAL_TIM_Base_MspInit+0x8c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_TIM_Base_MspInit+0x8c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001322:	e026      	b.n	8001372 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a16      	ldr	r2, [pc, #88]	@ (8001384 <HAL_TIM_Base_MspInit+0x90>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d10e      	bne.n	800134c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <HAL_TIM_Base_MspInit+0x8c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <HAL_TIM_Base_MspInit+0x8c>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6413      	str	r3, [r2, #64]	@ 0x40
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <HAL_TIM_Base_MspInit+0x8c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
}
 800134a:	e012      	b.n	8001372 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <HAL_TIM_Base_MspInit+0x94>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10d      	bne.n	8001372 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_TIM_Base_MspInit+0x8c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <HAL_TIM_Base_MspInit+0x8c>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_TIM_Base_MspInit+0x8c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
}
 8001372:	bf00      	nop
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40000400 	.word	0x40000400
 8001388:	40000800 	.word	0x40000800

0800138c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	@ 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ac:	d13d      	bne.n	800142a <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	4b52      	ldr	r3, [pc, #328]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a51      	ldr	r2, [pc, #324]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b4f      	ldr	r3, [pc, #316]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a4a      	ldr	r2, [pc, #296]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b48      	ldr	r3, [pc, #288]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013f6:	2301      	movs	r3, #1
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	483f      	ldr	r0, [pc, #252]	@ (8001500 <HAL_TIM_MspPostInit+0x174>)
 8001402:	f000 fc89 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001406:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001418:	2301      	movs	r3, #1
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4838      	ldr	r0, [pc, #224]	@ (8001504 <HAL_TIM_MspPostInit+0x178>)
 8001424:	f000 fc78 	bl	8001d18 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001428:	e064      	b.n	80014f4 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a36      	ldr	r2, [pc, #216]	@ (8001508 <HAL_TIM_MspPostInit+0x17c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d13c      	bne.n	80014ae <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143c:	4a2f      	ldr	r2, [pc, #188]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6313      	str	r3, [r2, #48]	@ 0x30
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001458:	4a28      	ldr	r2, [pc, #160]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001460:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800147c:	2302      	movs	r3, #2
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4821      	ldr	r0, [pc, #132]	@ (800150c <HAL_TIM_MspPostInit+0x180>)
 8001488:	f000 fc46 	bl	8001d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800148c:	2310      	movs	r3, #16
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800149c:	2302      	movs	r3, #2
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4817      	ldr	r0, [pc, #92]	@ (8001504 <HAL_TIM_MspPostInit+0x178>)
 80014a8:	f000 fc36 	bl	8001d18 <HAL_GPIO_Init>
}
 80014ac:	e022      	b.n	80014f4 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <HAL_TIM_MspPostInit+0x184>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d11d      	bne.n	80014f4 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c0:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_TIM_MspPostInit+0x170>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014d4:	2340      	movs	r3, #64	@ 0x40
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014e4:	2302      	movs	r3, #2
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <HAL_TIM_MspPostInit+0x178>)
 80014f0:	f000 fc12 	bl	8001d18 <HAL_GPIO_Init>
}
 80014f4:	bf00      	nop
 80014f6:	3730      	adds	r7, #48	@ 0x30
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40000400 	.word	0x40000400
 800150c:	40020800 	.word	0x40020800
 8001510:	40000800 	.word	0x40000800

08001514 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a36      	ldr	r2, [pc, #216]	@ (800160c <HAL_UART_MspInit+0xf8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d135      	bne.n	80015a2 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b35      	ldr	r3, [pc, #212]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	4a34      	ldr	r2, [pc, #208]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6453      	str	r3, [r2, #68]	@ 0x44
 8001546:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b2e      	ldr	r3, [pc, #184]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a2d      	ldr	r2, [pc, #180]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800156e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001580:	2307      	movs	r3, #7
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4822      	ldr	r0, [pc, #136]	@ (8001614 <HAL_UART_MspInit+0x100>)
 800158c:	f000 fbc4 	bl	8001d18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2105      	movs	r1, #5
 8001594:	2025      	movs	r0, #37	@ 0x25
 8001596:	f000 fb03 	bl	8001ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800159a:	2025      	movs	r0, #37	@ 0x25
 800159c:	f000 fb1c 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80015a0:	e030      	b.n	8001604 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001618 <HAL_UART_MspInit+0x104>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d12b      	bne.n	8001604 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 80015b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015e4:	230c      	movs	r3, #12
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f4:	2307      	movs	r3, #7
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <HAL_UART_MspInit+0x100>)
 8001600:	f000 fb8a 	bl	8001d18 <HAL_GPIO_Init>
}
 8001604:	bf00      	nop
 8001606:	3730      	adds	r7, #48	@ 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40011000 	.word	0x40011000
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000
 8001618:	40004400 	.word	0x40004400

0800161c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <HAL_InitTick+0xd0>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	4a2d      	ldr	r2, [pc, #180]	@ (80016ec <HAL_InitTick+0xd0>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6453      	str	r3, [r2, #68]	@ 0x44
 800163c:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <HAL_InitTick+0xd0>)
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001648:	f107 020c 	add.w	r2, r7, #12
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f001 f996 	bl	8002984 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001658:	f001 f980 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 800165c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800165e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001660:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <HAL_InitTick+0xd4>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9b      	lsrs	r3, r3, #18
 8001668:	3b01      	subs	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800166c:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <HAL_InitTick+0xd8>)
 800166e:	4a22      	ldr	r2, [pc, #136]	@ (80016f8 <HAL_InitTick+0xdc>)
 8001670:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_InitTick+0xd8>)
 8001674:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001678:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800167a:	4a1e      	ldr	r2, [pc, #120]	@ (80016f4 <HAL_InitTick+0xd8>)
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001680:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <HAL_InitTick+0xd8>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_InitTick+0xd8>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <HAL_InitTick+0xd8>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001692:	4818      	ldr	r0, [pc, #96]	@ (80016f4 <HAL_InitTick+0xd8>)
 8001694:	f001 f9a8 	bl	80029e8 <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800169e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d11b      	bne.n	80016de <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016a6:	4813      	ldr	r0, [pc, #76]	@ (80016f4 <HAL_InitTick+0xd8>)
 80016a8:	f001 f9ee 	bl	8002a88 <HAL_TIM_Base_Start_IT>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d111      	bne.n	80016de <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016ba:	2019      	movs	r0, #25
 80016bc:	f000 fa8c 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	d808      	bhi.n	80016d8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016c6:	2200      	movs	r2, #0
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	2019      	movs	r0, #25
 80016cc:	f000 fa68 	bl	8001ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d0:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <HAL_InitTick+0xe0>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e002      	b.n	80016de <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3730      	adds	r7, #48	@ 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	431bde83 	.word	0x431bde83
 80016f4:	200002d8 	.word	0x200002d8
 80016f8:	40010000 	.word	0x40010000
 80016fc:	2000000c 	.word	0x2000000c

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <NMI_Handler+0x4>

08001708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <MemManage_Handler+0x4>

08001718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <UsageFault_Handler+0x4>

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800173e:	f001 fb0f 	bl	8002d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200002d8 	.word	0x200002d8

0800174c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <USART1_IRQHandler+0x10>)
 8001752:	f002 f9fb 	bl	8003b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000168 	.word	0x20000168

08001760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return 1;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_kill>:

int _kill(int pid, int sig)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800177a:	f006 f9e9 	bl	8007b50 <__errno>
 800177e:	4603      	mov	r3, r0
 8001780:	2216      	movs	r2, #22
 8001782:	601a      	str	r2, [r3, #0]
  return -1;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_exit>:

void _exit (int status)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ffe7 	bl	8001770 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017a2:	bf00      	nop
 80017a4:	e7fd      	b.n	80017a2 <_exit+0x12>

080017a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e00a      	b.n	80017ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017b8:	f3af 8000 	nop.w
 80017bc:	4601      	mov	r1, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	60ba      	str	r2, [r7, #8]
 80017c4:	b2ca      	uxtb	r2, r1
 80017c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dbf0      	blt.n	80017b8 <_read+0x12>
  }

  return len;
 80017d6:	687b      	ldr	r3, [r7, #4]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e009      	b.n	8001806 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	60ba      	str	r2, [r7, #8]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3301      	adds	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	dbf1      	blt.n	80017f2 <_write+0x12>
  }
  return len;
 800180e:	687b      	ldr	r3, [r7, #4]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_close>:

int _close(int file)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001840:	605a      	str	r2, [r3, #4]
  return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_isatty>:

int _isatty(int file)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001858:	2301      	movs	r3, #1
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001888:	4a14      	ldr	r2, [pc, #80]	@ (80018dc <_sbrk+0x5c>)
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <_sbrk+0x60>)
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001894:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <_sbrk+0x64>)
 800189e:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <_sbrk+0x68>)
 80018a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d207      	bcs.n	80018c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b0:	f006 f94e 	bl	8007b50 <__errno>
 80018b4:	4603      	mov	r3, r0
 80018b6:	220c      	movs	r2, #12
 80018b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	e009      	b.n	80018d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a05      	ldr	r2, [pc, #20]	@ (80018e4 <_sbrk+0x64>)
 80018d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20020000 	.word	0x20020000
 80018e0:	00000400 	.word	0x00000400
 80018e4:	20000320 	.word	0x20000320
 80018e8:	20004e60 	.word	0x20004e60

080018ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <SystemInit+0x20>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f6:	4a05      	ldr	r2, [pc, #20]	@ (800190c <SystemInit+0x20>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001948 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001914:	f7ff ffea 	bl	80018ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800191a:	490d      	ldr	r1, [pc, #52]	@ (8001950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800191c:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001930:	4c0a      	ldr	r4, [pc, #40]	@ (800195c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193e:	f006 f90d 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7ff f937 	bl	8000bb4 <main>
  bx  lr    
 8001946:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001950:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001954:	08008b04 	.word	0x08008b04
  ldr r2, =_sbss
 8001958:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800195c:	20004e5c 	.word	0x20004e5c

08001960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC_IRQHandler>
	...

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001968:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <HAL_Init+0x40>)
 800196e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <HAL_Init+0x40>)
 800197a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	@ (80019a4 <HAL_Init+0x40>)
 8001986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 f8fc 	bl	8001b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001992:	200f      	movs	r0, #15
 8001994:	f7ff fe42 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001998:	f7ff fc80 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000010 	.word	0x20000010
 80019cc:	20000324 	.word	0x20000324

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000324 	.word	0x20000324

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000010 	.word	0x20000010

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff4c 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb2:	f7ff ff61 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	6978      	ldr	r0, [r7, #20]
 8001bbe:	f7ff ffb1 	bl	8001b24 <NVIC_EncodePriority>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff80 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff54 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c02:	f7ff fee5 	bl	80019d0 <HAL_GetTick>
 8001c06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d008      	beq.n	8001c26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e052      	b.n	8001ccc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0216 	bic.w	r2, r2, #22
 8001c34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d103      	bne.n	8001c56 <HAL_DMA_Abort+0x62>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0208 	bic.w	r2, r2, #8
 8001c64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c76:	e013      	b.n	8001ca0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c78:	f7ff feaa 	bl	80019d0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d90c      	bls.n	8001ca0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e015      	b.n	8001ccc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1e4      	bne.n	8001c78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb2:	223f      	movs	r2, #63	@ 0x3f
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d004      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2280      	movs	r2, #128	@ 0x80
 8001cec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00c      	b.n	8001d0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e159      	b.n	8001fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f040 8148 	bne.w	8001fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d005      	beq.n	8001d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d130      	bne.n	8001dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da0:	2201      	movs	r2, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 0201 	and.w	r2, r3, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d017      	beq.n	8001e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d123      	bne.n	8001e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80a2 	beq.w	8001fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b57      	ldr	r3, [pc, #348]	@ (8002000 <HAL_GPIO_Init+0x2e8>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	4a56      	ldr	r2, [pc, #344]	@ (8002000 <HAL_GPIO_Init+0x2e8>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eae:	4b54      	ldr	r3, [pc, #336]	@ (8002000 <HAL_GPIO_Init+0x2e8>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	4a52      	ldr	r2, [pc, #328]	@ (8002004 <HAL_GPIO_Init+0x2ec>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a49      	ldr	r2, [pc, #292]	@ (8002008 <HAL_GPIO_Init+0x2f0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <HAL_GPIO_Init+0x202>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a48      	ldr	r2, [pc, #288]	@ (800200c <HAL_GPIO_Init+0x2f4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x1fe>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a47      	ldr	r2, [pc, #284]	@ (8002010 <HAL_GPIO_Init+0x2f8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a46      	ldr	r2, [pc, #280]	@ (8002014 <HAL_GPIO_Init+0x2fc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x1f6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a45      	ldr	r2, [pc, #276]	@ (8002018 <HAL_GPIO_Init+0x300>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x1f2>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e008      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e004      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x204>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f002 0203 	and.w	r2, r2, #3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4093      	lsls	r3, r2
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2c:	4935      	ldr	r1, [pc, #212]	@ (8002004 <HAL_GPIO_Init+0x2ec>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3a:	4b38      	ldr	r3, [pc, #224]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f64:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f88:	4a24      	ldr	r2, [pc, #144]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8e:	4b23      	ldr	r3, [pc, #140]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb8:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	@ (800201c <HAL_GPIO_Init+0x304>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	f67f aea2 	bls.w	8001d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3724      	adds	r7, #36	@ 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40013800 	.word	0x40013800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400
 8002010:	40020800 	.word	0x40020800
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40021000 	.word	0x40021000
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e267      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d075      	beq.n	800215e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002072:	4b88      	ldr	r3, [pc, #544]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b04      	cmp	r3, #4
 800207c:	d00c      	beq.n	8002098 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207e:	4b85      	ldr	r3, [pc, #532]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002086:	2b08      	cmp	r3, #8
 8002088:	d112      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208a:	4b82      	ldr	r3, [pc, #520]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002092:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002096:	d10b      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	4b7e      	ldr	r3, [pc, #504]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d05b      	beq.n	800215c <HAL_RCC_OscConfig+0x108>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d157      	bne.n	800215c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e242      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b8:	d106      	bne.n	80020c8 <HAL_RCC_OscConfig+0x74>
 80020ba:	4b76      	ldr	r3, [pc, #472]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a75      	ldr	r2, [pc, #468]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e01d      	b.n	8002104 <HAL_RCC_OscConfig+0xb0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x98>
 80020d2:	4b70      	ldr	r3, [pc, #448]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6f      	ldr	r2, [pc, #444]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b6d      	ldr	r3, [pc, #436]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6c      	ldr	r2, [pc, #432]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xb0>
 80020ec:	4b69      	ldr	r3, [pc, #420]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a68      	ldr	r2, [pc, #416]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b66      	ldr	r3, [pc, #408]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a65      	ldr	r2, [pc, #404]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fc60 	bl	80019d0 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fc5c 	bl	80019d0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	@ 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e207      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b5b      	ldr	r3, [pc, #364]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xc0>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fc4c 	bl	80019d0 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff fc48 	bl	80019d0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	@ 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1f3      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	4b51      	ldr	r3, [pc, #324]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0xe8>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d063      	beq.n	8002232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800216a:	4b4a      	ldr	r3, [pc, #296]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002176:	4b47      	ldr	r3, [pc, #284]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800217e:	2b08      	cmp	r3, #8
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002182:	4b44      	ldr	r3, [pc, #272]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	4b41      	ldr	r3, [pc, #260]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x152>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1c7      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4937      	ldr	r1, [pc, #220]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e03a      	b.n	8002232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4b34      	ldr	r3, [pc, #208]	@ (8002298 <HAL_RCC_OscConfig+0x244>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7ff fc01 	bl	80019d0 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d2:	f7ff fbfd 	bl	80019d0 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e1a8      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b28      	ldr	r3, [pc, #160]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4925      	ldr	r1, [pc, #148]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002206:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <HAL_RCC_OscConfig+0x244>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff fbe0 	bl	80019d0 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002214:	f7ff fbdc 	bl	80019d0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e187      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d036      	beq.n	80022ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d016      	beq.n	8002274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <HAL_RCC_OscConfig+0x248>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff fbc0 	bl	80019d0 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff fbbc 	bl	80019d0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e167      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_RCC_OscConfig+0x240>)
 8002268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x200>
 8002272:	e01b      	b.n	80022ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_RCC_OscConfig+0x248>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7ff fba9 	bl	80019d0 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	e00e      	b.n	80022a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002282:	f7ff fba5 	bl	80019d0 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d907      	bls.n	80022a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e150      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
 8002294:	40023800 	.word	0x40023800
 8002298:	42470000 	.word	0x42470000
 800229c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	4b88      	ldr	r3, [pc, #544]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ea      	bne.n	8002282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8097 	beq.w	80023e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b81      	ldr	r3, [pc, #516]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	4b7d      	ldr	r3, [pc, #500]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	4a7c      	ldr	r2, [pc, #496]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022da:	4b7a      	ldr	r3, [pc, #488]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b77      	ldr	r3, [pc, #476]	@ (80024c8 <HAL_RCC_OscConfig+0x474>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b74      	ldr	r3, [pc, #464]	@ (80024c8 <HAL_RCC_OscConfig+0x474>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a73      	ldr	r2, [pc, #460]	@ (80024c8 <HAL_RCC_OscConfig+0x474>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7ff fb65 	bl	80019d0 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7ff fb61 	bl	80019d0 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e10c      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b6a      	ldr	r3, [pc, #424]	@ (80024c8 <HAL_RCC_OscConfig+0x474>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x2ea>
 8002330:	4b64      	ldr	r3, [pc, #400]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002334:	4a63      	ldr	r2, [pc, #396]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6713      	str	r3, [r2, #112]	@ 0x70
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x324>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x30c>
 8002346:	4b5f      	ldr	r3, [pc, #380]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234a:	4a5e      	ldr	r2, [pc, #376]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6713      	str	r3, [r2, #112]	@ 0x70
 8002352:	4b5c      	ldr	r3, [pc, #368]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002356:	4a5b      	ldr	r2, [pc, #364]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6713      	str	r3, [r2, #112]	@ 0x70
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x324>
 8002360:	4b58      	ldr	r3, [pc, #352]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002364:	4a57      	ldr	r2, [pc, #348]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	6713      	str	r3, [r2, #112]	@ 0x70
 800236c:	4b55      	ldr	r3, [pc, #340]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002370:	4a54      	ldr	r2, [pc, #336]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002372:	f023 0304 	bic.w	r3, r3, #4
 8002376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d015      	beq.n	80023ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7ff fb26 	bl	80019d0 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7ff fb22 	bl	80019d0 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e0cb      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239e:	4b49      	ldr	r3, [pc, #292]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0ee      	beq.n	8002388 <HAL_RCC_OscConfig+0x334>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff fb10 	bl	80019d0 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7ff fb0c 	bl	80019d0 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0b5      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ca:	4b3e      	ldr	r3, [pc, #248]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ee      	bne.n	80023b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023dc:	4b39      	ldr	r3, [pc, #228]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	4a38      	ldr	r2, [pc, #224]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a1 	beq.w	8002534 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f2:	4b34      	ldr	r3, [pc, #208]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d05c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d141      	bne.n	800248a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002406:	4b31      	ldr	r3, [pc, #196]	@ (80024cc <HAL_RCC_OscConfig+0x478>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff fae0 	bl	80019d0 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002414:	f7ff fadc 	bl	80019d0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e087      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002426:	4b27      	ldr	r3, [pc, #156]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	3b01      	subs	r3, #1
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	491b      	ldr	r1, [pc, #108]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <HAL_RCC_OscConfig+0x478>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7ff fab5 	bl	80019d0 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7ff fab1 	bl	80019d0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e05c      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x416>
 8002488:	e054      	b.n	8002534 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <HAL_RCC_OscConfig+0x478>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff fa9e 	bl	80019d0 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002498:	f7ff fa9a 	bl	80019d0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e045      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_RCC_OscConfig+0x470>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x444>
 80024b6:	e03d      	b.n	8002534 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e038      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000
 80024cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_RCC_OscConfig+0x4ec>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d028      	beq.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d121      	bne.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d11a      	bne.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002500:	4013      	ands	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002508:	4293      	cmp	r3, r2
 800250a:	d111      	bne.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0cc      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b68      	ldr	r3, [pc, #416]	@ (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d90c      	bls.n	8002580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b65      	ldr	r3, [pc, #404]	@ (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b63      	ldr	r3, [pc, #396]	@ (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0b8      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002598:	4b59      	ldr	r3, [pc, #356]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a58      	ldr	r2, [pc, #352]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b0:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b50      	ldr	r3, [pc, #320]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	494d      	ldr	r1, [pc, #308]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d044      	beq.n	8002664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b47      	ldr	r3, [pc, #284]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d119      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b3f      	ldr	r3, [pc, #252]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e06f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b3b      	ldr	r3, [pc, #236]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e067      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4934      	ldr	r1, [pc, #208]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7ff f9cc 	bl	80019d0 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7ff f9c8 	bl	80019d0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e04f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2b      	ldr	r3, [pc, #172]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b25      	ldr	r3, [pc, #148]	@ (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d20c      	bcs.n	800268c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b22      	ldr	r3, [pc, #136]	@ (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e032      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002698:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4916      	ldr	r1, [pc, #88]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b6:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	490e      	ldr	r1, [pc, #56]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ca:	f000 f821 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 80026ce:	4602      	mov	r2, r0
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	490a      	ldr	r1, [pc, #40]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	5ccb      	ldrb	r3, [r1, r3]
 80026de:	fa22 f303 	lsr.w	r3, r2, r3
 80026e2:	4a09      	ldr	r2, [pc, #36]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026e6:	4b09      	ldr	r3, [pc, #36]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe ff96 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023c00 	.word	0x40023c00
 8002700:	40023800 	.word	0x40023800
 8002704:	080088f8 	.word	0x080088f8
 8002708:	20000008 	.word	0x20000008
 800270c:	2000000c 	.word	0x2000000c

08002710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002714:	b094      	sub	sp, #80	@ 0x50
 8002716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002728:	4b79      	ldr	r3, [pc, #484]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d00d      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x40>
 8002734:	2b08      	cmp	r3, #8
 8002736:	f200 80e1 	bhi.w	80028fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x34>
 800273e:	2b04      	cmp	r3, #4
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x3a>
 8002742:	e0db      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b73      	ldr	r3, [pc, #460]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x204>)
 8002746:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002748:	e0db      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800274a:	4b73      	ldr	r3, [pc, #460]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x208>)
 800274c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800274e:	e0d8      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002750:	4b6f      	ldr	r3, [pc, #444]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002758:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275a:	4b6d      	ldr	r3, [pc, #436]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d063      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002766:	4b6a      	ldr	r3, [pc, #424]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	2200      	movs	r2, #0
 800276e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002770:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	633b      	str	r3, [r7, #48]	@ 0x30
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	@ 0x34
 800277e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002782:	4622      	mov	r2, r4
 8002784:	462b      	mov	r3, r5
 8002786:	f04f 0000 	mov.w	r0, #0
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	0159      	lsls	r1, r3, #5
 8002790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002794:	0150      	lsls	r0, r2, #5
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4621      	mov	r1, r4
 800279c:	1a51      	subs	r1, r2, r1
 800279e:	6139      	str	r1, [r7, #16]
 80027a0:	4629      	mov	r1, r5
 80027a2:	eb63 0301 	sbc.w	r3, r3, r1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027b4:	4659      	mov	r1, fp
 80027b6:	018b      	lsls	r3, r1, #6
 80027b8:	4651      	mov	r1, sl
 80027ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027be:	4651      	mov	r1, sl
 80027c0:	018a      	lsls	r2, r1, #6
 80027c2:	4651      	mov	r1, sl
 80027c4:	ebb2 0801 	subs.w	r8, r2, r1
 80027c8:	4659      	mov	r1, fp
 80027ca:	eb63 0901 	sbc.w	r9, r3, r1
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027e2:	4690      	mov	r8, r2
 80027e4:	4699      	mov	r9, r3
 80027e6:	4623      	mov	r3, r4
 80027e8:	eb18 0303 	adds.w	r3, r8, r3
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	462b      	mov	r3, r5
 80027f0:	eb49 0303 	adc.w	r3, r9, r3
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002802:	4629      	mov	r1, r5
 8002804:	024b      	lsls	r3, r1, #9
 8002806:	4621      	mov	r1, r4
 8002808:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800280c:	4621      	mov	r1, r4
 800280e:	024a      	lsls	r2, r1, #9
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002816:	2200      	movs	r2, #0
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800281a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800281c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002820:	f7fd fd36 	bl	8000290 <__aeabi_uldivmod>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4613      	mov	r3, r2
 800282a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800282c:	e058      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282e:	4b38      	ldr	r3, [pc, #224]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	099b      	lsrs	r3, r3, #6
 8002834:	2200      	movs	r2, #0
 8002836:	4618      	mov	r0, r3
 8002838:	4611      	mov	r1, r2
 800283a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800283e:	623b      	str	r3, [r7, #32]
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
 8002844:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	f04f 0000 	mov.w	r0, #0
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	0159      	lsls	r1, r3, #5
 8002856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800285a:	0150      	lsls	r0, r2, #5
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4641      	mov	r1, r8
 8002862:	ebb2 0a01 	subs.w	sl, r2, r1
 8002866:	4649      	mov	r1, r9
 8002868:	eb63 0b01 	sbc.w	fp, r3, r1
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002878:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800287c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002880:	ebb2 040a 	subs.w	r4, r2, sl
 8002884:	eb63 050b 	sbc.w	r5, r3, fp
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	00eb      	lsls	r3, r5, #3
 8002892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002896:	00e2      	lsls	r2, r4, #3
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	4643      	mov	r3, r8
 800289e:	18e3      	adds	r3, r4, r3
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	464b      	mov	r3, r9
 80028a4:	eb45 0303 	adc.w	r3, r5, r3
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028b6:	4629      	mov	r1, r5
 80028b8:	028b      	lsls	r3, r1, #10
 80028ba:	4621      	mov	r1, r4
 80028bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c0:	4621      	mov	r1, r4
 80028c2:	028a      	lsls	r2, r1, #10
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ca:	2200      	movs	r2, #0
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	61fa      	str	r2, [r7, #28]
 80028d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d4:	f7fd fcdc 	bl	8000290 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	3301      	adds	r3, #1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028fa:	e002      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x204>)
 80028fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002904:	4618      	mov	r0, r3
 8002906:	3750      	adds	r7, #80	@ 0x50
 8002908:	46bd      	mov	sp, r7
 800290a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b03      	ldr	r3, [pc, #12]	@ (8002930 <HAL_RCC_GetHCLKFreq+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000008 	.word	0x20000008

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002938:	f7ff fff0 	bl	800291c <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	@ (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	08008908 	.word	0x08008908

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002960:	f7ff ffdc 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	@ (800297c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0b5b      	lsrs	r3, r3, #13
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4903      	ldr	r1, [pc, #12]	@ (8002980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	08008908 	.word	0x08008908

08002984 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	220f      	movs	r2, #15
 8002992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029a0:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029b8:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	08db      	lsrs	r3, r3, #3
 80029be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <HAL_RCC_GetClockConfig+0x60>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0207 	and.w	r2, r3, #7
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40023c00 	.word	0x40023c00

080029e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e041      	b.n	8002a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe fc70 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f000 fc3c 	bl	80032a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d001      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e044      	b.n	8002b2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b38 <HAL_TIM_Base_Start_IT+0xb0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d018      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aca:	d013      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x6c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b3c <HAL_TIM_Base_Start_IT+0xb4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00e      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a19      	ldr	r2, [pc, #100]	@ (8002b40 <HAL_TIM_Base_Start_IT+0xb8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x6c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <HAL_TIM_Base_Start_IT+0xc0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d111      	bne.n	8002b18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d010      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b16:	e007      	b.n	8002b28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40000800 	.word	0x40000800
 8002b44:	40000c00 	.word	0x40000c00
 8002b48:	40014000 	.word	0x40014000

08002b4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e041      	b.n	8002be2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f839 	bl	8002bea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f000 fb8a 	bl	80032a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <HAL_TIM_PWM_Start+0x24>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e022      	b.n	8002c6a <HAL_TIM_PWM_Start+0x6a>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d109      	bne.n	8002c3e <HAL_TIM_PWM_Start+0x3e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e015      	b.n	8002c6a <HAL_TIM_PWM_Start+0x6a>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d109      	bne.n	8002c58 <HAL_TIM_PWM_Start+0x58>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e008      	b.n	8002c6a <HAL_TIM_PWM_Start+0x6a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e068      	b.n	8002d44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x82>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c80:	e013      	b.n	8002caa <HAL_TIM_PWM_Start+0xaa>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start+0x92>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c90:	e00b      	b.n	8002caa <HAL_TIM_PWM_Start+0xaa>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0xa2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ca0:	e003      	b.n	8002caa <HAL_TIM_PWM_Start+0xaa>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	6839      	ldr	r1, [r7, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fda2 	bl	80037fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a23      	ldr	r2, [pc, #140]	@ (8002d4c <HAL_TIM_PWM_Start+0x14c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d107      	bne.n	8002cd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <HAL_TIM_PWM_Start+0x14c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d018      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x10e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce4:	d013      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x10e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a19      	ldr	r2, [pc, #100]	@ (8002d50 <HAL_TIM_PWM_Start+0x150>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x10e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <HAL_TIM_PWM_Start+0x154>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x10e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a16      	ldr	r2, [pc, #88]	@ (8002d58 <HAL_TIM_PWM_Start+0x158>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_TIM_PWM_Start+0x10e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a14      	ldr	r2, [pc, #80]	@ (8002d5c <HAL_TIM_PWM_Start+0x15c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d111      	bne.n	8002d32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d010      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d30:	e007      	b.n	8002d42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	40014000 	.word	0x40014000

08002d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d020      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0202 	mvn.w	r2, #2
 8002d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa5b 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa4d 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fa5e 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d020      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0204 	mvn.w	r2, #4
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa35 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa27 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fa38 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d020      	beq.n	8002e5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0208 	mvn.w	r2, #8
 8002e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2204      	movs	r2, #4
 8002e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa0f 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa01 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fa12 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d020      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01b      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0210 	mvn.w	r2, #16
 8002e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f9e9 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9db 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f9ec 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00c      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0201 	mvn.w	r2, #1
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fe f9d0 	bl	800126c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fd24 	bl	8003938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f9bd 	bl	800328e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0220 	mvn.w	r2, #32
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fcf6 	bl	8003924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e0ae      	b.n	80030bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	f200 809f 	bhi.w	80030ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	080030ad 	.word	0x080030ad
 8002f7c:	080030ad 	.word	0x080030ad
 8002f80:	080030ad 	.word	0x080030ad
 8002f84:	08002fe9 	.word	0x08002fe9
 8002f88:	080030ad 	.word	0x080030ad
 8002f8c:	080030ad 	.word	0x080030ad
 8002f90:	080030ad 	.word	0x080030ad
 8002f94:	0800302b 	.word	0x0800302b
 8002f98:	080030ad 	.word	0x080030ad
 8002f9c:	080030ad 	.word	0x080030ad
 8002fa0:	080030ad 	.word	0x080030ad
 8002fa4:	0800306b 	.word	0x0800306b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f9fe 	bl	80033b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0208 	orr.w	r2, r2, #8
 8002fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0204 	bic.w	r2, r2, #4
 8002fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6999      	ldr	r1, [r3, #24]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	619a      	str	r2, [r3, #24]
      break;
 8002fe6:	e064      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fa44 	bl	800347c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
      break;
 8003028:	e043      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fa8f 	bl	8003554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0208 	orr.w	r2, r2, #8
 8003044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0204 	bic.w	r2, r2, #4
 8003054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69d9      	ldr	r1, [r3, #28]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	61da      	str	r2, [r3, #28]
      break;
 8003068:	e023      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fad9 	bl	8003628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69d9      	ldr	r1, [r3, #28]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	021a      	lsls	r2, r3, #8
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	61da      	str	r2, [r3, #28]
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	75fb      	strb	r3, [r7, #23]
      break;
 80030b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIM_ConfigClockSource+0x1c>
 80030dc:	2302      	movs	r3, #2
 80030de:	e0b4      	b.n	800324a <HAL_TIM_ConfigClockSource+0x186>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003118:	d03e      	beq.n	8003198 <HAL_TIM_ConfigClockSource+0xd4>
 800311a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800311e:	f200 8087 	bhi.w	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003126:	f000 8086 	beq.w	8003236 <HAL_TIM_ConfigClockSource+0x172>
 800312a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800312e:	d87f      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b70      	cmp	r3, #112	@ 0x70
 8003132:	d01a      	beq.n	800316a <HAL_TIM_ConfigClockSource+0xa6>
 8003134:	2b70      	cmp	r3, #112	@ 0x70
 8003136:	d87b      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b60      	cmp	r3, #96	@ 0x60
 800313a:	d050      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x11a>
 800313c:	2b60      	cmp	r3, #96	@ 0x60
 800313e:	d877      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b50      	cmp	r3, #80	@ 0x50
 8003142:	d03c      	beq.n	80031be <HAL_TIM_ConfigClockSource+0xfa>
 8003144:	2b50      	cmp	r3, #80	@ 0x50
 8003146:	d873      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b40      	cmp	r3, #64	@ 0x40
 800314a:	d058      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x13a>
 800314c:	2b40      	cmp	r3, #64	@ 0x40
 800314e:	d86f      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b30      	cmp	r3, #48	@ 0x30
 8003152:	d064      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	2b30      	cmp	r3, #48	@ 0x30
 8003156:	d86b      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d060      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x15a>
 800315c:	2b20      	cmp	r3, #32
 800315e:	d867      	bhi.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d05c      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x15a>
 8003164:	2b10      	cmp	r3, #16
 8003166:	d05a      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x15a>
 8003168:	e062      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800317a:	f000 fb1f 	bl	80037bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800318c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	609a      	str	r2, [r3, #8]
      break;
 8003196:	e04f      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031a8:	f000 fb08 	bl	80037bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ba:	609a      	str	r2, [r3, #8]
      break;
 80031bc:	e03c      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	461a      	mov	r2, r3
 80031cc:	f000 fa7c 	bl	80036c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2150      	movs	r1, #80	@ 0x50
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fad5 	bl	8003786 <TIM_ITRx_SetConfig>
      break;
 80031dc:	e02c      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ea:	461a      	mov	r2, r3
 80031ec:	f000 fa9b 	bl	8003726 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2160      	movs	r1, #96	@ 0x60
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fac5 	bl	8003786 <TIM_ITRx_SetConfig>
      break;
 80031fc:	e01c      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800320a:	461a      	mov	r2, r3
 800320c:	f000 fa5c 	bl	80036c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2140      	movs	r1, #64	@ 0x40
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fab5 	bl	8003786 <TIM_ITRx_SetConfig>
      break;
 800321c:	e00c      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f000 faac 	bl	8003786 <TIM_ITRx_SetConfig>
      break;
 800322e:	e003      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e000      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a37      	ldr	r2, [pc, #220]	@ (8003394 <TIM_Base_SetConfig+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00f      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c2:	d00b      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a34      	ldr	r2, [pc, #208]	@ (8003398 <TIM_Base_SetConfig+0xf4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a33      	ldr	r2, [pc, #204]	@ (800339c <TIM_Base_SetConfig+0xf8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a32      	ldr	r2, [pc, #200]	@ (80033a0 <TIM_Base_SetConfig+0xfc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a28      	ldr	r2, [pc, #160]	@ (8003394 <TIM_Base_SetConfig+0xf0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01b      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d017      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a25      	ldr	r2, [pc, #148]	@ (8003398 <TIM_Base_SetConfig+0xf4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a24      	ldr	r2, [pc, #144]	@ (800339c <TIM_Base_SetConfig+0xf8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a23      	ldr	r2, [pc, #140]	@ (80033a0 <TIM_Base_SetConfig+0xfc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a22      	ldr	r2, [pc, #136]	@ (80033a4 <TIM_Base_SetConfig+0x100>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a21      	ldr	r2, [pc, #132]	@ (80033a8 <TIM_Base_SetConfig+0x104>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a20      	ldr	r2, [pc, #128]	@ (80033ac <TIM_Base_SetConfig+0x108>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d108      	bne.n	8003340 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a0c      	ldr	r2, [pc, #48]	@ (8003394 <TIM_Base_SetConfig+0xf0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d103      	bne.n	800336e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f043 0204 	orr.w	r2, r3, #4
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40010000 	.word	0x40010000
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800
 80033a0:	40000c00 	.word	0x40000c00
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40014400 	.word	0x40014400
 80033ac:	40014800 	.word	0x40014800

080033b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f023 0201 	bic.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 0302 	bic.w	r3, r3, #2
 80033f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a1c      	ldr	r2, [pc, #112]	@ (8003478 <TIM_OC1_SetConfig+0xc8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10c      	bne.n	8003426 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0308 	bic.w	r3, r3, #8
 8003412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f023 0304 	bic.w	r3, r3, #4
 8003424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a13      	ldr	r2, [pc, #76]	@ (8003478 <TIM_OC1_SetConfig+0xc8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d111      	bne.n	8003452 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800343c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40010000 	.word	0x40010000

0800347c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f023 0210 	bic.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0320 	bic.w	r3, r3, #32
 80034c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003550 <TIM_OC2_SetConfig+0xd4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d10d      	bne.n	80034f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a15      	ldr	r2, [pc, #84]	@ (8003550 <TIM_OC2_SetConfig+0xd4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d113      	bne.n	8003528 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800350e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000

08003554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800359c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003624 <TIM_OC3_SetConfig+0xd0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10d      	bne.n	80035ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a14      	ldr	r2, [pc, #80]	@ (8003624 <TIM_OC3_SetConfig+0xd0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d113      	bne.n	80035fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40010000 	.word	0x40010000

08003628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	031b      	lsls	r3, r3, #12
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a10      	ldr	r2, [pc, #64]	@ (80036c4 <TIM_OC4_SetConfig+0x9c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d109      	bne.n	800369c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800368e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	019b      	lsls	r3, r3, #6
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010000 	.word	0x40010000

080036c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 030a 	bic.w	r3, r3, #10
 8003704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003726:	b480      	push	{r7}
 8003728:	b087      	sub	sp, #28
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f023 0210 	bic.w	r2, r3, #16
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	031b      	lsls	r3, r3, #12
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003762:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f043 0307 	orr.w	r3, r3, #7
 80037a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	021a      	lsls	r2, r3, #8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	431a      	orrs	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	609a      	str	r2, [r3, #8]
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2201      	movs	r2, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	431a      	orrs	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	621a      	str	r2, [r3, #32]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800385c:	2302      	movs	r3, #2
 800385e:	e050      	b.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1c      	ldr	r2, [pc, #112]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d018      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ac:	d013      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a18      	ldr	r2, [pc, #96]	@ (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a16      	ldr	r2, [pc, #88]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a15      	ldr	r2, [pc, #84]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a13      	ldr	r2, [pc, #76]	@ (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10c      	bne.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40010000 	.word	0x40010000
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40000c00 	.word	0x40000c00
 8003920:	40014000 	.word	0x40014000

08003924 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e042      	b.n	80039e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd fdce 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	@ 0x24
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800398e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fdd3 	bl	800453c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	@ 0x28
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d175      	bne.n	8003af8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_UART_Transmit+0x2c>
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e06e      	b.n	8003afa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	@ 0x21
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2a:	f7fd ffd1 	bl	80019d0 <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Transmit+0x6c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e003      	b.n	8003a60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a60:	e02e      	b.n	8003ac0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2180      	movs	r1, #128	@ 0x80
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fb37 	bl	80040e0 <UART_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e03a      	b.n	8003afa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1cb      	bne.n	8003a62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2140      	movs	r1, #64	@ 0x40
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fb03 	bl	80040e0 <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e006      	b.n	8003afa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d112      	bne.n	8003b42 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_UART_Receive_IT+0x26>
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e00b      	b.n	8003b44 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	461a      	mov	r2, r3
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fb2a 	bl	8004192 <UART_Start_Receive_IT>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	e000      	b.n	8003b44 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b0ba      	sub	sp, #232	@ 0xe8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x66>
 8003b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fc07 	bl	80043be <UART_Receive_IT>
      return;
 8003bb0:	e273      	b.n	800409a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80de 	beq.w	8003d78 <HAL_UART_IRQHandler+0x22c>
 8003bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bcc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80d1 	beq.w	8003d78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <HAL_UART_IRQHandler+0xae>
 8003be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	f043 0201 	orr.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <HAL_UART_IRQHandler+0xd2>
 8003c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	f043 0202 	orr.w	r2, r3, #2
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_UART_IRQHandler+0xf6>
 8003c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3a:	f043 0204 	orr.w	r2, r3, #4
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d011      	beq.n	8003c72 <HAL_UART_IRQHandler+0x126>
 8003c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f043 0208 	orr.w	r2, r3, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 820a 	beq.w	8004090 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_UART_IRQHandler+0x14e>
 8003c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fb92 	bl	80043be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca4:	2b40      	cmp	r3, #64	@ 0x40
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x17a>
 8003cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d04f      	beq.n	8003d66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa9d 	bl	8004206 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd6:	2b40      	cmp	r3, #64	@ 0x40
 8003cd8:	d141      	bne.n	8003d5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3314      	adds	r3, #20
 8003ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3314      	adds	r3, #20
 8003d02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1d9      	bne.n	8003cda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d013      	beq.n	8003d56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d32:	4a8a      	ldr	r2, [pc, #552]	@ (8003f5c <HAL_UART_IRQHandler+0x410>)
 8003d34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd ffca 	bl	8001cd4 <HAL_DMA_Abort_IT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d50:	4610      	mov	r0, r2
 8003d52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	e00e      	b.n	8003d74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f9ac 	bl	80040b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e00a      	b.n	8003d74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f9a8 	bl	80040b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	e006      	b.n	8003d74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f9a4 	bl	80040b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d72:	e18d      	b.n	8004090 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	bf00      	nop
    return;
 8003d76:	e18b      	b.n	8004090 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	f040 8167 	bne.w	8004050 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8160 	beq.w	8004050 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8159 	beq.w	8004050 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbe:	2b40      	cmp	r3, #64	@ 0x40
 8003dc0:	f040 80ce 	bne.w	8003f60 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a9 	beq.w	8003f2c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003de2:	429a      	cmp	r2, r3
 8003de4:	f080 80a2 	bcs.w	8003f2c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dfa:	f000 8088 	beq.w	8003f0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1d9      	bne.n	8003dfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3314      	adds	r3, #20
 8003e50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e1      	bne.n	8003e4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003eaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003eac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003eb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e3      	bne.n	8003e86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ef0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ef2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ef6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e3      	bne.n	8003ecc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fd fe73 	bl	8001bf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8cf 	bl	80040c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f2a:	e0b3      	b.n	8004094 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f34:	429a      	cmp	r2, r3
 8003f36:	f040 80ad 	bne.w	8004094 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f44:	f040 80a6 	bne.w	8004094 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8b7 	bl	80040c8 <HAL_UARTEx_RxEventCallback>
      return;
 8003f5a:	e09b      	b.n	8004094 <HAL_UART_IRQHandler+0x548>
 8003f5c:	080042cd 	.word	0x080042cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 808e 	beq.w	8004098 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003f7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8089 	beq.w	8004098 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003faa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e3      	bne.n	8003f86 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3314      	adds	r3, #20
 8003fde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fe2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e3      	bne.n	8003fbe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	60fb      	str	r3, [r7, #12]
   return(result);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0310 	bic.w	r3, r3, #16
 800401a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004028:	61fa      	str	r2, [r7, #28]
 800402a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	69b9      	ldr	r1, [r7, #24]
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	617b      	str	r3, [r7, #20]
   return(result);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e3      	bne.n	8004004 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004042:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f83d 	bl	80040c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800404e:	e023      	b.n	8004098 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d009      	beq.n	8004070 <HAL_UART_IRQHandler+0x524>
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f940 	bl	80042ee <UART_Transmit_IT>
    return;
 800406e:	e014      	b.n	800409a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00e      	beq.n	800409a <HAL_UART_IRQHandler+0x54e>
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f980 	bl	800438e <UART_EndTransmit_IT>
    return;
 800408e:	e004      	b.n	800409a <HAL_UART_IRQHandler+0x54e>
    return;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_UART_IRQHandler+0x54e>
      return;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_UART_IRQHandler+0x54e>
      return;
 8004098:	bf00      	nop
  }
}
 800409a:	37e8      	adds	r7, #232	@ 0xe8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f0:	e03b      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d037      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fd fc69 	bl	80019d0 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	6a3a      	ldr	r2, [r7, #32]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <UART_WaitOnFlagUntilTimeout+0x30>
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e03a      	b.n	800418a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d023      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b80      	cmp	r3, #128	@ 0x80
 8004126:	d020      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b40      	cmp	r3, #64	@ 0x40
 800412c:	d01d      	beq.n	800416a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b08      	cmp	r3, #8
 800413a:	d116      	bne.n	800416a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f857 	bl	8004206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2208      	movs	r2, #8
 800415c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e00f      	b.n	800418a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	429a      	cmp	r2, r3
 8004186:	d0b4      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	88fa      	ldrh	r2, [r7, #6]
 80041aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2222      	movs	r2, #34	@ 0x22
 80041bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0220 	orr.w	r2, r2, #32
 80041f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004206:	b480      	push	{r7}
 8004208:	b095      	sub	sp, #84	@ 0x54
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800422e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004230:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004234:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800423c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e5      	bne.n	800420e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	61fb      	str	r3, [r7, #28]
   return(result);
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	64bb      	str	r3, [r7, #72]	@ 0x48
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004262:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e5      	bne.n	8004242 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	2b01      	cmp	r3, #1
 800427c:	d119      	bne.n	80042b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	60bb      	str	r3, [r7, #8]
   return(result);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f023 0310 	bic.w	r3, r3, #16
 8004294:	647b      	str	r3, [r7, #68]	@ 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800429e:	61ba      	str	r2, [r7, #24]
 80042a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6979      	ldr	r1, [r7, #20]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	613b      	str	r3, [r7, #16]
   return(result);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042c0:	bf00      	nop
 80042c2:	3754      	adds	r7, #84	@ 0x54
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff fee7 	bl	80040b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b21      	cmp	r3, #33	@ 0x21
 8004300:	d13e      	bne.n	8004380 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430a:	d114      	bne.n	8004336 <UART_Transmit_IT+0x48>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d110      	bne.n	8004336 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004328:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	1c9a      	adds	r2, r3, #2
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	621a      	str	r2, [r3, #32]
 8004334:	e008      	b.n	8004348 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	1c59      	adds	r1, r3, #1
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6211      	str	r1, [r2, #32]
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29b      	uxth	r3, r3
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4619      	mov	r1, r3
 8004356:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10f      	bne.n	800437c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800436a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800437a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	e000      	b.n	8004382 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004380:	2302      	movs	r3, #2
  }
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fe76 	bl	80040a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b08c      	sub	sp, #48	@ 0x30
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b22      	cmp	r3, #34	@ 0x22
 80043d8:	f040 80aa 	bne.w	8004530 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e4:	d115      	bne.n	8004412 <UART_Receive_IT+0x54>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d111      	bne.n	8004412 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004400:	b29a      	uxth	r2, r3
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004410:	e024      	b.n	800445c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004420:	d007      	beq.n	8004432 <UART_Receive_IT+0x74>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <UART_Receive_IT+0x82>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e008      	b.n	8004452 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800444c:	b2da      	uxtb	r2, r3
 800444e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004450:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4619      	mov	r1, r3
 800446a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800446c:	2b00      	cmp	r3, #0
 800446e:	d15d      	bne.n	800452c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0220 	bic.w	r2, r2, #32
 800447e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800448e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d135      	bne.n	8004522 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	613b      	str	r3, [r7, #16]
   return(result);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044dc:	623a      	str	r2, [r7, #32]
 80044de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	69f9      	ldr	r1, [r7, #28]
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d10a      	bne.n	8004514 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7ff fdd4 	bl	80040c8 <HAL_UARTEx_RxEventCallback>
 8004520:	e002      	b.n	8004528 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fc fa1e 	bl	8000964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e002      	b.n	8004532 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	e000      	b.n	8004532 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004530:	2302      	movs	r3, #2
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	3730      	adds	r7, #48	@ 0x30
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800453c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004540:	b0c0      	sub	sp, #256	@ 0x100
 8004542:	af00      	add	r7, sp, #0
 8004544:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	68d9      	ldr	r1, [r3, #12]
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	ea40 0301 	orr.w	r3, r0, r1
 8004564:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	431a      	orrs	r2, r3
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004594:	f021 010c 	bic.w	r1, r1, #12
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045a2:	430b      	orrs	r3, r1
 80045a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b6:	6999      	ldr	r1, [r3, #24]
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	ea40 0301 	orr.w	r3, r0, r1
 80045c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b8f      	ldr	r3, [pc, #572]	@ (8004808 <UART_SetConfig+0x2cc>)
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d005      	beq.n	80045dc <UART_SetConfig+0xa0>
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b8d      	ldr	r3, [pc, #564]	@ (800480c <UART_SetConfig+0x2d0>)
 80045d8:	429a      	cmp	r2, r3
 80045da:	d104      	bne.n	80045e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7fe f9be 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 80045e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045e4:	e003      	b.n	80045ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045e6:	f7fe f9a5 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80045ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f8:	f040 810c 	bne.w	8004814 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004600:	2200      	movs	r2, #0
 8004602:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004606:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800460a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800460e:	4622      	mov	r2, r4
 8004610:	462b      	mov	r3, r5
 8004612:	1891      	adds	r1, r2, r2
 8004614:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004616:	415b      	adcs	r3, r3
 8004618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800461a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800461e:	4621      	mov	r1, r4
 8004620:	eb12 0801 	adds.w	r8, r2, r1
 8004624:	4629      	mov	r1, r5
 8004626:	eb43 0901 	adc.w	r9, r3, r1
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800463a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800463e:	4690      	mov	r8, r2
 8004640:	4699      	mov	r9, r3
 8004642:	4623      	mov	r3, r4
 8004644:	eb18 0303 	adds.w	r3, r8, r3
 8004648:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800464c:	462b      	mov	r3, r5
 800464e:	eb49 0303 	adc.w	r3, r9, r3
 8004652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004662:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004666:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800466a:	460b      	mov	r3, r1
 800466c:	18db      	adds	r3, r3, r3
 800466e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004670:	4613      	mov	r3, r2
 8004672:	eb42 0303 	adc.w	r3, r2, r3
 8004676:	657b      	str	r3, [r7, #84]	@ 0x54
 8004678:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800467c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004680:	f7fb fe06 	bl	8000290 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4b61      	ldr	r3, [pc, #388]	@ (8004810 <UART_SetConfig+0x2d4>)
 800468a:	fba3 2302 	umull	r2, r3, r3, r2
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	011c      	lsls	r4, r3, #4
 8004692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004696:	2200      	movs	r2, #0
 8004698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800469c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	1891      	adds	r1, r2, r2
 80046aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046ac:	415b      	adcs	r3, r3
 80046ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046b4:	4641      	mov	r1, r8
 80046b6:	eb12 0a01 	adds.w	sl, r2, r1
 80046ba:	4649      	mov	r1, r9
 80046bc:	eb43 0b01 	adc.w	fp, r3, r1
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046d4:	4692      	mov	sl, r2
 80046d6:	469b      	mov	fp, r3
 80046d8:	4643      	mov	r3, r8
 80046da:	eb1a 0303 	adds.w	r3, sl, r3
 80046de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046e2:	464b      	mov	r3, r9
 80046e4:	eb4b 0303 	adc.w	r3, fp, r3
 80046e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004700:	460b      	mov	r3, r1
 8004702:	18db      	adds	r3, r3, r3
 8004704:	643b      	str	r3, [r7, #64]	@ 0x40
 8004706:	4613      	mov	r3, r2
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	647b      	str	r3, [r7, #68]	@ 0x44
 800470e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004712:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004716:	f7fb fdbb 	bl	8000290 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4611      	mov	r1, r2
 8004720:	4b3b      	ldr	r3, [pc, #236]	@ (8004810 <UART_SetConfig+0x2d4>)
 8004722:	fba3 2301 	umull	r2, r3, r3, r1
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2264      	movs	r2, #100	@ 0x64
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	1acb      	subs	r3, r1, r3
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004736:	4b36      	ldr	r3, [pc, #216]	@ (8004810 <UART_SetConfig+0x2d4>)
 8004738:	fba3 2302 	umull	r2, r3, r3, r2
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004744:	441c      	add	r4, r3
 8004746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800474a:	2200      	movs	r2, #0
 800474c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004750:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004754:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	1891      	adds	r1, r2, r2
 800475e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004760:	415b      	adcs	r3, r3
 8004762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004764:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004768:	4641      	mov	r1, r8
 800476a:	1851      	adds	r1, r2, r1
 800476c:	6339      	str	r1, [r7, #48]	@ 0x30
 800476e:	4649      	mov	r1, r9
 8004770:	414b      	adcs	r3, r1
 8004772:	637b      	str	r3, [r7, #52]	@ 0x34
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004780:	4659      	mov	r1, fp
 8004782:	00cb      	lsls	r3, r1, #3
 8004784:	4651      	mov	r1, sl
 8004786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478a:	4651      	mov	r1, sl
 800478c:	00ca      	lsls	r2, r1, #3
 800478e:	4610      	mov	r0, r2
 8004790:	4619      	mov	r1, r3
 8004792:	4603      	mov	r3, r0
 8004794:	4642      	mov	r2, r8
 8004796:	189b      	adds	r3, r3, r2
 8004798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800479c:	464b      	mov	r3, r9
 800479e:	460a      	mov	r2, r1
 80047a0:	eb42 0303 	adc.w	r3, r2, r3
 80047a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047bc:	460b      	mov	r3, r1
 80047be:	18db      	adds	r3, r3, r3
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047c2:	4613      	mov	r3, r2
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047d2:	f7fb fd5d 	bl	8000290 <__aeabi_uldivmod>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <UART_SetConfig+0x2d4>)
 80047dc:	fba3 1302 	umull	r1, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	2164      	movs	r1, #100	@ 0x64
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	3332      	adds	r3, #50	@ 0x32
 80047ee:	4a08      	ldr	r2, [pc, #32]	@ (8004810 <UART_SetConfig+0x2d4>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f003 0207 	and.w	r2, r3, #7
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4422      	add	r2, r4
 8004802:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004804:	e106      	b.n	8004a14 <UART_SetConfig+0x4d8>
 8004806:	bf00      	nop
 8004808:	40011000 	.word	0x40011000
 800480c:	40011400 	.word	0x40011400
 8004810:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800481e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004822:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004826:	4642      	mov	r2, r8
 8004828:	464b      	mov	r3, r9
 800482a:	1891      	adds	r1, r2, r2
 800482c:	6239      	str	r1, [r7, #32]
 800482e:	415b      	adcs	r3, r3
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
 8004832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004836:	4641      	mov	r1, r8
 8004838:	1854      	adds	r4, r2, r1
 800483a:	4649      	mov	r1, r9
 800483c:	eb43 0501 	adc.w	r5, r3, r1
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	00eb      	lsls	r3, r5, #3
 800484a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800484e:	00e2      	lsls	r2, r4, #3
 8004850:	4614      	mov	r4, r2
 8004852:	461d      	mov	r5, r3
 8004854:	4643      	mov	r3, r8
 8004856:	18e3      	adds	r3, r4, r3
 8004858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800485c:	464b      	mov	r3, r9
 800485e:	eb45 0303 	adc.w	r3, r5, r3
 8004862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004872:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004882:	4629      	mov	r1, r5
 8004884:	008b      	lsls	r3, r1, #2
 8004886:	4621      	mov	r1, r4
 8004888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800488c:	4621      	mov	r1, r4
 800488e:	008a      	lsls	r2, r1, #2
 8004890:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004894:	f7fb fcfc 	bl	8000290 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4b60      	ldr	r3, [pc, #384]	@ (8004a20 <UART_SetConfig+0x4e4>)
 800489e:	fba3 2302 	umull	r2, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	011c      	lsls	r4, r3, #4
 80048a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	61b9      	str	r1, [r7, #24]
 80048c0:	415b      	adcs	r3, r3
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c8:	4641      	mov	r1, r8
 80048ca:	1851      	adds	r1, r2, r1
 80048cc:	6139      	str	r1, [r7, #16]
 80048ce:	4649      	mov	r1, r9
 80048d0:	414b      	adcs	r3, r1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e0:	4659      	mov	r1, fp
 80048e2:	00cb      	lsls	r3, r1, #3
 80048e4:	4651      	mov	r1, sl
 80048e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ea:	4651      	mov	r1, sl
 80048ec:	00ca      	lsls	r2, r1, #3
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	4642      	mov	r2, r8
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048fc:	464b      	mov	r3, r9
 80048fe:	460a      	mov	r2, r1
 8004900:	eb42 0303 	adc.w	r3, r2, r3
 8004904:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004912:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004920:	4649      	mov	r1, r9
 8004922:	008b      	lsls	r3, r1, #2
 8004924:	4641      	mov	r1, r8
 8004926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492a:	4641      	mov	r1, r8
 800492c:	008a      	lsls	r2, r1, #2
 800492e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004932:	f7fb fcad 	bl	8000290 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4611      	mov	r1, r2
 800493c:	4b38      	ldr	r3, [pc, #224]	@ (8004a20 <UART_SetConfig+0x4e4>)
 800493e:	fba3 2301 	umull	r2, r3, r3, r1
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	2264      	movs	r2, #100	@ 0x64
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	1acb      	subs	r3, r1, r3
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	3332      	adds	r3, #50	@ 0x32
 8004950:	4a33      	ldr	r2, [pc, #204]	@ (8004a20 <UART_SetConfig+0x4e4>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800495c:	441c      	add	r4, r3
 800495e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004962:	2200      	movs	r2, #0
 8004964:	673b      	str	r3, [r7, #112]	@ 0x70
 8004966:	677a      	str	r2, [r7, #116]	@ 0x74
 8004968:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800496c:	4642      	mov	r2, r8
 800496e:	464b      	mov	r3, r9
 8004970:	1891      	adds	r1, r2, r2
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	415b      	adcs	r3, r3
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800497c:	4641      	mov	r1, r8
 800497e:	1851      	adds	r1, r2, r1
 8004980:	6039      	str	r1, [r7, #0]
 8004982:	4649      	mov	r1, r9
 8004984:	414b      	adcs	r3, r1
 8004986:	607b      	str	r3, [r7, #4]
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004994:	4659      	mov	r1, fp
 8004996:	00cb      	lsls	r3, r1, #3
 8004998:	4651      	mov	r1, sl
 800499a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499e:	4651      	mov	r1, sl
 80049a0:	00ca      	lsls	r2, r1, #3
 80049a2:	4610      	mov	r0, r2
 80049a4:	4619      	mov	r1, r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	4642      	mov	r2, r8
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ae:	464b      	mov	r3, r9
 80049b0:	460a      	mov	r2, r1
 80049b2:	eb42 0303 	adc.w	r3, r2, r3
 80049b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049d0:	4649      	mov	r1, r9
 80049d2:	008b      	lsls	r3, r1, #2
 80049d4:	4641      	mov	r1, r8
 80049d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049da:	4641      	mov	r1, r8
 80049dc:	008a      	lsls	r2, r1, #2
 80049de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049e2:	f7fb fc55 	bl	8000290 <__aeabi_uldivmod>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <UART_SetConfig+0x4e4>)
 80049ec:	fba3 1302 	umull	r1, r3, r3, r2
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	2164      	movs	r1, #100	@ 0x64
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	3332      	adds	r3, #50	@ 0x32
 80049fe:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <UART_SetConfig+0x4e4>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	f003 020f 	and.w	r2, r3, #15
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4422      	add	r2, r4
 8004a12:	609a      	str	r2, [r3, #8]
}
 8004a14:	bf00      	nop
 8004a16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a20:	51eb851f 	.word	0x51eb851f

08004a24 <__NVIC_SetPriority>:
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	6039      	str	r1, [r7, #0]
 8004a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	db0a      	blt.n	8004a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	490c      	ldr	r1, [pc, #48]	@ (8004a70 <__NVIC_SetPriority+0x4c>)
 8004a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a42:	0112      	lsls	r2, r2, #4
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	440b      	add	r3, r1
 8004a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a4c:	e00a      	b.n	8004a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4908      	ldr	r1, [pc, #32]	@ (8004a74 <__NVIC_SetPriority+0x50>)
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	3b04      	subs	r3, #4
 8004a5c:	0112      	lsls	r2, r2, #4
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	440b      	add	r3, r1
 8004a62:	761a      	strb	r2, [r3, #24]
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000e100 	.word	0xe000e100
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a7c:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <SysTick_Handler+0x1c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a80:	f001 fd46 	bl	8006510 <xTaskGetSchedulerState>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a8a:	f002 fb3d 	bl	8007108 <xPortSysTickHandler>
  }
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	e000e010 	.word	0xe000e010

08004a98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f06f 0004 	mvn.w	r0, #4
 8004aa2:	f7ff ffbf 	bl	8004a24 <__NVIC_SetPriority>
#endif
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ab2:	f3ef 8305 	mrs	r3, IPSR
 8004ab6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ab8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004abe:	f06f 0305 	mvn.w	r3, #5
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	e00c      	b.n	8004ae0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <osKernelInitialize+0x44>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d105      	bne.n	8004ada <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ace:	4b08      	ldr	r3, [pc, #32]	@ (8004af0 <osKernelInitialize+0x44>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e002      	b.n	8004ae0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ae0:	687b      	ldr	r3, [r7, #4]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000328 	.word	0x20000328

08004af4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004afa:	f3ef 8305 	mrs	r3, IPSR
 8004afe:	603b      	str	r3, [r7, #0]
  return(result);
 8004b00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b06:	f06f 0305 	mvn.w	r3, #5
 8004b0a:	607b      	str	r3, [r7, #4]
 8004b0c:	e010      	b.n	8004b30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <osKernelStart+0x48>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d109      	bne.n	8004b2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b16:	f7ff ffbf 	bl	8004a98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b1a:	4b08      	ldr	r3, [pc, #32]	@ (8004b3c <osKernelStart+0x48>)
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b20:	f001 f892 	bl	8005c48 <vTaskStartScheduler>
      stat = osOK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	607b      	str	r3, [r7, #4]
 8004b28:	e002      	b.n	8004b30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b30:	687b      	ldr	r3, [r7, #4]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000328 	.word	0x20000328

08004b40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08e      	sub	sp, #56	@ 0x38
 8004b44:	af04      	add	r7, sp, #16
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b50:	f3ef 8305 	mrs	r3, IPSR
 8004b54:	617b      	str	r3, [r7, #20]
  return(result);
 8004b56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d17e      	bne.n	8004c5a <osThreadNew+0x11a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d07b      	beq.n	8004c5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b62:	2380      	movs	r3, #128	@ 0x80
 8004b64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b66:	2318      	movs	r3, #24
 8004b68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d045      	beq.n	8004c06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <osThreadNew+0x48>
        name = attr->name;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <osThreadNew+0x6e>
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	2b38      	cmp	r3, #56	@ 0x38
 8004ba0:	d805      	bhi.n	8004bae <osThreadNew+0x6e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <osThreadNew+0x72>
        return (NULL);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e054      	b.n	8004c5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	089b      	lsrs	r3, r3, #2
 8004bc0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00e      	beq.n	8004be8 <osThreadNew+0xa8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2ba7      	cmp	r3, #167	@ 0xa7
 8004bd0:	d90a      	bls.n	8004be8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d006      	beq.n	8004be8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <osThreadNew+0xa8>
        mem = 1;
 8004be2:	2301      	movs	r3, #1
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	e010      	b.n	8004c0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10c      	bne.n	8004c0a <osThreadNew+0xca>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d108      	bne.n	8004c0a <osThreadNew+0xca>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <osThreadNew+0xca>
          mem = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	e001      	b.n	8004c0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d110      	bne.n	8004c32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c18:	9202      	str	r2, [sp, #8]
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	6a3a      	ldr	r2, [r7, #32]
 8004c24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fe1a 	bl	8005860 <xTaskCreateStatic>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	e013      	b.n	8004c5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d110      	bne.n	8004c5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	f107 0310 	add.w	r3, r7, #16
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fe68 	bl	8005920 <xTaskCreate>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d001      	beq.n	8004c5a <osThreadNew+0x11a>
            hTask = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c5a:	693b      	ldr	r3, [r7, #16]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3728      	adds	r7, #40	@ 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c6c:	f3ef 8305 	mrs	r3, IPSR
 8004c70:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <osDelay+0x1c>
    stat = osErrorISR;
 8004c78:	f06f 0305 	mvn.w	r3, #5
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e007      	b.n	8004c90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 ffa6 	bl	8005bdc <vTaskDelay>
    }
  }

  return (stat);
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a07      	ldr	r2, [pc, #28]	@ (8004cc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a06      	ldr	r2, [pc, #24]	@ (8004ccc <vApplicationGetIdleTaskMemory+0x30>)
 8004cb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	@ 0x80
 8004cb8:	601a      	str	r2, [r3, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	2000032c 	.word	0x2000032c
 8004ccc:	200003d4 	.word	0x200003d4

08004cd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a07      	ldr	r2, [pc, #28]	@ (8004cfc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ce0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a06      	ldr	r2, [pc, #24]	@ (8004d00 <vApplicationGetTimerTaskMemory+0x30>)
 8004ce6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cee:	601a      	str	r2, [r3, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	200005d4 	.word	0x200005d4
 8004d00:	2000067c 	.word	0x2000067c

08004d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f103 0208 	add.w	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f103 0208 	add.w	r2, r3, #8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f103 0208 	add.w	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	601a      	str	r2, [r3, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d103      	bne.n	8004dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e00c      	b.n	8004de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e002      	b.n	8004dd4 <vListInsert+0x2e>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d2f6      	bcs.n	8004dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6892      	ldr	r2, [r2, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6852      	ldr	r2, [r2, #4]
 8004e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d103      	bne.n	8004e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	e7fd      	b.n	8004e94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e98:	f002 f8a6 	bl	8006fe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	441a      	add	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	441a      	add	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	22ff      	movs	r2, #255	@ 0xff
 8004edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	22ff      	movs	r2, #255	@ 0xff
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d114      	bne.n	8004f18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01a      	beq.n	8004f2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3310      	adds	r3, #16
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 f942 	bl	8006184 <xTaskRemoveFromEventList>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d012      	beq.n	8004f2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f06:	4b0d      	ldr	r3, [pc, #52]	@ (8004f3c <xQueueGenericReset+0xd0>)
 8004f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	e009      	b.n	8004f2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3310      	adds	r3, #16
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fef1 	bl	8004d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3324      	adds	r3, #36	@ 0x24
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff feec 	bl	8004d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f2c:	f002 f88e 	bl	800704c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f30:	2301      	movs	r3, #1
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	@ 0x38
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <xQueueGenericCreateStatic+0x56>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <xQueueGenericCreateStatic+0x5a>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <xQueueGenericCreateStatic+0x5c>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10b      	bne.n	8004fb8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	623b      	str	r3, [r7, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <xQueueGenericCreateStatic+0x84>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <xQueueGenericCreateStatic+0x88>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <xQueueGenericCreateStatic+0x8a>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	61fb      	str	r3, [r7, #28]
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fe6:	2350      	movs	r3, #80	@ 0x50
 8004fe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b50      	cmp	r3, #80	@ 0x50
 8004fee:	d00b      	beq.n	8005008 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	61bb      	str	r3, [r7, #24]
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005008:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800500e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800501c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f805 	bl	800503a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005032:	4618      	mov	r0, r3
 8005034:	3730      	adds	r7, #48	@ 0x30
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e002      	b.n	800505c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005068:	2101      	movs	r1, #1
 800506a:	69b8      	ldr	r0, [r7, #24]
 800506c:	f7ff fefe 	bl	8004e6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08e      	sub	sp, #56	@ 0x38
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800508e:	2300      	movs	r3, #0
 8005090:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <xQueueGenericSend+0x34>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <xQueueGenericSend+0x42>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <xQueueGenericSend+0x46>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <xQueueGenericSend+0x48>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <xQueueGenericSend+0x64>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d103      	bne.n	80050f2 <xQueueGenericSend+0x72>
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <xQueueGenericSend+0x76>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xQueueGenericSend+0x78>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <xQueueGenericSend+0x94>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005114:	f001 f9fc 	bl	8006510 <xTaskGetSchedulerState>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <xQueueGenericSend+0xa4>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <xQueueGenericSend+0xa8>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <xQueueGenericSend+0xaa>
 8005128:	2300      	movs	r3, #0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <xQueueGenericSend+0xc6>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	61fb      	str	r3, [r7, #28]
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	e7fd      	b.n	8005142 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005146:	f001 ff4f 	bl	8006fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <xQueueGenericSend+0xdc>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d129      	bne.n	80051b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005162:	f000 fa0f 	bl	8005584 <prvCopyDataToQueue>
 8005166:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	d010      	beq.n	8005192 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	3324      	adds	r3, #36	@ 0x24
 8005174:	4618      	mov	r0, r3
 8005176:	f001 f805 	bl	8006184 <xTaskRemoveFromEventList>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d013      	beq.n	80051a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005180:	4b3f      	ldr	r3, [pc, #252]	@ (8005280 <xQueueGenericSend+0x200>)
 8005182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	e00a      	b.n	80051a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005198:	4b39      	ldr	r3, [pc, #228]	@ (8005280 <xQueueGenericSend+0x200>)
 800519a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051a8:	f001 ff50 	bl	800704c <vPortExitCritical>
				return pdPASS;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e063      	b.n	8005278 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051b6:	f001 ff49 	bl	800704c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e05c      	b.n	8005278 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051c4:	f107 0314 	add.w	r3, r7, #20
 80051c8:	4618      	mov	r0, r3
 80051ca:	f001 f83f 	bl	800624c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051d2:	f001 ff3b 	bl	800704c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051d6:	f000 fda7 	bl	8005d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051da:	f001 ff05 	bl	8006fe8 <vPortEnterCritical>
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051e4:	b25b      	sxtb	r3, r3
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ea:	d103      	bne.n	80051f4 <xQueueGenericSend+0x174>
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051fa:	b25b      	sxtb	r3, r3
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d103      	bne.n	800520a <xQueueGenericSend+0x18a>
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800520a:	f001 ff1f 	bl	800704c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800520e:	1d3a      	adds	r2, r7, #4
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f001 f82e 	bl	8006278 <xTaskCheckForTimeOut>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d124      	bne.n	800526c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005222:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005224:	f000 faa6 	bl	8005774 <prvIsQueueFull>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d018      	beq.n	8005260 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	3310      	adds	r3, #16
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f000 ff52 	bl	80060e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800523c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800523e:	f000 fa31 	bl	80056a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005242:	f000 fd7f 	bl	8005d44 <xTaskResumeAll>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	f47f af7c 	bne.w	8005146 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800524e:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <xQueueGenericSend+0x200>)
 8005250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	e772      	b.n	8005146 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005262:	f000 fa1f 	bl	80056a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005266:	f000 fd6d 	bl	8005d44 <xTaskResumeAll>
 800526a:	e76c      	b.n	8005146 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800526c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800526e:	f000 fa19 	bl	80056a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005272:	f000 fd67 	bl	8005d44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005276:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005278:	4618      	mov	r0, r3
 800527a:	3738      	adds	r7, #56	@ 0x38
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b090      	sub	sp, #64	@ 0x40
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10b      	bne.n	80052b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	e7fd      	b.n	80052b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d103      	bne.n	80052c2 <xQueueGenericSendFromISR+0x3e>
 80052ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <xQueueGenericSendFromISR+0x42>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <xQueueGenericSendFromISR+0x44>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10b      	bne.n	80052e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	e7fd      	b.n	80052e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d103      	bne.n	80052f2 <xQueueGenericSendFromISR+0x6e>
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <xQueueGenericSendFromISR+0x72>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <xQueueGenericSendFromISR+0x74>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	623b      	str	r3, [r7, #32]
}
 800530e:	bf00      	nop
 8005310:	bf00      	nop
 8005312:	e7fd      	b.n	8005310 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005314:	f001 ff48 	bl	80071a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005318:	f3ef 8211 	mrs	r2, BASEPRI
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	61fa      	str	r2, [r7, #28]
 800532e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005330:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	429a      	cmp	r2, r3
 800533e:	d302      	bcc.n	8005346 <xQueueGenericSendFromISR+0xc2>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d12f      	bne.n	80053a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800534c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005354:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800535c:	f000 f912 	bl	8005584 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005360:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d112      	bne.n	8005390 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	3324      	adds	r3, #36	@ 0x24
 8005376:	4618      	mov	r0, r3
 8005378:	f000 ff04 	bl	8006184 <xTaskRemoveFromEventList>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00e      	beq.n	80053a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e007      	b.n	80053a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005390:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005394:	3301      	adds	r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	b25a      	sxtb	r2, r3
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053a0:	2301      	movs	r3, #1
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80053a4:	e001      	b.n	80053aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3740      	adds	r7, #64	@ 0x40
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	@ 0x30
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053cc:	2300      	movs	r3, #0
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10b      	bne.n	80053f2 <xQueueReceive+0x32>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	623b      	str	r3, [r7, #32]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <xQueueReceive+0x40>
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <xQueueReceive+0x44>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <xQueueReceive+0x46>
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <xQueueReceive+0x62>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	61fb      	str	r3, [r7, #28]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005422:	f001 f875 	bl	8006510 <xTaskGetSchedulerState>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <xQueueReceive+0x72>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <xQueueReceive+0x76>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <xQueueReceive+0x78>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <xQueueReceive+0x94>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	61bb      	str	r3, [r7, #24]
}
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005454:	f001 fdc8 	bl	8006fe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01f      	beq.n	80054a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005468:	f000 f8f6 	bl	8005658 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	1e5a      	subs	r2, r3, #1
 8005470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005472:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00f      	beq.n	800549c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	3310      	adds	r3, #16
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fe7f 	bl	8006184 <xTaskRemoveFromEventList>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800548c:	4b3c      	ldr	r3, [pc, #240]	@ (8005580 <xQueueReceive+0x1c0>)
 800548e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800549c:	f001 fdd6 	bl	800704c <vPortExitCritical>
				return pdPASS;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e069      	b.n	8005578 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d103      	bne.n	80054b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054aa:	f001 fdcf 	bl	800704c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054ae:	2300      	movs	r3, #0
 80054b0:	e062      	b.n	8005578 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054b8:	f107 0310 	add.w	r3, r7, #16
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fec5 	bl	800624c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054c2:	2301      	movs	r3, #1
 80054c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054c6:	f001 fdc1 	bl	800704c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ca:	f000 fc2d 	bl	8005d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054ce:	f001 fd8b 	bl	8006fe8 <vPortEnterCritical>
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054d8:	b25b      	sxtb	r3, r3
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d103      	bne.n	80054e8 <xQueueReceive+0x128>
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ee:	b25b      	sxtb	r3, r3
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d103      	bne.n	80054fe <xQueueReceive+0x13e>
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054fe:	f001 fda5 	bl	800704c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005502:	1d3a      	adds	r2, r7, #4
 8005504:	f107 0310 	add.w	r3, r7, #16
 8005508:	4611      	mov	r1, r2
 800550a:	4618      	mov	r0, r3
 800550c:	f000 feb4 	bl	8006278 <xTaskCheckForTimeOut>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d123      	bne.n	800555e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005518:	f000 f916 	bl	8005748 <prvIsQueueEmpty>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d017      	beq.n	8005552 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	3324      	adds	r3, #36	@ 0x24
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fdd8 	bl	80060e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005532:	f000 f8b7 	bl	80056a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005536:	f000 fc05 	bl	8005d44 <xTaskResumeAll>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d189      	bne.n	8005454 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005540:	4b0f      	ldr	r3, [pc, #60]	@ (8005580 <xQueueReceive+0x1c0>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	e780      	b.n	8005454 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005554:	f000 f8a6 	bl	80056a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005558:	f000 fbf4 	bl	8005d44 <xTaskResumeAll>
 800555c:	e77a      	b.n	8005454 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800555e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005560:	f000 f8a0 	bl	80056a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005564:	f000 fbee 	bl	8005d44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800556a:	f000 f8ed 	bl	8005748 <prvIsQueueEmpty>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	f43f af6f 	beq.w	8005454 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005576:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005578:	4618      	mov	r0, r3
 800557a:	3730      	adds	r7, #48	@ 0x30
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d14d      	bne.n	8005646 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 ffcc 	bl	800654c <xTaskPriorityDisinherit>
 80055b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	e043      	b.n	8005646 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d119      	bne.n	80055f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6858      	ldr	r0, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	461a      	mov	r2, r3
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	f002 faf3 	bl	8007bba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	441a      	add	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d32b      	bcc.n	8005646 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	e026      	b.n	8005646 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68d8      	ldr	r0, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	461a      	mov	r2, r3
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	f002 fad9 	bl	8007bba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	425b      	negs	r3, r3
 8005612:	441a      	add	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d207      	bcs.n	8005634 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562c:	425b      	negs	r3, r3
 800562e:	441a      	add	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d105      	bne.n	8005646 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	3b01      	subs	r3, #1
 8005644:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800564e:	697b      	ldr	r3, [r7, #20]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d018      	beq.n	800569c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	441a      	add	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	429a      	cmp	r2, r3
 8005682:	d303      	bcc.n	800568c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68d9      	ldr	r1, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	461a      	mov	r2, r3
 8005696:	6838      	ldr	r0, [r7, #0]
 8005698:	f002 fa8f 	bl	8007bba <memcpy>
	}
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056ac:	f001 fc9c 	bl	8006fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056b8:	e011      	b.n	80056de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d012      	beq.n	80056e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3324      	adds	r3, #36	@ 0x24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fd5c 	bl	8006184 <xTaskRemoveFromEventList>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056d2:	f000 fe35 	bl	8006340 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	3b01      	subs	r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	dce9      	bgt.n	80056ba <prvUnlockQueue+0x16>
 80056e6:	e000      	b.n	80056ea <prvUnlockQueue+0x46>
					break;
 80056e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	22ff      	movs	r2, #255	@ 0xff
 80056ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056f2:	f001 fcab 	bl	800704c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056f6:	f001 fc77 	bl	8006fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005700:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005702:	e011      	b.n	8005728 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d012      	beq.n	8005732 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3310      	adds	r3, #16
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fd37 	bl	8006184 <xTaskRemoveFromEventList>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800571c:	f000 fe10 	bl	8006340 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005720:	7bbb      	ldrb	r3, [r7, #14]
 8005722:	3b01      	subs	r3, #1
 8005724:	b2db      	uxtb	r3, r3
 8005726:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800572c:	2b00      	cmp	r3, #0
 800572e:	dce9      	bgt.n	8005704 <prvUnlockQueue+0x60>
 8005730:	e000      	b.n	8005734 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005732:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	22ff      	movs	r2, #255	@ 0xff
 8005738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800573c:	f001 fc86 	bl	800704c <vPortExitCritical>
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005750:	f001 fc4a 	bl	8006fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e001      	b.n	8005766 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005766:	f001 fc71 	bl	800704c <vPortExitCritical>

	return xReturn;
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800577c:	f001 fc34 	bl	8006fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	429a      	cmp	r2, r3
 800578a:	d102      	bne.n	8005792 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800578c:	2301      	movs	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e001      	b.n	8005796 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005796:	f001 fc59 	bl	800704c <vPortExitCritical>

	return xReturn;
 800579a:	68fb      	ldr	r3, [r7, #12]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	e014      	b.n	80057de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057b4:	4a0f      	ldr	r2, [pc, #60]	@ (80057f4 <vQueueAddToRegistry+0x50>)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057c0:	490c      	ldr	r1, [pc, #48]	@ (80057f4 <vQueueAddToRegistry+0x50>)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057ca:	4a0a      	ldr	r2, [pc, #40]	@ (80057f4 <vQueueAddToRegistry+0x50>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057d6:	e006      	b.n	80057e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b07      	cmp	r3, #7
 80057e2:	d9e7      	bls.n	80057b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000a7c 	.word	0x20000a7c

080057f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005808:	f001 fbee 	bl	8006fe8 <vPortEnterCritical>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005812:	b25b      	sxtb	r3, r3
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d103      	bne.n	8005822 <vQueueWaitForMessageRestricted+0x2a>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005828:	b25b      	sxtb	r3, r3
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d103      	bne.n	8005838 <vQueueWaitForMessageRestricted+0x40>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005838:	f001 fc08 	bl	800704c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	3324      	adds	r3, #36	@ 0x24
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fc6d 	bl	800612c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7ff ff26 	bl	80056a4 <prvUnlockQueue>
	}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08e      	sub	sp, #56	@ 0x38
 8005864:	af04      	add	r7, sp, #16
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800586e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	623b      	str	r3, [r7, #32]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	61fb      	str	r3, [r7, #28]
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	e7fd      	b.n	80058a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058aa:	23a8      	movs	r3, #168	@ 0xa8
 80058ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2ba8      	cmp	r3, #168	@ 0xa8
 80058b2:	d00b      	beq.n	80058cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	61bb      	str	r3, [r7, #24]
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	e7fd      	b.n	80058c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01e      	beq.n	8005912 <xTaskCreateStatic+0xb2>
 80058d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01b      	beq.n	8005912 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058ec:	2300      	movs	r3, #0
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	9302      	str	r3, [sp, #8]
 80058f4:	f107 0314 	add.w	r3, r7, #20
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f851 	bl	80059ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800590a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800590c:	f000 f8f6 	bl	8005afc <prvAddNewTaskToReadyList>
 8005910:	e001      	b.n	8005916 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005916:	697b      	ldr	r3, [r7, #20]
	}
 8005918:	4618      	mov	r0, r3
 800591a:	3728      	adds	r7, #40	@ 0x28
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08c      	sub	sp, #48	@ 0x30
 8005924:	af04      	add	r7, sp, #16
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fc79 	bl	800722c <pvPortMalloc>
 800593a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005942:	20a8      	movs	r0, #168	@ 0xa8
 8005944:	f001 fc72 	bl	800722c <pvPortMalloc>
 8005948:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	631a      	str	r2, [r3, #48]	@ 0x30
 8005956:	e005      	b.n	8005964 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005958:	6978      	ldr	r0, [r7, #20]
 800595a:	f001 fd35 	bl	80073c8 <vPortFree>
 800595e:	e001      	b.n	8005964 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d017      	beq.n	800599a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	2300      	movs	r3, #0
 8005976:	9303      	str	r3, [sp, #12]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	9302      	str	r3, [sp, #8]
 800597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f80f 	bl	80059ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800598e:	69f8      	ldr	r0, [r7, #28]
 8005990:	f000 f8b4 	bl	8005afc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005994:	2301      	movs	r3, #1
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	e002      	b.n	80059a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800599a:	f04f 33ff 	mov.w	r3, #4294967295
 800599e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059a0:	69bb      	ldr	r3, [r7, #24]
	}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	461a      	mov	r2, r3
 80059c4:	21a5      	movs	r1, #165	@ 0xa5
 80059c6:	f001 ffac 	bl	8007922 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059d4:	3b01      	subs	r3, #1
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f023 0307 	bic.w	r3, r3, #7
 80059e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	617b      	str	r3, [r7, #20]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01f      	beq.n	8005a4c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	e012      	b.n	8005a38 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	7819      	ldrb	r1, [r3, #0]
 8005a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	3334      	adds	r3, #52	@ 0x34
 8005a22:	460a      	mov	r2, r1
 8005a24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d006      	beq.n	8005a40 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b0f      	cmp	r3, #15
 8005a3c:	d9e9      	bls.n	8005a12 <prvInitialiseNewTask+0x66>
 8005a3e:	e000      	b.n	8005a42 <prvInitialiseNewTask+0x96>
			{
				break;
 8005a40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a4a:	e003      	b.n	8005a54 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a56:	2b37      	cmp	r3, #55	@ 0x37
 8005a58:	d901      	bls.n	8005a5e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a5a:	2337      	movs	r3, #55	@ 0x37
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a68:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	3304      	adds	r3, #4
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff f965 	bl	8004d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	3318      	adds	r3, #24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff f960 	bl	8004d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aac:	3354      	adds	r3, #84	@ 0x54
 8005aae:	224c      	movs	r2, #76	@ 0x4c
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 ff35 	bl	8007922 <memset>
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	4a0d      	ldr	r2, [pc, #52]	@ (8005af0 <prvInitialiseNewTask+0x144>)
 8005abc:	659a      	str	r2, [r3, #88]	@ 0x58
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8005af4 <prvInitialiseNewTask+0x148>)
 8005ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8005af8 <prvInitialiseNewTask+0x14c>)
 8005ac8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	68f9      	ldr	r1, [r7, #12]
 8005ace:	69b8      	ldr	r0, [r7, #24]
 8005ad0:	f001 f95a 	bl	8006d88 <pxPortInitialiseStack>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20004d10 	.word	0x20004d10
 8005af4:	20004d78 	.word	0x20004d78
 8005af8:	20004de0 	.word	0x20004de0

08005afc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b04:	f001 fa70 	bl	8006fe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b08:	4b2d      	ldr	r3, [pc, #180]	@ (8005bc0 <prvAddNewTaskToReadyList+0xc4>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc0 <prvAddNewTaskToReadyList+0xc4>)
 8005b10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b12:	4b2c      	ldr	r3, [pc, #176]	@ (8005bc4 <prvAddNewTaskToReadyList+0xc8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc4 <prvAddNewTaskToReadyList+0xc8>)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b20:	4b27      	ldr	r3, [pc, #156]	@ (8005bc0 <prvAddNewTaskToReadyList+0xc4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d110      	bne.n	8005b4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b28:	f000 fc2e 	bl	8006388 <prvInitialiseTaskLists>
 8005b2c:	e00d      	b.n	8005b4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b2e:	4b26      	ldr	r3, [pc, #152]	@ (8005bc8 <prvAddNewTaskToReadyList+0xcc>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b36:	4b23      	ldr	r3, [pc, #140]	@ (8005bc4 <prvAddNewTaskToReadyList+0xc8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d802      	bhi.n	8005b4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b44:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc4 <prvAddNewTaskToReadyList+0xc8>)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b4a:	4b20      	ldr	r3, [pc, #128]	@ (8005bcc <prvAddNewTaskToReadyList+0xd0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	4a1e      	ldr	r2, [pc, #120]	@ (8005bcc <prvAddNewTaskToReadyList+0xd0>)
 8005b52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b54:	4b1d      	ldr	r3, [pc, #116]	@ (8005bcc <prvAddNewTaskToReadyList+0xd0>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b60:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd0 <prvAddNewTaskToReadyList+0xd4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d903      	bls.n	8005b70 <prvAddNewTaskToReadyList+0x74>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <prvAddNewTaskToReadyList+0xd4>)
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4a15      	ldr	r2, [pc, #84]	@ (8005bd4 <prvAddNewTaskToReadyList+0xd8>)
 8005b7e:	441a      	add	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	4610      	mov	r0, r2
 8005b88:	f7ff f8e9 	bl	8004d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b8c:	f001 fa5e 	bl	800704c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b90:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <prvAddNewTaskToReadyList+0xcc>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00e      	beq.n	8005bb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b98:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <prvAddNewTaskToReadyList+0xc8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d207      	bcs.n	8005bb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd8 <prvAddNewTaskToReadyList+0xdc>)
 8005ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000f90 	.word	0x20000f90
 8005bc4:	20000abc 	.word	0x20000abc
 8005bc8:	20000f9c 	.word	0x20000f9c
 8005bcc:	20000fac 	.word	0x20000fac
 8005bd0:	20000f98 	.word	0x20000f98
 8005bd4:	20000ac0 	.word	0x20000ac0
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d018      	beq.n	8005c20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bee:	4b14      	ldr	r3, [pc, #80]	@ (8005c40 <vTaskDelay+0x64>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <vTaskDelay+0x32>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	60bb      	str	r3, [r7, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c0e:	f000 f88b 	bl	8005d28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c12:	2100      	movs	r1, #0
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fd09 	bl	800662c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c1a:	f000 f893 	bl	8005d44 <xTaskResumeAll>
 8005c1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d107      	bne.n	8005c36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c26:	4b07      	ldr	r3, [pc, #28]	@ (8005c44 <vTaskDelay+0x68>)
 8005c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000fb8 	.word	0x20000fb8
 8005c44:	e000ed04 	.word	0xe000ed04

08005c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	@ 0x28
 8005c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c56:	463a      	mov	r2, r7
 8005c58:	1d39      	adds	r1, r7, #4
 8005c5a:	f107 0308 	add.w	r3, r7, #8
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff f81c 	bl	8004c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	9202      	str	r2, [sp, #8]
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	2300      	movs	r3, #0
 8005c74:	460a      	mov	r2, r1
 8005c76:	4924      	ldr	r1, [pc, #144]	@ (8005d08 <vTaskStartScheduler+0xc0>)
 8005c78:	4824      	ldr	r0, [pc, #144]	@ (8005d0c <vTaskStartScheduler+0xc4>)
 8005c7a:	f7ff fdf1 	bl	8005860 <xTaskCreateStatic>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4a23      	ldr	r2, [pc, #140]	@ (8005d10 <vTaskStartScheduler+0xc8>)
 8005c82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c84:	4b22      	ldr	r3, [pc, #136]	@ (8005d10 <vTaskStartScheduler+0xc8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e001      	b.n	8005c96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d102      	bne.n	8005ca2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c9c:	f000 fd1a 	bl	80066d4 <xTimerCreateTimerTask>
 8005ca0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d11b      	bne.n	8005ce0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	613b      	str	r3, [r7, #16]
}
 8005cba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cbc:	4b15      	ldr	r3, [pc, #84]	@ (8005d14 <vTaskStartScheduler+0xcc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3354      	adds	r3, #84	@ 0x54
 8005cc2:	4a15      	ldr	r2, [pc, #84]	@ (8005d18 <vTaskStartScheduler+0xd0>)
 8005cc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cc6:	4b15      	ldr	r3, [pc, #84]	@ (8005d1c <vTaskStartScheduler+0xd4>)
 8005cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ccc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cce:	4b14      	ldr	r3, [pc, #80]	@ (8005d20 <vTaskStartScheduler+0xd8>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cd4:	4b13      	ldr	r3, [pc, #76]	@ (8005d24 <vTaskStartScheduler+0xdc>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cda:	f001 f8e1 	bl	8006ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cde:	e00f      	b.n	8005d00 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d10b      	bne.n	8005d00 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	60fb      	str	r3, [r7, #12]
}
 8005cfa:	bf00      	nop
 8005cfc:	bf00      	nop
 8005cfe:	e7fd      	b.n	8005cfc <vTaskStartScheduler+0xb4>
}
 8005d00:	bf00      	nop
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	08008874 	.word	0x08008874
 8005d0c:	08006359 	.word	0x08006359
 8005d10:	20000fb4 	.word	0x20000fb4
 8005d14:	20000abc 	.word	0x20000abc
 8005d18:	20000024 	.word	0x20000024
 8005d1c:	20000fb0 	.word	0x20000fb0
 8005d20:	20000f9c 	.word	0x20000f9c
 8005d24:	20000f94 	.word	0x20000f94

08005d28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d2c:	4b04      	ldr	r3, [pc, #16]	@ (8005d40 <vTaskSuspendAll+0x18>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	4a03      	ldr	r2, [pc, #12]	@ (8005d40 <vTaskSuspendAll+0x18>)
 8005d34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d36:	bf00      	nop
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20000fb8 	.word	0x20000fb8

08005d44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d52:	4b42      	ldr	r3, [pc, #264]	@ (8005e5c <xTaskResumeAll+0x118>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <xTaskResumeAll+0x2e>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	603b      	str	r3, [r7, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d72:	f001 f939 	bl	8006fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d76:	4b39      	ldr	r3, [pc, #228]	@ (8005e5c <xTaskResumeAll+0x118>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	4a37      	ldr	r2, [pc, #220]	@ (8005e5c <xTaskResumeAll+0x118>)
 8005d7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d80:	4b36      	ldr	r3, [pc, #216]	@ (8005e5c <xTaskResumeAll+0x118>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d162      	bne.n	8005e4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d88:	4b35      	ldr	r3, [pc, #212]	@ (8005e60 <xTaskResumeAll+0x11c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d05e      	beq.n	8005e4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d90:	e02f      	b.n	8005df2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d92:	4b34      	ldr	r3, [pc, #208]	@ (8005e64 <xTaskResumeAll+0x120>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3318      	adds	r3, #24
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff f83a 	bl	8004e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff f835 	bl	8004e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e68 <xTaskResumeAll+0x124>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d903      	bls.n	8005dc2 <xTaskResumeAll+0x7e>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005e68 <xTaskResumeAll+0x124>)
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4a27      	ldr	r2, [pc, #156]	@ (8005e6c <xTaskResumeAll+0x128>)
 8005dd0:	441a      	add	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7fe ffc0 	bl	8004d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de2:	4b23      	ldr	r3, [pc, #140]	@ (8005e70 <xTaskResumeAll+0x12c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d302      	bcc.n	8005df2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005dec:	4b21      	ldr	r3, [pc, #132]	@ (8005e74 <xTaskResumeAll+0x130>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005df2:	4b1c      	ldr	r3, [pc, #112]	@ (8005e64 <xTaskResumeAll+0x120>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1cb      	bne.n	8005d92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e00:	f000 fb66 	bl	80064d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e04:	4b1c      	ldr	r3, [pc, #112]	@ (8005e78 <xTaskResumeAll+0x134>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d010      	beq.n	8005e32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e10:	f000 f846 	bl	8005ea0 <xTaskIncrementTick>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e1a:	4b16      	ldr	r3, [pc, #88]	@ (8005e74 <xTaskResumeAll+0x130>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f1      	bne.n	8005e10 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005e2c:	4b12      	ldr	r3, [pc, #72]	@ (8005e78 <xTaskResumeAll+0x134>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e32:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <xTaskResumeAll+0x130>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e7c <xTaskResumeAll+0x138>)
 8005e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e4e:	f001 f8fd 	bl	800704c <vPortExitCritical>

	return xAlreadyYielded;
 8005e52:	68bb      	ldr	r3, [r7, #8]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20000fb8 	.word	0x20000fb8
 8005e60:	20000f90 	.word	0x20000f90
 8005e64:	20000f50 	.word	0x20000f50
 8005e68:	20000f98 	.word	0x20000f98
 8005e6c:	20000ac0 	.word	0x20000ac0
 8005e70:	20000abc 	.word	0x20000abc
 8005e74:	20000fa4 	.word	0x20000fa4
 8005e78:	20000fa0 	.word	0x20000fa0
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e86:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <xTaskGetTickCount+0x1c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e8c:	687b      	ldr	r3, [r7, #4]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20000f94 	.word	0x20000f94

08005ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8005fe8 <xTaskIncrementTick+0x148>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f040 8090 	bne.w	8005fd4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8005fec <xTaskIncrementTick+0x14c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8005fec <xTaskIncrementTick+0x14c>)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d121      	bne.n	8005f0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ec8:	4b49      	ldr	r3, [pc, #292]	@ (8005ff0 <xTaskIncrementTick+0x150>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	603b      	str	r3, [r7, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop
 8005ee8:	e7fd      	b.n	8005ee6 <xTaskIncrementTick+0x46>
 8005eea:	4b41      	ldr	r3, [pc, #260]	@ (8005ff0 <xTaskIncrementTick+0x150>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	4b40      	ldr	r3, [pc, #256]	@ (8005ff4 <xTaskIncrementTick+0x154>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ff0 <xTaskIncrementTick+0x150>)
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ff4 <xTaskIncrementTick+0x154>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff8 <xTaskIncrementTick+0x158>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	4a3c      	ldr	r2, [pc, #240]	@ (8005ff8 <xTaskIncrementTick+0x158>)
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	f000 fae2 	bl	80064d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005ffc <xTaskIncrementTick+0x15c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d349      	bcc.n	8005faa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f16:	4b36      	ldr	r3, [pc, #216]	@ (8005ff0 <xTaskIncrementTick+0x150>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f20:	4b36      	ldr	r3, [pc, #216]	@ (8005ffc <xTaskIncrementTick+0x15c>)
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	601a      	str	r2, [r3, #0]
					break;
 8005f28:	e03f      	b.n	8005faa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2a:	4b31      	ldr	r3, [pc, #196]	@ (8005ff0 <xTaskIncrementTick+0x150>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d203      	bcs.n	8005f4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f42:	4a2e      	ldr	r2, [pc, #184]	@ (8005ffc <xTaskIncrementTick+0x15c>)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f48:	e02f      	b.n	8005faa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe ff62 	bl	8004e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	3318      	adds	r3, #24
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe ff59 	bl	8004e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6a:	4b25      	ldr	r3, [pc, #148]	@ (8006000 <xTaskIncrementTick+0x160>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d903      	bls.n	8005f7a <xTaskIncrementTick+0xda>
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	4a22      	ldr	r2, [pc, #136]	@ (8006000 <xTaskIncrementTick+0x160>)
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4a1f      	ldr	r2, [pc, #124]	@ (8006004 <xTaskIncrementTick+0x164>)
 8005f88:	441a      	add	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f7fe fee4 	bl	8004d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006008 <xTaskIncrementTick+0x168>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d3b8      	bcc.n	8005f16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa8:	e7b5      	b.n	8005f16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005faa:	4b17      	ldr	r3, [pc, #92]	@ (8006008 <xTaskIncrementTick+0x168>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb0:	4914      	ldr	r1, [pc, #80]	@ (8006004 <xTaskIncrementTick+0x164>)
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d901      	bls.n	8005fc6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005fc6:	4b11      	ldr	r3, [pc, #68]	@ (800600c <xTaskIncrementTick+0x16c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	e004      	b.n	8005fde <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8006010 <xTaskIncrementTick+0x170>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	4a0d      	ldr	r2, [pc, #52]	@ (8006010 <xTaskIncrementTick+0x170>)
 8005fdc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005fde:	697b      	ldr	r3, [r7, #20]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000fb8 	.word	0x20000fb8
 8005fec:	20000f94 	.word	0x20000f94
 8005ff0:	20000f48 	.word	0x20000f48
 8005ff4:	20000f4c 	.word	0x20000f4c
 8005ff8:	20000fa8 	.word	0x20000fa8
 8005ffc:	20000fb0 	.word	0x20000fb0
 8006000:	20000f98 	.word	0x20000f98
 8006004:	20000ac0 	.word	0x20000ac0
 8006008:	20000abc 	.word	0x20000abc
 800600c:	20000fa4 	.word	0x20000fa4
 8006010:	20000fa0 	.word	0x20000fa0

08006014 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800601a:	4b2b      	ldr	r3, [pc, #172]	@ (80060c8 <vTaskSwitchContext+0xb4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006022:	4b2a      	ldr	r3, [pc, #168]	@ (80060cc <vTaskSwitchContext+0xb8>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006028:	e047      	b.n	80060ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800602a:	4b28      	ldr	r3, [pc, #160]	@ (80060cc <vTaskSwitchContext+0xb8>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006030:	4b27      	ldr	r3, [pc, #156]	@ (80060d0 <vTaskSwitchContext+0xbc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e011      	b.n	800605c <vTaskSwitchContext+0x48>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <vTaskSwitchContext+0x42>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	607b      	str	r3, [r7, #4]
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	e7fd      	b.n	8006052 <vTaskSwitchContext+0x3e>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3b01      	subs	r3, #1
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	491d      	ldr	r1, [pc, #116]	@ (80060d4 <vTaskSwitchContext+0xc0>)
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0e3      	beq.n	8006038 <vTaskSwitchContext+0x24>
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4a16      	ldr	r2, [pc, #88]	@ (80060d4 <vTaskSwitchContext+0xc0>)
 800607c:	4413      	add	r3, r2
 800607e:	60bb      	str	r3, [r7, #8]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	3308      	adds	r3, #8
 8006092:	429a      	cmp	r2, r3
 8006094:	d104      	bne.n	80060a0 <vTaskSwitchContext+0x8c>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	4a0c      	ldr	r2, [pc, #48]	@ (80060d8 <vTaskSwitchContext+0xc4>)
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	4a09      	ldr	r2, [pc, #36]	@ (80060d0 <vTaskSwitchContext+0xbc>)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060b0:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <vTaskSwitchContext+0xc4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3354      	adds	r3, #84	@ 0x54
 80060b6:	4a09      	ldr	r2, [pc, #36]	@ (80060dc <vTaskSwitchContext+0xc8>)
 80060b8:	6013      	str	r3, [r2, #0]
}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20000fb8 	.word	0x20000fb8
 80060cc:	20000fa4 	.word	0x20000fa4
 80060d0:	20000f98 	.word	0x20000f98
 80060d4:	20000ac0 	.word	0x20000ac0
 80060d8:	20000abc 	.word	0x20000abc
 80060dc:	20000024 	.word	0x20000024

080060e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	e7fd      	b.n	8006104 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006108:	4b07      	ldr	r3, [pc, #28]	@ (8006128 <vTaskPlaceOnEventList+0x48>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3318      	adds	r3, #24
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fe fe48 	bl	8004da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006116:	2101      	movs	r1, #1
 8006118:	6838      	ldr	r0, [r7, #0]
 800611a:	f000 fa87 	bl	800662c <prvAddCurrentTaskToDelayedList>
}
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000abc 	.word	0x20000abc

0800612c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	617b      	str	r3, [r7, #20]
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	e7fd      	b.n	8006152 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006156:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <vTaskPlaceOnEventListRestricted+0x54>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3318      	adds	r3, #24
 800615c:	4619      	mov	r1, r3
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7fe fdfd 	bl	8004d5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800616a:	f04f 33ff 	mov.w	r3, #4294967295
 800616e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	68b8      	ldr	r0, [r7, #8]
 8006174:	f000 fa5a 	bl	800662c <prvAddCurrentTaskToDelayedList>
	}
 8006178:	bf00      	nop
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000abc 	.word	0x20000abc

08006184 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60fb      	str	r3, [r7, #12]
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3318      	adds	r3, #24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fe2e 	bl	8004e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006234 <xTaskRemoveFromEventList+0xb0>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11d      	bne.n	8006200 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe fe25 	bl	8004e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d2:	4b19      	ldr	r3, [pc, #100]	@ (8006238 <xTaskRemoveFromEventList+0xb4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d903      	bls.n	80061e2 <xTaskRemoveFromEventList+0x5e>
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	4a16      	ldr	r2, [pc, #88]	@ (8006238 <xTaskRemoveFromEventList+0xb4>)
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4a13      	ldr	r2, [pc, #76]	@ (800623c <xTaskRemoveFromEventList+0xb8>)
 80061f0:	441a      	add	r2, r3
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	3304      	adds	r3, #4
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f7fe fdb0 	bl	8004d5e <vListInsertEnd>
 80061fe:	e005      	b.n	800620c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	3318      	adds	r3, #24
 8006204:	4619      	mov	r1, r3
 8006206:	480e      	ldr	r0, [pc, #56]	@ (8006240 <xTaskRemoveFromEventList+0xbc>)
 8006208:	f7fe fda9 	bl	8004d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006210:	4b0c      	ldr	r3, [pc, #48]	@ (8006244 <xTaskRemoveFromEventList+0xc0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006216:	429a      	cmp	r2, r3
 8006218:	d905      	bls.n	8006226 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800621a:	2301      	movs	r3, #1
 800621c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800621e:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <xTaskRemoveFromEventList+0xc4>)
 8006220:	2201      	movs	r2, #1
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e001      	b.n	800622a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800622a:	697b      	ldr	r3, [r7, #20]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000fb8 	.word	0x20000fb8
 8006238:	20000f98 	.word	0x20000f98
 800623c:	20000ac0 	.word	0x20000ac0
 8006240:	20000f50 	.word	0x20000f50
 8006244:	20000abc 	.word	0x20000abc
 8006248:	20000fa4 	.word	0x20000fa4

0800624c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006254:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <vTaskInternalSetTimeOutState+0x24>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800625c:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <vTaskInternalSetTimeOutState+0x28>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	605a      	str	r2, [r3, #4]
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	20000fa8 	.word	0x20000fa8
 8006274:	20000f94 	.word	0x20000f94

08006278 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10b      	bne.n	80062a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	613b      	str	r3, [r7, #16]
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	e7fd      	b.n	800629c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	60fb      	str	r3, [r7, #12]
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	e7fd      	b.n	80062ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80062be:	f000 fe93 	bl	8006fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006338 <xTaskCheckForTimeOut+0xc0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d102      	bne.n	80062e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	e023      	b.n	800632a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b15      	ldr	r3, [pc, #84]	@ (800633c <xTaskCheckForTimeOut+0xc4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d007      	beq.n	80062fe <xTaskCheckForTimeOut+0x86>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d302      	bcc.n	80062fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062f8:	2301      	movs	r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e015      	b.n	800632a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	429a      	cmp	r2, r3
 8006306:	d20b      	bcs.n	8006320 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff ff99 	bl	800624c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	e004      	b.n	800632a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006326:	2301      	movs	r3, #1
 8006328:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800632a:	f000 fe8f 	bl	800704c <vPortExitCritical>

	return xReturn;
 800632e:	69fb      	ldr	r3, [r7, #28]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20000f94 	.word	0x20000f94
 800633c:	20000fa8 	.word	0x20000fa8

08006340 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006344:	4b03      	ldr	r3, [pc, #12]	@ (8006354 <vTaskMissedYield+0x14>)
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]
}
 800634a:	bf00      	nop
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	20000fa4 	.word	0x20000fa4

08006358 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006360:	f000 f852 	bl	8006408 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006364:	4b06      	ldr	r3, [pc, #24]	@ (8006380 <prvIdleTask+0x28>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d9f9      	bls.n	8006360 <prvIdleTask+0x8>
			{
				taskYIELD();
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <prvIdleTask+0x2c>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800637c:	e7f0      	b.n	8006360 <prvIdleTask+0x8>
 800637e:	bf00      	nop
 8006380:	20000ac0 	.word	0x20000ac0
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800638e:	2300      	movs	r3, #0
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	e00c      	b.n	80063ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4a12      	ldr	r2, [pc, #72]	@ (80063e8 <prvInitialiseTaskLists+0x60>)
 80063a0:	4413      	add	r3, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fcae 	bl	8004d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3301      	adds	r3, #1
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b37      	cmp	r3, #55	@ 0x37
 80063b2:	d9ef      	bls.n	8006394 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063b4:	480d      	ldr	r0, [pc, #52]	@ (80063ec <prvInitialiseTaskLists+0x64>)
 80063b6:	f7fe fca5 	bl	8004d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063ba:	480d      	ldr	r0, [pc, #52]	@ (80063f0 <prvInitialiseTaskLists+0x68>)
 80063bc:	f7fe fca2 	bl	8004d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063c0:	480c      	ldr	r0, [pc, #48]	@ (80063f4 <prvInitialiseTaskLists+0x6c>)
 80063c2:	f7fe fc9f 	bl	8004d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063c6:	480c      	ldr	r0, [pc, #48]	@ (80063f8 <prvInitialiseTaskLists+0x70>)
 80063c8:	f7fe fc9c 	bl	8004d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063cc:	480b      	ldr	r0, [pc, #44]	@ (80063fc <prvInitialiseTaskLists+0x74>)
 80063ce:	f7fe fc99 	bl	8004d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <prvInitialiseTaskLists+0x78>)
 80063d4:	4a05      	ldr	r2, [pc, #20]	@ (80063ec <prvInitialiseTaskLists+0x64>)
 80063d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006404 <prvInitialiseTaskLists+0x7c>)
 80063da:	4a05      	ldr	r2, [pc, #20]	@ (80063f0 <prvInitialiseTaskLists+0x68>)
 80063dc:	601a      	str	r2, [r3, #0]
}
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000ac0 	.word	0x20000ac0
 80063ec:	20000f20 	.word	0x20000f20
 80063f0:	20000f34 	.word	0x20000f34
 80063f4:	20000f50 	.word	0x20000f50
 80063f8:	20000f64 	.word	0x20000f64
 80063fc:	20000f7c 	.word	0x20000f7c
 8006400:	20000f48 	.word	0x20000f48
 8006404:	20000f4c 	.word	0x20000f4c

08006408 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800640e:	e019      	b.n	8006444 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006410:	f000 fdea 	bl	8006fe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006414:	4b10      	ldr	r3, [pc, #64]	@ (8006458 <prvCheckTasksWaitingTermination+0x50>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe fcf9 	bl	8004e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006426:	4b0d      	ldr	r3, [pc, #52]	@ (800645c <prvCheckTasksWaitingTermination+0x54>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3b01      	subs	r3, #1
 800642c:	4a0b      	ldr	r2, [pc, #44]	@ (800645c <prvCheckTasksWaitingTermination+0x54>)
 800642e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006430:	4b0b      	ldr	r3, [pc, #44]	@ (8006460 <prvCheckTasksWaitingTermination+0x58>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3b01      	subs	r3, #1
 8006436:	4a0a      	ldr	r2, [pc, #40]	@ (8006460 <prvCheckTasksWaitingTermination+0x58>)
 8006438:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800643a:	f000 fe07 	bl	800704c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f810 	bl	8006464 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006444:	4b06      	ldr	r3, [pc, #24]	@ (8006460 <prvCheckTasksWaitingTermination+0x58>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e1      	bne.n	8006410 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000f64 	.word	0x20000f64
 800645c:	20000f90 	.word	0x20000f90
 8006460:	20000f78 	.word	0x20000f78

08006464 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3354      	adds	r3, #84	@ 0x54
 8006470:	4618      	mov	r0, r3
 8006472:	f001 fad9 	bl	8007a28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800647c:	2b00      	cmp	r3, #0
 800647e:	d108      	bne.n	8006492 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006484:	4618      	mov	r0, r3
 8006486:	f000 ff9f 	bl	80073c8 <vPortFree>
				vPortFree( pxTCB );
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 ff9c 	bl	80073c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006490:	e019      	b.n	80064c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006498:	2b01      	cmp	r3, #1
 800649a:	d103      	bne.n	80064a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 ff93 	bl	80073c8 <vPortFree>
	}
 80064a2:	e010      	b.n	80064c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d00b      	beq.n	80064c6 <prvDeleteTCB+0x62>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60fb      	str	r3, [r7, #12]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <prvDeleteTCB+0x5e>
	}
 80064c6:	bf00      	nop
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <prvResetNextTaskUnblockTime+0x38>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064e0:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <prvResetNextTaskUnblockTime+0x3c>)
 80064e2:	f04f 32ff 	mov.w	r2, #4294967295
 80064e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064e8:	e008      	b.n	80064fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ea:	4b07      	ldr	r3, [pc, #28]	@ (8006508 <prvResetNextTaskUnblockTime+0x38>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	4a04      	ldr	r2, [pc, #16]	@ (800650c <prvResetNextTaskUnblockTime+0x3c>)
 80064fa:	6013      	str	r3, [r2, #0]
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	20000f48 	.word	0x20000f48
 800650c:	20000fb0 	.word	0x20000fb0

08006510 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006516:	4b0b      	ldr	r3, [pc, #44]	@ (8006544 <xTaskGetSchedulerState+0x34>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800651e:	2301      	movs	r3, #1
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	e008      	b.n	8006536 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006524:	4b08      	ldr	r3, [pc, #32]	@ (8006548 <xTaskGetSchedulerState+0x38>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800652c:	2302      	movs	r3, #2
 800652e:	607b      	str	r3, [r7, #4]
 8006530:	e001      	b.n	8006536 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006532:	2300      	movs	r3, #0
 8006534:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006536:	687b      	ldr	r3, [r7, #4]
	}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	20000f9c 	.word	0x20000f9c
 8006548:	20000fb8 	.word	0x20000fb8

0800654c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d058      	beq.n	8006614 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006562:	4b2f      	ldr	r3, [pc, #188]	@ (8006620 <xTaskPriorityDisinherit+0xd4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	429a      	cmp	r2, r3
 800656a:	d00b      	beq.n	8006584 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	60fb      	str	r3, [r7, #12]
}
 800657e:	bf00      	nop
 8006580:	bf00      	nop
 8006582:	e7fd      	b.n	8006580 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10b      	bne.n	80065a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60bb      	str	r3, [r7, #8]
}
 800659e:	bf00      	nop
 80065a0:	bf00      	nop
 80065a2:	e7fd      	b.n	80065a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a8:	1e5a      	subs	r2, r3, #1
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d02c      	beq.n	8006614 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d128      	bne.n	8006614 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe fc26 	bl	8004e18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006624 <xTaskPriorityDisinherit+0xd8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d903      	bls.n	80065f4 <xTaskPriorityDisinherit+0xa8>
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006624 <xTaskPriorityDisinherit+0xd8>)
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4a09      	ldr	r2, [pc, #36]	@ (8006628 <xTaskPriorityDisinherit+0xdc>)
 8006602:	441a      	add	r2, r3
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f7fe fba7 	bl	8004d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006610:	2301      	movs	r3, #1
 8006612:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006614:	697b      	ldr	r3, [r7, #20]
	}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000abc 	.word	0x20000abc
 8006624:	20000f98 	.word	0x20000f98
 8006628:	20000ac0 	.word	0x20000ac0

0800662c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006636:	4b21      	ldr	r3, [pc, #132]	@ (80066bc <prvAddCurrentTaskToDelayedList+0x90>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800663c:	4b20      	ldr	r3, [pc, #128]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3304      	adds	r3, #4
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe fbe8 	bl	8004e18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664e:	d10a      	bne.n	8006666 <prvAddCurrentTaskToDelayedList+0x3a>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d007      	beq.n	8006666 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006656:	4b1a      	ldr	r3, [pc, #104]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3304      	adds	r3, #4
 800665c:	4619      	mov	r1, r3
 800665e:	4819      	ldr	r0, [pc, #100]	@ (80066c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006660:	f7fe fb7d 	bl	8004d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006664:	e026      	b.n	80066b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4413      	add	r3, r2
 800666c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800666e:	4b14      	ldr	r3, [pc, #80]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	429a      	cmp	r2, r3
 800667c:	d209      	bcs.n	8006692 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800667e:	4b12      	ldr	r3, [pc, #72]	@ (80066c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b0f      	ldr	r3, [pc, #60]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3304      	adds	r3, #4
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f7fe fb8b 	bl	8004da6 <vListInsert>
}
 8006690:	e010      	b.n	80066b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006692:	4b0e      	ldr	r3, [pc, #56]	@ (80066cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3304      	adds	r3, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4610      	mov	r0, r2
 80066a0:	f7fe fb81 	bl	8004da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066a4:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d202      	bcs.n	80066b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066ae:	4a08      	ldr	r2, [pc, #32]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6013      	str	r3, [r2, #0]
}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000f94 	.word	0x20000f94
 80066c0:	20000abc 	.word	0x20000abc
 80066c4:	20000f7c 	.word	0x20000f7c
 80066c8:	20000f4c 	.word	0x20000f4c
 80066cc:	20000f48 	.word	0x20000f48
 80066d0:	20000fb0 	.word	0x20000fb0

080066d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	@ 0x28
 80066d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066de:	f000 fb13 	bl	8006d08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006758 <xTimerCreateTimerTask+0x84>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d021      	beq.n	800672e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066f2:	1d3a      	adds	r2, r7, #4
 80066f4:	f107 0108 	add.w	r1, r7, #8
 80066f8:	f107 030c 	add.w	r3, r7, #12
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe fae7 	bl	8004cd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	9202      	str	r2, [sp, #8]
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	2302      	movs	r3, #2
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	2300      	movs	r3, #0
 8006712:	460a      	mov	r2, r1
 8006714:	4911      	ldr	r1, [pc, #68]	@ (800675c <xTimerCreateTimerTask+0x88>)
 8006716:	4812      	ldr	r0, [pc, #72]	@ (8006760 <xTimerCreateTimerTask+0x8c>)
 8006718:	f7ff f8a2 	bl	8005860 <xTaskCreateStatic>
 800671c:	4603      	mov	r3, r0
 800671e:	4a11      	ldr	r2, [pc, #68]	@ (8006764 <xTimerCreateTimerTask+0x90>)
 8006720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006722:	4b10      	ldr	r3, [pc, #64]	@ (8006764 <xTimerCreateTimerTask+0x90>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800672a:	2301      	movs	r3, #1
 800672c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	613b      	str	r3, [r7, #16]
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800674c:	697b      	ldr	r3, [r7, #20]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000fec 	.word	0x20000fec
 800675c:	0800887c 	.word	0x0800887c
 8006760:	080068a1 	.word	0x080068a1
 8006764:	20000ff0 	.word	0x20000ff0

08006768 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	@ 0x28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006776:	2300      	movs	r3, #0
 8006778:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <xTimerGenericCommand+0x30>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	623b      	str	r3, [r7, #32]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006798:	4b19      	ldr	r3, [pc, #100]	@ (8006800 <xTimerGenericCommand+0x98>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02a      	beq.n	80067f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b05      	cmp	r3, #5
 80067b0:	dc18      	bgt.n	80067e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067b2:	f7ff fead 	bl	8006510 <xTaskGetSchedulerState>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d109      	bne.n	80067d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067bc:	4b10      	ldr	r3, [pc, #64]	@ (8006800 <xTimerGenericCommand+0x98>)
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	f107 0110 	add.w	r1, r7, #16
 80067c4:	2300      	movs	r3, #0
 80067c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c8:	f7fe fc5a 	bl	8005080 <xQueueGenericSend>
 80067cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80067ce:	e012      	b.n	80067f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006800 <xTimerGenericCommand+0x98>)
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	f107 0110 	add.w	r1, r7, #16
 80067d8:	2300      	movs	r3, #0
 80067da:	2200      	movs	r2, #0
 80067dc:	f7fe fc50 	bl	8005080 <xQueueGenericSend>
 80067e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80067e2:	e008      	b.n	80067f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067e4:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <xTimerGenericCommand+0x98>)
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	f107 0110 	add.w	r1, r7, #16
 80067ec:	2300      	movs	r3, #0
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	f7fe fd48 	bl	8005284 <xQueueGenericSendFromISR>
 80067f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3728      	adds	r7, #40	@ 0x28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000fec 	.word	0x20000fec

08006804 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af02      	add	r7, sp, #8
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800680e:	4b23      	ldr	r3, [pc, #140]	@ (800689c <prvProcessExpiredTimer+0x98>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3304      	adds	r3, #4
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fafb 	bl	8004e18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d023      	beq.n	8006878 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	18d1      	adds	r1, r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	6978      	ldr	r0, [r7, #20]
 800683e:	f000 f8d5 	bl	80069ec <prvInsertTimerInActiveList>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006848:	2300      	movs	r3, #0
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	2300      	movs	r3, #0
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	2100      	movs	r1, #0
 8006852:	6978      	ldr	r0, [r7, #20]
 8006854:	f7ff ff88 	bl	8006768 <xTimerGenericCommand>
 8006858:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d114      	bne.n	800688a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60fb      	str	r3, [r7, #12]
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800687e:	f023 0301 	bic.w	r3, r3, #1
 8006882:	b2da      	uxtb	r2, r3
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	6978      	ldr	r0, [r7, #20]
 8006890:	4798      	blx	r3
}
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000fe4 	.word	0x20000fe4

080068a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068a8:	f107 0308 	add.w	r3, r7, #8
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 f859 	bl	8006964 <prvGetNextExpireTime>
 80068b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4619      	mov	r1, r3
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f805 	bl	80068c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068be:	f000 f8d7 	bl	8006a70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068c2:	bf00      	nop
 80068c4:	e7f0      	b.n	80068a8 <prvTimerTask+0x8>
	...

080068c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068d2:	f7ff fa29 	bl	8005d28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068d6:	f107 0308 	add.w	r3, r7, #8
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 f866 	bl	80069ac <prvSampleTimeNow>
 80068e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d130      	bne.n	800694a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10a      	bne.n	8006904 <prvProcessTimerOrBlockTask+0x3c>
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d806      	bhi.n	8006904 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068f6:	f7ff fa25 	bl	8005d44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff ff81 	bl	8006804 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006902:	e024      	b.n	800694e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800690a:	4b13      	ldr	r3, [pc, #76]	@ (8006958 <prvProcessTimerOrBlockTask+0x90>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <prvProcessTimerOrBlockTask+0x50>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <prvProcessTimerOrBlockTask+0x52>
 8006918:	2300      	movs	r3, #0
 800691a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800691c:	4b0f      	ldr	r3, [pc, #60]	@ (800695c <prvProcessTimerOrBlockTask+0x94>)
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	4619      	mov	r1, r3
 800692a:	f7fe ff65 	bl	80057f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800692e:	f7ff fa09 	bl	8005d44 <xTaskResumeAll>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006938:	4b09      	ldr	r3, [pc, #36]	@ (8006960 <prvProcessTimerOrBlockTask+0x98>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
}
 8006948:	e001      	b.n	800694e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800694a:	f7ff f9fb 	bl	8005d44 <xTaskResumeAll>
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000fe8 	.word	0x20000fe8
 800695c:	20000fec 	.word	0x20000fec
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800696c:	4b0e      	ldr	r3, [pc, #56]	@ (80069a8 <prvGetNextExpireTime+0x44>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <prvGetNextExpireTime+0x16>
 8006976:	2201      	movs	r2, #1
 8006978:	e000      	b.n	800697c <prvGetNextExpireTime+0x18>
 800697a:	2200      	movs	r2, #0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d105      	bne.n	8006994 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006988:	4b07      	ldr	r3, [pc, #28]	@ (80069a8 <prvGetNextExpireTime+0x44>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	e001      	b.n	8006998 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006998:	68fb      	ldr	r3, [r7, #12]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20000fe4 	.word	0x20000fe4

080069ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069b4:	f7ff fa64 	bl	8005e80 <xTaskGetTickCount>
 80069b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069ba:	4b0b      	ldr	r3, [pc, #44]	@ (80069e8 <prvSampleTimeNow+0x3c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d205      	bcs.n	80069d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069c4:	f000 f93a 	bl	8006c3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e002      	b.n	80069d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069d6:	4a04      	ldr	r2, [pc, #16]	@ (80069e8 <prvSampleTimeNow+0x3c>)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069dc:	68fb      	ldr	r3, [r7, #12]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000ff4 	.word	0x20000ff4

080069ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d812      	bhi.n	8006a38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	1ad2      	subs	r2, r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a20:	2301      	movs	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e01b      	b.n	8006a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a26:	4b10      	ldr	r3, [pc, #64]	@ (8006a68 <prvInsertTimerInActiveList+0x7c>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f7fe f9b8 	bl	8004da6 <vListInsert>
 8006a36:	e012      	b.n	8006a5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d206      	bcs.n	8006a4e <prvInsertTimerInActiveList+0x62>
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d302      	bcc.n	8006a4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e007      	b.n	8006a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a4e:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <prvInsertTimerInActiveList+0x80>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3304      	adds	r3, #4
 8006a56:	4619      	mov	r1, r3
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f7fe f9a4 	bl	8004da6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a5e:	697b      	ldr	r3, [r7, #20]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000fe8 	.word	0x20000fe8
 8006a6c:	20000fe4 	.word	0x20000fe4

08006a70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	@ 0x38
 8006a74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a76:	e0ce      	b.n	8006c16 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da19      	bge.n	8006ab2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	3304      	adds	r3, #4
 8006a82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	61fb      	str	r3, [r7, #28]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aa8:	6850      	ldr	r0, [r2, #4]
 8006aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aac:	6892      	ldr	r2, [r2, #8]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f2c0 80ae 	blt.w	8006c16 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe f9a4 	bl	8004e18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff ff6a 	bl	80069ac <prvSampleTimeNow>
 8006ad8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b09      	cmp	r3, #9
 8006ade:	f200 8097 	bhi.w	8006c10 <prvProcessReceivedCommands+0x1a0>
 8006ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <prvProcessReceivedCommands+0x78>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b11 	.word	0x08006b11
 8006af4:	08006b87 	.word	0x08006b87
 8006af8:	08006b9b 	.word	0x08006b9b
 8006afc:	08006be7 	.word	0x08006be7
 8006b00:	08006b11 	.word	0x08006b11
 8006b04:	08006b11 	.word	0x08006b11
 8006b08:	08006b87 	.word	0x08006b87
 8006b0c:	08006b9b 	.word	0x08006b9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	18d1      	adds	r1, r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b30:	f7ff ff5c 	bl	80069ec <prvInsertTimerInActiveList>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d06c      	beq.n	8006c14 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d061      	beq.n	8006c14 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	441a      	add	r2, r3
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2100      	movs	r1, #0
 8006b60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b62:	f7ff fe01 	bl	8006768 <xTimerGenericCommand>
 8006b66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d152      	bne.n	8006c14 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	61bb      	str	r3, [r7, #24]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b98:	e03d      	b.n	8006c16 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ba0:	f043 0301 	orr.w	r3, r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10b      	bne.n	8006bd2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	617b      	str	r3, [r7, #20]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	18d1      	adds	r1, r2, r3
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006be0:	f7ff ff04 	bl	80069ec <prvInsertTimerInActiveList>
					break;
 8006be4:	e017      	b.n	8006c16 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006bf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bf6:	f000 fbe7 	bl	80073c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bfa:	e00c      	b.n	8006c16 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006c0e:	e002      	b.n	8006c16 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <prvProcessReceivedCommands+0x1a6>
					break;
 8006c14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c16:	4b08      	ldr	r3, [pc, #32]	@ (8006c38 <prvProcessReceivedCommands+0x1c8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	1d39      	adds	r1, r7, #4
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fbce 	bl	80053c0 <xQueueReceive>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f47f af26 	bne.w	8006a78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3730      	adds	r7, #48	@ 0x30
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000fec 	.word	0x20000fec

08006c3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c42:	e049      	b.n	8006cd8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c44:	4b2e      	ldr	r3, [pc, #184]	@ (8006d00 <prvSwitchTimerLists+0xc4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8006d00 <prvSwitchTimerLists+0xc4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe f8db 	bl	8004e18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d02f      	beq.n	8006cd8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4413      	add	r3, r2
 8006c80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d90e      	bls.n	8006ca8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c96:	4b1a      	ldr	r3, [pc, #104]	@ (8006d00 <prvSwitchTimerLists+0xc4>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	f7fe f880 	bl	8004da6 <vListInsert>
 8006ca6:	e017      	b.n	8006cd8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	2300      	movs	r3, #0
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7ff fd58 	bl	8006768 <xTimerGenericCommand>
 8006cb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10b      	bne.n	8006cd8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	603b      	str	r3, [r7, #0]
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cd8:	4b09      	ldr	r3, [pc, #36]	@ (8006d00 <prvSwitchTimerLists+0xc4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1b0      	bne.n	8006c44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ce2:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <prvSwitchTimerLists+0xc4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ce8:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <prvSwitchTimerLists+0xc8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a04      	ldr	r2, [pc, #16]	@ (8006d00 <prvSwitchTimerLists+0xc4>)
 8006cee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006cf0:	4a04      	ldr	r2, [pc, #16]	@ (8006d04 <prvSwitchTimerLists+0xc8>)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	6013      	str	r3, [r2, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000fe4 	.word	0x20000fe4
 8006d04:	20000fe8 	.word	0x20000fe8

08006d08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d0e:	f000 f96b 	bl	8006fe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d12:	4b15      	ldr	r3, [pc, #84]	@ (8006d68 <prvCheckForValidListAndQueue+0x60>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d120      	bne.n	8006d5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d1a:	4814      	ldr	r0, [pc, #80]	@ (8006d6c <prvCheckForValidListAndQueue+0x64>)
 8006d1c:	f7fd fff2 	bl	8004d04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d20:	4813      	ldr	r0, [pc, #76]	@ (8006d70 <prvCheckForValidListAndQueue+0x68>)
 8006d22:	f7fd ffef 	bl	8004d04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d26:	4b13      	ldr	r3, [pc, #76]	@ (8006d74 <prvCheckForValidListAndQueue+0x6c>)
 8006d28:	4a10      	ldr	r2, [pc, #64]	@ (8006d6c <prvCheckForValidListAndQueue+0x64>)
 8006d2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d2c:	4b12      	ldr	r3, [pc, #72]	@ (8006d78 <prvCheckForValidListAndQueue+0x70>)
 8006d2e:	4a10      	ldr	r2, [pc, #64]	@ (8006d70 <prvCheckForValidListAndQueue+0x68>)
 8006d30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d32:	2300      	movs	r3, #0
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	4b11      	ldr	r3, [pc, #68]	@ (8006d7c <prvCheckForValidListAndQueue+0x74>)
 8006d38:	4a11      	ldr	r2, [pc, #68]	@ (8006d80 <prvCheckForValidListAndQueue+0x78>)
 8006d3a:	2110      	movs	r1, #16
 8006d3c:	200a      	movs	r0, #10
 8006d3e:	f7fe f8ff 	bl	8004f40 <xQueueGenericCreateStatic>
 8006d42:	4603      	mov	r3, r0
 8006d44:	4a08      	ldr	r2, [pc, #32]	@ (8006d68 <prvCheckForValidListAndQueue+0x60>)
 8006d46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d48:	4b07      	ldr	r3, [pc, #28]	@ (8006d68 <prvCheckForValidListAndQueue+0x60>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d50:	4b05      	ldr	r3, [pc, #20]	@ (8006d68 <prvCheckForValidListAndQueue+0x60>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	490b      	ldr	r1, [pc, #44]	@ (8006d84 <prvCheckForValidListAndQueue+0x7c>)
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fd24 	bl	80057a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d5c:	f000 f976 	bl	800704c <vPortExitCritical>
}
 8006d60:	bf00      	nop
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000fec 	.word	0x20000fec
 8006d6c:	20000fbc 	.word	0x20000fbc
 8006d70:	20000fd0 	.word	0x20000fd0
 8006d74:	20000fe4 	.word	0x20000fe4
 8006d78:	20000fe8 	.word	0x20000fe8
 8006d7c:	20001098 	.word	0x20001098
 8006d80:	20000ff8 	.word	0x20000ff8
 8006d84:	08008884 	.word	0x08008884

08006d88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3b04      	subs	r3, #4
 8006d98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3b04      	subs	r3, #4
 8006da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f023 0201 	bic.w	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3b04      	subs	r3, #4
 8006db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006db8:	4a0c      	ldr	r2, [pc, #48]	@ (8006dec <pxPortInitialiseStack+0x64>)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3b14      	subs	r3, #20
 8006dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3b04      	subs	r3, #4
 8006dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f06f 0202 	mvn.w	r2, #2
 8006dd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3b20      	subs	r3, #32
 8006ddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	08006df1 	.word	0x08006df1

08006df0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dfa:	4b13      	ldr	r3, [pc, #76]	@ (8006e48 <prvTaskExitError+0x58>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	d00b      	beq.n	8006e1c <prvTaskExitError+0x2c>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <prvTaskExitError+0x28>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60bb      	str	r3, [r7, #8]
}
 8006e2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e30:	bf00      	nop
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0fc      	beq.n	8006e32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000014 	.word	0x20000014
 8006e4c:	00000000 	.word	0x00000000

08006e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e50:	4b07      	ldr	r3, [pc, #28]	@ (8006e70 <pxCurrentTCBConst2>)
 8006e52:	6819      	ldr	r1, [r3, #0]
 8006e54:	6808      	ldr	r0, [r1, #0]
 8006e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5a:	f380 8809 	msr	PSP, r0
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f04f 0000 	mov.w	r0, #0
 8006e66:	f380 8811 	msr	BASEPRI, r0
 8006e6a:	4770      	bx	lr
 8006e6c:	f3af 8000 	nop.w

08006e70 <pxCurrentTCBConst2>:
 8006e70:	20000abc 	.word	0x20000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop

08006e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e78:	4808      	ldr	r0, [pc, #32]	@ (8006e9c <prvPortStartFirstTask+0x24>)
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	6800      	ldr	r0, [r0, #0]
 8006e7e:	f380 8808 	msr	MSP, r0
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f380 8814 	msr	CONTROL, r0
 8006e8a:	b662      	cpsie	i
 8006e8c:	b661      	cpsie	f
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	df00      	svc	0
 8006e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e9a:	bf00      	nop
 8006e9c:	e000ed08 	.word	0xe000ed08

08006ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ea6:	4b47      	ldr	r3, [pc, #284]	@ (8006fc4 <xPortStartScheduler+0x124>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a47      	ldr	r2, [pc, #284]	@ (8006fc8 <xPortStartScheduler+0x128>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d10b      	bne.n	8006ec8 <xPortStartScheduler+0x28>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60fb      	str	r3, [r7, #12]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8006fc4 <xPortStartScheduler+0x124>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8006fcc <xPortStartScheduler+0x12c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d10b      	bne.n	8006eea <xPortStartScheduler+0x4a>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	613b      	str	r3, [r7, #16]
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	e7fd      	b.n	8006ee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006eea:	4b39      	ldr	r3, [pc, #228]	@ (8006fd0 <xPortStartScheduler+0x130>)
 8006eec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	22ff      	movs	r2, #255	@ 0xff
 8006efa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	4b31      	ldr	r3, [pc, #196]	@ (8006fd4 <xPortStartScheduler+0x134>)
 8006f10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f12:	4b31      	ldr	r3, [pc, #196]	@ (8006fd8 <xPortStartScheduler+0x138>)
 8006f14:	2207      	movs	r2, #7
 8006f16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f18:	e009      	b.n	8006f2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd8 <xPortStartScheduler+0x138>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	4a2d      	ldr	r2, [pc, #180]	@ (8006fd8 <xPortStartScheduler+0x138>)
 8006f22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f36:	2b80      	cmp	r3, #128	@ 0x80
 8006f38:	d0ef      	beq.n	8006f1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f3a:	4b27      	ldr	r3, [pc, #156]	@ (8006fd8 <xPortStartScheduler+0x138>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f1c3 0307 	rsb	r3, r3, #7
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d00b      	beq.n	8006f5e <xPortStartScheduler+0xbe>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60bb      	str	r3, [r7, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd8 <xPortStartScheduler+0x138>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	4a1c      	ldr	r2, [pc, #112]	@ (8006fd8 <xPortStartScheduler+0x138>)
 8006f66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f68:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd8 <xPortStartScheduler+0x138>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f70:	4a19      	ldr	r2, [pc, #100]	@ (8006fd8 <xPortStartScheduler+0x138>)
 8006f72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f7c:	4b17      	ldr	r3, [pc, #92]	@ (8006fdc <xPortStartScheduler+0x13c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a16      	ldr	r2, [pc, #88]	@ (8006fdc <xPortStartScheduler+0x13c>)
 8006f82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f88:	4b14      	ldr	r3, [pc, #80]	@ (8006fdc <xPortStartScheduler+0x13c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a13      	ldr	r2, [pc, #76]	@ (8006fdc <xPortStartScheduler+0x13c>)
 8006f8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006f92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f94:	f000 f8da 	bl	800714c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f98:	4b11      	ldr	r3, [pc, #68]	@ (8006fe0 <xPortStartScheduler+0x140>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f9e:	f000 f8f9 	bl	8007194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fa2:	4b10      	ldr	r3, [pc, #64]	@ (8006fe4 <xPortStartScheduler+0x144>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8006fe4 <xPortStartScheduler+0x144>)
 8006fa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006fac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fae:	f7ff ff63 	bl	8006e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fb2:	f7ff f82f 	bl	8006014 <vTaskSwitchContext>
	prvTaskExitError();
 8006fb6:	f7ff ff1b 	bl	8006df0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	e000ed00 	.word	0xe000ed00
 8006fc8:	410fc271 	.word	0x410fc271
 8006fcc:	410fc270 	.word	0x410fc270
 8006fd0:	e000e400 	.word	0xe000e400
 8006fd4:	200010e8 	.word	0x200010e8
 8006fd8:	200010ec 	.word	0x200010ec
 8006fdc:	e000ed20 	.word	0xe000ed20
 8006fe0:	20000014 	.word	0x20000014
 8006fe4:	e000ef34 	.word	0xe000ef34

08006fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	607b      	str	r3, [r7, #4]
}
 8007000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007002:	4b10      	ldr	r3, [pc, #64]	@ (8007044 <vPortEnterCritical+0x5c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3301      	adds	r3, #1
 8007008:	4a0e      	ldr	r2, [pc, #56]	@ (8007044 <vPortEnterCritical+0x5c>)
 800700a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800700c:	4b0d      	ldr	r3, [pc, #52]	@ (8007044 <vPortEnterCritical+0x5c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d110      	bne.n	8007036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007014:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <vPortEnterCritical+0x60>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00b      	beq.n	8007036 <vPortEnterCritical+0x4e>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	603b      	str	r3, [r7, #0]
}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	e7fd      	b.n	8007032 <vPortEnterCritical+0x4a>
	}
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000014 	.word	0x20000014
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007052:	4b12      	ldr	r3, [pc, #72]	@ (800709c <vPortExitCritical+0x50>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10b      	bne.n	8007072 <vPortExitCritical+0x26>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	607b      	str	r3, [r7, #4]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007072:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <vPortExitCritical+0x50>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3b01      	subs	r3, #1
 8007078:	4a08      	ldr	r2, [pc, #32]	@ (800709c <vPortExitCritical+0x50>)
 800707a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800707c:	4b07      	ldr	r3, [pc, #28]	@ (800709c <vPortExitCritical+0x50>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d105      	bne.n	8007090 <vPortExitCritical+0x44>
 8007084:	2300      	movs	r3, #0
 8007086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f383 8811 	msr	BASEPRI, r3
}
 800708e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	20000014 	.word	0x20000014

080070a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070a0:	f3ef 8009 	mrs	r0, PSP
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	4b15      	ldr	r3, [pc, #84]	@ (8007100 <pxCurrentTCBConst>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	f01e 0f10 	tst.w	lr, #16
 80070b0:	bf08      	it	eq
 80070b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	6010      	str	r0, [r2, #0]
 80070bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80070c4:	f380 8811 	msr	BASEPRI, r0
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f7fe ffa0 	bl	8006014 <vTaskSwitchContext>
 80070d4:	f04f 0000 	mov.w	r0, #0
 80070d8:	f380 8811 	msr	BASEPRI, r0
 80070dc:	bc09      	pop	{r0, r3}
 80070de:	6819      	ldr	r1, [r3, #0]
 80070e0:	6808      	ldr	r0, [r1, #0]
 80070e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e6:	f01e 0f10 	tst.w	lr, #16
 80070ea:	bf08      	it	eq
 80070ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070f0:	f380 8809 	msr	PSP, r0
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	f3af 8000 	nop.w

08007100 <pxCurrentTCBConst>:
 8007100:	20000abc 	.word	0x20000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop

08007108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	607b      	str	r3, [r7, #4]
}
 8007120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007122:	f7fe febd 	bl	8005ea0 <xTaskIncrementTick>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800712c:	4b06      	ldr	r3, [pc, #24]	@ (8007148 <xPortSysTickHandler+0x40>)
 800712e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	2300      	movs	r3, #0
 8007136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f383 8811 	msr	BASEPRI, r3
}
 800713e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	e000ed04 	.word	0xe000ed04

0800714c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007150:	4b0b      	ldr	r3, [pc, #44]	@ (8007180 <vPortSetupTimerInterrupt+0x34>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007156:	4b0b      	ldr	r3, [pc, #44]	@ (8007184 <vPortSetupTimerInterrupt+0x38>)
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800715c:	4b0a      	ldr	r3, [pc, #40]	@ (8007188 <vPortSetupTimerInterrupt+0x3c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a0a      	ldr	r2, [pc, #40]	@ (800718c <vPortSetupTimerInterrupt+0x40>)
 8007162:	fba2 2303 	umull	r2, r3, r2, r3
 8007166:	099b      	lsrs	r3, r3, #6
 8007168:	4a09      	ldr	r2, [pc, #36]	@ (8007190 <vPortSetupTimerInterrupt+0x44>)
 800716a:	3b01      	subs	r3, #1
 800716c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800716e:	4b04      	ldr	r3, [pc, #16]	@ (8007180 <vPortSetupTimerInterrupt+0x34>)
 8007170:	2207      	movs	r2, #7
 8007172:	601a      	str	r2, [r3, #0]
}
 8007174:	bf00      	nop
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	e000e010 	.word	0xe000e010
 8007184:	e000e018 	.word	0xe000e018
 8007188:	20000008 	.word	0x20000008
 800718c:	10624dd3 	.word	0x10624dd3
 8007190:	e000e014 	.word	0xe000e014

08007194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80071a4 <vPortEnableVFP+0x10>
 8007198:	6801      	ldr	r1, [r0, #0]
 800719a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800719e:	6001      	str	r1, [r0, #0]
 80071a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071a2:	bf00      	nop
 80071a4:	e000ed88 	.word	0xe000ed88

080071a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071ae:	f3ef 8305 	mrs	r3, IPSR
 80071b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d915      	bls.n	80071e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071ba:	4a18      	ldr	r2, [pc, #96]	@ (800721c <vPortValidateInterruptPriority+0x74>)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071c4:	4b16      	ldr	r3, [pc, #88]	@ (8007220 <vPortValidateInterruptPriority+0x78>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	7afa      	ldrb	r2, [r7, #11]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d20b      	bcs.n	80071e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007224 <vPortValidateInterruptPriority+0x7c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80071ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007228 <vPortValidateInterruptPriority+0x80>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d90b      	bls.n	800720e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	603b      	str	r3, [r7, #0]
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e7fd      	b.n	800720a <vPortValidateInterruptPriority+0x62>
	}
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	e000e3f0 	.word	0xe000e3f0
 8007220:	200010e8 	.word	0x200010e8
 8007224:	e000ed0c 	.word	0xe000ed0c
 8007228:	200010ec 	.word	0x200010ec

0800722c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	@ 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007234:	2300      	movs	r3, #0
 8007236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007238:	f7fe fd76 	bl	8005d28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800723c:	4b5c      	ldr	r3, [pc, #368]	@ (80073b0 <pvPortMalloc+0x184>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007244:	f000 f924 	bl	8007490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007248:	4b5a      	ldr	r3, [pc, #360]	@ (80073b4 <pvPortMalloc+0x188>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4013      	ands	r3, r2
 8007250:	2b00      	cmp	r3, #0
 8007252:	f040 8095 	bne.w	8007380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01e      	beq.n	800729a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800725c:	2208      	movs	r2, #8
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4413      	add	r3, r2
 8007262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b00      	cmp	r3, #0
 800726c:	d015      	beq.n	800729a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f023 0307 	bic.w	r3, r3, #7
 8007274:	3308      	adds	r3, #8
 8007276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <pvPortMalloc+0x6e>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	617b      	str	r3, [r7, #20]
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d06f      	beq.n	8007380 <pvPortMalloc+0x154>
 80072a0:	4b45      	ldr	r3, [pc, #276]	@ (80073b8 <pvPortMalloc+0x18c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d86a      	bhi.n	8007380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072aa:	4b44      	ldr	r3, [pc, #272]	@ (80073bc <pvPortMalloc+0x190>)
 80072ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072ae:	4b43      	ldr	r3, [pc, #268]	@ (80073bc <pvPortMalloc+0x190>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072b4:	e004      	b.n	80072c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d903      	bls.n	80072d2 <pvPortMalloc+0xa6>
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f1      	bne.n	80072b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072d2:	4b37      	ldr	r3, [pc, #220]	@ (80073b0 <pvPortMalloc+0x184>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d8:	429a      	cmp	r2, r3
 80072da:	d051      	beq.n	8007380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2208      	movs	r2, #8
 80072e2:	4413      	add	r3, r2
 80072e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	1ad2      	subs	r2, r2, r3
 80072f6:	2308      	movs	r3, #8
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d920      	bls.n	8007340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4413      	add	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <pvPortMalloc+0xfc>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	613b      	str	r3, [r7, #16]
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800733a:	69b8      	ldr	r0, [r7, #24]
 800733c:	f000 f90a 	bl	8007554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007340:	4b1d      	ldr	r3, [pc, #116]	@ (80073b8 <pvPortMalloc+0x18c>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	4a1b      	ldr	r2, [pc, #108]	@ (80073b8 <pvPortMalloc+0x18c>)
 800734c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800734e:	4b1a      	ldr	r3, [pc, #104]	@ (80073b8 <pvPortMalloc+0x18c>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b1b      	ldr	r3, [pc, #108]	@ (80073c0 <pvPortMalloc+0x194>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d203      	bcs.n	8007362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800735a:	4b17      	ldr	r3, [pc, #92]	@ (80073b8 <pvPortMalloc+0x18c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a18      	ldr	r2, [pc, #96]	@ (80073c0 <pvPortMalloc+0x194>)
 8007360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	4b13      	ldr	r3, [pc, #76]	@ (80073b4 <pvPortMalloc+0x188>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	431a      	orrs	r2, r3
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007376:	4b13      	ldr	r3, [pc, #76]	@ (80073c4 <pvPortMalloc+0x198>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3301      	adds	r3, #1
 800737c:	4a11      	ldr	r2, [pc, #68]	@ (80073c4 <pvPortMalloc+0x198>)
 800737e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007380:	f7fe fce0 	bl	8005d44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00b      	beq.n	80073a6 <pvPortMalloc+0x17a>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	60fb      	str	r3, [r7, #12]
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	e7fd      	b.n	80073a2 <pvPortMalloc+0x176>
	return pvReturn;
 80073a6:	69fb      	ldr	r3, [r7, #28]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3728      	adds	r7, #40	@ 0x28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	20004cf8 	.word	0x20004cf8
 80073b4:	20004d0c 	.word	0x20004d0c
 80073b8:	20004cfc 	.word	0x20004cfc
 80073bc:	20004cf0 	.word	0x20004cf0
 80073c0:	20004d00 	.word	0x20004d00
 80073c4:	20004d04 	.word	0x20004d04

080073c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d04f      	beq.n	800747a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073da:	2308      	movs	r3, #8
 80073dc:	425b      	negs	r3, r3
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4413      	add	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	4b25      	ldr	r3, [pc, #148]	@ (8007484 <vPortFree+0xbc>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4013      	ands	r3, r2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10b      	bne.n	800740e <vPortFree+0x46>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	60fb      	str	r3, [r7, #12]
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	e7fd      	b.n	800740a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00b      	beq.n	800742e <vPortFree+0x66>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60bb      	str	r3, [r7, #8]
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	4b14      	ldr	r3, [pc, #80]	@ (8007484 <vPortFree+0xbc>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4013      	ands	r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01e      	beq.n	800747a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11a      	bne.n	800747a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	4b0e      	ldr	r3, [pc, #56]	@ (8007484 <vPortFree+0xbc>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	43db      	mvns	r3, r3
 800744e:	401a      	ands	r2, r3
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007454:	f7fe fc68 	bl	8005d28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <vPortFree+0xc0>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4413      	add	r3, r2
 8007462:	4a09      	ldr	r2, [pc, #36]	@ (8007488 <vPortFree+0xc0>)
 8007464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007466:	6938      	ldr	r0, [r7, #16]
 8007468:	f000 f874 	bl	8007554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800746c:	4b07      	ldr	r3, [pc, #28]	@ (800748c <vPortFree+0xc4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a06      	ldr	r2, [pc, #24]	@ (800748c <vPortFree+0xc4>)
 8007474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007476:	f7fe fc65 	bl	8005d44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800747a:	bf00      	nop
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20004d0c 	.word	0x20004d0c
 8007488:	20004cfc 	.word	0x20004cfc
 800748c:	20004d08 	.word	0x20004d08

08007490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007496:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800749a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800749c:	4b27      	ldr	r3, [pc, #156]	@ (800753c <prvHeapInit+0xac>)
 800749e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00c      	beq.n	80074c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3307      	adds	r3, #7
 80074ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 0307 	bic.w	r3, r3, #7
 80074b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	4a1f      	ldr	r2, [pc, #124]	@ (800753c <prvHeapInit+0xac>)
 80074c0:	4413      	add	r3, r2
 80074c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007540 <prvHeapInit+0xb0>)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007540 <prvHeapInit+0xb0>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	4413      	add	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074dc:	2208      	movs	r2, #8
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0307 	bic.w	r3, r3, #7
 80074ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4a15      	ldr	r2, [pc, #84]	@ (8007544 <prvHeapInit+0xb4>)
 80074f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074f2:	4b14      	ldr	r3, [pc, #80]	@ (8007544 <prvHeapInit+0xb4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2200      	movs	r2, #0
 80074f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074fa:	4b12      	ldr	r3, [pc, #72]	@ (8007544 <prvHeapInit+0xb4>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007510:	4b0c      	ldr	r3, [pc, #48]	@ (8007544 <prvHeapInit+0xb4>)
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	4a0a      	ldr	r2, [pc, #40]	@ (8007548 <prvHeapInit+0xb8>)
 800751e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	4a09      	ldr	r2, [pc, #36]	@ (800754c <prvHeapInit+0xbc>)
 8007526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007528:	4b09      	ldr	r3, [pc, #36]	@ (8007550 <prvHeapInit+0xc0>)
 800752a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800752e:	601a      	str	r2, [r3, #0]
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	200010f0 	.word	0x200010f0
 8007540:	20004cf0 	.word	0x20004cf0
 8007544:	20004cf8 	.word	0x20004cf8
 8007548:	20004d00 	.word	0x20004d00
 800754c:	20004cfc 	.word	0x20004cfc
 8007550:	20004d0c 	.word	0x20004d0c

08007554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800755c:	4b28      	ldr	r3, [pc, #160]	@ (8007600 <prvInsertBlockIntoFreeList+0xac>)
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	e002      	b.n	8007568 <prvInsertBlockIntoFreeList+0x14>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	429a      	cmp	r2, r3
 8007570:	d8f7      	bhi.n	8007562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4413      	add	r3, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d108      	bne.n	8007596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	441a      	add	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	441a      	add	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d118      	bne.n	80075dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	4b15      	ldr	r3, [pc, #84]	@ (8007604 <prvInsertBlockIntoFreeList+0xb0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d00d      	beq.n	80075d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	441a      	add	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	e008      	b.n	80075e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007604 <prvInsertBlockIntoFreeList+0xb0>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	e003      	b.n	80075e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d002      	beq.n	80075f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20004cf0 	.word	0x20004cf0
 8007604:	20004cf8 	.word	0x20004cf8

08007608 <atoi>:
 8007608:	220a      	movs	r2, #10
 800760a:	2100      	movs	r1, #0
 800760c:	f000 b87a 	b.w	8007704 <strtol>

08007610 <_strtol_l.isra.0>:
 8007610:	2b24      	cmp	r3, #36	@ 0x24
 8007612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007616:	4686      	mov	lr, r0
 8007618:	4690      	mov	r8, r2
 800761a:	d801      	bhi.n	8007620 <_strtol_l.isra.0+0x10>
 800761c:	2b01      	cmp	r3, #1
 800761e:	d106      	bne.n	800762e <_strtol_l.isra.0+0x1e>
 8007620:	f000 fa96 	bl	8007b50 <__errno>
 8007624:	2316      	movs	r3, #22
 8007626:	6003      	str	r3, [r0, #0]
 8007628:	2000      	movs	r0, #0
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	4834      	ldr	r0, [pc, #208]	@ (8007700 <_strtol_l.isra.0+0xf0>)
 8007630:	460d      	mov	r5, r1
 8007632:	462a      	mov	r2, r5
 8007634:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007638:	5d06      	ldrb	r6, [r0, r4]
 800763a:	f016 0608 	ands.w	r6, r6, #8
 800763e:	d1f8      	bne.n	8007632 <_strtol_l.isra.0+0x22>
 8007640:	2c2d      	cmp	r4, #45	@ 0x2d
 8007642:	d110      	bne.n	8007666 <_strtol_l.isra.0+0x56>
 8007644:	782c      	ldrb	r4, [r5, #0]
 8007646:	2601      	movs	r6, #1
 8007648:	1c95      	adds	r5, r2, #2
 800764a:	f033 0210 	bics.w	r2, r3, #16
 800764e:	d115      	bne.n	800767c <_strtol_l.isra.0+0x6c>
 8007650:	2c30      	cmp	r4, #48	@ 0x30
 8007652:	d10d      	bne.n	8007670 <_strtol_l.isra.0+0x60>
 8007654:	782a      	ldrb	r2, [r5, #0]
 8007656:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800765a:	2a58      	cmp	r2, #88	@ 0x58
 800765c:	d108      	bne.n	8007670 <_strtol_l.isra.0+0x60>
 800765e:	786c      	ldrb	r4, [r5, #1]
 8007660:	3502      	adds	r5, #2
 8007662:	2310      	movs	r3, #16
 8007664:	e00a      	b.n	800767c <_strtol_l.isra.0+0x6c>
 8007666:	2c2b      	cmp	r4, #43	@ 0x2b
 8007668:	bf04      	itt	eq
 800766a:	782c      	ldrbeq	r4, [r5, #0]
 800766c:	1c95      	addeq	r5, r2, #2
 800766e:	e7ec      	b.n	800764a <_strtol_l.isra.0+0x3a>
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1f6      	bne.n	8007662 <_strtol_l.isra.0+0x52>
 8007674:	2c30      	cmp	r4, #48	@ 0x30
 8007676:	bf14      	ite	ne
 8007678:	230a      	movne	r3, #10
 800767a:	2308      	moveq	r3, #8
 800767c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007680:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007684:	2200      	movs	r2, #0
 8007686:	fbbc f9f3 	udiv	r9, ip, r3
 800768a:	4610      	mov	r0, r2
 800768c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007690:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007694:	2f09      	cmp	r7, #9
 8007696:	d80f      	bhi.n	80076b8 <_strtol_l.isra.0+0xa8>
 8007698:	463c      	mov	r4, r7
 800769a:	42a3      	cmp	r3, r4
 800769c:	dd1b      	ble.n	80076d6 <_strtol_l.isra.0+0xc6>
 800769e:	1c57      	adds	r7, r2, #1
 80076a0:	d007      	beq.n	80076b2 <_strtol_l.isra.0+0xa2>
 80076a2:	4581      	cmp	r9, r0
 80076a4:	d314      	bcc.n	80076d0 <_strtol_l.isra.0+0xc0>
 80076a6:	d101      	bne.n	80076ac <_strtol_l.isra.0+0x9c>
 80076a8:	45a2      	cmp	sl, r4
 80076aa:	db11      	blt.n	80076d0 <_strtol_l.isra.0+0xc0>
 80076ac:	fb00 4003 	mla	r0, r0, r3, r4
 80076b0:	2201      	movs	r2, #1
 80076b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076b6:	e7eb      	b.n	8007690 <_strtol_l.isra.0+0x80>
 80076b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80076bc:	2f19      	cmp	r7, #25
 80076be:	d801      	bhi.n	80076c4 <_strtol_l.isra.0+0xb4>
 80076c0:	3c37      	subs	r4, #55	@ 0x37
 80076c2:	e7ea      	b.n	800769a <_strtol_l.isra.0+0x8a>
 80076c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80076c8:	2f19      	cmp	r7, #25
 80076ca:	d804      	bhi.n	80076d6 <_strtol_l.isra.0+0xc6>
 80076cc:	3c57      	subs	r4, #87	@ 0x57
 80076ce:	e7e4      	b.n	800769a <_strtol_l.isra.0+0x8a>
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295
 80076d4:	e7ed      	b.n	80076b2 <_strtol_l.isra.0+0xa2>
 80076d6:	1c53      	adds	r3, r2, #1
 80076d8:	d108      	bne.n	80076ec <_strtol_l.isra.0+0xdc>
 80076da:	2322      	movs	r3, #34	@ 0x22
 80076dc:	f8ce 3000 	str.w	r3, [lr]
 80076e0:	4660      	mov	r0, ip
 80076e2:	f1b8 0f00 	cmp.w	r8, #0
 80076e6:	d0a0      	beq.n	800762a <_strtol_l.isra.0+0x1a>
 80076e8:	1e69      	subs	r1, r5, #1
 80076ea:	e006      	b.n	80076fa <_strtol_l.isra.0+0xea>
 80076ec:	b106      	cbz	r6, 80076f0 <_strtol_l.isra.0+0xe0>
 80076ee:	4240      	negs	r0, r0
 80076f0:	f1b8 0f00 	cmp.w	r8, #0
 80076f4:	d099      	beq.n	800762a <_strtol_l.isra.0+0x1a>
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	d1f6      	bne.n	80076e8 <_strtol_l.isra.0+0xd8>
 80076fa:	f8c8 1000 	str.w	r1, [r8]
 80076fe:	e794      	b.n	800762a <_strtol_l.isra.0+0x1a>
 8007700:	08008911 	.word	0x08008911

08007704 <strtol>:
 8007704:	4613      	mov	r3, r2
 8007706:	460a      	mov	r2, r1
 8007708:	4601      	mov	r1, r0
 800770a:	4802      	ldr	r0, [pc, #8]	@ (8007714 <strtol+0x10>)
 800770c:	6800      	ldr	r0, [r0, #0]
 800770e:	f7ff bf7f 	b.w	8007610 <_strtol_l.isra.0>
 8007712:	bf00      	nop
 8007714:	20000024 	.word	0x20000024

08007718 <std>:
 8007718:	2300      	movs	r3, #0
 800771a:	b510      	push	{r4, lr}
 800771c:	4604      	mov	r4, r0
 800771e:	e9c0 3300 	strd	r3, r3, [r0]
 8007722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007726:	6083      	str	r3, [r0, #8]
 8007728:	8181      	strh	r1, [r0, #12]
 800772a:	6643      	str	r3, [r0, #100]	@ 0x64
 800772c:	81c2      	strh	r2, [r0, #14]
 800772e:	6183      	str	r3, [r0, #24]
 8007730:	4619      	mov	r1, r3
 8007732:	2208      	movs	r2, #8
 8007734:	305c      	adds	r0, #92	@ 0x5c
 8007736:	f000 f8f4 	bl	8007922 <memset>
 800773a:	4b0d      	ldr	r3, [pc, #52]	@ (8007770 <std+0x58>)
 800773c:	6263      	str	r3, [r4, #36]	@ 0x24
 800773e:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <std+0x5c>)
 8007740:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007742:	4b0d      	ldr	r3, [pc, #52]	@ (8007778 <std+0x60>)
 8007744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007746:	4b0d      	ldr	r3, [pc, #52]	@ (800777c <std+0x64>)
 8007748:	6323      	str	r3, [r4, #48]	@ 0x30
 800774a:	4b0d      	ldr	r3, [pc, #52]	@ (8007780 <std+0x68>)
 800774c:	6224      	str	r4, [r4, #32]
 800774e:	429c      	cmp	r4, r3
 8007750:	d006      	beq.n	8007760 <std+0x48>
 8007752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007756:	4294      	cmp	r4, r2
 8007758:	d002      	beq.n	8007760 <std+0x48>
 800775a:	33d0      	adds	r3, #208	@ 0xd0
 800775c:	429c      	cmp	r4, r3
 800775e:	d105      	bne.n	800776c <std+0x54>
 8007760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007768:	f000 ba1c 	b.w	8007ba4 <__retarget_lock_init_recursive>
 800776c:	bd10      	pop	{r4, pc}
 800776e:	bf00      	nop
 8007770:	0800789d 	.word	0x0800789d
 8007774:	080078bf 	.word	0x080078bf
 8007778:	080078f7 	.word	0x080078f7
 800777c:	0800791b 	.word	0x0800791b
 8007780:	20004d10 	.word	0x20004d10

08007784 <stdio_exit_handler>:
 8007784:	4a02      	ldr	r2, [pc, #8]	@ (8007790 <stdio_exit_handler+0xc>)
 8007786:	4903      	ldr	r1, [pc, #12]	@ (8007794 <stdio_exit_handler+0x10>)
 8007788:	4803      	ldr	r0, [pc, #12]	@ (8007798 <stdio_exit_handler+0x14>)
 800778a:	f000 b869 	b.w	8007860 <_fwalk_sglue>
 800778e:	bf00      	nop
 8007790:	20000018 	.word	0x20000018
 8007794:	08007f1d 	.word	0x08007f1d
 8007798:	20000028 	.word	0x20000028

0800779c <cleanup_stdio>:
 800779c:	6841      	ldr	r1, [r0, #4]
 800779e:	4b0c      	ldr	r3, [pc, #48]	@ (80077d0 <cleanup_stdio+0x34>)
 80077a0:	4299      	cmp	r1, r3
 80077a2:	b510      	push	{r4, lr}
 80077a4:	4604      	mov	r4, r0
 80077a6:	d001      	beq.n	80077ac <cleanup_stdio+0x10>
 80077a8:	f000 fbb8 	bl	8007f1c <_fflush_r>
 80077ac:	68a1      	ldr	r1, [r4, #8]
 80077ae:	4b09      	ldr	r3, [pc, #36]	@ (80077d4 <cleanup_stdio+0x38>)
 80077b0:	4299      	cmp	r1, r3
 80077b2:	d002      	beq.n	80077ba <cleanup_stdio+0x1e>
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 fbb1 	bl	8007f1c <_fflush_r>
 80077ba:	68e1      	ldr	r1, [r4, #12]
 80077bc:	4b06      	ldr	r3, [pc, #24]	@ (80077d8 <cleanup_stdio+0x3c>)
 80077be:	4299      	cmp	r1, r3
 80077c0:	d004      	beq.n	80077cc <cleanup_stdio+0x30>
 80077c2:	4620      	mov	r0, r4
 80077c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c8:	f000 bba8 	b.w	8007f1c <_fflush_r>
 80077cc:	bd10      	pop	{r4, pc}
 80077ce:	bf00      	nop
 80077d0:	20004d10 	.word	0x20004d10
 80077d4:	20004d78 	.word	0x20004d78
 80077d8:	20004de0 	.word	0x20004de0

080077dc <global_stdio_init.part.0>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	4b0b      	ldr	r3, [pc, #44]	@ (800780c <global_stdio_init.part.0+0x30>)
 80077e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007810 <global_stdio_init.part.0+0x34>)
 80077e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007814 <global_stdio_init.part.0+0x38>)
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	4620      	mov	r0, r4
 80077e8:	2200      	movs	r2, #0
 80077ea:	2104      	movs	r1, #4
 80077ec:	f7ff ff94 	bl	8007718 <std>
 80077f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077f4:	2201      	movs	r2, #1
 80077f6:	2109      	movs	r1, #9
 80077f8:	f7ff ff8e 	bl	8007718 <std>
 80077fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007800:	2202      	movs	r2, #2
 8007802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007806:	2112      	movs	r1, #18
 8007808:	f7ff bf86 	b.w	8007718 <std>
 800780c:	20004e48 	.word	0x20004e48
 8007810:	20004d10 	.word	0x20004d10
 8007814:	08007785 	.word	0x08007785

08007818 <__sfp_lock_acquire>:
 8007818:	4801      	ldr	r0, [pc, #4]	@ (8007820 <__sfp_lock_acquire+0x8>)
 800781a:	f000 b9c4 	b.w	8007ba6 <__retarget_lock_acquire_recursive>
 800781e:	bf00      	nop
 8007820:	20004e51 	.word	0x20004e51

08007824 <__sfp_lock_release>:
 8007824:	4801      	ldr	r0, [pc, #4]	@ (800782c <__sfp_lock_release+0x8>)
 8007826:	f000 b9bf 	b.w	8007ba8 <__retarget_lock_release_recursive>
 800782a:	bf00      	nop
 800782c:	20004e51 	.word	0x20004e51

08007830 <__sinit>:
 8007830:	b510      	push	{r4, lr}
 8007832:	4604      	mov	r4, r0
 8007834:	f7ff fff0 	bl	8007818 <__sfp_lock_acquire>
 8007838:	6a23      	ldr	r3, [r4, #32]
 800783a:	b11b      	cbz	r3, 8007844 <__sinit+0x14>
 800783c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007840:	f7ff bff0 	b.w	8007824 <__sfp_lock_release>
 8007844:	4b04      	ldr	r3, [pc, #16]	@ (8007858 <__sinit+0x28>)
 8007846:	6223      	str	r3, [r4, #32]
 8007848:	4b04      	ldr	r3, [pc, #16]	@ (800785c <__sinit+0x2c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1f5      	bne.n	800783c <__sinit+0xc>
 8007850:	f7ff ffc4 	bl	80077dc <global_stdio_init.part.0>
 8007854:	e7f2      	b.n	800783c <__sinit+0xc>
 8007856:	bf00      	nop
 8007858:	0800779d 	.word	0x0800779d
 800785c:	20004e48 	.word	0x20004e48

08007860 <_fwalk_sglue>:
 8007860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007864:	4607      	mov	r7, r0
 8007866:	4688      	mov	r8, r1
 8007868:	4614      	mov	r4, r2
 800786a:	2600      	movs	r6, #0
 800786c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007870:	f1b9 0901 	subs.w	r9, r9, #1
 8007874:	d505      	bpl.n	8007882 <_fwalk_sglue+0x22>
 8007876:	6824      	ldr	r4, [r4, #0]
 8007878:	2c00      	cmp	r4, #0
 800787a:	d1f7      	bne.n	800786c <_fwalk_sglue+0xc>
 800787c:	4630      	mov	r0, r6
 800787e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007882:	89ab      	ldrh	r3, [r5, #12]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d907      	bls.n	8007898 <_fwalk_sglue+0x38>
 8007888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800788c:	3301      	adds	r3, #1
 800788e:	d003      	beq.n	8007898 <_fwalk_sglue+0x38>
 8007890:	4629      	mov	r1, r5
 8007892:	4638      	mov	r0, r7
 8007894:	47c0      	blx	r8
 8007896:	4306      	orrs	r6, r0
 8007898:	3568      	adds	r5, #104	@ 0x68
 800789a:	e7e9      	b.n	8007870 <_fwalk_sglue+0x10>

0800789c <__sread>:
 800789c:	b510      	push	{r4, lr}
 800789e:	460c      	mov	r4, r1
 80078a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a4:	f000 f930 	bl	8007b08 <_read_r>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	bfab      	itete	ge
 80078ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078ae:	89a3      	ldrhlt	r3, [r4, #12]
 80078b0:	181b      	addge	r3, r3, r0
 80078b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078b6:	bfac      	ite	ge
 80078b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078ba:	81a3      	strhlt	r3, [r4, #12]
 80078bc:	bd10      	pop	{r4, pc}

080078be <__swrite>:
 80078be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c2:	461f      	mov	r7, r3
 80078c4:	898b      	ldrh	r3, [r1, #12]
 80078c6:	05db      	lsls	r3, r3, #23
 80078c8:	4605      	mov	r5, r0
 80078ca:	460c      	mov	r4, r1
 80078cc:	4616      	mov	r6, r2
 80078ce:	d505      	bpl.n	80078dc <__swrite+0x1e>
 80078d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d4:	2302      	movs	r3, #2
 80078d6:	2200      	movs	r2, #0
 80078d8:	f000 f904 	bl	8007ae4 <_lseek_r>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078e6:	81a3      	strh	r3, [r4, #12]
 80078e8:	4632      	mov	r2, r6
 80078ea:	463b      	mov	r3, r7
 80078ec:	4628      	mov	r0, r5
 80078ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078f2:	f000 b91b 	b.w	8007b2c <_write_r>

080078f6 <__sseek>:
 80078f6:	b510      	push	{r4, lr}
 80078f8:	460c      	mov	r4, r1
 80078fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fe:	f000 f8f1 	bl	8007ae4 <_lseek_r>
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	bf15      	itete	ne
 8007908:	6560      	strne	r0, [r4, #84]	@ 0x54
 800790a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800790e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007912:	81a3      	strheq	r3, [r4, #12]
 8007914:	bf18      	it	ne
 8007916:	81a3      	strhne	r3, [r4, #12]
 8007918:	bd10      	pop	{r4, pc}

0800791a <__sclose>:
 800791a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791e:	f000 b873 	b.w	8007a08 <_close_r>

08007922 <memset>:
 8007922:	4402      	add	r2, r0
 8007924:	4603      	mov	r3, r0
 8007926:	4293      	cmp	r3, r2
 8007928:	d100      	bne.n	800792c <memset+0xa>
 800792a:	4770      	bx	lr
 800792c:	f803 1b01 	strb.w	r1, [r3], #1
 8007930:	e7f9      	b.n	8007926 <memset+0x4>

08007932 <strcat>:
 8007932:	b510      	push	{r4, lr}
 8007934:	4602      	mov	r2, r0
 8007936:	7814      	ldrb	r4, [r2, #0]
 8007938:	4613      	mov	r3, r2
 800793a:	3201      	adds	r2, #1
 800793c:	2c00      	cmp	r4, #0
 800793e:	d1fa      	bne.n	8007936 <strcat+0x4>
 8007940:	3b01      	subs	r3, #1
 8007942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800794a:	2a00      	cmp	r2, #0
 800794c:	d1f9      	bne.n	8007942 <strcat+0x10>
 800794e:	bd10      	pop	{r4, pc}

08007950 <strtok>:
 8007950:	4b16      	ldr	r3, [pc, #88]	@ (80079ac <strtok+0x5c>)
 8007952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007956:	681f      	ldr	r7, [r3, #0]
 8007958:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800795a:	4605      	mov	r5, r0
 800795c:	460e      	mov	r6, r1
 800795e:	b9ec      	cbnz	r4, 800799c <strtok+0x4c>
 8007960:	2050      	movs	r0, #80	@ 0x50
 8007962:	f000 f9a1 	bl	8007ca8 <malloc>
 8007966:	4602      	mov	r2, r0
 8007968:	6478      	str	r0, [r7, #68]	@ 0x44
 800796a:	b920      	cbnz	r0, 8007976 <strtok+0x26>
 800796c:	4b10      	ldr	r3, [pc, #64]	@ (80079b0 <strtok+0x60>)
 800796e:	4811      	ldr	r0, [pc, #68]	@ (80079b4 <strtok+0x64>)
 8007970:	215b      	movs	r1, #91	@ 0x5b
 8007972:	f000 f931 	bl	8007bd8 <__assert_func>
 8007976:	e9c0 4400 	strd	r4, r4, [r0]
 800797a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800797e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007982:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007986:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800798a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800798e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007992:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007996:	6184      	str	r4, [r0, #24]
 8007998:	7704      	strb	r4, [r0, #28]
 800799a:	6244      	str	r4, [r0, #36]	@ 0x24
 800799c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	2301      	movs	r3, #1
 80079a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a8:	f000 b806 	b.w	80079b8 <__strtok_r>
 80079ac:	20000024 	.word	0x20000024
 80079b0:	08008a11 	.word	0x08008a11
 80079b4:	08008a28 	.word	0x08008a28

080079b8 <__strtok_r>:
 80079b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ba:	4604      	mov	r4, r0
 80079bc:	b908      	cbnz	r0, 80079c2 <__strtok_r+0xa>
 80079be:	6814      	ldr	r4, [r2, #0]
 80079c0:	b144      	cbz	r4, 80079d4 <__strtok_r+0x1c>
 80079c2:	4620      	mov	r0, r4
 80079c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079c8:	460f      	mov	r7, r1
 80079ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80079ce:	b91e      	cbnz	r6, 80079d8 <__strtok_r+0x20>
 80079d0:	b965      	cbnz	r5, 80079ec <__strtok_r+0x34>
 80079d2:	6015      	str	r5, [r2, #0]
 80079d4:	2000      	movs	r0, #0
 80079d6:	e005      	b.n	80079e4 <__strtok_r+0x2c>
 80079d8:	42b5      	cmp	r5, r6
 80079da:	d1f6      	bne.n	80079ca <__strtok_r+0x12>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f0      	bne.n	80079c2 <__strtok_r+0xa>
 80079e0:	6014      	str	r4, [r2, #0]
 80079e2:	7003      	strb	r3, [r0, #0]
 80079e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e6:	461c      	mov	r4, r3
 80079e8:	e00c      	b.n	8007a04 <__strtok_r+0x4c>
 80079ea:	b91d      	cbnz	r5, 80079f4 <__strtok_r+0x3c>
 80079ec:	4627      	mov	r7, r4
 80079ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079f2:	460e      	mov	r6, r1
 80079f4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079f8:	42ab      	cmp	r3, r5
 80079fa:	d1f6      	bne.n	80079ea <__strtok_r+0x32>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0f2      	beq.n	80079e6 <__strtok_r+0x2e>
 8007a00:	2300      	movs	r3, #0
 8007a02:	703b      	strb	r3, [r7, #0]
 8007a04:	6014      	str	r4, [r2, #0]
 8007a06:	e7ed      	b.n	80079e4 <__strtok_r+0x2c>

08007a08 <_close_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	4d06      	ldr	r5, [pc, #24]	@ (8007a24 <_close_r+0x1c>)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4604      	mov	r4, r0
 8007a10:	4608      	mov	r0, r1
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	f7f9 ff00 	bl	8001818 <_close>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_close_r+0x1a>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_close_r+0x1a>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20004e4c 	.word	0x20004e4c

08007a28 <_reclaim_reent>:
 8007a28:	4b2d      	ldr	r3, [pc, #180]	@ (8007ae0 <_reclaim_reent+0xb8>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4283      	cmp	r3, r0
 8007a2e:	b570      	push	{r4, r5, r6, lr}
 8007a30:	4604      	mov	r4, r0
 8007a32:	d053      	beq.n	8007adc <_reclaim_reent+0xb4>
 8007a34:	69c3      	ldr	r3, [r0, #28]
 8007a36:	b31b      	cbz	r3, 8007a80 <_reclaim_reent+0x58>
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	b163      	cbz	r3, 8007a56 <_reclaim_reent+0x2e>
 8007a3c:	2500      	movs	r5, #0
 8007a3e:	69e3      	ldr	r3, [r4, #28]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	5959      	ldr	r1, [r3, r5]
 8007a44:	b9b1      	cbnz	r1, 8007a74 <_reclaim_reent+0x4c>
 8007a46:	3504      	adds	r5, #4
 8007a48:	2d80      	cmp	r5, #128	@ 0x80
 8007a4a:	d1f8      	bne.n	8007a3e <_reclaim_reent+0x16>
 8007a4c:	69e3      	ldr	r3, [r4, #28]
 8007a4e:	4620      	mov	r0, r4
 8007a50:	68d9      	ldr	r1, [r3, #12]
 8007a52:	f000 f8df 	bl	8007c14 <_free_r>
 8007a56:	69e3      	ldr	r3, [r4, #28]
 8007a58:	6819      	ldr	r1, [r3, #0]
 8007a5a:	b111      	cbz	r1, 8007a62 <_reclaim_reent+0x3a>
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 f8d9 	bl	8007c14 <_free_r>
 8007a62:	69e3      	ldr	r3, [r4, #28]
 8007a64:	689d      	ldr	r5, [r3, #8]
 8007a66:	b15d      	cbz	r5, 8007a80 <_reclaim_reent+0x58>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	682d      	ldr	r5, [r5, #0]
 8007a6e:	f000 f8d1 	bl	8007c14 <_free_r>
 8007a72:	e7f8      	b.n	8007a66 <_reclaim_reent+0x3e>
 8007a74:	680e      	ldr	r6, [r1, #0]
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 f8cc 	bl	8007c14 <_free_r>
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	e7e1      	b.n	8007a44 <_reclaim_reent+0x1c>
 8007a80:	6961      	ldr	r1, [r4, #20]
 8007a82:	b111      	cbz	r1, 8007a8a <_reclaim_reent+0x62>
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 f8c5 	bl	8007c14 <_free_r>
 8007a8a:	69e1      	ldr	r1, [r4, #28]
 8007a8c:	b111      	cbz	r1, 8007a94 <_reclaim_reent+0x6c>
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f8c0 	bl	8007c14 <_free_r>
 8007a94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a96:	b111      	cbz	r1, 8007a9e <_reclaim_reent+0x76>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 f8bb 	bl	8007c14 <_free_r>
 8007a9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aa0:	b111      	cbz	r1, 8007aa8 <_reclaim_reent+0x80>
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 f8b6 	bl	8007c14 <_free_r>
 8007aa8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007aaa:	b111      	cbz	r1, 8007ab2 <_reclaim_reent+0x8a>
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 f8b1 	bl	8007c14 <_free_r>
 8007ab2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ab4:	b111      	cbz	r1, 8007abc <_reclaim_reent+0x94>
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 f8ac 	bl	8007c14 <_free_r>
 8007abc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007abe:	b111      	cbz	r1, 8007ac6 <_reclaim_reent+0x9e>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 f8a7 	bl	8007c14 <_free_r>
 8007ac6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007ac8:	b111      	cbz	r1, 8007ad0 <_reclaim_reent+0xa8>
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 f8a2 	bl	8007c14 <_free_r>
 8007ad0:	6a23      	ldr	r3, [r4, #32]
 8007ad2:	b11b      	cbz	r3, 8007adc <_reclaim_reent+0xb4>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ada:	4718      	bx	r3
 8007adc:	bd70      	pop	{r4, r5, r6, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000024 	.word	0x20000024

08007ae4 <_lseek_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	@ (8007b04 <_lseek_r+0x20>)
 8007ae8:	4604      	mov	r4, r0
 8007aea:	4608      	mov	r0, r1
 8007aec:	4611      	mov	r1, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7f9 feb7 	bl	8001866 <_lseek>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_lseek_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_lseek_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20004e4c 	.word	0x20004e4c

08007b08 <_read_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	@ (8007b28 <_read_r+0x20>)
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	602a      	str	r2, [r5, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f7f9 fe45 	bl	80017a6 <_read>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_read_r+0x1e>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_read_r+0x1e>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20004e4c 	.word	0x20004e4c

08007b2c <_write_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d07      	ldr	r5, [pc, #28]	@ (8007b4c <_write_r+0x20>)
 8007b30:	4604      	mov	r4, r0
 8007b32:	4608      	mov	r0, r1
 8007b34:	4611      	mov	r1, r2
 8007b36:	2200      	movs	r2, #0
 8007b38:	602a      	str	r2, [r5, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f7f9 fe50 	bl	80017e0 <_write>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_write_r+0x1e>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_write_r+0x1e>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20004e4c 	.word	0x20004e4c

08007b50 <__errno>:
 8007b50:	4b01      	ldr	r3, [pc, #4]	@ (8007b58 <__errno+0x8>)
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	20000024 	.word	0x20000024

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	@ (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2600      	movs	r6, #0
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f000 fe4e 	bl	8008810 <_init>
 8007b74:	1b64      	subs	r4, r4, r5
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2600      	movs	r6, #0
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b84:	4798      	blx	r3
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	4798      	blx	r3
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08008afc 	.word	0x08008afc
 8007b98:	08008afc 	.word	0x08008afc
 8007b9c:	08008afc 	.word	0x08008afc
 8007ba0:	08008b00 	.word	0x08008b00

08007ba4 <__retarget_lock_init_recursive>:
 8007ba4:	4770      	bx	lr

08007ba6 <__retarget_lock_acquire_recursive>:
 8007ba6:	4770      	bx	lr

08007ba8 <__retarget_lock_release_recursive>:
 8007ba8:	4770      	bx	lr

08007baa <strcpy>:
 8007baa:	4603      	mov	r3, r0
 8007bac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bb0:	f803 2b01 	strb.w	r2, [r3], #1
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	d1f9      	bne.n	8007bac <strcpy+0x2>
 8007bb8:	4770      	bx	lr

08007bba <memcpy>:
 8007bba:	440a      	add	r2, r1
 8007bbc:	4291      	cmp	r1, r2
 8007bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bc2:	d100      	bne.n	8007bc6 <memcpy+0xc>
 8007bc4:	4770      	bx	lr
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bd0:	4291      	cmp	r1, r2
 8007bd2:	d1f9      	bne.n	8007bc8 <memcpy+0xe>
 8007bd4:	bd10      	pop	{r4, pc}
	...

08007bd8 <__assert_func>:
 8007bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bda:	4614      	mov	r4, r2
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4b09      	ldr	r3, [pc, #36]	@ (8007c04 <__assert_func+0x2c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4605      	mov	r5, r0
 8007be4:	68d8      	ldr	r0, [r3, #12]
 8007be6:	b14c      	cbz	r4, 8007bfc <__assert_func+0x24>
 8007be8:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <__assert_func+0x30>)
 8007bea:	9100      	str	r1, [sp, #0]
 8007bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bf0:	4906      	ldr	r1, [pc, #24]	@ (8007c0c <__assert_func+0x34>)
 8007bf2:	462b      	mov	r3, r5
 8007bf4:	f000 f9ba 	bl	8007f6c <fiprintf>
 8007bf8:	f000 f9da 	bl	8007fb0 <abort>
 8007bfc:	4b04      	ldr	r3, [pc, #16]	@ (8007c10 <__assert_func+0x38>)
 8007bfe:	461c      	mov	r4, r3
 8007c00:	e7f3      	b.n	8007bea <__assert_func+0x12>
 8007c02:	bf00      	nop
 8007c04:	20000024 	.word	0x20000024
 8007c08:	08008a82 	.word	0x08008a82
 8007c0c:	08008a8f 	.word	0x08008a8f
 8007c10:	08008abd 	.word	0x08008abd

08007c14 <_free_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4605      	mov	r5, r0
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	d041      	beq.n	8007ca0 <_free_r+0x8c>
 8007c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c20:	1f0c      	subs	r4, r1, #4
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfb8      	it	lt
 8007c26:	18e4      	addlt	r4, r4, r3
 8007c28:	f000 f8e8 	bl	8007dfc <__malloc_lock>
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ca4 <_free_r+0x90>)
 8007c2e:	6813      	ldr	r3, [r2, #0]
 8007c30:	b933      	cbnz	r3, 8007c40 <_free_r+0x2c>
 8007c32:	6063      	str	r3, [r4, #4]
 8007c34:	6014      	str	r4, [r2, #0]
 8007c36:	4628      	mov	r0, r5
 8007c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c3c:	f000 b8e4 	b.w	8007e08 <__malloc_unlock>
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	d908      	bls.n	8007c56 <_free_r+0x42>
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	1821      	adds	r1, r4, r0
 8007c48:	428b      	cmp	r3, r1
 8007c4a:	bf01      	itttt	eq
 8007c4c:	6819      	ldreq	r1, [r3, #0]
 8007c4e:	685b      	ldreq	r3, [r3, #4]
 8007c50:	1809      	addeq	r1, r1, r0
 8007c52:	6021      	streq	r1, [r4, #0]
 8007c54:	e7ed      	b.n	8007c32 <_free_r+0x1e>
 8007c56:	461a      	mov	r2, r3
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b10b      	cbz	r3, 8007c60 <_free_r+0x4c>
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	d9fa      	bls.n	8007c56 <_free_r+0x42>
 8007c60:	6811      	ldr	r1, [r2, #0]
 8007c62:	1850      	adds	r0, r2, r1
 8007c64:	42a0      	cmp	r0, r4
 8007c66:	d10b      	bne.n	8007c80 <_free_r+0x6c>
 8007c68:	6820      	ldr	r0, [r4, #0]
 8007c6a:	4401      	add	r1, r0
 8007c6c:	1850      	adds	r0, r2, r1
 8007c6e:	4283      	cmp	r3, r0
 8007c70:	6011      	str	r1, [r2, #0]
 8007c72:	d1e0      	bne.n	8007c36 <_free_r+0x22>
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	6053      	str	r3, [r2, #4]
 8007c7a:	4408      	add	r0, r1
 8007c7c:	6010      	str	r0, [r2, #0]
 8007c7e:	e7da      	b.n	8007c36 <_free_r+0x22>
 8007c80:	d902      	bls.n	8007c88 <_free_r+0x74>
 8007c82:	230c      	movs	r3, #12
 8007c84:	602b      	str	r3, [r5, #0]
 8007c86:	e7d6      	b.n	8007c36 <_free_r+0x22>
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	1821      	adds	r1, r4, r0
 8007c8c:	428b      	cmp	r3, r1
 8007c8e:	bf04      	itt	eq
 8007c90:	6819      	ldreq	r1, [r3, #0]
 8007c92:	685b      	ldreq	r3, [r3, #4]
 8007c94:	6063      	str	r3, [r4, #4]
 8007c96:	bf04      	itt	eq
 8007c98:	1809      	addeq	r1, r1, r0
 8007c9a:	6021      	streq	r1, [r4, #0]
 8007c9c:	6054      	str	r4, [r2, #4]
 8007c9e:	e7ca      	b.n	8007c36 <_free_r+0x22>
 8007ca0:	bd38      	pop	{r3, r4, r5, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20004e58 	.word	0x20004e58

08007ca8 <malloc>:
 8007ca8:	4b02      	ldr	r3, [pc, #8]	@ (8007cb4 <malloc+0xc>)
 8007caa:	4601      	mov	r1, r0
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	f000 b825 	b.w	8007cfc <_malloc_r>
 8007cb2:	bf00      	nop
 8007cb4:	20000024 	.word	0x20000024

08007cb8 <sbrk_aligned>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	4e0f      	ldr	r6, [pc, #60]	@ (8007cf8 <sbrk_aligned+0x40>)
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	6831      	ldr	r1, [r6, #0]
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	b911      	cbnz	r1, 8007cca <sbrk_aligned+0x12>
 8007cc4:	f000 f964 	bl	8007f90 <_sbrk_r>
 8007cc8:	6030      	str	r0, [r6, #0]
 8007cca:	4621      	mov	r1, r4
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 f95f 	bl	8007f90 <_sbrk_r>
 8007cd2:	1c43      	adds	r3, r0, #1
 8007cd4:	d103      	bne.n	8007cde <sbrk_aligned+0x26>
 8007cd6:	f04f 34ff 	mov.w	r4, #4294967295
 8007cda:	4620      	mov	r0, r4
 8007cdc:	bd70      	pop	{r4, r5, r6, pc}
 8007cde:	1cc4      	adds	r4, r0, #3
 8007ce0:	f024 0403 	bic.w	r4, r4, #3
 8007ce4:	42a0      	cmp	r0, r4
 8007ce6:	d0f8      	beq.n	8007cda <sbrk_aligned+0x22>
 8007ce8:	1a21      	subs	r1, r4, r0
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 f950 	bl	8007f90 <_sbrk_r>
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d1f2      	bne.n	8007cda <sbrk_aligned+0x22>
 8007cf4:	e7ef      	b.n	8007cd6 <sbrk_aligned+0x1e>
 8007cf6:	bf00      	nop
 8007cf8:	20004e54 	.word	0x20004e54

08007cfc <_malloc_r>:
 8007cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d00:	1ccd      	adds	r5, r1, #3
 8007d02:	f025 0503 	bic.w	r5, r5, #3
 8007d06:	3508      	adds	r5, #8
 8007d08:	2d0c      	cmp	r5, #12
 8007d0a:	bf38      	it	cc
 8007d0c:	250c      	movcc	r5, #12
 8007d0e:	2d00      	cmp	r5, #0
 8007d10:	4606      	mov	r6, r0
 8007d12:	db01      	blt.n	8007d18 <_malloc_r+0x1c>
 8007d14:	42a9      	cmp	r1, r5
 8007d16:	d904      	bls.n	8007d22 <_malloc_r+0x26>
 8007d18:	230c      	movs	r3, #12
 8007d1a:	6033      	str	r3, [r6, #0]
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007df8 <_malloc_r+0xfc>
 8007d26:	f000 f869 	bl	8007dfc <__malloc_lock>
 8007d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d2e:	461c      	mov	r4, r3
 8007d30:	bb44      	cbnz	r4, 8007d84 <_malloc_r+0x88>
 8007d32:	4629      	mov	r1, r5
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff ffbf 	bl	8007cb8 <sbrk_aligned>
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	d158      	bne.n	8007df2 <_malloc_r+0xf6>
 8007d40:	f8d8 4000 	ldr.w	r4, [r8]
 8007d44:	4627      	mov	r7, r4
 8007d46:	2f00      	cmp	r7, #0
 8007d48:	d143      	bne.n	8007dd2 <_malloc_r+0xd6>
 8007d4a:	2c00      	cmp	r4, #0
 8007d4c:	d04b      	beq.n	8007de6 <_malloc_r+0xea>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	4639      	mov	r1, r7
 8007d52:	4630      	mov	r0, r6
 8007d54:	eb04 0903 	add.w	r9, r4, r3
 8007d58:	f000 f91a 	bl	8007f90 <_sbrk_r>
 8007d5c:	4581      	cmp	r9, r0
 8007d5e:	d142      	bne.n	8007de6 <_malloc_r+0xea>
 8007d60:	6821      	ldr	r1, [r4, #0]
 8007d62:	1a6d      	subs	r5, r5, r1
 8007d64:	4629      	mov	r1, r5
 8007d66:	4630      	mov	r0, r6
 8007d68:	f7ff ffa6 	bl	8007cb8 <sbrk_aligned>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d03a      	beq.n	8007de6 <_malloc_r+0xea>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	442b      	add	r3, r5
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	f8d8 3000 	ldr.w	r3, [r8]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	bb62      	cbnz	r2, 8007dd8 <_malloc_r+0xdc>
 8007d7e:	f8c8 7000 	str.w	r7, [r8]
 8007d82:	e00f      	b.n	8007da4 <_malloc_r+0xa8>
 8007d84:	6822      	ldr	r2, [r4, #0]
 8007d86:	1b52      	subs	r2, r2, r5
 8007d88:	d420      	bmi.n	8007dcc <_malloc_r+0xd0>
 8007d8a:	2a0b      	cmp	r2, #11
 8007d8c:	d917      	bls.n	8007dbe <_malloc_r+0xc2>
 8007d8e:	1961      	adds	r1, r4, r5
 8007d90:	42a3      	cmp	r3, r4
 8007d92:	6025      	str	r5, [r4, #0]
 8007d94:	bf18      	it	ne
 8007d96:	6059      	strne	r1, [r3, #4]
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	bf08      	it	eq
 8007d9c:	f8c8 1000 	streq.w	r1, [r8]
 8007da0:	5162      	str	r2, [r4, r5]
 8007da2:	604b      	str	r3, [r1, #4]
 8007da4:	4630      	mov	r0, r6
 8007da6:	f000 f82f 	bl	8007e08 <__malloc_unlock>
 8007daa:	f104 000b 	add.w	r0, r4, #11
 8007dae:	1d23      	adds	r3, r4, #4
 8007db0:	f020 0007 	bic.w	r0, r0, #7
 8007db4:	1ac2      	subs	r2, r0, r3
 8007db6:	bf1c      	itt	ne
 8007db8:	1a1b      	subne	r3, r3, r0
 8007dba:	50a3      	strne	r3, [r4, r2]
 8007dbc:	e7af      	b.n	8007d1e <_malloc_r+0x22>
 8007dbe:	6862      	ldr	r2, [r4, #4]
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	bf0c      	ite	eq
 8007dc4:	f8c8 2000 	streq.w	r2, [r8]
 8007dc8:	605a      	strne	r2, [r3, #4]
 8007dca:	e7eb      	b.n	8007da4 <_malloc_r+0xa8>
 8007dcc:	4623      	mov	r3, r4
 8007dce:	6864      	ldr	r4, [r4, #4]
 8007dd0:	e7ae      	b.n	8007d30 <_malloc_r+0x34>
 8007dd2:	463c      	mov	r4, r7
 8007dd4:	687f      	ldr	r7, [r7, #4]
 8007dd6:	e7b6      	b.n	8007d46 <_malloc_r+0x4a>
 8007dd8:	461a      	mov	r2, r3
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	d1fb      	bne.n	8007dd8 <_malloc_r+0xdc>
 8007de0:	2300      	movs	r3, #0
 8007de2:	6053      	str	r3, [r2, #4]
 8007de4:	e7de      	b.n	8007da4 <_malloc_r+0xa8>
 8007de6:	230c      	movs	r3, #12
 8007de8:	6033      	str	r3, [r6, #0]
 8007dea:	4630      	mov	r0, r6
 8007dec:	f000 f80c 	bl	8007e08 <__malloc_unlock>
 8007df0:	e794      	b.n	8007d1c <_malloc_r+0x20>
 8007df2:	6005      	str	r5, [r0, #0]
 8007df4:	e7d6      	b.n	8007da4 <_malloc_r+0xa8>
 8007df6:	bf00      	nop
 8007df8:	20004e58 	.word	0x20004e58

08007dfc <__malloc_lock>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	@ (8007e04 <__malloc_lock+0x8>)
 8007dfe:	f7ff bed2 	b.w	8007ba6 <__retarget_lock_acquire_recursive>
 8007e02:	bf00      	nop
 8007e04:	20004e50 	.word	0x20004e50

08007e08 <__malloc_unlock>:
 8007e08:	4801      	ldr	r0, [pc, #4]	@ (8007e10 <__malloc_unlock+0x8>)
 8007e0a:	f7ff becd 	b.w	8007ba8 <__retarget_lock_release_recursive>
 8007e0e:	bf00      	nop
 8007e10:	20004e50 	.word	0x20004e50

08007e14 <__sflush_r>:
 8007e14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1c:	0716      	lsls	r6, r2, #28
 8007e1e:	4605      	mov	r5, r0
 8007e20:	460c      	mov	r4, r1
 8007e22:	d454      	bmi.n	8007ece <__sflush_r+0xba>
 8007e24:	684b      	ldr	r3, [r1, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dc02      	bgt.n	8007e30 <__sflush_r+0x1c>
 8007e2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	dd48      	ble.n	8007ec2 <__sflush_r+0xae>
 8007e30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e32:	2e00      	cmp	r6, #0
 8007e34:	d045      	beq.n	8007ec2 <__sflush_r+0xae>
 8007e36:	2300      	movs	r3, #0
 8007e38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e3c:	682f      	ldr	r7, [r5, #0]
 8007e3e:	6a21      	ldr	r1, [r4, #32]
 8007e40:	602b      	str	r3, [r5, #0]
 8007e42:	d030      	beq.n	8007ea6 <__sflush_r+0x92>
 8007e44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	0759      	lsls	r1, r3, #29
 8007e4a:	d505      	bpl.n	8007e58 <__sflush_r+0x44>
 8007e4c:	6863      	ldr	r3, [r4, #4]
 8007e4e:	1ad2      	subs	r2, r2, r3
 8007e50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e52:	b10b      	cbz	r3, 8007e58 <__sflush_r+0x44>
 8007e54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e56:	1ad2      	subs	r2, r2, r3
 8007e58:	2300      	movs	r3, #0
 8007e5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e5c:	6a21      	ldr	r1, [r4, #32]
 8007e5e:	4628      	mov	r0, r5
 8007e60:	47b0      	blx	r6
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	d106      	bne.n	8007e76 <__sflush_r+0x62>
 8007e68:	6829      	ldr	r1, [r5, #0]
 8007e6a:	291d      	cmp	r1, #29
 8007e6c:	d82b      	bhi.n	8007ec6 <__sflush_r+0xb2>
 8007e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007f18 <__sflush_r+0x104>)
 8007e70:	40ca      	lsrs	r2, r1
 8007e72:	07d6      	lsls	r6, r2, #31
 8007e74:	d527      	bpl.n	8007ec6 <__sflush_r+0xb2>
 8007e76:	2200      	movs	r2, #0
 8007e78:	6062      	str	r2, [r4, #4]
 8007e7a:	04d9      	lsls	r1, r3, #19
 8007e7c:	6922      	ldr	r2, [r4, #16]
 8007e7e:	6022      	str	r2, [r4, #0]
 8007e80:	d504      	bpl.n	8007e8c <__sflush_r+0x78>
 8007e82:	1c42      	adds	r2, r0, #1
 8007e84:	d101      	bne.n	8007e8a <__sflush_r+0x76>
 8007e86:	682b      	ldr	r3, [r5, #0]
 8007e88:	b903      	cbnz	r3, 8007e8c <__sflush_r+0x78>
 8007e8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e8e:	602f      	str	r7, [r5, #0]
 8007e90:	b1b9      	cbz	r1, 8007ec2 <__sflush_r+0xae>
 8007e92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e96:	4299      	cmp	r1, r3
 8007e98:	d002      	beq.n	8007ea0 <__sflush_r+0x8c>
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f7ff feba 	bl	8007c14 <_free_r>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ea4:	e00d      	b.n	8007ec2 <__sflush_r+0xae>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	47b0      	blx	r6
 8007eac:	4602      	mov	r2, r0
 8007eae:	1c50      	adds	r0, r2, #1
 8007eb0:	d1c9      	bne.n	8007e46 <__sflush_r+0x32>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0c6      	beq.n	8007e46 <__sflush_r+0x32>
 8007eb8:	2b1d      	cmp	r3, #29
 8007eba:	d001      	beq.n	8007ec0 <__sflush_r+0xac>
 8007ebc:	2b16      	cmp	r3, #22
 8007ebe:	d11e      	bne.n	8007efe <__sflush_r+0xea>
 8007ec0:	602f      	str	r7, [r5, #0]
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	e022      	b.n	8007f0c <__sflush_r+0xf8>
 8007ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eca:	b21b      	sxth	r3, r3
 8007ecc:	e01b      	b.n	8007f06 <__sflush_r+0xf2>
 8007ece:	690f      	ldr	r7, [r1, #16]
 8007ed0:	2f00      	cmp	r7, #0
 8007ed2:	d0f6      	beq.n	8007ec2 <__sflush_r+0xae>
 8007ed4:	0793      	lsls	r3, r2, #30
 8007ed6:	680e      	ldr	r6, [r1, #0]
 8007ed8:	bf08      	it	eq
 8007eda:	694b      	ldreq	r3, [r1, #20]
 8007edc:	600f      	str	r7, [r1, #0]
 8007ede:	bf18      	it	ne
 8007ee0:	2300      	movne	r3, #0
 8007ee2:	eba6 0807 	sub.w	r8, r6, r7
 8007ee6:	608b      	str	r3, [r1, #8]
 8007ee8:	f1b8 0f00 	cmp.w	r8, #0
 8007eec:	dde9      	ble.n	8007ec2 <__sflush_r+0xae>
 8007eee:	6a21      	ldr	r1, [r4, #32]
 8007ef0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ef2:	4643      	mov	r3, r8
 8007ef4:	463a      	mov	r2, r7
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	47b0      	blx	r6
 8007efa:	2800      	cmp	r0, #0
 8007efc:	dc08      	bgt.n	8007f10 <__sflush_r+0xfc>
 8007efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f06:	81a3      	strh	r3, [r4, #12]
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f10:	4407      	add	r7, r0
 8007f12:	eba8 0800 	sub.w	r8, r8, r0
 8007f16:	e7e7      	b.n	8007ee8 <__sflush_r+0xd4>
 8007f18:	20400001 	.word	0x20400001

08007f1c <_fflush_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	690b      	ldr	r3, [r1, #16]
 8007f20:	4605      	mov	r5, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	b913      	cbnz	r3, 8007f2c <_fflush_r+0x10>
 8007f26:	2500      	movs	r5, #0
 8007f28:	4628      	mov	r0, r5
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	b118      	cbz	r0, 8007f36 <_fflush_r+0x1a>
 8007f2e:	6a03      	ldr	r3, [r0, #32]
 8007f30:	b90b      	cbnz	r3, 8007f36 <_fflush_r+0x1a>
 8007f32:	f7ff fc7d 	bl	8007830 <__sinit>
 8007f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d0f3      	beq.n	8007f26 <_fflush_r+0xa>
 8007f3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f40:	07d0      	lsls	r0, r2, #31
 8007f42:	d404      	bmi.n	8007f4e <_fflush_r+0x32>
 8007f44:	0599      	lsls	r1, r3, #22
 8007f46:	d402      	bmi.n	8007f4e <_fflush_r+0x32>
 8007f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f4a:	f7ff fe2c 	bl	8007ba6 <__retarget_lock_acquire_recursive>
 8007f4e:	4628      	mov	r0, r5
 8007f50:	4621      	mov	r1, r4
 8007f52:	f7ff ff5f 	bl	8007e14 <__sflush_r>
 8007f56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f58:	07da      	lsls	r2, r3, #31
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	d4e4      	bmi.n	8007f28 <_fflush_r+0xc>
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	059b      	lsls	r3, r3, #22
 8007f62:	d4e1      	bmi.n	8007f28 <_fflush_r+0xc>
 8007f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f66:	f7ff fe1f 	bl	8007ba8 <__retarget_lock_release_recursive>
 8007f6a:	e7dd      	b.n	8007f28 <_fflush_r+0xc>

08007f6c <fiprintf>:
 8007f6c:	b40e      	push	{r1, r2, r3}
 8007f6e:	b503      	push	{r0, r1, lr}
 8007f70:	4601      	mov	r1, r0
 8007f72:	ab03      	add	r3, sp, #12
 8007f74:	4805      	ldr	r0, [pc, #20]	@ (8007f8c <fiprintf+0x20>)
 8007f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f7a:	6800      	ldr	r0, [r0, #0]
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	f000 f847 	bl	8008010 <_vfiprintf_r>
 8007f82:	b002      	add	sp, #8
 8007f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f88:	b003      	add	sp, #12
 8007f8a:	4770      	bx	lr
 8007f8c:	20000024 	.word	0x20000024

08007f90 <_sbrk_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4d06      	ldr	r5, [pc, #24]	@ (8007fac <_sbrk_r+0x1c>)
 8007f94:	2300      	movs	r3, #0
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7f9 fc70 	bl	8001880 <_sbrk>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_sbrk_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_sbrk_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	20004e4c 	.word	0x20004e4c

08007fb0 <abort>:
 8007fb0:	b508      	push	{r3, lr}
 8007fb2:	2006      	movs	r0, #6
 8007fb4:	f000 fb8c 	bl	80086d0 <raise>
 8007fb8:	2001      	movs	r0, #1
 8007fba:	f7f9 fbe9 	bl	8001790 <_exit>

08007fbe <__sfputc_r>:
 8007fbe:	6893      	ldr	r3, [r2, #8]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	b410      	push	{r4}
 8007fc6:	6093      	str	r3, [r2, #8]
 8007fc8:	da08      	bge.n	8007fdc <__sfputc_r+0x1e>
 8007fca:	6994      	ldr	r4, [r2, #24]
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	db01      	blt.n	8007fd4 <__sfputc_r+0x16>
 8007fd0:	290a      	cmp	r1, #10
 8007fd2:	d103      	bne.n	8007fdc <__sfputc_r+0x1e>
 8007fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fd8:	f000 babe 	b.w	8008558 <__swbuf_r>
 8007fdc:	6813      	ldr	r3, [r2, #0]
 8007fde:	1c58      	adds	r0, r3, #1
 8007fe0:	6010      	str	r0, [r2, #0]
 8007fe2:	7019      	strb	r1, [r3, #0]
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <__sfputs_r>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460f      	mov	r7, r1
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	18d5      	adds	r5, r2, r3
 8007ff6:	42ac      	cmp	r4, r5
 8007ff8:	d101      	bne.n	8007ffe <__sfputs_r+0x12>
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	e007      	b.n	800800e <__sfputs_r+0x22>
 8007ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008002:	463a      	mov	r2, r7
 8008004:	4630      	mov	r0, r6
 8008006:	f7ff ffda 	bl	8007fbe <__sfputc_r>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	d1f3      	bne.n	8007ff6 <__sfputs_r+0xa>
 800800e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008010 <_vfiprintf_r>:
 8008010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	460d      	mov	r5, r1
 8008016:	b09d      	sub	sp, #116	@ 0x74
 8008018:	4614      	mov	r4, r2
 800801a:	4698      	mov	r8, r3
 800801c:	4606      	mov	r6, r0
 800801e:	b118      	cbz	r0, 8008028 <_vfiprintf_r+0x18>
 8008020:	6a03      	ldr	r3, [r0, #32]
 8008022:	b90b      	cbnz	r3, 8008028 <_vfiprintf_r+0x18>
 8008024:	f7ff fc04 	bl	8007830 <__sinit>
 8008028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800802a:	07d9      	lsls	r1, r3, #31
 800802c:	d405      	bmi.n	800803a <_vfiprintf_r+0x2a>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	059a      	lsls	r2, r3, #22
 8008032:	d402      	bmi.n	800803a <_vfiprintf_r+0x2a>
 8008034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008036:	f7ff fdb6 	bl	8007ba6 <__retarget_lock_acquire_recursive>
 800803a:	89ab      	ldrh	r3, [r5, #12]
 800803c:	071b      	lsls	r3, r3, #28
 800803e:	d501      	bpl.n	8008044 <_vfiprintf_r+0x34>
 8008040:	692b      	ldr	r3, [r5, #16]
 8008042:	b99b      	cbnz	r3, 800806c <_vfiprintf_r+0x5c>
 8008044:	4629      	mov	r1, r5
 8008046:	4630      	mov	r0, r6
 8008048:	f000 fac4 	bl	80085d4 <__swsetup_r>
 800804c:	b170      	cbz	r0, 800806c <_vfiprintf_r+0x5c>
 800804e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008050:	07dc      	lsls	r4, r3, #31
 8008052:	d504      	bpl.n	800805e <_vfiprintf_r+0x4e>
 8008054:	f04f 30ff 	mov.w	r0, #4294967295
 8008058:	b01d      	add	sp, #116	@ 0x74
 800805a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805e:	89ab      	ldrh	r3, [r5, #12]
 8008060:	0598      	lsls	r0, r3, #22
 8008062:	d4f7      	bmi.n	8008054 <_vfiprintf_r+0x44>
 8008064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008066:	f7ff fd9f 	bl	8007ba8 <__retarget_lock_release_recursive>
 800806a:	e7f3      	b.n	8008054 <_vfiprintf_r+0x44>
 800806c:	2300      	movs	r3, #0
 800806e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008070:	2320      	movs	r3, #32
 8008072:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008076:	f8cd 800c 	str.w	r8, [sp, #12]
 800807a:	2330      	movs	r3, #48	@ 0x30
 800807c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800822c <_vfiprintf_r+0x21c>
 8008080:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008084:	f04f 0901 	mov.w	r9, #1
 8008088:	4623      	mov	r3, r4
 800808a:	469a      	mov	sl, r3
 800808c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008090:	b10a      	cbz	r2, 8008096 <_vfiprintf_r+0x86>
 8008092:	2a25      	cmp	r2, #37	@ 0x25
 8008094:	d1f9      	bne.n	800808a <_vfiprintf_r+0x7a>
 8008096:	ebba 0b04 	subs.w	fp, sl, r4
 800809a:	d00b      	beq.n	80080b4 <_vfiprintf_r+0xa4>
 800809c:	465b      	mov	r3, fp
 800809e:	4622      	mov	r2, r4
 80080a0:	4629      	mov	r1, r5
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff ffa2 	bl	8007fec <__sfputs_r>
 80080a8:	3001      	adds	r0, #1
 80080aa:	f000 80a7 	beq.w	80081fc <_vfiprintf_r+0x1ec>
 80080ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080b0:	445a      	add	r2, fp
 80080b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80080b4:	f89a 3000 	ldrb.w	r3, [sl]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 809f 	beq.w	80081fc <_vfiprintf_r+0x1ec>
 80080be:	2300      	movs	r3, #0
 80080c0:	f04f 32ff 	mov.w	r2, #4294967295
 80080c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080c8:	f10a 0a01 	add.w	sl, sl, #1
 80080cc:	9304      	str	r3, [sp, #16]
 80080ce:	9307      	str	r3, [sp, #28]
 80080d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80080d6:	4654      	mov	r4, sl
 80080d8:	2205      	movs	r2, #5
 80080da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080de:	4853      	ldr	r0, [pc, #332]	@ (800822c <_vfiprintf_r+0x21c>)
 80080e0:	f7f8 f886 	bl	80001f0 <memchr>
 80080e4:	9a04      	ldr	r2, [sp, #16]
 80080e6:	b9d8      	cbnz	r0, 8008120 <_vfiprintf_r+0x110>
 80080e8:	06d1      	lsls	r1, r2, #27
 80080ea:	bf44      	itt	mi
 80080ec:	2320      	movmi	r3, #32
 80080ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080f2:	0713      	lsls	r3, r2, #28
 80080f4:	bf44      	itt	mi
 80080f6:	232b      	movmi	r3, #43	@ 0x2b
 80080f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008100:	2b2a      	cmp	r3, #42	@ 0x2a
 8008102:	d015      	beq.n	8008130 <_vfiprintf_r+0x120>
 8008104:	9a07      	ldr	r2, [sp, #28]
 8008106:	4654      	mov	r4, sl
 8008108:	2000      	movs	r0, #0
 800810a:	f04f 0c0a 	mov.w	ip, #10
 800810e:	4621      	mov	r1, r4
 8008110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008114:	3b30      	subs	r3, #48	@ 0x30
 8008116:	2b09      	cmp	r3, #9
 8008118:	d94b      	bls.n	80081b2 <_vfiprintf_r+0x1a2>
 800811a:	b1b0      	cbz	r0, 800814a <_vfiprintf_r+0x13a>
 800811c:	9207      	str	r2, [sp, #28]
 800811e:	e014      	b.n	800814a <_vfiprintf_r+0x13a>
 8008120:	eba0 0308 	sub.w	r3, r0, r8
 8008124:	fa09 f303 	lsl.w	r3, r9, r3
 8008128:	4313      	orrs	r3, r2
 800812a:	9304      	str	r3, [sp, #16]
 800812c:	46a2      	mov	sl, r4
 800812e:	e7d2      	b.n	80080d6 <_vfiprintf_r+0xc6>
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	1d19      	adds	r1, r3, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	9103      	str	r1, [sp, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	bfbb      	ittet	lt
 800813c:	425b      	neglt	r3, r3
 800813e:	f042 0202 	orrlt.w	r2, r2, #2
 8008142:	9307      	strge	r3, [sp, #28]
 8008144:	9307      	strlt	r3, [sp, #28]
 8008146:	bfb8      	it	lt
 8008148:	9204      	strlt	r2, [sp, #16]
 800814a:	7823      	ldrb	r3, [r4, #0]
 800814c:	2b2e      	cmp	r3, #46	@ 0x2e
 800814e:	d10a      	bne.n	8008166 <_vfiprintf_r+0x156>
 8008150:	7863      	ldrb	r3, [r4, #1]
 8008152:	2b2a      	cmp	r3, #42	@ 0x2a
 8008154:	d132      	bne.n	80081bc <_vfiprintf_r+0x1ac>
 8008156:	9b03      	ldr	r3, [sp, #12]
 8008158:	1d1a      	adds	r2, r3, #4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	9203      	str	r2, [sp, #12]
 800815e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008162:	3402      	adds	r4, #2
 8008164:	9305      	str	r3, [sp, #20]
 8008166:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800823c <_vfiprintf_r+0x22c>
 800816a:	7821      	ldrb	r1, [r4, #0]
 800816c:	2203      	movs	r2, #3
 800816e:	4650      	mov	r0, sl
 8008170:	f7f8 f83e 	bl	80001f0 <memchr>
 8008174:	b138      	cbz	r0, 8008186 <_vfiprintf_r+0x176>
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	eba0 000a 	sub.w	r0, r0, sl
 800817c:	2240      	movs	r2, #64	@ 0x40
 800817e:	4082      	lsls	r2, r0
 8008180:	4313      	orrs	r3, r2
 8008182:	3401      	adds	r4, #1
 8008184:	9304      	str	r3, [sp, #16]
 8008186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818a:	4829      	ldr	r0, [pc, #164]	@ (8008230 <_vfiprintf_r+0x220>)
 800818c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008190:	2206      	movs	r2, #6
 8008192:	f7f8 f82d 	bl	80001f0 <memchr>
 8008196:	2800      	cmp	r0, #0
 8008198:	d03f      	beq.n	800821a <_vfiprintf_r+0x20a>
 800819a:	4b26      	ldr	r3, [pc, #152]	@ (8008234 <_vfiprintf_r+0x224>)
 800819c:	bb1b      	cbnz	r3, 80081e6 <_vfiprintf_r+0x1d6>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	3307      	adds	r3, #7
 80081a2:	f023 0307 	bic.w	r3, r3, #7
 80081a6:	3308      	adds	r3, #8
 80081a8:	9303      	str	r3, [sp, #12]
 80081aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ac:	443b      	add	r3, r7
 80081ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b0:	e76a      	b.n	8008088 <_vfiprintf_r+0x78>
 80081b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081b6:	460c      	mov	r4, r1
 80081b8:	2001      	movs	r0, #1
 80081ba:	e7a8      	b.n	800810e <_vfiprintf_r+0xfe>
 80081bc:	2300      	movs	r3, #0
 80081be:	3401      	adds	r4, #1
 80081c0:	9305      	str	r3, [sp, #20]
 80081c2:	4619      	mov	r1, r3
 80081c4:	f04f 0c0a 	mov.w	ip, #10
 80081c8:	4620      	mov	r0, r4
 80081ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ce:	3a30      	subs	r2, #48	@ 0x30
 80081d0:	2a09      	cmp	r2, #9
 80081d2:	d903      	bls.n	80081dc <_vfiprintf_r+0x1cc>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0c6      	beq.n	8008166 <_vfiprintf_r+0x156>
 80081d8:	9105      	str	r1, [sp, #20]
 80081da:	e7c4      	b.n	8008166 <_vfiprintf_r+0x156>
 80081dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80081e0:	4604      	mov	r4, r0
 80081e2:	2301      	movs	r3, #1
 80081e4:	e7f0      	b.n	80081c8 <_vfiprintf_r+0x1b8>
 80081e6:	ab03      	add	r3, sp, #12
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	462a      	mov	r2, r5
 80081ec:	4b12      	ldr	r3, [pc, #72]	@ (8008238 <_vfiprintf_r+0x228>)
 80081ee:	a904      	add	r1, sp, #16
 80081f0:	4630      	mov	r0, r6
 80081f2:	f3af 8000 	nop.w
 80081f6:	4607      	mov	r7, r0
 80081f8:	1c78      	adds	r0, r7, #1
 80081fa:	d1d6      	bne.n	80081aa <_vfiprintf_r+0x19a>
 80081fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081fe:	07d9      	lsls	r1, r3, #31
 8008200:	d405      	bmi.n	800820e <_vfiprintf_r+0x1fe>
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	059a      	lsls	r2, r3, #22
 8008206:	d402      	bmi.n	800820e <_vfiprintf_r+0x1fe>
 8008208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800820a:	f7ff fccd 	bl	8007ba8 <__retarget_lock_release_recursive>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	065b      	lsls	r3, r3, #25
 8008212:	f53f af1f 	bmi.w	8008054 <_vfiprintf_r+0x44>
 8008216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008218:	e71e      	b.n	8008058 <_vfiprintf_r+0x48>
 800821a:	ab03      	add	r3, sp, #12
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	462a      	mov	r2, r5
 8008220:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <_vfiprintf_r+0x228>)
 8008222:	a904      	add	r1, sp, #16
 8008224:	4630      	mov	r0, r6
 8008226:	f000 f879 	bl	800831c <_printf_i>
 800822a:	e7e4      	b.n	80081f6 <_vfiprintf_r+0x1e6>
 800822c:	08008abe 	.word	0x08008abe
 8008230:	08008ac8 	.word	0x08008ac8
 8008234:	00000000 	.word	0x00000000
 8008238:	08007fed 	.word	0x08007fed
 800823c:	08008ac4 	.word	0x08008ac4

08008240 <_printf_common>:
 8008240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008244:	4616      	mov	r6, r2
 8008246:	4698      	mov	r8, r3
 8008248:	688a      	ldr	r2, [r1, #8]
 800824a:	690b      	ldr	r3, [r1, #16]
 800824c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008250:	4293      	cmp	r3, r2
 8008252:	bfb8      	it	lt
 8008254:	4613      	movlt	r3, r2
 8008256:	6033      	str	r3, [r6, #0]
 8008258:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800825c:	4607      	mov	r7, r0
 800825e:	460c      	mov	r4, r1
 8008260:	b10a      	cbz	r2, 8008266 <_printf_common+0x26>
 8008262:	3301      	adds	r3, #1
 8008264:	6033      	str	r3, [r6, #0]
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	0699      	lsls	r1, r3, #26
 800826a:	bf42      	ittt	mi
 800826c:	6833      	ldrmi	r3, [r6, #0]
 800826e:	3302      	addmi	r3, #2
 8008270:	6033      	strmi	r3, [r6, #0]
 8008272:	6825      	ldr	r5, [r4, #0]
 8008274:	f015 0506 	ands.w	r5, r5, #6
 8008278:	d106      	bne.n	8008288 <_printf_common+0x48>
 800827a:	f104 0a19 	add.w	sl, r4, #25
 800827e:	68e3      	ldr	r3, [r4, #12]
 8008280:	6832      	ldr	r2, [r6, #0]
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	42ab      	cmp	r3, r5
 8008286:	dc26      	bgt.n	80082d6 <_printf_common+0x96>
 8008288:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800828c:	6822      	ldr	r2, [r4, #0]
 800828e:	3b00      	subs	r3, #0
 8008290:	bf18      	it	ne
 8008292:	2301      	movne	r3, #1
 8008294:	0692      	lsls	r2, r2, #26
 8008296:	d42b      	bmi.n	80082f0 <_printf_common+0xb0>
 8008298:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800829c:	4641      	mov	r1, r8
 800829e:	4638      	mov	r0, r7
 80082a0:	47c8      	blx	r9
 80082a2:	3001      	adds	r0, #1
 80082a4:	d01e      	beq.n	80082e4 <_printf_common+0xa4>
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	6922      	ldr	r2, [r4, #16]
 80082aa:	f003 0306 	and.w	r3, r3, #6
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	bf02      	ittt	eq
 80082b2:	68e5      	ldreq	r5, [r4, #12]
 80082b4:	6833      	ldreq	r3, [r6, #0]
 80082b6:	1aed      	subeq	r5, r5, r3
 80082b8:	68a3      	ldr	r3, [r4, #8]
 80082ba:	bf0c      	ite	eq
 80082bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082c0:	2500      	movne	r5, #0
 80082c2:	4293      	cmp	r3, r2
 80082c4:	bfc4      	itt	gt
 80082c6:	1a9b      	subgt	r3, r3, r2
 80082c8:	18ed      	addgt	r5, r5, r3
 80082ca:	2600      	movs	r6, #0
 80082cc:	341a      	adds	r4, #26
 80082ce:	42b5      	cmp	r5, r6
 80082d0:	d11a      	bne.n	8008308 <_printf_common+0xc8>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e008      	b.n	80082e8 <_printf_common+0xa8>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4652      	mov	r2, sl
 80082da:	4641      	mov	r1, r8
 80082dc:	4638      	mov	r0, r7
 80082de:	47c8      	blx	r9
 80082e0:	3001      	adds	r0, #1
 80082e2:	d103      	bne.n	80082ec <_printf_common+0xac>
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ec:	3501      	adds	r5, #1
 80082ee:	e7c6      	b.n	800827e <_printf_common+0x3e>
 80082f0:	18e1      	adds	r1, r4, r3
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	2030      	movs	r0, #48	@ 0x30
 80082f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082fa:	4422      	add	r2, r4
 80082fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008300:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008304:	3302      	adds	r3, #2
 8008306:	e7c7      	b.n	8008298 <_printf_common+0x58>
 8008308:	2301      	movs	r3, #1
 800830a:	4622      	mov	r2, r4
 800830c:	4641      	mov	r1, r8
 800830e:	4638      	mov	r0, r7
 8008310:	47c8      	blx	r9
 8008312:	3001      	adds	r0, #1
 8008314:	d0e6      	beq.n	80082e4 <_printf_common+0xa4>
 8008316:	3601      	adds	r6, #1
 8008318:	e7d9      	b.n	80082ce <_printf_common+0x8e>
	...

0800831c <_printf_i>:
 800831c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008320:	7e0f      	ldrb	r7, [r1, #24]
 8008322:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008324:	2f78      	cmp	r7, #120	@ 0x78
 8008326:	4691      	mov	r9, r2
 8008328:	4680      	mov	r8, r0
 800832a:	460c      	mov	r4, r1
 800832c:	469a      	mov	sl, r3
 800832e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008332:	d807      	bhi.n	8008344 <_printf_i+0x28>
 8008334:	2f62      	cmp	r7, #98	@ 0x62
 8008336:	d80a      	bhi.n	800834e <_printf_i+0x32>
 8008338:	2f00      	cmp	r7, #0
 800833a:	f000 80d1 	beq.w	80084e0 <_printf_i+0x1c4>
 800833e:	2f58      	cmp	r7, #88	@ 0x58
 8008340:	f000 80b8 	beq.w	80084b4 <_printf_i+0x198>
 8008344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008348:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800834c:	e03a      	b.n	80083c4 <_printf_i+0xa8>
 800834e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008352:	2b15      	cmp	r3, #21
 8008354:	d8f6      	bhi.n	8008344 <_printf_i+0x28>
 8008356:	a101      	add	r1, pc, #4	@ (adr r1, 800835c <_printf_i+0x40>)
 8008358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800835c:	080083b5 	.word	0x080083b5
 8008360:	080083c9 	.word	0x080083c9
 8008364:	08008345 	.word	0x08008345
 8008368:	08008345 	.word	0x08008345
 800836c:	08008345 	.word	0x08008345
 8008370:	08008345 	.word	0x08008345
 8008374:	080083c9 	.word	0x080083c9
 8008378:	08008345 	.word	0x08008345
 800837c:	08008345 	.word	0x08008345
 8008380:	08008345 	.word	0x08008345
 8008384:	08008345 	.word	0x08008345
 8008388:	080084c7 	.word	0x080084c7
 800838c:	080083f3 	.word	0x080083f3
 8008390:	08008481 	.word	0x08008481
 8008394:	08008345 	.word	0x08008345
 8008398:	08008345 	.word	0x08008345
 800839c:	080084e9 	.word	0x080084e9
 80083a0:	08008345 	.word	0x08008345
 80083a4:	080083f3 	.word	0x080083f3
 80083a8:	08008345 	.word	0x08008345
 80083ac:	08008345 	.word	0x08008345
 80083b0:	08008489 	.word	0x08008489
 80083b4:	6833      	ldr	r3, [r6, #0]
 80083b6:	1d1a      	adds	r2, r3, #4
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6032      	str	r2, [r6, #0]
 80083bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083c4:	2301      	movs	r3, #1
 80083c6:	e09c      	b.n	8008502 <_printf_i+0x1e6>
 80083c8:	6833      	ldr	r3, [r6, #0]
 80083ca:	6820      	ldr	r0, [r4, #0]
 80083cc:	1d19      	adds	r1, r3, #4
 80083ce:	6031      	str	r1, [r6, #0]
 80083d0:	0606      	lsls	r6, r0, #24
 80083d2:	d501      	bpl.n	80083d8 <_printf_i+0xbc>
 80083d4:	681d      	ldr	r5, [r3, #0]
 80083d6:	e003      	b.n	80083e0 <_printf_i+0xc4>
 80083d8:	0645      	lsls	r5, r0, #25
 80083da:	d5fb      	bpl.n	80083d4 <_printf_i+0xb8>
 80083dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083e0:	2d00      	cmp	r5, #0
 80083e2:	da03      	bge.n	80083ec <_printf_i+0xd0>
 80083e4:	232d      	movs	r3, #45	@ 0x2d
 80083e6:	426d      	negs	r5, r5
 80083e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083ec:	4858      	ldr	r0, [pc, #352]	@ (8008550 <_printf_i+0x234>)
 80083ee:	230a      	movs	r3, #10
 80083f0:	e011      	b.n	8008416 <_printf_i+0xfa>
 80083f2:	6821      	ldr	r1, [r4, #0]
 80083f4:	6833      	ldr	r3, [r6, #0]
 80083f6:	0608      	lsls	r0, r1, #24
 80083f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80083fc:	d402      	bmi.n	8008404 <_printf_i+0xe8>
 80083fe:	0649      	lsls	r1, r1, #25
 8008400:	bf48      	it	mi
 8008402:	b2ad      	uxthmi	r5, r5
 8008404:	2f6f      	cmp	r7, #111	@ 0x6f
 8008406:	4852      	ldr	r0, [pc, #328]	@ (8008550 <_printf_i+0x234>)
 8008408:	6033      	str	r3, [r6, #0]
 800840a:	bf14      	ite	ne
 800840c:	230a      	movne	r3, #10
 800840e:	2308      	moveq	r3, #8
 8008410:	2100      	movs	r1, #0
 8008412:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008416:	6866      	ldr	r6, [r4, #4]
 8008418:	60a6      	str	r6, [r4, #8]
 800841a:	2e00      	cmp	r6, #0
 800841c:	db05      	blt.n	800842a <_printf_i+0x10e>
 800841e:	6821      	ldr	r1, [r4, #0]
 8008420:	432e      	orrs	r6, r5
 8008422:	f021 0104 	bic.w	r1, r1, #4
 8008426:	6021      	str	r1, [r4, #0]
 8008428:	d04b      	beq.n	80084c2 <_printf_i+0x1a6>
 800842a:	4616      	mov	r6, r2
 800842c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008430:	fb03 5711 	mls	r7, r3, r1, r5
 8008434:	5dc7      	ldrb	r7, [r0, r7]
 8008436:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800843a:	462f      	mov	r7, r5
 800843c:	42bb      	cmp	r3, r7
 800843e:	460d      	mov	r5, r1
 8008440:	d9f4      	bls.n	800842c <_printf_i+0x110>
 8008442:	2b08      	cmp	r3, #8
 8008444:	d10b      	bne.n	800845e <_printf_i+0x142>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	07df      	lsls	r7, r3, #31
 800844a:	d508      	bpl.n	800845e <_printf_i+0x142>
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	6861      	ldr	r1, [r4, #4]
 8008450:	4299      	cmp	r1, r3
 8008452:	bfde      	ittt	le
 8008454:	2330      	movle	r3, #48	@ 0x30
 8008456:	f806 3c01 	strble.w	r3, [r6, #-1]
 800845a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800845e:	1b92      	subs	r2, r2, r6
 8008460:	6122      	str	r2, [r4, #16]
 8008462:	f8cd a000 	str.w	sl, [sp]
 8008466:	464b      	mov	r3, r9
 8008468:	aa03      	add	r2, sp, #12
 800846a:	4621      	mov	r1, r4
 800846c:	4640      	mov	r0, r8
 800846e:	f7ff fee7 	bl	8008240 <_printf_common>
 8008472:	3001      	adds	r0, #1
 8008474:	d14a      	bne.n	800850c <_printf_i+0x1f0>
 8008476:	f04f 30ff 	mov.w	r0, #4294967295
 800847a:	b004      	add	sp, #16
 800847c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	f043 0320 	orr.w	r3, r3, #32
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	4832      	ldr	r0, [pc, #200]	@ (8008554 <_printf_i+0x238>)
 800848a:	2778      	movs	r7, #120	@ 0x78
 800848c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	6831      	ldr	r1, [r6, #0]
 8008494:	061f      	lsls	r7, r3, #24
 8008496:	f851 5b04 	ldr.w	r5, [r1], #4
 800849a:	d402      	bmi.n	80084a2 <_printf_i+0x186>
 800849c:	065f      	lsls	r7, r3, #25
 800849e:	bf48      	it	mi
 80084a0:	b2ad      	uxthmi	r5, r5
 80084a2:	6031      	str	r1, [r6, #0]
 80084a4:	07d9      	lsls	r1, r3, #31
 80084a6:	bf44      	itt	mi
 80084a8:	f043 0320 	orrmi.w	r3, r3, #32
 80084ac:	6023      	strmi	r3, [r4, #0]
 80084ae:	b11d      	cbz	r5, 80084b8 <_printf_i+0x19c>
 80084b0:	2310      	movs	r3, #16
 80084b2:	e7ad      	b.n	8008410 <_printf_i+0xf4>
 80084b4:	4826      	ldr	r0, [pc, #152]	@ (8008550 <_printf_i+0x234>)
 80084b6:	e7e9      	b.n	800848c <_printf_i+0x170>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	f023 0320 	bic.w	r3, r3, #32
 80084be:	6023      	str	r3, [r4, #0]
 80084c0:	e7f6      	b.n	80084b0 <_printf_i+0x194>
 80084c2:	4616      	mov	r6, r2
 80084c4:	e7bd      	b.n	8008442 <_printf_i+0x126>
 80084c6:	6833      	ldr	r3, [r6, #0]
 80084c8:	6825      	ldr	r5, [r4, #0]
 80084ca:	6961      	ldr	r1, [r4, #20]
 80084cc:	1d18      	adds	r0, r3, #4
 80084ce:	6030      	str	r0, [r6, #0]
 80084d0:	062e      	lsls	r6, r5, #24
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	d501      	bpl.n	80084da <_printf_i+0x1be>
 80084d6:	6019      	str	r1, [r3, #0]
 80084d8:	e002      	b.n	80084e0 <_printf_i+0x1c4>
 80084da:	0668      	lsls	r0, r5, #25
 80084dc:	d5fb      	bpl.n	80084d6 <_printf_i+0x1ba>
 80084de:	8019      	strh	r1, [r3, #0]
 80084e0:	2300      	movs	r3, #0
 80084e2:	6123      	str	r3, [r4, #16]
 80084e4:	4616      	mov	r6, r2
 80084e6:	e7bc      	b.n	8008462 <_printf_i+0x146>
 80084e8:	6833      	ldr	r3, [r6, #0]
 80084ea:	1d1a      	adds	r2, r3, #4
 80084ec:	6032      	str	r2, [r6, #0]
 80084ee:	681e      	ldr	r6, [r3, #0]
 80084f0:	6862      	ldr	r2, [r4, #4]
 80084f2:	2100      	movs	r1, #0
 80084f4:	4630      	mov	r0, r6
 80084f6:	f7f7 fe7b 	bl	80001f0 <memchr>
 80084fa:	b108      	cbz	r0, 8008500 <_printf_i+0x1e4>
 80084fc:	1b80      	subs	r0, r0, r6
 80084fe:	6060      	str	r0, [r4, #4]
 8008500:	6863      	ldr	r3, [r4, #4]
 8008502:	6123      	str	r3, [r4, #16]
 8008504:	2300      	movs	r3, #0
 8008506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800850a:	e7aa      	b.n	8008462 <_printf_i+0x146>
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	4632      	mov	r2, r6
 8008510:	4649      	mov	r1, r9
 8008512:	4640      	mov	r0, r8
 8008514:	47d0      	blx	sl
 8008516:	3001      	adds	r0, #1
 8008518:	d0ad      	beq.n	8008476 <_printf_i+0x15a>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	079b      	lsls	r3, r3, #30
 800851e:	d413      	bmi.n	8008548 <_printf_i+0x22c>
 8008520:	68e0      	ldr	r0, [r4, #12]
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	4298      	cmp	r0, r3
 8008526:	bfb8      	it	lt
 8008528:	4618      	movlt	r0, r3
 800852a:	e7a6      	b.n	800847a <_printf_i+0x15e>
 800852c:	2301      	movs	r3, #1
 800852e:	4632      	mov	r2, r6
 8008530:	4649      	mov	r1, r9
 8008532:	4640      	mov	r0, r8
 8008534:	47d0      	blx	sl
 8008536:	3001      	adds	r0, #1
 8008538:	d09d      	beq.n	8008476 <_printf_i+0x15a>
 800853a:	3501      	adds	r5, #1
 800853c:	68e3      	ldr	r3, [r4, #12]
 800853e:	9903      	ldr	r1, [sp, #12]
 8008540:	1a5b      	subs	r3, r3, r1
 8008542:	42ab      	cmp	r3, r5
 8008544:	dcf2      	bgt.n	800852c <_printf_i+0x210>
 8008546:	e7eb      	b.n	8008520 <_printf_i+0x204>
 8008548:	2500      	movs	r5, #0
 800854a:	f104 0619 	add.w	r6, r4, #25
 800854e:	e7f5      	b.n	800853c <_printf_i+0x220>
 8008550:	08008acf 	.word	0x08008acf
 8008554:	08008ae0 	.word	0x08008ae0

08008558 <__swbuf_r>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	460e      	mov	r6, r1
 800855c:	4614      	mov	r4, r2
 800855e:	4605      	mov	r5, r0
 8008560:	b118      	cbz	r0, 800856a <__swbuf_r+0x12>
 8008562:	6a03      	ldr	r3, [r0, #32]
 8008564:	b90b      	cbnz	r3, 800856a <__swbuf_r+0x12>
 8008566:	f7ff f963 	bl	8007830 <__sinit>
 800856a:	69a3      	ldr	r3, [r4, #24]
 800856c:	60a3      	str	r3, [r4, #8]
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	071a      	lsls	r2, r3, #28
 8008572:	d501      	bpl.n	8008578 <__swbuf_r+0x20>
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	b943      	cbnz	r3, 800858a <__swbuf_r+0x32>
 8008578:	4621      	mov	r1, r4
 800857a:	4628      	mov	r0, r5
 800857c:	f000 f82a 	bl	80085d4 <__swsetup_r>
 8008580:	b118      	cbz	r0, 800858a <__swbuf_r+0x32>
 8008582:	f04f 37ff 	mov.w	r7, #4294967295
 8008586:	4638      	mov	r0, r7
 8008588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	6922      	ldr	r2, [r4, #16]
 800858e:	1a98      	subs	r0, r3, r2
 8008590:	6963      	ldr	r3, [r4, #20]
 8008592:	b2f6      	uxtb	r6, r6
 8008594:	4283      	cmp	r3, r0
 8008596:	4637      	mov	r7, r6
 8008598:	dc05      	bgt.n	80085a6 <__swbuf_r+0x4e>
 800859a:	4621      	mov	r1, r4
 800859c:	4628      	mov	r0, r5
 800859e:	f7ff fcbd 	bl	8007f1c <_fflush_r>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1ed      	bne.n	8008582 <__swbuf_r+0x2a>
 80085a6:	68a3      	ldr	r3, [r4, #8]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	60a3      	str	r3, [r4, #8]
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	6022      	str	r2, [r4, #0]
 80085b2:	701e      	strb	r6, [r3, #0]
 80085b4:	6962      	ldr	r2, [r4, #20]
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d004      	beq.n	80085c6 <__swbuf_r+0x6e>
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	07db      	lsls	r3, r3, #31
 80085c0:	d5e1      	bpl.n	8008586 <__swbuf_r+0x2e>
 80085c2:	2e0a      	cmp	r6, #10
 80085c4:	d1df      	bne.n	8008586 <__swbuf_r+0x2e>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4628      	mov	r0, r5
 80085ca:	f7ff fca7 	bl	8007f1c <_fflush_r>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d0d9      	beq.n	8008586 <__swbuf_r+0x2e>
 80085d2:	e7d6      	b.n	8008582 <__swbuf_r+0x2a>

080085d4 <__swsetup_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4b29      	ldr	r3, [pc, #164]	@ (800867c <__swsetup_r+0xa8>)
 80085d8:	4605      	mov	r5, r0
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	460c      	mov	r4, r1
 80085de:	b118      	cbz	r0, 80085e8 <__swsetup_r+0x14>
 80085e0:	6a03      	ldr	r3, [r0, #32]
 80085e2:	b90b      	cbnz	r3, 80085e8 <__swsetup_r+0x14>
 80085e4:	f7ff f924 	bl	8007830 <__sinit>
 80085e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ec:	0719      	lsls	r1, r3, #28
 80085ee:	d422      	bmi.n	8008636 <__swsetup_r+0x62>
 80085f0:	06da      	lsls	r2, r3, #27
 80085f2:	d407      	bmi.n	8008604 <__swsetup_r+0x30>
 80085f4:	2209      	movs	r2, #9
 80085f6:	602a      	str	r2, [r5, #0]
 80085f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008602:	e033      	b.n	800866c <__swsetup_r+0x98>
 8008604:	0758      	lsls	r0, r3, #29
 8008606:	d512      	bpl.n	800862e <__swsetup_r+0x5a>
 8008608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800860a:	b141      	cbz	r1, 800861e <__swsetup_r+0x4a>
 800860c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008610:	4299      	cmp	r1, r3
 8008612:	d002      	beq.n	800861a <__swsetup_r+0x46>
 8008614:	4628      	mov	r0, r5
 8008616:	f7ff fafd 	bl	8007c14 <_free_r>
 800861a:	2300      	movs	r3, #0
 800861c:	6363      	str	r3, [r4, #52]	@ 0x34
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008624:	81a3      	strh	r3, [r4, #12]
 8008626:	2300      	movs	r3, #0
 8008628:	6063      	str	r3, [r4, #4]
 800862a:	6923      	ldr	r3, [r4, #16]
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	f043 0308 	orr.w	r3, r3, #8
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	b94b      	cbnz	r3, 800864e <__swsetup_r+0x7a>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008644:	d003      	beq.n	800864e <__swsetup_r+0x7a>
 8008646:	4621      	mov	r1, r4
 8008648:	4628      	mov	r0, r5
 800864a:	f000 f883 	bl	8008754 <__smakebuf_r>
 800864e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008652:	f013 0201 	ands.w	r2, r3, #1
 8008656:	d00a      	beq.n	800866e <__swsetup_r+0x9a>
 8008658:	2200      	movs	r2, #0
 800865a:	60a2      	str	r2, [r4, #8]
 800865c:	6962      	ldr	r2, [r4, #20]
 800865e:	4252      	negs	r2, r2
 8008660:	61a2      	str	r2, [r4, #24]
 8008662:	6922      	ldr	r2, [r4, #16]
 8008664:	b942      	cbnz	r2, 8008678 <__swsetup_r+0xa4>
 8008666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800866a:	d1c5      	bne.n	80085f8 <__swsetup_r+0x24>
 800866c:	bd38      	pop	{r3, r4, r5, pc}
 800866e:	0799      	lsls	r1, r3, #30
 8008670:	bf58      	it	pl
 8008672:	6962      	ldrpl	r2, [r4, #20]
 8008674:	60a2      	str	r2, [r4, #8]
 8008676:	e7f4      	b.n	8008662 <__swsetup_r+0x8e>
 8008678:	2000      	movs	r0, #0
 800867a:	e7f7      	b.n	800866c <__swsetup_r+0x98>
 800867c:	20000024 	.word	0x20000024

08008680 <_raise_r>:
 8008680:	291f      	cmp	r1, #31
 8008682:	b538      	push	{r3, r4, r5, lr}
 8008684:	4605      	mov	r5, r0
 8008686:	460c      	mov	r4, r1
 8008688:	d904      	bls.n	8008694 <_raise_r+0x14>
 800868a:	2316      	movs	r3, #22
 800868c:	6003      	str	r3, [r0, #0]
 800868e:	f04f 30ff 	mov.w	r0, #4294967295
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008696:	b112      	cbz	r2, 800869e <_raise_r+0x1e>
 8008698:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800869c:	b94b      	cbnz	r3, 80086b2 <_raise_r+0x32>
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f830 	bl	8008704 <_getpid_r>
 80086a4:	4622      	mov	r2, r4
 80086a6:	4601      	mov	r1, r0
 80086a8:	4628      	mov	r0, r5
 80086aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ae:	f000 b817 	b.w	80086e0 <_kill_r>
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d00a      	beq.n	80086cc <_raise_r+0x4c>
 80086b6:	1c59      	adds	r1, r3, #1
 80086b8:	d103      	bne.n	80086c2 <_raise_r+0x42>
 80086ba:	2316      	movs	r3, #22
 80086bc:	6003      	str	r3, [r0, #0]
 80086be:	2001      	movs	r0, #1
 80086c0:	e7e7      	b.n	8008692 <_raise_r+0x12>
 80086c2:	2100      	movs	r1, #0
 80086c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086c8:	4620      	mov	r0, r4
 80086ca:	4798      	blx	r3
 80086cc:	2000      	movs	r0, #0
 80086ce:	e7e0      	b.n	8008692 <_raise_r+0x12>

080086d0 <raise>:
 80086d0:	4b02      	ldr	r3, [pc, #8]	@ (80086dc <raise+0xc>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f7ff bfd3 	b.w	8008680 <_raise_r>
 80086da:	bf00      	nop
 80086dc:	20000024 	.word	0x20000024

080086e0 <_kill_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d07      	ldr	r5, [pc, #28]	@ (8008700 <_kill_r+0x20>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	4611      	mov	r1, r2
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	f7f9 f83f 	bl	8001770 <_kill>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d102      	bne.n	80086fc <_kill_r+0x1c>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	b103      	cbz	r3, 80086fc <_kill_r+0x1c>
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	bd38      	pop	{r3, r4, r5, pc}
 80086fe:	bf00      	nop
 8008700:	20004e4c 	.word	0x20004e4c

08008704 <_getpid_r>:
 8008704:	f7f9 b82c 	b.w	8001760 <_getpid>

08008708 <__swhatbuf_r>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	460c      	mov	r4, r1
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	2900      	cmp	r1, #0
 8008712:	b096      	sub	sp, #88	@ 0x58
 8008714:	4615      	mov	r5, r2
 8008716:	461e      	mov	r6, r3
 8008718:	da0d      	bge.n	8008736 <__swhatbuf_r+0x2e>
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008720:	f04f 0100 	mov.w	r1, #0
 8008724:	bf14      	ite	ne
 8008726:	2340      	movne	r3, #64	@ 0x40
 8008728:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800872c:	2000      	movs	r0, #0
 800872e:	6031      	str	r1, [r6, #0]
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	b016      	add	sp, #88	@ 0x58
 8008734:	bd70      	pop	{r4, r5, r6, pc}
 8008736:	466a      	mov	r2, sp
 8008738:	f000 f848 	bl	80087cc <_fstat_r>
 800873c:	2800      	cmp	r0, #0
 800873e:	dbec      	blt.n	800871a <__swhatbuf_r+0x12>
 8008740:	9901      	ldr	r1, [sp, #4]
 8008742:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008746:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800874a:	4259      	negs	r1, r3
 800874c:	4159      	adcs	r1, r3
 800874e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008752:	e7eb      	b.n	800872c <__swhatbuf_r+0x24>

08008754 <__smakebuf_r>:
 8008754:	898b      	ldrh	r3, [r1, #12]
 8008756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008758:	079d      	lsls	r5, r3, #30
 800875a:	4606      	mov	r6, r0
 800875c:	460c      	mov	r4, r1
 800875e:	d507      	bpl.n	8008770 <__smakebuf_r+0x1c>
 8008760:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	6123      	str	r3, [r4, #16]
 8008768:	2301      	movs	r3, #1
 800876a:	6163      	str	r3, [r4, #20]
 800876c:	b003      	add	sp, #12
 800876e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008770:	ab01      	add	r3, sp, #4
 8008772:	466a      	mov	r2, sp
 8008774:	f7ff ffc8 	bl	8008708 <__swhatbuf_r>
 8008778:	9f00      	ldr	r7, [sp, #0]
 800877a:	4605      	mov	r5, r0
 800877c:	4639      	mov	r1, r7
 800877e:	4630      	mov	r0, r6
 8008780:	f7ff fabc 	bl	8007cfc <_malloc_r>
 8008784:	b948      	cbnz	r0, 800879a <__smakebuf_r+0x46>
 8008786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878a:	059a      	lsls	r2, r3, #22
 800878c:	d4ee      	bmi.n	800876c <__smakebuf_r+0x18>
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	f043 0302 	orr.w	r3, r3, #2
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	e7e2      	b.n	8008760 <__smakebuf_r+0xc>
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	6020      	str	r0, [r4, #0]
 800879e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087aa:	b15b      	cbz	r3, 80087c4 <__smakebuf_r+0x70>
 80087ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087b0:	4630      	mov	r0, r6
 80087b2:	f000 f81d 	bl	80087f0 <_isatty_r>
 80087b6:	b128      	cbz	r0, 80087c4 <__smakebuf_r+0x70>
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	f023 0303 	bic.w	r3, r3, #3
 80087be:	f043 0301 	orr.w	r3, r3, #1
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	431d      	orrs	r5, r3
 80087c8:	81a5      	strh	r5, [r4, #12]
 80087ca:	e7cf      	b.n	800876c <__smakebuf_r+0x18>

080087cc <_fstat_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d07      	ldr	r5, [pc, #28]	@ (80087ec <_fstat_r+0x20>)
 80087d0:	2300      	movs	r3, #0
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	4611      	mov	r1, r2
 80087d8:	602b      	str	r3, [r5, #0]
 80087da:	f7f9 f829 	bl	8001830 <_fstat>
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	d102      	bne.n	80087e8 <_fstat_r+0x1c>
 80087e2:	682b      	ldr	r3, [r5, #0]
 80087e4:	b103      	cbz	r3, 80087e8 <_fstat_r+0x1c>
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	bd38      	pop	{r3, r4, r5, pc}
 80087ea:	bf00      	nop
 80087ec:	20004e4c 	.word	0x20004e4c

080087f0 <_isatty_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d06      	ldr	r5, [pc, #24]	@ (800880c <_isatty_r+0x1c>)
 80087f4:	2300      	movs	r3, #0
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	f7f9 f828 	bl	8001850 <_isatty>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_isatty_r+0x1a>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_isatty_r+0x1a>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	20004e4c 	.word	0x20004e4c

08008810 <_init>:
 8008810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008812:	bf00      	nop
 8008814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008816:	bc08      	pop	{r3}
 8008818:	469e      	mov	lr, r3
 800881a:	4770      	bx	lr

0800881c <_fini>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	bf00      	nop
 8008820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008822:	bc08      	pop	{r3}
 8008824:	469e      	mov	lr, r3
 8008826:	4770      	bx	lr
