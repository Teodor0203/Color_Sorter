
Movement_Bluetooth_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000860c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080087ac  080087ac  000097ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a58  08008a58  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a58  08008a58  00009a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a60  08008a60  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a64  08008a64  00009a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008a68  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d38  20000074  08008adc  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dac  08008adc  0000adac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d41  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003907  00000000  00000000  00023de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  000276f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b6  00000000  00000000  00028c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197be  00000000  00000000  00029d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e0e  00000000  00000000  000434ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aea5  00000000  00000000  0005b2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f619f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b4  00000000  00000000  000f61e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000fc698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008794 	.word	0x08008794

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008794 	.word	0x08008794

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Set_Servo_Angle>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	4613      	mov	r3, r2
 80005c8:	71fb      	strb	r3, [r7, #7]
    uint32_t pulse_length = 210 + (angle * (1050 - 210) / 180);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	4a15      	ldr	r2, [pc, #84]	@ (800062c <Set_Servo_Angle+0x70>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	441a      	add	r2, r3
 80005dc:	11d2      	asrs	r2, r2, #7
 80005de:	17db      	asrs	r3, r3, #31
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	33d2      	adds	r3, #210	@ 0xd2
 80005e4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <Set_Servo_Angle+0x3a>
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005f4:	e013      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d104      	bne.n	8000606 <Set_Servo_Angle+0x4a>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000604:	e00b      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	2b08      	cmp	r3, #8
 800060a:	d104      	bne.n	8000616 <Set_Servo_Angle+0x5a>
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000614:	e003      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800061e:	bf00      	nop
 8000620:	371c      	adds	r7, #28
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	b60b60b7 	.word	0xb60b60b7

08000630 <Init_arm>:

void Init_arm()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1); // Enable motors
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	@ 0x40
 8000638:	482f      	ldr	r0, [pc, #188]	@ (80006f8 <Init_arm+0xc8>)
 800063a:	f001 fcbf 	bl	8001fbc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // A0  - M1
 800063e:	2100      	movs	r1, #0
 8000640:	482e      	ldr	r0, [pc, #184]	@ (80006fc <Init_arm+0xcc>)
 8000642:	f002 faab 	bl	8002b9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // D10 - M2
 8000646:	2100      	movs	r1, #0
 8000648:	482d      	ldr	r0, [pc, #180]	@ (8000700 <Init_arm+0xd0>)
 800064a:	f002 faa7 	bl	8002b9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // D9  - M3
 800064e:	2104      	movs	r1, #4
 8000650:	482c      	ldr	r0, [pc, #176]	@ (8000704 <Init_arm+0xd4>)
 8000652:	f002 faa3 	bl	8002b9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // D6  - M4
 8000656:	2108      	movs	r1, #8
 8000658:	4828      	ldr	r0, [pc, #160]	@ (80006fc <Init_arm+0xcc>)
 800065a:	f002 fa9f 	bl	8002b9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // D5  - M5
 800065e:	2100      	movs	r1, #0
 8000660:	4828      	ldr	r0, [pc, #160]	@ (8000704 <Init_arm+0xd4>)
 8000662:	f002 fa9b 	bl	8002b9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // D3  - M6
 8000666:	2104      	movs	r1, #4
 8000668:	4824      	ldr	r0, [pc, #144]	@ (80006fc <Init_arm+0xcc>)
 800066a:	f002 fa97 	bl	8002b9c <HAL_TIM_PWM_Start>

	// Set arm to initial position
	Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <Init_arm+0xd8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	4821      	ldr	r0, [pc, #132]	@ (80006fc <Init_arm+0xcc>)
 8000678:	f7ff ffa0 	bl	80005bc <Set_Servo_Angle>
	    HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000680:	f001 f980 	bl	8001984 <HAL_Delay>

	    Set_Servo_Angle(&htim4, TIM_CHANNEL_1, current_value_shoulder);
 8000684:	4b21      	ldr	r3, [pc, #132]	@ (800070c <Init_arm+0xdc>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	481c      	ldr	r0, [pc, #112]	@ (8000700 <Init_arm+0xd0>)
 800068e:	f7ff ff95 	bl	80005bc <Set_Servo_Angle>
	    HAL_Delay(1000);
 8000692:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000696:	f001 f975 	bl	8001984 <HAL_Delay>

	    Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 800069a:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <Init_arm+0xe0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	2104      	movs	r1, #4
 80006a2:	4818      	ldr	r0, [pc, #96]	@ (8000704 <Init_arm+0xd4>)
 80006a4:	f7ff ff8a 	bl	80005bc <Set_Servo_Angle>
	    HAL_Delay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ac:	f001 f96a 	bl	8001984 <HAL_Delay>

	    Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 80006b0:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <Init_arm+0xe4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	2108      	movs	r1, #8
 80006b8:	4810      	ldr	r0, [pc, #64]	@ (80006fc <Init_arm+0xcc>)
 80006ba:	f7ff ff7f 	bl	80005bc <Set_Servo_Angle>
	    HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c2:	f001 f95f 	bl	8001984 <HAL_Delay>

	    Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <Init_arm+0xe8>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	480d      	ldr	r0, [pc, #52]	@ (8000704 <Init_arm+0xd4>)
 80006d0:	f7ff ff74 	bl	80005bc <Set_Servo_Angle>
	    HAL_Delay(1000);
 80006d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006d8:	f001 f954 	bl	8001984 <HAL_Delay>

	    Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <Init_arm+0xec>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	2104      	movs	r1, #4
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <Init_arm+0xcc>)
 80006e6:	f7ff ff69 	bl	80005bc <Set_Servo_Angle>
	    HAL_Delay(1000);
 80006ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ee:	f001 f949 	bl	8001984 <HAL_Delay>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40020000 	.word	0x40020000
 80006fc:	20000090 	.word	0x20000090
 8000700:	20000120 	.word	0x20000120
 8000704:	200000d8 	.word	0x200000d8
 8000708:	20000000 	.word	0x20000000
 800070c:	20000001 	.word	0x20000001
 8000710:	20000002 	.word	0x20000002
 8000714:	20000003 	.word	0x20000003
 8000718:	20000004 	.word	0x20000004
 800071c:	20000005 	.word	0x20000005

08000720 <MoveArm>:


void MoveArm(uint8_t base_angle, uint8_t shoulder_angle, uint8_t elbow_angle, uint8_t wrist_ver_angle, uint8_t wrist_rot_angle, uint8_t gripper_angle)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	4604      	mov	r4, r0
 8000728:	4608      	mov	r0, r1
 800072a:	4611      	mov	r1, r2
 800072c:	461a      	mov	r2, r3
 800072e:	4623      	mov	r3, r4
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	4603      	mov	r3, r0
 8000734:	71bb      	strb	r3, [r7, #6]
 8000736:	460b      	mov	r3, r1
 8000738:	717b      	strb	r3, [r7, #5]
 800073a:	4613      	mov	r3, r2
 800073c:	713b      	strb	r3, [r7, #4]
    int isMoving = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]

    while (isMoving)
 8000742:	e0f0      	b.n	8000926 <MoveArm+0x206>
    {
        while (current_value_elbow != elbow_angle)
        {
            if (current_value_elbow > elbow_angle)
 8000744:	4b7c      	ldr	r3, [pc, #496]	@ (8000938 <MoveArm+0x218>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	797a      	ldrb	r2, [r7, #5]
 800074a:	429a      	cmp	r2, r3
 800074c:	d206      	bcs.n	800075c <MoveArm+0x3c>
            {
            	current_value_elbow--;
 800074e:	4b7a      	ldr	r3, [pc, #488]	@ (8000938 <MoveArm+0x218>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b78      	ldr	r3, [pc, #480]	@ (8000938 <MoveArm+0x218>)
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	e005      	b.n	8000768 <MoveArm+0x48>
            }
            else
            {
            	current_value_elbow++;
 800075c:	4b76      	ldr	r3, [pc, #472]	@ (8000938 <MoveArm+0x218>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b74      	ldr	r3, [pc, #464]	@ (8000938 <MoveArm+0x218>)
 8000766:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 8000768:	4b73      	ldr	r3, [pc, #460]	@ (8000938 <MoveArm+0x218>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	2104      	movs	r1, #4
 8000770:	4872      	ldr	r0, [pc, #456]	@ (800093c <MoveArm+0x21c>)
 8000772:	f7ff ff23 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 8000776:	200f      	movs	r0, #15
 8000778:	f004 fa42 	bl	8004c00 <osDelay>
        while (current_value_elbow != elbow_angle)
 800077c:	4b6e      	ldr	r3, [pc, #440]	@ (8000938 <MoveArm+0x218>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	797a      	ldrb	r2, [r7, #5]
 8000782:	429a      	cmp	r2, r3
 8000784:	d1de      	bne.n	8000744 <MoveArm+0x24>
        }

        while (current_value_base != base_angle)
 8000786:	e01b      	b.n	80007c0 <MoveArm+0xa0>
        {
            if (current_value_base > base_angle)
 8000788:	4b6d      	ldr	r3, [pc, #436]	@ (8000940 <MoveArm+0x220>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	429a      	cmp	r2, r3
 8000790:	d206      	bcs.n	80007a0 <MoveArm+0x80>
            {
            	current_value_base--;
 8000792:	4b6b      	ldr	r3, [pc, #428]	@ (8000940 <MoveArm+0x220>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b69      	ldr	r3, [pc, #420]	@ (8000940 <MoveArm+0x220>)
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e005      	b.n	80007ac <MoveArm+0x8c>
            }
            else
            {
            	current_value_base++;
 80007a0:	4b67      	ldr	r3, [pc, #412]	@ (8000940 <MoveArm+0x220>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b65      	ldr	r3, [pc, #404]	@ (8000940 <MoveArm+0x220>)
 80007aa:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 80007ac:	4b64      	ldr	r3, [pc, #400]	@ (8000940 <MoveArm+0x220>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	4863      	ldr	r0, [pc, #396]	@ (8000944 <MoveArm+0x224>)
 80007b6:	f7ff ff01 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f004 fa20 	bl	8004c00 <osDelay>
        while (current_value_base != base_angle)
 80007c0:	4b5f      	ldr	r3, [pc, #380]	@ (8000940 <MoveArm+0x220>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	79fa      	ldrb	r2, [r7, #7]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d1de      	bne.n	8000788 <MoveArm+0x68>
        }

        while ((current_value_shoulder) != shoulder_angle)
 80007ca:	e01b      	b.n	8000804 <MoveArm+0xe4>
        {
            if ((current_value_shoulder) > shoulder_angle)
 80007cc:	4b5e      	ldr	r3, [pc, #376]	@ (8000948 <MoveArm+0x228>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	79ba      	ldrb	r2, [r7, #6]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d206      	bcs.n	80007e4 <MoveArm+0xc4>
            {
            	current_value_shoulder--;
 80007d6:	4b5c      	ldr	r3, [pc, #368]	@ (8000948 <MoveArm+0x228>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b5a      	ldr	r3, [pc, #360]	@ (8000948 <MoveArm+0x228>)
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	e005      	b.n	80007f0 <MoveArm+0xd0>
            }
            else
            {
            	current_value_shoulder++;
 80007e4:	4b58      	ldr	r3, [pc, #352]	@ (8000948 <MoveArm+0x228>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b56      	ldr	r3, [pc, #344]	@ (8000948 <MoveArm+0x228>)
 80007ee:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim4, TIM_CHANNEL_1, current_value_shoulder);
 80007f0:	4b55      	ldr	r3, [pc, #340]	@ (8000948 <MoveArm+0x228>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	4854      	ldr	r0, [pc, #336]	@ (800094c <MoveArm+0x22c>)
 80007fa:	f7ff fedf 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 80007fe:	200f      	movs	r0, #15
 8000800:	f004 f9fe 	bl	8004c00 <osDelay>
        while ((current_value_shoulder) != shoulder_angle)
 8000804:	4b50      	ldr	r3, [pc, #320]	@ (8000948 <MoveArm+0x228>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	429a      	cmp	r2, r3
 800080c:	d1de      	bne.n	80007cc <MoveArm+0xac>
        }

        while (current_value_wrist_ver != wrist_ver_angle)
 800080e:	e01b      	b.n	8000848 <MoveArm+0x128>
        {
            if (current_value_wrist_ver > wrist_ver_angle)
 8000810:	4b4f      	ldr	r3, [pc, #316]	@ (8000950 <MoveArm+0x230>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	793a      	ldrb	r2, [r7, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	d206      	bcs.n	8000828 <MoveArm+0x108>
            {
            	current_value_wrist_ver--;
 800081a:	4b4d      	ldr	r3, [pc, #308]	@ (8000950 <MoveArm+0x230>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3b01      	subs	r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b4b      	ldr	r3, [pc, #300]	@ (8000950 <MoveArm+0x230>)
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	e005      	b.n	8000834 <MoveArm+0x114>
            }
            else
            {
            	current_value_wrist_ver++;
 8000828:	4b49      	ldr	r3, [pc, #292]	@ (8000950 <MoveArm+0x230>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b47      	ldr	r3, [pc, #284]	@ (8000950 <MoveArm+0x230>)
 8000832:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 8000834:	4b46      	ldr	r3, [pc, #280]	@ (8000950 <MoveArm+0x230>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	2108      	movs	r1, #8
 800083c:	4841      	ldr	r0, [pc, #260]	@ (8000944 <MoveArm+0x224>)
 800083e:	f7ff febd 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 8000842:	200f      	movs	r0, #15
 8000844:	f004 f9dc 	bl	8004c00 <osDelay>
        while (current_value_wrist_ver != wrist_ver_angle)
 8000848:	4b41      	ldr	r3, [pc, #260]	@ (8000950 <MoveArm+0x230>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	793a      	ldrb	r2, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	d1de      	bne.n	8000810 <MoveArm+0xf0>
        }

        while (current_value_wrist_rot != wrist_rot_angle)
 8000852:	e01c      	b.n	800088e <MoveArm+0x16e>
        {
            if (current_value_wrist_rot > wrist_rot_angle)
 8000854:	4b3f      	ldr	r3, [pc, #252]	@ (8000954 <MoveArm+0x234>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	f897 2020 	ldrb.w	r2, [r7, #32]
 800085c:	429a      	cmp	r2, r3
 800085e:	d206      	bcs.n	800086e <MoveArm+0x14e>
            {
            	current_value_wrist_rot--;
 8000860:	4b3c      	ldr	r3, [pc, #240]	@ (8000954 <MoveArm+0x234>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	3b01      	subs	r3, #1
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b3a      	ldr	r3, [pc, #232]	@ (8000954 <MoveArm+0x234>)
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	e005      	b.n	800087a <MoveArm+0x15a>
            }
            else
                current_value_wrist_rot++;
 800086e:	4b39      	ldr	r3, [pc, #228]	@ (8000954 <MoveArm+0x234>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b37      	ldr	r3, [pc, #220]	@ (8000954 <MoveArm+0x234>)
 8000878:	701a      	strb	r2, [r3, #0]

            Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 800087a:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <MoveArm+0x234>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	482e      	ldr	r0, [pc, #184]	@ (800093c <MoveArm+0x21c>)
 8000884:	f7ff fe9a 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 8000888:	200f      	movs	r0, #15
 800088a:	f004 f9b9 	bl	8004c00 <osDelay>
        while (current_value_wrist_rot != wrist_rot_angle)
 800088e:	4b31      	ldr	r3, [pc, #196]	@ (8000954 <MoveArm+0x234>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000896:	429a      	cmp	r2, r3
 8000898:	d1dc      	bne.n	8000854 <MoveArm+0x134>
        }

        while (current_value_gripper != gripper_angle)
 800089a:	e01c      	b.n	80008d6 <MoveArm+0x1b6>
        {
            if (current_value_gripper > gripper_angle)
 800089c:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <MoveArm+0x238>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d206      	bcs.n	80008b6 <MoveArm+0x196>
            {
            	current_value_gripper--;
 80008a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <MoveArm+0x238>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <MoveArm+0x238>)
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e005      	b.n	80008c2 <MoveArm+0x1a2>
            }
            else
            {
            	current_value_gripper++;
 80008b6:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <MoveArm+0x238>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <MoveArm+0x238>)
 80008c0:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80008c2:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <MoveArm+0x238>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	2104      	movs	r1, #4
 80008ca:	481e      	ldr	r0, [pc, #120]	@ (8000944 <MoveArm+0x224>)
 80008cc:	f7ff fe76 	bl	80005bc <Set_Servo_Angle>

            osDelay(15);
 80008d0:	200f      	movs	r0, #15
 80008d2:	f004 f995 	bl	8004c00 <osDelay>
        while (current_value_gripper != gripper_angle)
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <MoveArm+0x238>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80008de:	429a      	cmp	r2, r3
 80008e0:	d1dc      	bne.n	800089c <MoveArm+0x17c>
        }

        if ((current_value_base == base_angle) &&
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MoveArm+0x220>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d11c      	bne.n	8000926 <MoveArm+0x206>
            (current_value_shoulder + 45 == shoulder_angle + 45) &&
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MoveArm+0x228>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
        if ((current_value_base == base_angle) &&
 80008f0:	79ba      	ldrb	r2, [r7, #6]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d117      	bne.n	8000926 <MoveArm+0x206>
            (current_value_elbow == elbow_angle) &&
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MoveArm+0x218>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
            (current_value_shoulder + 45 == shoulder_angle + 45) &&
 80008fa:	797a      	ldrb	r2, [r7, #5]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d112      	bne.n	8000926 <MoveArm+0x206>
            (current_value_wrist_ver == wrist_ver_angle) &&
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MoveArm+0x230>)
 8000902:	781b      	ldrb	r3, [r3, #0]
            (current_value_elbow == elbow_angle) &&
 8000904:	793a      	ldrb	r2, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	d10d      	bne.n	8000926 <MoveArm+0x206>
            (current_value_wrist_rot == wrist_rot_angle) &&
 800090a:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MoveArm+0x234>)
 800090c:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_ver == wrist_ver_angle) &&
 800090e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000912:	429a      	cmp	r2, r3
 8000914:	d107      	bne.n	8000926 <MoveArm+0x206>
            (current_value_gripper == gripper_angle))
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <MoveArm+0x238>)
 8000918:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_rot == wrist_rot_angle) &&
 800091a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800091e:	429a      	cmp	r2, r3
 8000920:	d101      	bne.n	8000926 <MoveArm+0x206>
        {
        	isMoving = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
    while (isMoving)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2b00      	cmp	r3, #0
 800092a:	f47f af27 	bne.w	800077c <MoveArm+0x5c>
        }
    }
}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	20000002 	.word	0x20000002
 800093c:	200000d8 	.word	0x200000d8
 8000940:	20000000 	.word	0x20000000
 8000944:	20000090 	.word	0x20000090
 8000948:	20000001 	.word	0x20000001
 800094c:	20000120 	.word	0x20000120
 8000950:	20000003 	.word	0x20000003
 8000954:	20000004 	.word	0x20000004
 8000958:	20000005 	.word	0x20000005

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 ffce 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f848 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f000 fa88 	bl	8000e7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096c:	f000 fa5c 	bl	8000e28 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000970:	f000 f8ac 	bl	8000acc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000974:	f000 f936 	bl	8000be4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000978:	f000 f9b6 	bl	8000ce8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800097c:	f000 fa2a 	bl	8000dd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  char temp_msg[32];
//  strcpy(temp_msg, "HC-05 Initialised!\n");
//  HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
  HAL_UART_Receive_IT(&huart1, buffer, 21);
 8000980:	2215      	movs	r2, #21
 8000982:	4912      	ldr	r1, [pc, #72]	@ (80009cc <main+0x70>)
 8000984:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <main+0x74>)
 8000986:	f003 f88a 	bl	8003a9e <HAL_UART_Receive_IT>

  Init_arm();
 800098a:	f7ff fe51 	bl	8000630 <Init_arm>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800098e:	f004 f85b 	bl	8004a48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of bluetooth */
  bluetoothHandle = osThreadNew(BluetoothTask, NULL, &bluetooth_attributes);
 8000992:	4a10      	ldr	r2, [pc, #64]	@ (80009d4 <main+0x78>)
 8000994:	2100      	movs	r1, #0
 8000996:	4810      	ldr	r0, [pc, #64]	@ (80009d8 <main+0x7c>)
 8000998:	f004 f8a0 	bl	8004adc <osThreadNew>
 800099c:	4603      	mov	r3, r0
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <main+0x80>)
 80009a0:	6013      	str	r3, [r2, #0]

  /* creation of moveRobotArm */
  moveRobotArmHandle = osThreadNew(MoveRobotArmTask, NULL, &moveRobotArm_attributes);
 80009a2:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <main+0x84>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480f      	ldr	r0, [pc, #60]	@ (80009e4 <main+0x88>)
 80009a8:	f004 f898 	bl	8004adc <osThreadNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <main+0x8c>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* creation of colorSensor */
  colorSensorHandle = osThreadNew(ColorSensorTask, NULL, &colorSensor_attributes);
 80009b2:	4a0e      	ldr	r2, [pc, #56]	@ (80009ec <main+0x90>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	480e      	ldr	r0, [pc, #56]	@ (80009f0 <main+0x94>)
 80009b8:	f004 f890 	bl	8004adc <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a0d      	ldr	r2, [pc, #52]	@ (80009f4 <main+0x98>)
 80009c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009c2:	f004 f865 	bl	8004a90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c6:	bf00      	nop
 80009c8:	e7fd      	b.n	80009c6 <main+0x6a>
 80009ca:	bf00      	nop
 80009cc:	2000020c 	.word	0x2000020c
 80009d0:	20000168 	.word	0x20000168
 80009d4:	080087f0 	.word	0x080087f0
 80009d8:	08001099 	.word	0x08001099
 80009dc:	200001f8 	.word	0x200001f8
 80009e0:	08008814 	.word	0x08008814
 80009e4:	080010e1 	.word	0x080010e1
 80009e8:	200001fc 	.word	0x200001fc
 80009ec:	08008838 	.word	0x08008838
 80009f0:	080011f9 	.word	0x080011f9
 80009f4:	20000200 	.word	0x20000200

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	@ 0x50
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2230      	movs	r2, #48	@ 0x30
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f006 ff5b 	bl	80078c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <SystemClock_Config+0xcc>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	4a27      	ldr	r2, [pc, #156]	@ (8000ac4 <SystemClock_Config+0xcc>)
 8000a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <SystemClock_Config+0xcc>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ac8 <SystemClock_Config+0xd0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a21      	ldr	r2, [pc, #132]	@ (8000ac8 <SystemClock_Config+0xd0>)
 8000a42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <SystemClock_Config+0xd0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a60:	2302      	movs	r3, #2
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a6c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a72:	2304      	movs	r3, #4
 8000a74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fab6 	bl	8001ff0 <HAL_RCC_OscConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a8a:	f000 fbcf 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	230f      	movs	r3, #15
 8000a90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a92:	2302      	movs	r3, #2
 8000a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fd18 	bl	80024e0 <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ab6:	f000 fbb9 	bl	800122c <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3750      	adds	r7, #80	@ 0x50
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	@ 0x38
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	f107 0320 	add.w	r3, r7, #32
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	615a      	str	r2, [r3, #20]
 8000afa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afc:	4b38      	ldr	r3, [pc, #224]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000afe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000b04:	4b36      	ldr	r3, [pc, #216]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b06:	22c7      	movs	r2, #199	@ 0xc7
 8000b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8000b10:	4b33      	ldr	r3, [pc, #204]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b12:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b31      	ldr	r3, [pc, #196]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b1e:	4b30      	ldr	r3, [pc, #192]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b24:	482e      	ldr	r0, [pc, #184]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b26:	f001 ff2d 	bl	8002984 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b30:	f000 fb7c 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b42:	f002 fa8d 	bl	8003060 <HAL_TIM_ConfigClockSource>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b4c:	f000 fb6e 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b50:	4823      	ldr	r0, [pc, #140]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b52:	f001 ffc9 	bl	8002ae8 <HAL_TIM_PWM_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b5c:	f000 fb66 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b68:	f107 0320 	add.w	r3, r7, #32
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481c      	ldr	r0, [pc, #112]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b70:	f002 fe38 	bl	80037e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b7a:	f000 fb57 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7e:	2360      	movs	r3, #96	@ 0x60
 8000b80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	4812      	ldr	r0, [pc, #72]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000b96:	f002 f9a1 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ba0:	f000 fb44 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000bac:	f002 f996 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000bb6:	f000 fb39 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000bc2:	f002 f98b 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000bcc:	f000 fb2e 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bd0:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <MX_TIM2_Init+0x114>)
 8000bd2:	f000 fba9 	bl	8001328 <HAL_TIM_MspPostInit>

}
 8000bd6:	bf00      	nop
 8000bd8:	3738      	adds	r7, #56	@ 0x38
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000090 	.word	0x20000090

08000be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	@ 0x38
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c14:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c16:	4a33      	ldr	r2, [pc, #204]	@ (8000ce4 <MX_TIM3_Init+0x100>)
 8000c18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c1c:	22c7      	movs	r2, #199	@ 0xc7
 8000c1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c28:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000c2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c36:	2280      	movs	r2, #128	@ 0x80
 8000c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c3a:	4829      	ldr	r0, [pc, #164]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c3c:	f001 fea2 	bl	8002984 <HAL_TIM_Base_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c46:	f000 faf1 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4822      	ldr	r0, [pc, #136]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c58:	f002 fa02 	bl	8003060 <HAL_TIM_ConfigClockSource>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c62:	f000 fae3 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c66:	481e      	ldr	r0, [pc, #120]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c68:	f001 ff3e 	bl	8002ae8 <HAL_TIM_PWM_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c72:	f000 fadb 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	4619      	mov	r1, r3
 8000c84:	4816      	ldr	r0, [pc, #88]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000c86:	f002 fdad 	bl	80037e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c90:	f000 facc 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c94:	2360      	movs	r3, #96	@ 0x60
 8000c96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000cac:	f002 f916 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cb6:	f000 fab9 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000cc2:	f002 f90b 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000ccc:	f000 faae 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <MX_TIM3_Init+0xfc>)
 8000cd2:	f000 fb29 	bl	8001328 <HAL_TIM_MspPostInit>

}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	@ 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000d8 	.word	0x200000d8
 8000ce4:	40000400 	.word	0x40000400

08000ce8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	@ 0x38
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d18:	4b2c      	ldr	r3, [pc, #176]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd0 <MX_TIM4_Init+0xe8>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d20:	22c7      	movs	r2, #199	@ 0xc7
 8000d22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b29      	ldr	r3, [pc, #164]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d2a:	4b28      	ldr	r3, [pc, #160]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d3e:	4823      	ldr	r0, [pc, #140]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d40:	f001 fe20 	bl	8002984 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d4a:	f000 fa6f 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481c      	ldr	r0, [pc, #112]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d5c:	f002 f980 	bl	8003060 <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d66:	f000 fa61 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d6a:	4818      	ldr	r0, [pc, #96]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d6c:	f001 febc 	bl	8002ae8 <HAL_TIM_PWM_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d76:	f000 fa59 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	4619      	mov	r1, r3
 8000d88:	4810      	ldr	r0, [pc, #64]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000d8a:	f002 fd2b 	bl	80037e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d94:	f000 fa4a 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d98:	2360      	movs	r3, #96	@ 0x60
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000db0:	f002 f894 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000dba:	f000 fa37 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dbe:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <MX_TIM4_Init+0xe4>)
 8000dc0:	f000 fab2 	bl	8001328 <HAL_TIM_MspPostInit>

}
 8000dc4:	bf00      	nop
 8000dc6:	3738      	adds	r7, #56	@ 0x38
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000120 	.word	0x20000120
 8000dd0:	40000800 	.word	0x40000800

08000dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <MX_USART1_UART_Init+0x50>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000de0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	f002 fd6c 	bl	80038e8 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e16:	f000 fa09 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000168 	.word	0x20000168
 8000e24:	40011000 	.word	0x40011000

08000e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <MX_USART2_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f002 fd42 	bl	80038e8 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f000 f9df 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200001b0 	.word	0x200001b0
 8000e78:	40004400 	.word	0x40004400

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a25      	ldr	r2, [pc, #148]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <MX_GPIO_Init+0xd0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2160      	movs	r1, #96	@ 0x60
 8000f06:	4812      	ldr	r0, [pc, #72]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000f08:	f001 f858 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f12:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <MX_GPIO_Init+0xd8>)
 8000f24:	f000 fec6 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000f28:	2360      	movs	r3, #96	@ 0x60
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000f40:	f000 feb8 	bl	8001cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	@ 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020800 	.word	0x40020800

08000f58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0a2      	sub	sp, #136	@ 0x88
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a41      	ldr	r2, [pc, #260]	@ (800106c <HAL_UART_RxCpltCallback+0x114>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d17b      	bne.n	8001062 <HAL_UART_RxCpltCallback+0x10a>
	        char response_msg[100];
	        char temp_buffer[21]; // Create a copy if you need to preserve the original

	        strcpy(temp_buffer, buffer); // Copy the original string
 8000f6a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f6e:	4940      	ldr	r1, [pc, #256]	@ (8001070 <HAL_UART_RxCpltCallback+0x118>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 fddc 	bl	8007b2e <strcpy>

	        char *token;

	            token = strtok(temp_buffer, ",");
 8000f76:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f7a:	493e      	ldr	r1, [pc, #248]	@ (8001074 <HAL_UART_RxCpltCallback+0x11c>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 fca9 	bl	80078d4 <strtok>
 8000f82:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	            if (token != NULL) {
 8000f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <HAL_UART_RxCpltCallback+0x46>
	                base_angle = atoi(token);
 8000f8e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000f92:	f006 fb09 	bl	80075a8 <atoi>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b37      	ldr	r3, [pc, #220]	@ (8001078 <HAL_UART_RxCpltCallback+0x120>)
 8000f9c:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000f9e:	4935      	ldr	r1, [pc, #212]	@ (8001074 <HAL_UART_RxCpltCallback+0x11c>)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f006 fc97 	bl	80078d4 <strtok>
 8000fa6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	            if (token != NULL) {
 8000faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <HAL_UART_RxCpltCallback+0x6a>
	                shoulder_angle = atoi(token);
 8000fb2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000fb6:	f006 faf7 	bl	80075a8 <atoi>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <HAL_UART_RxCpltCallback+0x124>)
 8000fc0:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000fc2:	492c      	ldr	r1, [pc, #176]	@ (8001074 <HAL_UART_RxCpltCallback+0x11c>)
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f006 fc85 	bl	80078d4 <strtok>
 8000fca:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	            if (token != NULL) {
 8000fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <HAL_UART_RxCpltCallback+0x8e>
	                elbow_angle = atoi(token);
 8000fd6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000fda:	f006 fae5 	bl	80075a8 <atoi>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <HAL_UART_RxCpltCallback+0x128>)
 8000fe4:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000fe6:	4923      	ldr	r1, [pc, #140]	@ (8001074 <HAL_UART_RxCpltCallback+0x11c>)
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f006 fc73 	bl	80078d4 <strtok>
 8000fee:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	            if (token != NULL) {
 8000ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d007      	beq.n	800100a <HAL_UART_RxCpltCallback+0xb2>
	                wrist_ver_angle = atoi(token);
 8000ffa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000ffe:	f006 fad3 	bl	80075a8 <atoi>
 8001002:	4603      	mov	r3, r0
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_UART_RxCpltCallback+0x12c>)
 8001008:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 800100a:	491a      	ldr	r1, [pc, #104]	@ (8001074 <HAL_UART_RxCpltCallback+0x11c>)
 800100c:	2000      	movs	r0, #0
 800100e:	f006 fc61 	bl	80078d4 <strtok>
 8001012:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	            if (token != NULL) {
 8001016:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <HAL_UART_RxCpltCallback+0xd6>
	            	wrist_rot_angle = atoi(token);
 800101e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001022:	f006 fac1 	bl	80075a8 <atoi>
 8001026:	4603      	mov	r3, r0
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_UART_RxCpltCallback+0x130>)
 800102c:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 800102e:	4911      	ldr	r1, [pc, #68]	@ (8001074 <HAL_UART_RxCpltCallback+0x11c>)
 8001030:	2000      	movs	r0, #0
 8001032:	f006 fc4f 	bl	80078d4 <strtok>
 8001036:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	            if (token != NULL) {
 800103a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <HAL_UART_RxCpltCallback+0xfa>
	                detected_class = atoi(token);
 8001042:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001046:	f006 faaf 	bl	80075a8 <atoi>
 800104a:	4603      	mov	r3, r0
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_UART_RxCpltCallback+0x134>)
 8001050:	701a      	strb	r2, [r3, #0]
	            }
	            move_arm = 1;
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_UART_RxCpltCallback+0x138>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
	        // Transmit the response
	        //HAL_UART_Transmit(&huart1, (uint8_t*) response_msg, strlen(response_msg), HAL_MAX_DELAY);
	            HAL_UART_Receive_IT(&huart1, buffer, 21);
 8001058:	2215      	movs	r2, #21
 800105a:	4905      	ldr	r1, [pc, #20]	@ (8001070 <HAL_UART_RxCpltCallback+0x118>)
 800105c:	480d      	ldr	r0, [pc, #52]	@ (8001094 <HAL_UART_RxCpltCallback+0x13c>)
 800105e:	f002 fd1e 	bl	8003a9e <HAL_UART_Receive_IT>
	        // Re-enable the receive interrupt *after* processing the current data

	}
}
 8001062:	bf00      	nop
 8001064:	3788      	adds	r7, #136	@ 0x88
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40011000 	.word	0x40011000
 8001070:	2000020c 	.word	0x2000020c
 8001074:	080087d4 	.word	0x080087d4
 8001078:	20000221 	.word	0x20000221
 800107c:	20000222 	.word	0x20000222
 8001080:	20000223 	.word	0x20000223
 8001084:	20000224 	.word	0x20000224
 8001088:	20000225 	.word	0x20000225
 800108c:	20000226 	.word	0x20000226
 8001090:	20000208 	.word	0x20000208
 8001094:	20000168 	.word	0x20000168

08001098 <BluetoothTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BluetoothTask */
void BluetoothTask(void *argument)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (is_ready)
 80010a0:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <BluetoothTask+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d012      	beq.n	80010ce <BluetoothTask+0x36>
	  {
		  is_ready = 0;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <BluetoothTask+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
		  char msg_ready[2];
		  strcpy(msg_ready, "1");
 80010ae:	2331      	movs	r3, #49	@ 0x31
 80010b0:	81bb      	strh	r3, [r7, #12]
		  HAL_UART_Transmit(&huart1, (uint8_t*) msg_ready, strlen(msg_ready), HAL_MAX_DELAY);
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f892 	bl	80001e0 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f107 010c 	add.w	r1, r7, #12
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <BluetoothTask+0x44>)
 80010ca:	f002 fc5d 	bl	8003988 <HAL_UART_Transmit>
	  }
    osDelay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f003 fd96 	bl	8004c00 <osDelay>
	  if (is_ready)
 80010d4:	e7e4      	b.n	80010a0 <BluetoothTask+0x8>
 80010d6:	bf00      	nop
 80010d8:	20000204 	.word	0x20000204
 80010dc:	20000168 	.word	0x20000168

080010e0 <MoveRobotArmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MoveRobotArmTask */
void MoveRobotArmTask(void *argument)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MoveRobotArmTask */
  /* Infinite loop */
  for(;;)
  {
	  if(move_arm){
 80010e8:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <MoveRobotArmTask+0xf8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d06f      	beq.n	80011d0 <MoveRobotArmTask+0xf0>
	  		  move_arm = 0;
 80010f0:	4b39      	ldr	r3, [pc, #228]	@ (80011d8 <MoveRobotArmTask+0xf8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]

	  		  MoveArm(base_angle, shoulder_angle, elbow_angle, wrist_ver_angle, wrist_rot_angle, 10); // move to object
 80010f6:	4b39      	ldr	r3, [pc, #228]	@ (80011dc <MoveRobotArmTask+0xfc>)
 80010f8:	7818      	ldrb	r0, [r3, #0]
 80010fa:	4b39      	ldr	r3, [pc, #228]	@ (80011e0 <MoveRobotArmTask+0x100>)
 80010fc:	7819      	ldrb	r1, [r3, #0]
 80010fe:	4b39      	ldr	r3, [pc, #228]	@ (80011e4 <MoveRobotArmTask+0x104>)
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	4b39      	ldr	r3, [pc, #228]	@ (80011e8 <MoveRobotArmTask+0x108>)
 8001104:	781c      	ldrb	r4, [r3, #0]
 8001106:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <MoveRobotArmTask+0x10c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	250a      	movs	r5, #10
 800110c:	9501      	str	r5, [sp, #4]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	4623      	mov	r3, r4
 8001112:	f7ff fb05 	bl	8000720 <MoveArm>

		  	  MoveArm(base_angle, shoulder_angle, elbow_angle, 0, wrist_rot_angle, 70); // grab object
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <MoveRobotArmTask+0xfc>)
 8001118:	7818      	ldrb	r0, [r3, #0]
 800111a:	4b31      	ldr	r3, [pc, #196]	@ (80011e0 <MoveRobotArmTask+0x100>)
 800111c:	7819      	ldrb	r1, [r3, #0]
 800111e:	4b31      	ldr	r3, [pc, #196]	@ (80011e4 <MoveRobotArmTask+0x104>)
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <MoveRobotArmTask+0x10c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2446      	movs	r4, #70	@ 0x46
 8001128:	9401      	str	r4, [sp, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2300      	movs	r3, #0
 800112e:	f7ff faf7 	bl	8000720 <MoveArm>

		  	  MoveArm(base_angle, shoulder_angle, elbow_angle, wrist_ver_angle, wrist_rot_angle, 70); // raise object
 8001132:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <MoveRobotArmTask+0xfc>)
 8001134:	7818      	ldrb	r0, [r3, #0]
 8001136:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <MoveRobotArmTask+0x100>)
 8001138:	7819      	ldrb	r1, [r3, #0]
 800113a:	4b2a      	ldr	r3, [pc, #168]	@ (80011e4 <MoveRobotArmTask+0x104>)
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <MoveRobotArmTask+0x108>)
 8001140:	781c      	ldrb	r4, [r3, #0]
 8001142:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <MoveRobotArmTask+0x10c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2546      	movs	r5, #70	@ 0x46
 8001148:	9501      	str	r5, [sp, #4]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4623      	mov	r3, r4
 800114e:	f7ff fae7 	bl	8000720 <MoveArm>

		  	  switch (detected_class) // move to pile
 8001152:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <MoveRobotArmTask+0x110>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d836      	bhi.n	80011c8 <MoveRobotArmTask+0xe8>
 800115a:	a201      	add	r2, pc, #4	@ (adr r2, 8001160 <MoveRobotArmTask+0x80>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	08001171 	.word	0x08001171
 8001164:	08001187 	.word	0x08001187
 8001168:	0800119d 	.word	0x0800119d
 800116c:	080011b3 	.word	0x080011b3
		  	  {
		  	  case 0:
		  		  MoveArm(0, 90, 35, 20, 90, 10); // red pile
 8001170:	230a      	movs	r3, #10
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	235a      	movs	r3, #90	@ 0x5a
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2314      	movs	r3, #20
 800117a:	2223      	movs	r2, #35	@ 0x23
 800117c:	215a      	movs	r1, #90	@ 0x5a
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff face 	bl	8000720 <MoveArm>
		  		  break;
 8001184:	e021      	b.n	80011ca <MoveRobotArmTask+0xea>
		  	  case 1:
		  		  MoveArm(0, 40, 70, 40, 90, 10);
 8001186:	230a      	movs	r3, #10
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	235a      	movs	r3, #90	@ 0x5a
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2328      	movs	r3, #40	@ 0x28
 8001190:	2246      	movs	r2, #70	@ 0x46
 8001192:	2128      	movs	r1, #40	@ 0x28
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fac3 	bl	8000720 <MoveArm>
		  		  break;
 800119a:	e016      	b.n	80011ca <MoveRobotArmTask+0xea>
		  	  case 2:
		  		  MoveArm(180, 90, 35, 20, 90, 10);
 800119c:	230a      	movs	r3, #10
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	235a      	movs	r3, #90	@ 0x5a
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2314      	movs	r3, #20
 80011a6:	2223      	movs	r2, #35	@ 0x23
 80011a8:	215a      	movs	r1, #90	@ 0x5a
 80011aa:	20b4      	movs	r0, #180	@ 0xb4
 80011ac:	f7ff fab8 	bl	8000720 <MoveArm>
		  		  break;
 80011b0:	e00b      	b.n	80011ca <MoveRobotArmTask+0xea>
		  	  case 3:
		  		  MoveArm(180, 40, 70, 40, 90, 10);
 80011b2:	230a      	movs	r3, #10
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	235a      	movs	r3, #90	@ 0x5a
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2328      	movs	r3, #40	@ 0x28
 80011bc:	2246      	movs	r2, #70	@ 0x46
 80011be:	2128      	movs	r1, #40	@ 0x28
 80011c0:	20b4      	movs	r0, #180	@ 0xb4
 80011c2:	f7ff faad 	bl	8000720 <MoveArm>
		  		  break;
 80011c6:	e000      	b.n	80011ca <MoveRobotArmTask+0xea>
		  	  default:
		  		  break;
 80011c8:	bf00      	nop
		  	  }

		  	  is_ready = 1;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MoveRobotArmTask+0x114>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
	  	  }
    osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f003 fd15 	bl	8004c00 <osDelay>
	  if(move_arm){
 80011d6:	e787      	b.n	80010e8 <MoveRobotArmTask+0x8>
 80011d8:	20000208 	.word	0x20000208
 80011dc:	20000221 	.word	0x20000221
 80011e0:	20000222 	.word	0x20000222
 80011e4:	20000223 	.word	0x20000223
 80011e8:	20000224 	.word	0x20000224
 80011ec:	20000225 	.word	0x20000225
 80011f0:	20000226 	.word	0x20000226
 80011f4:	20000204 	.word	0x20000204

080011f8 <ColorSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ColorSensorTask */
void ColorSensorTask(void *argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ColorSensorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f003 fcfd 	bl	8004c00 <osDelay>
 8001206:	e7fb      	b.n	8001200 <ColorSensorTask+0x8>

08001208 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800121a:	f000 fb93 	bl	8001944 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40010000 	.word	0x40010000

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_MspInit+0x54>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	4a11      	ldr	r2, [pc, #68]	@ (800128c <HAL_MspInit+0x54>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124c:	6453      	str	r3, [r2, #68]	@ 0x44
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_MspInit+0x54>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_MspInit+0x54>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <HAL_MspInit+0x54>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_MspInit+0x54>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	210f      	movs	r1, #15
 800127a:	f06f 0001 	mvn.w	r0, #1
 800127e:	f000 fc5d 	bl	8001b3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a0:	d10e      	bne.n	80012c0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_TIM_Base_MspInit+0x8c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <HAL_TIM_Base_MspInit+0x8c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <HAL_TIM_Base_MspInit+0x8c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012be:	e026      	b.n	800130e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a16      	ldr	r2, [pc, #88]	@ (8001320 <HAL_TIM_Base_MspInit+0x90>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10e      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <HAL_TIM_Base_MspInit+0x8c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <HAL_TIM_Base_MspInit+0x8c>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <HAL_TIM_Base_MspInit+0x8c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
}
 80012e6:	e012      	b.n	800130e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <HAL_TIM_Base_MspInit+0x94>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10d      	bne.n	800130e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_TIM_Base_MspInit+0x8c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <HAL_TIM_Base_MspInit+0x8c>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6413      	str	r3, [r2, #64]	@ 0x40
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_TIM_Base_MspInit+0x8c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
}
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40000400 	.word	0x40000400
 8001324:	40000800 	.word	0x40000800

08001328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	@ 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001348:	d13d      	bne.n	80013c6 <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	4b52      	ldr	r3, [pc, #328]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a51      	ldr	r2, [pc, #324]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b4f      	ldr	r3, [pc, #316]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	4b4b      	ldr	r3, [pc, #300]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a4a      	ldr	r2, [pc, #296]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b48      	ldr	r3, [pc, #288]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001382:	2301      	movs	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001392:	2301      	movs	r3, #1
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	483f      	ldr	r0, [pc, #252]	@ (800149c <HAL_TIM_MspPostInit+0x174>)
 800139e:	f000 fc89 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80013a2:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4838      	ldr	r0, [pc, #224]	@ (80014a0 <HAL_TIM_MspPostInit+0x178>)
 80013c0:	f000 fc78 	bl	8001cb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013c4:	e064      	b.n	8001490 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a36      	ldr	r2, [pc, #216]	@ (80014a4 <HAL_TIM_MspPostInit+0x17c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d13c      	bne.n	800144a <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	4a28      	ldr	r2, [pc, #160]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fc:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001408:	2380      	movs	r3, #128	@ 0x80
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001418:	2302      	movs	r3, #2
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4821      	ldr	r0, [pc, #132]	@ (80014a8 <HAL_TIM_MspPostInit+0x180>)
 8001424:	f000 fc46 	bl	8001cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001428:	2310      	movs	r3, #16
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001438:	2302      	movs	r3, #2
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4817      	ldr	r0, [pc, #92]	@ (80014a0 <HAL_TIM_MspPostInit+0x178>)
 8001444:	f000 fc36 	bl	8001cb4 <HAL_GPIO_Init>
}
 8001448:	e022      	b.n	8001490 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a17      	ldr	r2, [pc, #92]	@ (80014ac <HAL_TIM_MspPostInit+0x184>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d11d      	bne.n	8001490 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	4a0e      	ldr	r2, [pc, #56]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	6313      	str	r3, [r2, #48]	@ 0x30
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <HAL_TIM_MspPostInit+0x170>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001470:	2340      	movs	r3, #64	@ 0x40
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001480:	2302      	movs	r3, #2
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <HAL_TIM_MspPostInit+0x178>)
 800148c:	f000 fc12 	bl	8001cb4 <HAL_GPIO_Init>
}
 8001490:	bf00      	nop
 8001492:	3730      	adds	r7, #48	@ 0x30
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40000400 	.word	0x40000400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40000800 	.word	0x40000800

080014b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	@ 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a36      	ldr	r2, [pc, #216]	@ (80015a8 <HAL_UART_MspInit+0xf8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d135      	bne.n	800153e <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a34      	ldr	r2, [pc, #208]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	4b2e      	ldr	r3, [pc, #184]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a2d      	ldr	r2, [pc, #180]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800150a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800151c:	2307      	movs	r3, #7
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	4822      	ldr	r0, [pc, #136]	@ (80015b0 <HAL_UART_MspInit+0x100>)
 8001528:	f000 fbc4 	bl	8001cb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2105      	movs	r1, #5
 8001530:	2025      	movs	r0, #37	@ 0x25
 8001532:	f000 fb03 	bl	8001b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001536:	2025      	movs	r0, #37	@ 0x25
 8001538:	f000 fb1c 	bl	8001b74 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800153c:	e030      	b.n	80015a0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a1c      	ldr	r2, [pc, #112]	@ (80015b4 <HAL_UART_MspInit+0x104>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d12b      	bne.n	80015a0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 8001552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001556:	6413      	str	r3, [r2, #64]	@ 0x40
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	4a0f      	ldr	r2, [pc, #60]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6313      	str	r3, [r2, #48]	@ 0x30
 8001574:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <HAL_UART_MspInit+0xfc>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001580:	230c      	movs	r3, #12
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001590:	2307      	movs	r3, #7
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <HAL_UART_MspInit+0x100>)
 800159c:	f000 fb8a 	bl	8001cb4 <HAL_GPIO_Init>
}
 80015a0:	bf00      	nop
 80015a2:	3730      	adds	r7, #48	@ 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40011000 	.word	0x40011000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40004400 	.word	0x40004400

080015b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	@ 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <HAL_InitTick+0xd0>)
 80015ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001688 <HAL_InitTick+0xd0>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <HAL_InitTick+0xd0>)
 80015da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015e4:	f107 020c 	add.w	r2, r7, #12
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 f996 	bl	8002920 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015f4:	f001 f980 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 80015f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	4a23      	ldr	r2, [pc, #140]	@ (800168c <HAL_InitTick+0xd4>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	3b01      	subs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001608:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <HAL_InitTick+0xd8>)
 800160a:	4a22      	ldr	r2, [pc, #136]	@ (8001694 <HAL_InitTick+0xdc>)
 800160c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <HAL_InitTick+0xd8>)
 8001610:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001614:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001616:	4a1e      	ldr	r2, [pc, #120]	@ (8001690 <HAL_InitTick+0xd8>)
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800161c:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <HAL_InitTick+0xd8>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <HAL_InitTick+0xd8>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_InitTick+0xd8>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800162e:	4818      	ldr	r0, [pc, #96]	@ (8001690 <HAL_InitTick+0xd8>)
 8001630:	f001 f9a8 	bl	8002984 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800163a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11b      	bne.n	800167a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001642:	4813      	ldr	r0, [pc, #76]	@ (8001690 <HAL_InitTick+0xd8>)
 8001644:	f001 f9ee 	bl	8002a24 <HAL_TIM_Base_Start_IT>
 8001648:	4603      	mov	r3, r0
 800164a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800164e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001652:	2b00      	cmp	r3, #0
 8001654:	d111      	bne.n	800167a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001656:	2019      	movs	r0, #25
 8001658:	f000 fa8c 	bl	8001b74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	d808      	bhi.n	8001674 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001662:	2200      	movs	r2, #0
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	2019      	movs	r0, #25
 8001668:	f000 fa68 	bl	8001b3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166c:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_InitTick+0xe0>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e002      	b.n	800167a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800167a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800167e:	4618      	mov	r0, r3
 8001680:	3730      	adds	r7, #48	@ 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	431bde83 	.word	0x431bde83
 8001690:	20000228 	.word	0x20000228
 8001694:	40010000 	.word	0x40010000
 8001698:	2000000c 	.word	0x2000000c

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <NMI_Handler+0x4>

080016a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016da:	f001 fb0f 	bl	8002cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000228 	.word	0x20000228

080016e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <USART1_IRQHandler+0x10>)
 80016ee:	f002 f9fb 	bl	8003ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000168 	.word	0x20000168

080016fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001716:	f006 f9dd 	bl	8007ad4 <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
  return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit (int status)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
  while (1) {}    /* Make sure we hang here */
 800173e:	bf00      	nop
 8001740:	e7fd      	b.n	800173e <_exit+0x12>

08001742 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e00a      	b.n	800176a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001754:	f3af 8000 	nop.w
 8001758:	4601      	mov	r1, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	60ba      	str	r2, [r7, #8]
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbf0      	blt.n	8001754 <_read+0x12>
  }

  return len;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e009      	b.n	80017a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	60ba      	str	r2, [r7, #8]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbf1      	blt.n	800178e <_write+0x12>
  }
  return len;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_close>:

int _close(int file)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017dc:	605a      	str	r2, [r3, #4]
  return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_isatty>:

int _isatty(int file)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	@ (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f006 f942 	bl	8007ad4 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20020000 	.word	0x20020000
 800187c:	00000400 	.word	0x00000400
 8001880:	20000270 	.word	0x20000270
 8001884:	20004db0 	.word	0x20004db0

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018b0:	f7ff ffea 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	@ (80018ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	@ (80018f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018da:	f006 f901 	bl	8007ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff f83d 	bl	800095c <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018f0:	08008a68 	.word	0x08008a68
  ldr r2, =_sbss
 80018f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80018f8:	20004dac 	.word	0x20004dac

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	@ (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f8fc 	bl	8001b26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f7ff fe42 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fc80 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000010 	.word	0x20000010
 8001968:	20000274 	.word	0x20000274

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000274 	.word	0x20000274

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000010 	.word	0x20000010

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	@ (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	@ (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff4c 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4e:	f7ff ff61 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	6978      	ldr	r0, [r7, #20]
 8001b5a:	f7ff ffb1 	bl	8001ac0 <NVIC_EncodePriority>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff80 	bl	8001a6c <__NVIC_SetPriority>
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff54 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b9e:	f7ff fee5 	bl	800196c <HAL_GetTick>
 8001ba2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d008      	beq.n	8001bc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2280      	movs	r2, #128	@ 0x80
 8001bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e052      	b.n	8001c68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0216 	bic.w	r2, r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001be0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d103      	bne.n	8001bf2 <HAL_DMA_Abort+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0208 	bic.w	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c12:	e013      	b.n	8001c3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c14:	f7ff feaa 	bl	800196c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d90c      	bls.n	8001c3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e015      	b.n	8001c68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1e4      	bne.n	8001c14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4e:	223f      	movs	r2, #63	@ 0x3f
 8001c50:	409a      	lsls	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d004      	beq.n	8001c8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2280      	movs	r2, #128	@ 0x80
 8001c88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00c      	b.n	8001ca8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2205      	movs	r2, #5
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	@ 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e159      	b.n	8001f84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f040 8148 	bne.w	8001f7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d005      	beq.n	8001d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d130      	bne.n	8001d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 0201 	and.w	r2, r3, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d017      	beq.n	8001da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d123      	bne.n	8001df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	69b9      	ldr	r1, [r7, #24]
 8001df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a2 	beq.w	8001f7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b57      	ldr	r3, [pc, #348]	@ (8001f9c <HAL_GPIO_Init+0x2e8>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	4a56      	ldr	r2, [pc, #344]	@ (8001f9c <HAL_GPIO_Init+0x2e8>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4a:	4b54      	ldr	r3, [pc, #336]	@ (8001f9c <HAL_GPIO_Init+0x2e8>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e56:	4a52      	ldr	r2, [pc, #328]	@ (8001fa0 <HAL_GPIO_Init+0x2ec>)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a49      	ldr	r2, [pc, #292]	@ (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_GPIO_Init+0x202>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a48      	ldr	r2, [pc, #288]	@ (8001fa8 <HAL_GPIO_Init+0x2f4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x1fe>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a47      	ldr	r2, [pc, #284]	@ (8001fac <HAL_GPIO_Init+0x2f8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x1fa>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a46      	ldr	r2, [pc, #280]	@ (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x1f6>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a45      	ldr	r2, [pc, #276]	@ (8001fb4 <HAL_GPIO_Init+0x300>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x1f2>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e008      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e004      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_GPIO_Init+0x204>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	f002 0203 	and.w	r2, r2, #3
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	4093      	lsls	r3, r2
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec8:	4935      	ldr	r1, [pc, #212]	@ (8001fa0 <HAL_GPIO_Init+0x2ec>)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed6:	4b38      	ldr	r3, [pc, #224]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efa:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f00:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f24:	4a24      	ldr	r2, [pc, #144]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2a:	4b23      	ldr	r3, [pc, #140]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f54:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f78:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	f67f aea2 	bls.w	8001cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3724      	adds	r7, #36	@ 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fcc:	787b      	ldrb	r3, [r7, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd8:	e003      	b.n	8001fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	041a      	lsls	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	619a      	str	r2, [r3, #24]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e267      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d075      	beq.n	80020fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800200e:	4b88      	ldr	r3, [pc, #544]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d00c      	beq.n	8002034 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4b85      	ldr	r3, [pc, #532]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002022:	2b08      	cmp	r3, #8
 8002024:	d112      	bne.n	800204c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4b82      	ldr	r3, [pc, #520]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800202e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002032:	d10b      	bne.n	800204c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	4b7e      	ldr	r3, [pc, #504]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d05b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x108>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d157      	bne.n	80020f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e242      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x74>
 8002056:	4b76      	ldr	r3, [pc, #472]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a75      	ldr	r2, [pc, #468]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xb0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x98>
 800206e:	4b70      	ldr	r3, [pc, #448]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a6f      	ldr	r2, [pc, #444]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b6d      	ldr	r3, [pc, #436]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6c      	ldr	r2, [pc, #432]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xb0>
 8002088:	4b69      	ldr	r3, [pc, #420]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a68      	ldr	r2, [pc, #416]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b66      	ldr	r3, [pc, #408]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a65      	ldr	r2, [pc, #404]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff fc60 	bl	800196c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7ff fc5c 	bl	800196c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	@ 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e207      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xc0>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fc4c 	bl	800196c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7ff fc48 	bl	800196c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	@ 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1f3      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b51      	ldr	r3, [pc, #324]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0xe8>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002106:	4b4a      	ldr	r3, [pc, #296]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211e:	4b44      	ldr	r3, [pc, #272]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b41      	ldr	r3, [pc, #260]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x152>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1c7      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b3b      	ldr	r3, [pc, #236]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4937      	ldr	r1, [pc, #220]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e03a      	b.n	80021ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <HAL_RCC_OscConfig+0x244>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7ff fc01 	bl	800196c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216e:	f7ff fbfd 	bl	800196c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1a8      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4925      	ldr	r1, [pc, #148]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b24      	ldr	r3, [pc, #144]	@ (8002234 <HAL_RCC_OscConfig+0x244>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7ff fbe0 	bl	800196c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7ff fbdc 	bl	800196c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e187      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d036      	beq.n	8002248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <HAL_RCC_OscConfig+0x248>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7ff fbc0 	bl	800196c <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f0:	f7ff fbbc 	bl	800196c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e167      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_RCC_OscConfig+0x240>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x200>
 800220e:	e01b      	b.n	8002248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_RCC_OscConfig+0x248>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fba9 	bl	800196c <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	e00e      	b.n	800223c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221e:	f7ff fba5 	bl	800196c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d907      	bls.n	800223c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e150      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
 8002230:	40023800 	.word	0x40023800
 8002234:	42470000 	.word	0x42470000
 8002238:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	4b88      	ldr	r3, [pc, #544]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 800223e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ea      	bne.n	800221e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 8097 	beq.w	8002384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b81      	ldr	r3, [pc, #516]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	4b7d      	ldr	r3, [pc, #500]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4a7c      	ldr	r2, [pc, #496]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	@ 0x40
 8002276:	4b7a      	ldr	r3, [pc, #488]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b77      	ldr	r3, [pc, #476]	@ (8002464 <HAL_RCC_OscConfig+0x474>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b74      	ldr	r3, [pc, #464]	@ (8002464 <HAL_RCC_OscConfig+0x474>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a73      	ldr	r2, [pc, #460]	@ (8002464 <HAL_RCC_OscConfig+0x474>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7ff fb65 	bl	800196c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7ff fb61 	bl	800196c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e10c      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002464 <HAL_RCC_OscConfig+0x474>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x2ea>
 80022cc:	4b64      	ldr	r3, [pc, #400]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d0:	4a63      	ldr	r2, [pc, #396]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d8:	e01c      	b.n	8002314 <HAL_RCC_OscConfig+0x324>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x30c>
 80022e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0x324>
 80022fc:	4b58      	ldr	r3, [pc, #352]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002300:	4a57      	ldr	r2, [pc, #348]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	6713      	str	r3, [r2, #112]	@ 0x70
 8002308:	4b55      	ldr	r3, [pc, #340]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	4a54      	ldr	r2, [pc, #336]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 800230e:	f023 0304 	bic.w	r3, r3, #4
 8002312:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d015      	beq.n	8002348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7ff fb26 	bl	800196c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002322:	e00a      	b.n	800233a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7ff fb22 	bl	800196c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e0cb      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	4b49      	ldr	r3, [pc, #292]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0ee      	beq.n	8002324 <HAL_RCC_OscConfig+0x334>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7ff fb10 	bl	800196c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7ff fb0c 	bl	800196c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0b5      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002366:	4b3e      	ldr	r3, [pc, #248]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1ee      	bne.n	8002350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	4a38      	ldr	r2, [pc, #224]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 800237e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002382:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a1 	beq.w	80024d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800238e:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b08      	cmp	r3, #8
 8002398:	d05c      	beq.n	8002454 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d141      	bne.n	8002426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b31      	ldr	r3, [pc, #196]	@ (8002468 <HAL_RCC_OscConfig+0x478>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fae0 	bl	800196c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff fadc 	bl	800196c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e087      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	4b27      	ldr	r3, [pc, #156]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	019b      	lsls	r3, r3, #6
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	3b01      	subs	r3, #1
 80023e8:	041b      	lsls	r3, r3, #16
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	491b      	ldr	r1, [pc, #108]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_RCC_OscConfig+0x478>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff fab5 	bl	800196c <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7ff fab1 	bl	800196c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e05c      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x416>
 8002424:	e054      	b.n	80024d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002426:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <HAL_RCC_OscConfig+0x478>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fa9e 	bl	800196c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7ff fa9a 	bl	800196c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e045      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_RCC_OscConfig+0x470>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x444>
 8002452:	e03d      	b.n	80024d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d107      	bne.n	800246c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e038      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
 8002460:	40023800 	.word	0x40023800
 8002464:	40007000 	.word	0x40007000
 8002468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800246c:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_RCC_OscConfig+0x4ec>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d028      	beq.n	80024cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d121      	bne.n	80024cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d11a      	bne.n	80024cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d111      	bne.n	80024cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	3b01      	subs	r3, #1
 80024b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0cc      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b68      	ldr	r3, [pc, #416]	@ (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d90c      	bls.n	800251c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b65      	ldr	r3, [pc, #404]	@ (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b63      	ldr	r3, [pc, #396]	@ (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b8      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002534:	4b59      	ldr	r3, [pc, #356]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a58      	ldr	r2, [pc, #352]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800253e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800254c:	4b53      	ldr	r3, [pc, #332]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a52      	ldr	r2, [pc, #328]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b50      	ldr	r3, [pc, #320]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	494d      	ldr	r1, [pc, #308]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d044      	beq.n	8002600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b47      	ldr	r3, [pc, #284]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d119      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e07f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d003      	beq.n	800259e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259a:	2b03      	cmp	r3, #3
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b3f      	ldr	r3, [pc, #252]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	4b3b      	ldr	r3, [pc, #236]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e067      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4b37      	ldr	r3, [pc, #220]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f023 0203 	bic.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4934      	ldr	r1, [pc, #208]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d0:	f7ff f9cc 	bl	800196c <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7ff f9c8 	bl	800196c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e04f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b2b      	ldr	r3, [pc, #172]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 020c 	and.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1eb      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b25      	ldr	r3, [pc, #148]	@ (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d20c      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b22      	ldr	r3, [pc, #136]	@ (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e032      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b19      	ldr	r3, [pc, #100]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4916      	ldr	r1, [pc, #88]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002652:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	490e      	ldr	r1, [pc, #56]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002666:	f000 f821 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	490a      	ldr	r1, [pc, #40]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002682:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe ff96 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023c00 	.word	0x40023c00
 800269c:	40023800 	.word	0x40023800
 80026a0:	0800885c 	.word	0x0800885c
 80026a4:	20000008 	.word	0x20000008
 80026a8:	2000000c 	.word	0x2000000c

080026ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b094      	sub	sp, #80	@ 0x50
 80026b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c4:	4b79      	ldr	r3, [pc, #484]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x200>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d00d      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x40>
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	f200 80e1 	bhi.w	8002898 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x34>
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026de:	e0db      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b73      	ldr	r3, [pc, #460]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026e4:	e0db      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026e6:	4b73      	ldr	r3, [pc, #460]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80026e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026ea:	e0d8      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ec:	4b6f      	ldr	r3, [pc, #444]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x200>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f6:	4b6d      	ldr	r3, [pc, #436]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x200>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d063      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002702:	4b6a      	ldr	r3, [pc, #424]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	099b      	lsrs	r3, r3, #6
 8002708:	2200      	movs	r2, #0
 800270a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800270c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002714:	633b      	str	r3, [r7, #48]	@ 0x30
 8002716:	2300      	movs	r3, #0
 8002718:	637b      	str	r3, [r7, #52]	@ 0x34
 800271a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800271e:	4622      	mov	r2, r4
 8002720:	462b      	mov	r3, r5
 8002722:	f04f 0000 	mov.w	r0, #0
 8002726:	f04f 0100 	mov.w	r1, #0
 800272a:	0159      	lsls	r1, r3, #5
 800272c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002730:	0150      	lsls	r0, r2, #5
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4621      	mov	r1, r4
 8002738:	1a51      	subs	r1, r2, r1
 800273a:	6139      	str	r1, [r7, #16]
 800273c:	4629      	mov	r1, r5
 800273e:	eb63 0301 	sbc.w	r3, r3, r1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002750:	4659      	mov	r1, fp
 8002752:	018b      	lsls	r3, r1, #6
 8002754:	4651      	mov	r1, sl
 8002756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800275a:	4651      	mov	r1, sl
 800275c:	018a      	lsls	r2, r1, #6
 800275e:	4651      	mov	r1, sl
 8002760:	ebb2 0801 	subs.w	r8, r2, r1
 8002764:	4659      	mov	r1, fp
 8002766:	eb63 0901 	sbc.w	r9, r3, r1
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800277a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800277e:	4690      	mov	r8, r2
 8002780:	4699      	mov	r9, r3
 8002782:	4623      	mov	r3, r4
 8002784:	eb18 0303 	adds.w	r3, r8, r3
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	462b      	mov	r3, r5
 800278c:	eb49 0303 	adc.w	r3, r9, r3
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800279e:	4629      	mov	r1, r5
 80027a0:	024b      	lsls	r3, r1, #9
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027a8:	4621      	mov	r1, r4
 80027aa:	024a      	lsls	r2, r1, #9
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b2:	2200      	movs	r2, #0
 80027b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027bc:	f7fd fd68 	bl	8000290 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027c8:	e058      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ca:	4b38      	ldr	r3, [pc, #224]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x200>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	099b      	lsrs	r3, r3, #6
 80027d0:	2200      	movs	r2, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	4611      	mov	r1, r2
 80027d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027da:	623b      	str	r3, [r7, #32]
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027e4:	4642      	mov	r2, r8
 80027e6:	464b      	mov	r3, r9
 80027e8:	f04f 0000 	mov.w	r0, #0
 80027ec:	f04f 0100 	mov.w	r1, #0
 80027f0:	0159      	lsls	r1, r3, #5
 80027f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f6:	0150      	lsls	r0, r2, #5
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4641      	mov	r1, r8
 80027fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002802:	4649      	mov	r1, r9
 8002804:	eb63 0b01 	sbc.w	fp, r3, r1
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002814:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002818:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800281c:	ebb2 040a 	subs.w	r4, r2, sl
 8002820:	eb63 050b 	sbc.w	r5, r3, fp
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	00eb      	lsls	r3, r5, #3
 800282e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002832:	00e2      	lsls	r2, r4, #3
 8002834:	4614      	mov	r4, r2
 8002836:	461d      	mov	r5, r3
 8002838:	4643      	mov	r3, r8
 800283a:	18e3      	adds	r3, r4, r3
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	464b      	mov	r3, r9
 8002840:	eb45 0303 	adc.w	r3, r5, r3
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002852:	4629      	mov	r1, r5
 8002854:	028b      	lsls	r3, r1, #10
 8002856:	4621      	mov	r1, r4
 8002858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800285c:	4621      	mov	r1, r4
 800285e:	028a      	lsls	r2, r1, #10
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002866:	2200      	movs	r2, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	61fa      	str	r2, [r7, #28]
 800286c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002870:	f7fd fd0e 	bl	8000290 <__aeabi_uldivmod>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4613      	mov	r3, r2
 800287a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x200>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	3301      	adds	r3, #1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800288c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800288e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002896:	e002      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800289a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800289c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3750      	adds	r7, #80	@ 0x50
 80028a4:	46bd      	mov	sp, r7
 80028a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	00f42400 	.word	0x00f42400
 80028b4:	007a1200 	.word	0x007a1200

080028b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028bc:	4b03      	ldr	r3, [pc, #12]	@ (80028cc <HAL_RCC_GetHCLKFreq+0x14>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000008 	.word	0x20000008

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d4:	f7ff fff0 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	0a9b      	lsrs	r3, r3, #10
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	@ (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40023800 	.word	0x40023800
 80028f4:	0800886c 	.word	0x0800886c

080028f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028fc:	f7ff ffdc 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0b5b      	lsrs	r3, r3, #13
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	@ (800291c <HAL_RCC_GetPCLK2Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	0800886c 	.word	0x0800886c

08002920 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	220f      	movs	r2, #15
 800292e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <HAL_RCC_GetClockConfig+0x5c>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0203 	and.w	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800293c:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <HAL_RCC_GetClockConfig+0x5c>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <HAL_RCC_GetClockConfig+0x5c>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <HAL_RCC_GetClockConfig+0x5c>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002962:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <HAL_RCC_GetClockConfig+0x60>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0207 	and.w	r2, r3, #7
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	601a      	str	r2, [r3, #0]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	40023c00 	.word	0x40023c00

08002984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e041      	b.n	8002a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fc70 	bl	8001290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f000 fc3c 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d001      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e044      	b.n	8002ac6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d018      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x6c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a66:	d013      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x6c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00e      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x6c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <HAL_TIM_Base_Start_IT+0xb8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d009      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x6c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x6c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a16      	ldr	r2, [pc, #88]	@ (8002ae4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d010      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	e007      	b.n	8002ac4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40014000 	.word	0x40014000

08002ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e041      	b.n	8002b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f839 	bl	8002b86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 fb8a 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_TIM_PWM_Start+0x24>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e022      	b.n	8002c06 <HAL_TIM_PWM_Start+0x6a>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d109      	bne.n	8002bda <HAL_TIM_PWM_Start+0x3e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	e015      	b.n	8002c06 <HAL_TIM_PWM_Start+0x6a>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d109      	bne.n	8002bf4 <HAL_TIM_PWM_Start+0x58>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	e008      	b.n	8002c06 <HAL_TIM_PWM_Start+0x6a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e068      	b.n	8002ce0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0x82>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c1c:	e013      	b.n	8002c46 <HAL_TIM_PWM_Start+0xaa>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x92>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c2c:	e00b      	b.n	8002c46 <HAL_TIM_PWM_Start+0xaa>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d104      	bne.n	8002c3e <HAL_TIM_PWM_Start+0xa2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c3c:	e003      	b.n	8002c46 <HAL_TIM_PWM_Start+0xaa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fda2 	bl	8003798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a23      	ldr	r2, [pc, #140]	@ (8002ce8 <HAL_TIM_PWM_Start+0x14c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d107      	bne.n	8002c6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce8 <HAL_TIM_PWM_Start+0x14c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d018      	beq.n	8002caa <HAL_TIM_PWM_Start+0x10e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c80:	d013      	beq.n	8002caa <HAL_TIM_PWM_Start+0x10e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a19      	ldr	r2, [pc, #100]	@ (8002cec <HAL_TIM_PWM_Start+0x150>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00e      	beq.n	8002caa <HAL_TIM_PWM_Start+0x10e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a17      	ldr	r2, [pc, #92]	@ (8002cf0 <HAL_TIM_PWM_Start+0x154>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d009      	beq.n	8002caa <HAL_TIM_PWM_Start+0x10e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <HAL_TIM_PWM_Start+0x158>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_TIM_PWM_Start+0x10e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a14      	ldr	r2, [pc, #80]	@ (8002cf8 <HAL_TIM_PWM_Start+0x15c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d111      	bne.n	8002cce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b06      	cmp	r3, #6
 8002cba:	d010      	beq.n	8002cde <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ccc:	e007      	b.n	8002cde <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40000800 	.word	0x40000800
 8002cf4:	40000c00 	.word	0x40000c00
 8002cf8:	40014000 	.word	0x40014000

08002cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d020      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01b      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0202 	mvn.w	r2, #2
 8002d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa5b 	bl	8003202 <HAL_TIM_IC_CaptureCallback>
 8002d4c:	e005      	b.n	8002d5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa4d 	bl	80031ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fa5e 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d020      	beq.n	8002dac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01b      	beq.n	8002dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0204 	mvn.w	r2, #4
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa35 	bl	8003202 <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa27 	bl	80031ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fa38 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d020      	beq.n	8002df8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01b      	beq.n	8002df8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0208 	mvn.w	r2, #8
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fa0f 	bl	8003202 <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa01 	bl	80031ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fa12 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d020      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0210 	mvn.w	r2, #16
 8002e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f9e9 	bl	8003202 <HAL_TIM_IC_CaptureCallback>
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9db 	bl	80031ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f9ec 	bl	8003216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0201 	mvn.w	r2, #1
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe f9d0 	bl	8001208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fd24 	bl	80038d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f9bd 	bl	800322a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00c      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0220 	mvn.w	r2, #32
 8002ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fcf6 	bl	80038c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0ae      	b.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	f200 809f 	bhi.w	8003048 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08003049 	.word	0x08003049
 8002f18:	08003049 	.word	0x08003049
 8002f1c:	08003049 	.word	0x08003049
 8002f20:	08002f85 	.word	0x08002f85
 8002f24:	08003049 	.word	0x08003049
 8002f28:	08003049 	.word	0x08003049
 8002f2c:	08003049 	.word	0x08003049
 8002f30:	08002fc7 	.word	0x08002fc7
 8002f34:	08003049 	.word	0x08003049
 8002f38:	08003049 	.word	0x08003049
 8002f3c:	08003049 	.word	0x08003049
 8002f40:	08003007 	.word	0x08003007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f9fe 	bl	800334c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0204 	bic.w	r2, r2, #4
 8002f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6999      	ldr	r1, [r3, #24]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	619a      	str	r2, [r3, #24]
      break;
 8002f82:	e064      	b.n	800304e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fa44 	bl	8003418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6999      	ldr	r1, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	021a      	lsls	r2, r3, #8
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	619a      	str	r2, [r3, #24]
      break;
 8002fc4:	e043      	b.n	800304e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fa8f 	bl	80034f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0208 	orr.w	r2, r2, #8
 8002fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0204 	bic.w	r2, r2, #4
 8002ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69d9      	ldr	r1, [r3, #28]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	61da      	str	r2, [r3, #28]
      break;
 8003004:	e023      	b.n	800304e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fad9 	bl	80035c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69d9      	ldr	r1, [r3, #28]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	021a      	lsls	r2, r3, #8
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	61da      	str	r2, [r3, #28]
      break;
 8003046:	e002      	b.n	800304e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	75fb      	strb	r3, [r7, #23]
      break;
 800304c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003056:	7dfb      	ldrb	r3, [r7, #23]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_TIM_ConfigClockSource+0x1c>
 8003078:	2302      	movs	r3, #2
 800307a:	e0b4      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x186>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800309a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b4:	d03e      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0xd4>
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ba:	f200 8087 	bhi.w	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c2:	f000 8086 	beq.w	80031d2 <HAL_TIM_ConfigClockSource+0x172>
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ca:	d87f      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b70      	cmp	r3, #112	@ 0x70
 80030ce:	d01a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xa6>
 80030d0:	2b70      	cmp	r3, #112	@ 0x70
 80030d2:	d87b      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b60      	cmp	r3, #96	@ 0x60
 80030d6:	d050      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x11a>
 80030d8:	2b60      	cmp	r3, #96	@ 0x60
 80030da:	d877      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b50      	cmp	r3, #80	@ 0x50
 80030de:	d03c      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xfa>
 80030e0:	2b50      	cmp	r3, #80	@ 0x50
 80030e2:	d873      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b40      	cmp	r3, #64	@ 0x40
 80030e6:	d058      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x13a>
 80030e8:	2b40      	cmp	r3, #64	@ 0x40
 80030ea:	d86f      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b30      	cmp	r3, #48	@ 0x30
 80030ee:	d064      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x15a>
 80030f0:	2b30      	cmp	r3, #48	@ 0x30
 80030f2:	d86b      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d060      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x15a>
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d867      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x15a>
 8003100:	2b10      	cmp	r3, #16
 8003102:	d05a      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x15a>
 8003104:	e062      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003116:	f000 fb1f 	bl	8003758 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	609a      	str	r2, [r3, #8]
      break;
 8003132:	e04f      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003144:	f000 fb08 	bl	8003758 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003156:	609a      	str	r2, [r3, #8]
      break;
 8003158:	e03c      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003166:	461a      	mov	r2, r3
 8003168:	f000 fa7c 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2150      	movs	r1, #80	@ 0x50
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fad5 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003178:	e02c      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003186:	461a      	mov	r2, r3
 8003188:	f000 fa9b 	bl	80036c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2160      	movs	r1, #96	@ 0x60
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fac5 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003198:	e01c      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a6:	461a      	mov	r2, r3
 80031a8:	f000 fa5c 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2140      	movs	r1, #64	@ 0x40
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fab5 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80031b8:	e00c      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	4610      	mov	r0, r2
 80031c6:	f000 faac 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80031ca:	e003      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      break;
 80031d0:	e000      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a37      	ldr	r2, [pc, #220]	@ (8003330 <TIM_Base_SetConfig+0xf0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00f      	beq.n	8003278 <TIM_Base_SetConfig+0x38>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325e:	d00b      	beq.n	8003278 <TIM_Base_SetConfig+0x38>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a34      	ldr	r2, [pc, #208]	@ (8003334 <TIM_Base_SetConfig+0xf4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <TIM_Base_SetConfig+0x38>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a33      	ldr	r2, [pc, #204]	@ (8003338 <TIM_Base_SetConfig+0xf8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0x38>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a32      	ldr	r2, [pc, #200]	@ (800333c <TIM_Base_SetConfig+0xfc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d108      	bne.n	800328a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a28      	ldr	r2, [pc, #160]	@ (8003330 <TIM_Base_SetConfig+0xf0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01b      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003298:	d017      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a25      	ldr	r2, [pc, #148]	@ (8003334 <TIM_Base_SetConfig+0xf4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a24      	ldr	r2, [pc, #144]	@ (8003338 <TIM_Base_SetConfig+0xf8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00f      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a23      	ldr	r2, [pc, #140]	@ (800333c <TIM_Base_SetConfig+0xfc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a22      	ldr	r2, [pc, #136]	@ (8003340 <TIM_Base_SetConfig+0x100>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a21      	ldr	r2, [pc, #132]	@ (8003344 <TIM_Base_SetConfig+0x104>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a20      	ldr	r2, [pc, #128]	@ (8003348 <TIM_Base_SetConfig+0x108>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003330 <TIM_Base_SetConfig+0xf0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d103      	bne.n	800330a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800
 800333c:	40000c00 	.word	0x40000c00
 8003340:	40014000 	.word	0x40014000
 8003344:	40014400 	.word	0x40014400
 8003348:	40014800 	.word	0x40014800

0800334c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 0201 	bic.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0303 	bic.w	r3, r3, #3
 8003382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f023 0302 	bic.w	r3, r3, #2
 8003394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003414 <TIM_OC1_SetConfig+0xc8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d10c      	bne.n	80033c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0308 	bic.w	r3, r3, #8
 80033ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a13      	ldr	r2, [pc, #76]	@ (8003414 <TIM_OC1_SetConfig+0xc8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d111      	bne.n	80033ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	621a      	str	r2, [r3, #32]
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40010000 	.word	0x40010000

08003418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f023 0210 	bic.w	r2, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800344e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0320 	bic.w	r3, r3, #32
 8003462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a1e      	ldr	r2, [pc, #120]	@ (80034ec <TIM_OC2_SetConfig+0xd4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d10d      	bne.n	8003494 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800347e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a15      	ldr	r2, [pc, #84]	@ (80034ec <TIM_OC2_SetConfig+0xd4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d113      	bne.n	80034c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40010000 	.word	0x40010000

080034f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <TIM_OC3_SetConfig+0xd0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10d      	bne.n	800356a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <TIM_OC3_SetConfig+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d113      	bne.n	800359a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	621a      	str	r2, [r3, #32]
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40010000 	.word	0x40010000

080035c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800360e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a10      	ldr	r2, [pc, #64]	@ (8003660 <TIM_OC4_SetConfig+0x9c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d109      	bne.n	8003638 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800362a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000

08003664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800368e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 030a 	bic.w	r3, r3, #10
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 0210 	bic.w	r2, r3, #16
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	031b      	lsls	r3, r3, #12
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	f043 0307 	orr.w	r3, r3, #7
 8003744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	431a      	orrs	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	401a      	ands	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e050      	b.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1c      	ldr	r2, [pc, #112]	@ (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d018      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003848:	d013      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a16      	ldr	r2, [pc, #88]	@ (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a15      	ldr	r2, [pc, #84]	@ (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a13      	ldr	r2, [pc, #76]	@ (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10c      	bne.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4313      	orrs	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40010000 	.word	0x40010000
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40000800 	.word	0x40000800
 80038b8:	40000c00 	.word	0x40000c00
 80038bc:	40014000 	.word	0x40014000

080038c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e042      	b.n	8003980 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fdce 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	@ 0x24
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800392a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fdd3 	bl	80044d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d175      	bne.n	8003a94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_UART_Transmit+0x2c>
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e06e      	b.n	8003a96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2221      	movs	r2, #33	@ 0x21
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c6:	f7fd ffd1 	bl	800196c <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	88fa      	ldrh	r2, [r7, #6]
 80039d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e0:	d108      	bne.n	80039f4 <HAL_UART_Transmit+0x6c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	e003      	b.n	80039fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039fc:	e02e      	b.n	8003a5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2180      	movs	r1, #128	@ 0x80
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fb37 	bl	800407c <UART_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e03a      	b.n	8003a96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10b      	bne.n	8003a3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	3302      	adds	r3, #2
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e007      	b.n	8003a4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1cb      	bne.n	80039fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2140      	movs	r1, #64	@ 0x40
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fb03 	bl	800407c <UART_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e006      	b.n	8003a96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d112      	bne.n	8003ade <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_UART_Receive_IT+0x26>
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e00b      	b.n	8003ae0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fb2a 	bl	800412e <UART_Start_Receive_IT>
 8003ada:	4603      	mov	r3, r0
 8003adc:	e000      	b.n	8003ae0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
  }
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b0ba      	sub	sp, #232	@ 0xe8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fc07 	bl	800435a <UART_Receive_IT>
      return;
 8003b4c:	e273      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80de 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
 8003b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80d1 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
 8003b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
 8003ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
 8003bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	f043 0208 	orr.w	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 820a 	beq.w	800402c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
 8003c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fb92 	bl	800435a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <HAL_UART_IRQHandler+0x17a>
 8003c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d04f      	beq.n	8003d02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa9d 	bl	80041a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c72:	2b40      	cmp	r3, #64	@ 0x40
 8003c74:	d141      	bne.n	8003cfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1d9      	bne.n	8003c76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d013      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	4a8a      	ldr	r2, [pc, #552]	@ (8003ef8 <HAL_UART_IRQHandler+0x410>)
 8003cd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd ffca 	bl	8001c70 <HAL_DMA_Abort_IT>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cec:	4610      	mov	r0, r2
 8003cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	e00e      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f9ac 	bl	8004050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf8:	e00a      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f9a8 	bl	8004050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	e006      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f9a4 	bl	8004050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d0e:	e18d      	b.n	800402c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	bf00      	nop
    return;
 8003d12:	e18b      	b.n	800402c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 8167 	bne.w	8003fec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8160 	beq.w	8003fec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8159 	beq.w	8003fec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	f040 80ce 	bne.w	8003efc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a9 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	f080 80a2 	bcs.w	8003ec8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d96:	f000 8088 	beq.w	8003eaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1d9      	bne.n	8003d9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3314      	adds	r3, #20
 8003dec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003df6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e1      	bne.n	8003de6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e7a:	f023 0310 	bic.w	r3, r3, #16
 8003e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e3      	bne.n	8003e68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fd fe73 	bl	8001b90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8cf 	bl	8004064 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ec6:	e0b3      	b.n	8004030 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ecc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	f040 80ad 	bne.w	8004030 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee0:	f040 80a6 	bne.w	8004030 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8b7 	bl	8004064 <HAL_UARTEx_RxEventCallback>
      return;
 8003ef6:	e09b      	b.n	8004030 <HAL_UART_IRQHandler+0x548>
 8003ef8:	08004269 	.word	0x08004269
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 808e 	beq.w	8004034 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8089 	beq.w	8004034 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f46:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e3      	bne.n	8003f22 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3314      	adds	r3, #20
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	623b      	str	r3, [r7, #32]
   return(result);
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3314      	adds	r3, #20
 8003f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e3      	bne.n	8003f5a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0310 	bic.w	r3, r3, #16
 8003fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fc4:	61fa      	str	r2, [r7, #28]
 8003fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	69b9      	ldr	r1, [r7, #24]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e3      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f83d 	bl	8004064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fea:	e023      	b.n	8004034 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <HAL_UART_IRQHandler+0x524>
 8003ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f940 	bl	800428a <UART_Transmit_IT>
    return;
 800400a:	e014      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800400c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <HAL_UART_IRQHandler+0x54e>
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f980 	bl	800432a <UART_EndTransmit_IT>
    return;
 800402a:	e004      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
    return;
 800402c:	bf00      	nop
 800402e:	e002      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
      return;
 8004030:	bf00      	nop
 8004032:	e000      	b.n	8004036 <HAL_UART_IRQHandler+0x54e>
      return;
 8004034:	bf00      	nop
  }
}
 8004036:	37e8      	adds	r7, #232	@ 0xe8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408c:	e03b      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d037      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fd fc69 	bl	800196c <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <UART_WaitOnFlagUntilTimeout+0x30>
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e03a      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d023      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b80      	cmp	r3, #128	@ 0x80
 80040c2:	d020      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d01d      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d116      	bne.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f857 	bl	80041a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2208      	movs	r2, #8
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e00f      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d0b4      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	4613      	mov	r3, r2
 800413a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	88fa      	ldrh	r2, [r7, #6]
 8004146:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2222      	movs	r2, #34	@ 0x22
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004172:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0220 	orr.w	r2, r2, #32
 8004192:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b095      	sub	sp, #84	@ 0x54
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80041cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e5      	bne.n	80041aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3314      	adds	r3, #20
 80041e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3314      	adds	r3, #20
 80041fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e5      	bne.n	80041de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	2b01      	cmp	r3, #1
 8004218:	d119      	bne.n	800424e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	60bb      	str	r3, [r7, #8]
   return(result);
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f023 0310 	bic.w	r3, r3, #16
 8004230:	647b      	str	r3, [r7, #68]	@ 0x44
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800423a:	61ba      	str	r2, [r7, #24]
 800423c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6979      	ldr	r1, [r7, #20]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	613b      	str	r3, [r7, #16]
   return(result);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800425c:	bf00      	nop
 800425e:	3754      	adds	r7, #84	@ 0x54
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff fee7 	bl	8004050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b21      	cmp	r3, #33	@ 0x21
 800429c:	d13e      	bne.n	800431c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a6:	d114      	bne.n	80042d2 <UART_Transmit_IT+0x48>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d110      	bne.n	80042d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	1c9a      	adds	r2, r3, #2
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	621a      	str	r2, [r3, #32]
 80042d0:	e008      	b.n	80042e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	1c59      	adds	r1, r3, #1
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6211      	str	r1, [r2, #32]
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4619      	mov	r1, r3
 80042f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10f      	bne.n	8004318 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004306:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004316:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004340:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff fe76 	bl	800403c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b08c      	sub	sp, #48	@ 0x30
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b22      	cmp	r3, #34	@ 0x22
 8004374:	f040 80aa 	bne.w	80044cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004380:	d115      	bne.n	80043ae <UART_Receive_IT+0x54>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d111      	bne.n	80043ae <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	b29b      	uxth	r3, r3
 8004398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439c:	b29a      	uxth	r2, r3
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a6:	1c9a      	adds	r2, r3, #2
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80043ac:	e024      	b.n	80043f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043bc:	d007      	beq.n	80043ce <UART_Receive_IT+0x74>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <UART_Receive_IT+0x82>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	e008      	b.n	80043ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29b      	uxth	r3, r3
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4619      	mov	r1, r3
 8004406:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004408:	2b00      	cmp	r3, #0
 800440a:	d15d      	bne.n	80044c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0220 	bic.w	r2, r2, #32
 800441a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800442a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	2b01      	cmp	r3, #1
 8004450:	d135      	bne.n	80044be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	330c      	adds	r3, #12
 800445e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	613b      	str	r3, [r7, #16]
   return(result);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f023 0310 	bic.w	r3, r3, #16
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004478:	623a      	str	r2, [r7, #32]
 800447a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	69f9      	ldr	r1, [r7, #28]
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	61bb      	str	r3, [r7, #24]
   return(result);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b10      	cmp	r3, #16
 8004498:	d10a      	bne.n	80044b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fdd4 	bl	8004064 <HAL_UARTEx_RxEventCallback>
 80044bc:	e002      	b.n	80044c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc fd4a 	bl	8000f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e002      	b.n	80044ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3730      	adds	r7, #48	@ 0x30
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044dc:	b0c0      	sub	sp, #256	@ 0x100
 80044de:	af00      	add	r7, sp, #0
 80044e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	68d9      	ldr	r1, [r3, #12]
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	ea40 0301 	orr.w	r3, r0, r1
 8004500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	431a      	orrs	r2, r3
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	431a      	orrs	r2, r3
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004530:	f021 010c 	bic.w	r1, r1, #12
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800453e:	430b      	orrs	r3, r1
 8004540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004552:	6999      	ldr	r1, [r3, #24]
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	ea40 0301 	orr.w	r3, r0, r1
 800455e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b8f      	ldr	r3, [pc, #572]	@ (80047a4 <UART_SetConfig+0x2cc>)
 8004568:	429a      	cmp	r2, r3
 800456a:	d005      	beq.n	8004578 <UART_SetConfig+0xa0>
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b8d      	ldr	r3, [pc, #564]	@ (80047a8 <UART_SetConfig+0x2d0>)
 8004574:	429a      	cmp	r2, r3
 8004576:	d104      	bne.n	8004582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fe f9be 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 800457c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004580:	e003      	b.n	800458a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004582:	f7fe f9a5 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8004586:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004594:	f040 810c 	bne.w	80047b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800459c:	2200      	movs	r2, #0
 800459e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045aa:	4622      	mov	r2, r4
 80045ac:	462b      	mov	r3, r5
 80045ae:	1891      	adds	r1, r2, r2
 80045b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045b2:	415b      	adcs	r3, r3
 80045b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045ba:	4621      	mov	r1, r4
 80045bc:	eb12 0801 	adds.w	r8, r2, r1
 80045c0:	4629      	mov	r1, r5
 80045c2:	eb43 0901 	adc.w	r9, r3, r1
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045da:	4690      	mov	r8, r2
 80045dc:	4699      	mov	r9, r3
 80045de:	4623      	mov	r3, r4
 80045e0:	eb18 0303 	adds.w	r3, r8, r3
 80045e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045e8:	462b      	mov	r3, r5
 80045ea:	eb49 0303 	adc.w	r3, r9, r3
 80045ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004606:	460b      	mov	r3, r1
 8004608:	18db      	adds	r3, r3, r3
 800460a:	653b      	str	r3, [r7, #80]	@ 0x50
 800460c:	4613      	mov	r3, r2
 800460e:	eb42 0303 	adc.w	r3, r2, r3
 8004612:	657b      	str	r3, [r7, #84]	@ 0x54
 8004614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800461c:	f7fb fe38 	bl	8000290 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4b61      	ldr	r3, [pc, #388]	@ (80047ac <UART_SetConfig+0x2d4>)
 8004626:	fba3 2302 	umull	r2, r3, r3, r2
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	011c      	lsls	r4, r3, #4
 800462e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004632:	2200      	movs	r2, #0
 8004634:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004638:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800463c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	1891      	adds	r1, r2, r2
 8004646:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004648:	415b      	adcs	r3, r3
 800464a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800464c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004650:	4641      	mov	r1, r8
 8004652:	eb12 0a01 	adds.w	sl, r2, r1
 8004656:	4649      	mov	r1, r9
 8004658:	eb43 0b01 	adc.w	fp, r3, r1
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800466c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004670:	4692      	mov	sl, r2
 8004672:	469b      	mov	fp, r3
 8004674:	4643      	mov	r3, r8
 8004676:	eb1a 0303 	adds.w	r3, sl, r3
 800467a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800467e:	464b      	mov	r3, r9
 8004680:	eb4b 0303 	adc.w	r3, fp, r3
 8004684:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004694:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800469c:	460b      	mov	r3, r1
 800469e:	18db      	adds	r3, r3, r3
 80046a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046a2:	4613      	mov	r3, r2
 80046a4:	eb42 0303 	adc.w	r3, r2, r3
 80046a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046b2:	f7fb fded 	bl	8000290 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	4b3b      	ldr	r3, [pc, #236]	@ (80047ac <UART_SetConfig+0x2d4>)
 80046be:	fba3 2301 	umull	r2, r3, r3, r1
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2264      	movs	r2, #100	@ 0x64
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	1acb      	subs	r3, r1, r3
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046d2:	4b36      	ldr	r3, [pc, #216]	@ (80047ac <UART_SetConfig+0x2d4>)
 80046d4:	fba3 2302 	umull	r2, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046e0:	441c      	add	r4, r3
 80046e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046fc:	415b      	adcs	r3, r3
 80046fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004704:	4641      	mov	r1, r8
 8004706:	1851      	adds	r1, r2, r1
 8004708:	6339      	str	r1, [r7, #48]	@ 0x30
 800470a:	4649      	mov	r1, r9
 800470c:	414b      	adcs	r3, r1
 800470e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800471c:	4659      	mov	r1, fp
 800471e:	00cb      	lsls	r3, r1, #3
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004726:	4651      	mov	r1, sl
 8004728:	00ca      	lsls	r2, r1, #3
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	4603      	mov	r3, r0
 8004730:	4642      	mov	r2, r8
 8004732:	189b      	adds	r3, r3, r2
 8004734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004738:	464b      	mov	r3, r9
 800473a:	460a      	mov	r2, r1
 800473c:	eb42 0303 	adc.w	r3, r2, r3
 8004740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004750:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004758:	460b      	mov	r3, r1
 800475a:	18db      	adds	r3, r3, r3
 800475c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800475e:	4613      	mov	r3, r2
 8004760:	eb42 0303 	adc.w	r3, r2, r3
 8004764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800476a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800476e:	f7fb fd8f 	bl	8000290 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4b0d      	ldr	r3, [pc, #52]	@ (80047ac <UART_SetConfig+0x2d4>)
 8004778:	fba3 1302 	umull	r1, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	2164      	movs	r1, #100	@ 0x64
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	3332      	adds	r3, #50	@ 0x32
 800478a:	4a08      	ldr	r2, [pc, #32]	@ (80047ac <UART_SetConfig+0x2d4>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	f003 0207 	and.w	r2, r3, #7
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4422      	add	r2, r4
 800479e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047a0:	e106      	b.n	80049b0 <UART_SetConfig+0x4d8>
 80047a2:	bf00      	nop
 80047a4:	40011000 	.word	0x40011000
 80047a8:	40011400 	.word	0x40011400
 80047ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047c2:	4642      	mov	r2, r8
 80047c4:	464b      	mov	r3, r9
 80047c6:	1891      	adds	r1, r2, r2
 80047c8:	6239      	str	r1, [r7, #32]
 80047ca:	415b      	adcs	r3, r3
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047d2:	4641      	mov	r1, r8
 80047d4:	1854      	adds	r4, r2, r1
 80047d6:	4649      	mov	r1, r9
 80047d8:	eb43 0501 	adc.w	r5, r3, r1
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	00eb      	lsls	r3, r5, #3
 80047e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ea:	00e2      	lsls	r2, r4, #3
 80047ec:	4614      	mov	r4, r2
 80047ee:	461d      	mov	r5, r3
 80047f0:	4643      	mov	r3, r8
 80047f2:	18e3      	adds	r3, r4, r3
 80047f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047f8:	464b      	mov	r3, r9
 80047fa:	eb45 0303 	adc.w	r3, r5, r3
 80047fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800480e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800481e:	4629      	mov	r1, r5
 8004820:	008b      	lsls	r3, r1, #2
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004828:	4621      	mov	r1, r4
 800482a:	008a      	lsls	r2, r1, #2
 800482c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004830:	f7fb fd2e 	bl	8000290 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4b60      	ldr	r3, [pc, #384]	@ (80049bc <UART_SetConfig+0x4e4>)
 800483a:	fba3 2302 	umull	r2, r3, r3, r2
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	011c      	lsls	r4, r3, #4
 8004842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004846:	2200      	movs	r2, #0
 8004848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800484c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004854:	4642      	mov	r2, r8
 8004856:	464b      	mov	r3, r9
 8004858:	1891      	adds	r1, r2, r2
 800485a:	61b9      	str	r1, [r7, #24]
 800485c:	415b      	adcs	r3, r3
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004864:	4641      	mov	r1, r8
 8004866:	1851      	adds	r1, r2, r1
 8004868:	6139      	str	r1, [r7, #16]
 800486a:	4649      	mov	r1, r9
 800486c:	414b      	adcs	r3, r1
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800487c:	4659      	mov	r1, fp
 800487e:	00cb      	lsls	r3, r1, #3
 8004880:	4651      	mov	r1, sl
 8004882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004886:	4651      	mov	r1, sl
 8004888:	00ca      	lsls	r2, r1, #3
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	4603      	mov	r3, r0
 8004890:	4642      	mov	r2, r8
 8004892:	189b      	adds	r3, r3, r2
 8004894:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004898:	464b      	mov	r3, r9
 800489a:	460a      	mov	r2, r1
 800489c:	eb42 0303 	adc.w	r3, r2, r3
 80048a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048bc:	4649      	mov	r1, r9
 80048be:	008b      	lsls	r3, r1, #2
 80048c0:	4641      	mov	r1, r8
 80048c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c6:	4641      	mov	r1, r8
 80048c8:	008a      	lsls	r2, r1, #2
 80048ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048ce:	f7fb fcdf 	bl	8000290 <__aeabi_uldivmod>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	4b38      	ldr	r3, [pc, #224]	@ (80049bc <UART_SetConfig+0x4e4>)
 80048da:	fba3 2301 	umull	r2, r3, r3, r1
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	2264      	movs	r2, #100	@ 0x64
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	1acb      	subs	r3, r1, r3
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	3332      	adds	r3, #50	@ 0x32
 80048ec:	4a33      	ldr	r2, [pc, #204]	@ (80049bc <UART_SetConfig+0x4e4>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048f8:	441c      	add	r4, r3
 80048fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048fe:	2200      	movs	r2, #0
 8004900:	673b      	str	r3, [r7, #112]	@ 0x70
 8004902:	677a      	str	r2, [r7, #116]	@ 0x74
 8004904:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004908:	4642      	mov	r2, r8
 800490a:	464b      	mov	r3, r9
 800490c:	1891      	adds	r1, r2, r2
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	415b      	adcs	r3, r3
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004918:	4641      	mov	r1, r8
 800491a:	1851      	adds	r1, r2, r1
 800491c:	6039      	str	r1, [r7, #0]
 800491e:	4649      	mov	r1, r9
 8004920:	414b      	adcs	r3, r1
 8004922:	607b      	str	r3, [r7, #4]
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004930:	4659      	mov	r1, fp
 8004932:	00cb      	lsls	r3, r1, #3
 8004934:	4651      	mov	r1, sl
 8004936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800493a:	4651      	mov	r1, sl
 800493c:	00ca      	lsls	r2, r1, #3
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	4603      	mov	r3, r0
 8004944:	4642      	mov	r2, r8
 8004946:	189b      	adds	r3, r3, r2
 8004948:	66bb      	str	r3, [r7, #104]	@ 0x68
 800494a:	464b      	mov	r3, r9
 800494c:	460a      	mov	r2, r1
 800494e:	eb42 0303 	adc.w	r3, r2, r3
 8004952:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	663b      	str	r3, [r7, #96]	@ 0x60
 800495e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800496c:	4649      	mov	r1, r9
 800496e:	008b      	lsls	r3, r1, #2
 8004970:	4641      	mov	r1, r8
 8004972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004976:	4641      	mov	r1, r8
 8004978:	008a      	lsls	r2, r1, #2
 800497a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800497e:	f7fb fc87 	bl	8000290 <__aeabi_uldivmod>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4b0d      	ldr	r3, [pc, #52]	@ (80049bc <UART_SetConfig+0x4e4>)
 8004988:	fba3 1302 	umull	r1, r3, r3, r2
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	2164      	movs	r1, #100	@ 0x64
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	3332      	adds	r3, #50	@ 0x32
 800499a:	4a08      	ldr	r2, [pc, #32]	@ (80049bc <UART_SetConfig+0x4e4>)
 800499c:	fba2 2303 	umull	r2, r3, r2, r3
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	f003 020f 	and.w	r2, r3, #15
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4422      	add	r2, r4
 80049ae:	609a      	str	r2, [r3, #8]
}
 80049b0:	bf00      	nop
 80049b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049b6:	46bd      	mov	sp, r7
 80049b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049bc:	51eb851f 	.word	0x51eb851f

080049c0 <__NVIC_SetPriority>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	6039      	str	r1, [r7, #0]
 80049ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db0a      	blt.n	80049ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	490c      	ldr	r1, [pc, #48]	@ (8004a0c <__NVIC_SetPriority+0x4c>)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	440b      	add	r3, r1
 80049e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80049e8:	e00a      	b.n	8004a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4908      	ldr	r1, [pc, #32]	@ (8004a10 <__NVIC_SetPriority+0x50>)
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	3b04      	subs	r3, #4
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	440b      	add	r3, r1
 80049fe:	761a      	strb	r2, [r3, #24]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000e100 	.word	0xe000e100
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a18:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <SysTick_Handler+0x1c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a1c:	f001 fd46 	bl	80064ac <xTaskGetSchedulerState>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d001      	beq.n	8004a2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a26:	f002 fb3f 	bl	80070a8 <xPortSysTickHandler>
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	e000e010 	.word	0xe000e010

08004a34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	f06f 0004 	mvn.w	r0, #4
 8004a3e:	f7ff ffbf 	bl	80049c0 <__NVIC_SetPriority>
#endif
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a4e:	f3ef 8305 	mrs	r3, IPSR
 8004a52:	603b      	str	r3, [r7, #0]
  return(result);
 8004a54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a5a:	f06f 0305 	mvn.w	r3, #5
 8004a5e:	607b      	str	r3, [r7, #4]
 8004a60:	e00c      	b.n	8004a7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a62:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <osKernelInitialize+0x44>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a6a:	4b08      	ldr	r3, [pc, #32]	@ (8004a8c <osKernelInitialize+0x44>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	e002      	b.n	8004a7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a7c:	687b      	ldr	r3, [r7, #4]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20000278 	.word	0x20000278

08004a90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a96:	f3ef 8305 	mrs	r3, IPSR
 8004a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <osKernelStart+0x1a>
    stat = osErrorISR;
 8004aa2:	f06f 0305 	mvn.w	r3, #5
 8004aa6:	607b      	str	r3, [r7, #4]
 8004aa8:	e010      	b.n	8004acc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <osKernelStart+0x48>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d109      	bne.n	8004ac6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ab2:	f7ff ffbf 	bl	8004a34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ab6:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <osKernelStart+0x48>)
 8004ab8:	2202      	movs	r2, #2
 8004aba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004abc:	f001 f892 	bl	8005be4 <vTaskStartScheduler>
      stat = osOK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	e002      	b.n	8004acc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004acc:	687b      	ldr	r3, [r7, #4]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000278 	.word	0x20000278

08004adc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08e      	sub	sp, #56	@ 0x38
 8004ae0:	af04      	add	r7, sp, #16
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aec:	f3ef 8305 	mrs	r3, IPSR
 8004af0:	617b      	str	r3, [r7, #20]
  return(result);
 8004af2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d17e      	bne.n	8004bf6 <osThreadNew+0x11a>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d07b      	beq.n	8004bf6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004afe:	2380      	movs	r3, #128	@ 0x80
 8004b00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b02:	2318      	movs	r3, #24
 8004b04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d045      	beq.n	8004ba2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <osThreadNew+0x48>
        name = attr->name;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <osThreadNew+0x6e>
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b38      	cmp	r3, #56	@ 0x38
 8004b3c:	d805      	bhi.n	8004b4a <osThreadNew+0x6e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <osThreadNew+0x72>
        return (NULL);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e054      	b.n	8004bf8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	089b      	lsrs	r3, r3, #2
 8004b5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00e      	beq.n	8004b84 <osThreadNew+0xa8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004b6c:	d90a      	bls.n	8004b84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d006      	beq.n	8004b84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <osThreadNew+0xa8>
        mem = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e010      	b.n	8004ba6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10c      	bne.n	8004ba6 <osThreadNew+0xca>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d108      	bne.n	8004ba6 <osThreadNew+0xca>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <osThreadNew+0xca>
          mem = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	e001      	b.n	8004ba6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d110      	bne.n	8004bce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bb4:	9202      	str	r2, [sp, #8]
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	6a3a      	ldr	r2, [r7, #32]
 8004bc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 fe1a 	bl	80057fc <xTaskCreateStatic>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	e013      	b.n	8004bf6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d110      	bne.n	8004bf6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	f107 0310 	add.w	r3, r7, #16
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fe68 	bl	80058bc <xTaskCreate>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d001      	beq.n	8004bf6 <osThreadNew+0x11a>
            hTask = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004bf6:	693b      	ldr	r3, [r7, #16]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3728      	adds	r7, #40	@ 0x28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c08:	f3ef 8305 	mrs	r3, IPSR
 8004c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <osDelay+0x1c>
    stat = osErrorISR;
 8004c14:	f06f 0305 	mvn.w	r3, #5
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e007      	b.n	8004c2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 ffa6 	bl	8005b78 <vTaskDelay>
    }
  }

  return (stat);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a07      	ldr	r2, [pc, #28]	@ (8004c64 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4a06      	ldr	r2, [pc, #24]	@ (8004c68 <vApplicationGetIdleTaskMemory+0x30>)
 8004c4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2280      	movs	r2, #128	@ 0x80
 8004c54:	601a      	str	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	2000027c 	.word	0x2000027c
 8004c68:	20000324 	.word	0x20000324

08004c6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a07      	ldr	r2, [pc, #28]	@ (8004c98 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4a06      	ldr	r2, [pc, #24]	@ (8004c9c <vApplicationGetTimerTaskMemory+0x30>)
 8004c82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c8a:	601a      	str	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	20000524 	.word	0x20000524
 8004c9c:	200005cc 	.word	0x200005cc

08004ca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f103 0208 	add.w	r2, r3, #8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f103 0208 	add.w	r2, r3, #8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f103 0208 	add.w	r2, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d103      	bne.n	8004d62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e00c      	b.n	8004d7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3308      	adds	r3, #8
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e002      	b.n	8004d70 <vListInsert+0x2e>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d2f6      	bcs.n	8004d6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6892      	ldr	r2, [r2, #8]
 8004dca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d103      	bne.n	8004de8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	1e5a      	subs	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e2e:	bf00      	nop
 8004e30:	bf00      	nop
 8004e32:	e7fd      	b.n	8004e30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e34:	f002 f8a8 	bl	8006f88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e40:	68f9      	ldr	r1, [r7, #12]
 8004e42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	441a      	add	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e64:	3b01      	subs	r3, #1
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	441a      	add	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	22ff      	movs	r2, #255	@ 0xff
 8004e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	22ff      	movs	r2, #255	@ 0xff
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d114      	bne.n	8004eb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01a      	beq.n	8004ec8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3310      	adds	r3, #16
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 f942 	bl	8006120 <xTaskRemoveFromEventList>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d012      	beq.n	8004ec8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed8 <xQueueGenericReset+0xd0>)
 8004ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	e009      	b.n	8004ec8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3310      	adds	r3, #16
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fef1 	bl	8004ca0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3324      	adds	r3, #36	@ 0x24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff feec 	bl	8004ca0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ec8:	f002 f890 	bl	8006fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ecc:	2301      	movs	r3, #1
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08e      	sub	sp, #56	@ 0x38
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	e7fd      	b.n	8004f04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <xQueueGenericCreateStatic+0x56>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <xQueueGenericCreateStatic+0x5a>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueGenericCreateStatic+0x5c>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <xQueueGenericCreateStatic+0x84>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <xQueueGenericCreateStatic+0x88>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <xQueueGenericCreateStatic+0x8a>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	61fb      	str	r3, [r7, #28]
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	e7fd      	b.n	8004f7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f82:	2350      	movs	r3, #80	@ 0x50
 8004f84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b50      	cmp	r3, #80	@ 0x50
 8004f8a:	d00b      	beq.n	8004fa4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61bb      	str	r3, [r7, #24]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fa4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00d      	beq.n	8004fcc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f805 	bl	8004fd6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3730      	adds	r7, #48	@ 0x30
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	e002      	b.n	8004ff8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005004:	2101      	movs	r1, #1
 8005006:	69b8      	ldr	r0, [r7, #24]
 8005008:	f7ff fefe 	bl	8004e08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08e      	sub	sp, #56	@ 0x38
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800502a:	2300      	movs	r3, #0
 800502c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <xQueueGenericSend+0x34>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	e7fd      	b.n	800504c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <xQueueGenericSend+0x42>
 8005056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <xQueueGenericSend+0x46>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <xQueueGenericSend+0x48>
 8005062:	2300      	movs	r3, #0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <xQueueGenericSend+0x64>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	e7fd      	b.n	800507c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d103      	bne.n	800508e <xQueueGenericSend+0x72>
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <xQueueGenericSend+0x76>
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <xQueueGenericSend+0x78>
 8005092:	2300      	movs	r3, #0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <xQueueGenericSend+0x94>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	623b      	str	r3, [r7, #32]
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	e7fd      	b.n	80050ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050b0:	f001 f9fc 	bl	80064ac <xTaskGetSchedulerState>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d102      	bne.n	80050c0 <xQueueGenericSend+0xa4>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <xQueueGenericSend+0xa8>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <xQueueGenericSend+0xaa>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	61fb      	str	r3, [r7, #28]
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	e7fd      	b.n	80050de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050e2:	f001 ff51 	bl	8006f88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d302      	bcc.n	80050f8 <xQueueGenericSend+0xdc>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d129      	bne.n	800514c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	68b9      	ldr	r1, [r7, #8]
 80050fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050fe:	f000 fa0f 	bl	8005520 <prvCopyDataToQueue>
 8005102:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d010      	beq.n	800512e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	3324      	adds	r3, #36	@ 0x24
 8005110:	4618      	mov	r0, r3
 8005112:	f001 f805 	bl	8006120 <xTaskRemoveFromEventList>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d013      	beq.n	8005144 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800511c:	4b3f      	ldr	r3, [pc, #252]	@ (800521c <xQueueGenericSend+0x200>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	e00a      	b.n	8005144 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800512e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005134:	4b39      	ldr	r3, [pc, #228]	@ (800521c <xQueueGenericSend+0x200>)
 8005136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005144:	f001 ff52 	bl	8006fec <vPortExitCritical>
				return pdPASS;
 8005148:	2301      	movs	r3, #1
 800514a:	e063      	b.n	8005214 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005152:	f001 ff4b 	bl	8006fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005156:	2300      	movs	r3, #0
 8005158:	e05c      	b.n	8005214 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800515a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005160:	f107 0314 	add.w	r3, r7, #20
 8005164:	4618      	mov	r0, r3
 8005166:	f001 f83f 	bl	80061e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800516a:	2301      	movs	r3, #1
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800516e:	f001 ff3d 	bl	8006fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005172:	f000 fda7 	bl	8005cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005176:	f001 ff07 	bl	8006f88 <vPortEnterCritical>
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005180:	b25b      	sxtb	r3, r3
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d103      	bne.n	8005190 <xQueueGenericSend+0x174>
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005196:	b25b      	sxtb	r3, r3
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d103      	bne.n	80051a6 <xQueueGenericSend+0x18a>
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051a6:	f001 ff21 	bl	8006fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051aa:	1d3a      	adds	r2, r7, #4
 80051ac:	f107 0314 	add.w	r3, r7, #20
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 f82e 	bl	8006214 <xTaskCheckForTimeOut>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d124      	bne.n	8005208 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051c0:	f000 faa6 	bl	8005710 <prvIsQueueFull>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d018      	beq.n	80051fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	3310      	adds	r3, #16
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 ff52 	bl	800607c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051da:	f000 fa31 	bl	8005640 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051de:	f000 fd7f 	bl	8005ce0 <xTaskResumeAll>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f47f af7c 	bne.w	80050e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80051ea:	4b0c      	ldr	r3, [pc, #48]	@ (800521c <xQueueGenericSend+0x200>)
 80051ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	e772      	b.n	80050e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051fe:	f000 fa1f 	bl	8005640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005202:	f000 fd6d 	bl	8005ce0 <xTaskResumeAll>
 8005206:	e76c      	b.n	80050e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800520a:	f000 fa19 	bl	8005640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800520e:	f000 fd67 	bl	8005ce0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005212:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005214:	4618      	mov	r0, r3
 8005216:	3738      	adds	r7, #56	@ 0x38
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	e000ed04 	.word	0xe000ed04

08005220 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b090      	sub	sp, #64	@ 0x40
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <xQueueGenericSendFromISR+0x3e>
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <xQueueGenericSendFromISR+0x42>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <xQueueGenericSendFromISR+0x44>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d103      	bne.n	800528e <xQueueGenericSendFromISR+0x6e>
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <xQueueGenericSendFromISR+0x72>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <xQueueGenericSendFromISR+0x74>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10b      	bne.n	80052b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	623b      	str	r3, [r7, #32]
}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	e7fd      	b.n	80052ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052b0:	f001 ff4a 	bl	8007148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052b4:	f3ef 8211 	mrs	r2, BASEPRI
 80052b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	61fa      	str	r2, [r7, #28]
 80052ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	429a      	cmp	r2, r3
 80052da:	d302      	bcc.n	80052e2 <xQueueGenericSendFromISR+0xc2>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d12f      	bne.n	8005342 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052f8:	f000 f912 	bl	8005520 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d112      	bne.n	800532c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	3324      	adds	r3, #36	@ 0x24
 8005312:	4618      	mov	r0, r3
 8005314:	f000 ff04 	bl	8006120 <xTaskRemoveFromEventList>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00e      	beq.n	800533c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00b      	beq.n	800533c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e007      	b.n	800533c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800532c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005330:	3301      	adds	r3, #1
 8005332:	b2db      	uxtb	r3, r3
 8005334:	b25a      	sxtb	r2, r3
 8005336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800533c:	2301      	movs	r3, #1
 800533e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005340:	e001      	b.n	8005346 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005342:	2300      	movs	r3, #0
 8005344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005348:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005350:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005354:	4618      	mov	r0, r3
 8005356:	3740      	adds	r7, #64	@ 0x40
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	@ 0x30
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005368:	2300      	movs	r3, #0
 800536a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <xQueueReceive+0x32>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	623b      	str	r3, [r7, #32]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d103      	bne.n	800539c <xQueueReceive+0x40>
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <xQueueReceive+0x44>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <xQueueReceive+0x46>
 80053a0:	2300      	movs	r3, #0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10b      	bne.n	80053be <xQueueReceive+0x62>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	61fb      	str	r3, [r7, #28]
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	e7fd      	b.n	80053ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053be:	f001 f875 	bl	80064ac <xTaskGetSchedulerState>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <xQueueReceive+0x72>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <xQueueReceive+0x76>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <xQueueReceive+0x78>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <xQueueReceive+0x94>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	61bb      	str	r3, [r7, #24]
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053f0:	f001 fdca 	bl	8006f88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01f      	beq.n	8005440 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005404:	f000 f8f6 	bl	80055f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	1e5a      	subs	r2, r3, #1
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00f      	beq.n	8005438 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	3310      	adds	r3, #16
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fe7f 	bl	8006120 <xTaskRemoveFromEventList>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005428:	4b3c      	ldr	r3, [pc, #240]	@ (800551c <xQueueReceive+0x1c0>)
 800542a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005438:	f001 fdd8 	bl	8006fec <vPortExitCritical>
				return pdPASS;
 800543c:	2301      	movs	r3, #1
 800543e:	e069      	b.n	8005514 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005446:	f001 fdd1 	bl	8006fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800544a:	2300      	movs	r3, #0
 800544c:	e062      	b.n	8005514 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005454:	f107 0310 	add.w	r3, r7, #16
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fec5 	bl	80061e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800545e:	2301      	movs	r3, #1
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005462:	f001 fdc3 	bl	8006fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005466:	f000 fc2d 	bl	8005cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800546a:	f001 fd8d 	bl	8006f88 <vPortEnterCritical>
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005474:	b25b      	sxtb	r3, r3
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d103      	bne.n	8005484 <xQueueReceive+0x128>
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800548a:	b25b      	sxtb	r3, r3
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d103      	bne.n	800549a <xQueueReceive+0x13e>
 8005492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800549a:	f001 fda7 	bl	8006fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800549e:	1d3a      	adds	r2, r7, #4
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4611      	mov	r1, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 feb4 	bl	8006214 <xTaskCheckForTimeOut>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d123      	bne.n	80054fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054b4:	f000 f916 	bl	80056e4 <prvIsQueueEmpty>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d017      	beq.n	80054ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	3324      	adds	r3, #36	@ 0x24
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4611      	mov	r1, r2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fdd8 	bl	800607c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054ce:	f000 f8b7 	bl	8005640 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054d2:	f000 fc05 	bl	8005ce0 <xTaskResumeAll>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d189      	bne.n	80053f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80054dc:	4b0f      	ldr	r3, [pc, #60]	@ (800551c <xQueueReceive+0x1c0>)
 80054de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	e780      	b.n	80053f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054f0:	f000 f8a6 	bl	8005640 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054f4:	f000 fbf4 	bl	8005ce0 <xTaskResumeAll>
 80054f8:	e77a      	b.n	80053f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054fc:	f000 f8a0 	bl	8005640 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005500:	f000 fbee 	bl	8005ce0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005506:	f000 f8ed 	bl	80056e4 <prvIsQueueEmpty>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	f43f af6f 	beq.w	80053f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005512:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005514:	4618      	mov	r0, r3
 8005516:	3730      	adds	r7, #48	@ 0x30
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005534:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d14d      	bne.n	80055e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 ffcc 	bl	80064e8 <xTaskPriorityDisinherit>
 8005550:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	609a      	str	r2, [r3, #8]
 8005558:	e043      	b.n	80055e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d119      	bne.n	8005594 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6858      	ldr	r0, [r3, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	461a      	mov	r2, r3
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	f002 fae7 	bl	8007b3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005578:	441a      	add	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	d32b      	bcc.n	80055e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	605a      	str	r2, [r3, #4]
 8005592:	e026      	b.n	80055e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68d8      	ldr	r0, [r3, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	461a      	mov	r2, r3
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	f002 facd 	bl	8007b3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ac:	425b      	negs	r3, r3
 80055ae:	441a      	add	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d207      	bcs.n	80055d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c8:	425b      	negs	r3, r3
 80055ca:	441a      	add	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d105      	bne.n	80055e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	3b01      	subs	r3, #1
 80055e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80055ea:	697b      	ldr	r3, [r7, #20]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d018      	beq.n	8005638 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	441a      	add	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	429a      	cmp	r2, r3
 800561e:	d303      	bcc.n	8005628 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68d9      	ldr	r1, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005630:	461a      	mov	r2, r3
 8005632:	6838      	ldr	r0, [r7, #0]
 8005634:	f002 fa83 	bl	8007b3e <memcpy>
	}
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005648:	f001 fc9e 	bl	8006f88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005652:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005654:	e011      	b.n	800567a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	2b00      	cmp	r3, #0
 800565c:	d012      	beq.n	8005684 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3324      	adds	r3, #36	@ 0x24
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fd5c 	bl	8006120 <xTaskRemoveFromEventList>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800566e:	f000 fe35 	bl	80062dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	3b01      	subs	r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800567a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	dce9      	bgt.n	8005656 <prvUnlockQueue+0x16>
 8005682:	e000      	b.n	8005686 <prvUnlockQueue+0x46>
					break;
 8005684:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	22ff      	movs	r2, #255	@ 0xff
 800568a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800568e:	f001 fcad 	bl	8006fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005692:	f001 fc79 	bl	8006f88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800569c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800569e:	e011      	b.n	80056c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d012      	beq.n	80056ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3310      	adds	r3, #16
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fd37 	bl	8006120 <xTaskRemoveFromEventList>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056b8:	f000 fe10 	bl	80062dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056bc:	7bbb      	ldrb	r3, [r7, #14]
 80056be:	3b01      	subs	r3, #1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	dce9      	bgt.n	80056a0 <prvUnlockQueue+0x60>
 80056cc:	e000      	b.n	80056d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	22ff      	movs	r2, #255	@ 0xff
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80056d8:	f001 fc88 	bl	8006fec <vPortExitCritical>
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056ec:	f001 fc4c 	bl	8006f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	e001      	b.n	8005702 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005702:	f001 fc73 	bl	8006fec <vPortExitCritical>

	return xReturn;
 8005706:	68fb      	ldr	r3, [r7, #12]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005718:	f001 fc36 	bl	8006f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005724:	429a      	cmp	r2, r3
 8005726:	d102      	bne.n	800572e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	e001      	b.n	8005732 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005732:	f001 fc5b 	bl	8006fec <vPortExitCritical>

	return xReturn;
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e014      	b.n	800577a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005750:	4a0f      	ldr	r2, [pc, #60]	@ (8005790 <vQueueAddToRegistry+0x50>)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800575c:	490c      	ldr	r1, [pc, #48]	@ (8005790 <vQueueAddToRegistry+0x50>)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005766:	4a0a      	ldr	r2, [pc, #40]	@ (8005790 <vQueueAddToRegistry+0x50>)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	4413      	add	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005772:	e006      	b.n	8005782 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b07      	cmp	r3, #7
 800577e:	d9e7      	bls.n	8005750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	200009cc 	.word	0x200009cc

08005794 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057a4:	f001 fbf0 	bl	8006f88 <vPortEnterCritical>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057ae:	b25b      	sxtb	r3, r3
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d103      	bne.n	80057be <vQueueWaitForMessageRestricted+0x2a>
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057c4:	b25b      	sxtb	r3, r3
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d103      	bne.n	80057d4 <vQueueWaitForMessageRestricted+0x40>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057d4:	f001 fc0a 	bl	8006fec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	3324      	adds	r3, #36	@ 0x24
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fc6d 	bl	80060c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057ee:	6978      	ldr	r0, [r7, #20]
 80057f0:	f7ff ff26 	bl	8005640 <prvUnlockQueue>
	}
 80057f4:	bf00      	nop
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08e      	sub	sp, #56	@ 0x38
 8005800:	af04      	add	r7, sp, #16
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	623b      	str	r3, [r7, #32]
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <xTaskCreateStatic+0x4a>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	61fb      	str	r3, [r7, #28]
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	e7fd      	b.n	8005842 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005846:	23a8      	movs	r3, #168	@ 0xa8
 8005848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2ba8      	cmp	r3, #168	@ 0xa8
 800584e:	d00b      	beq.n	8005868 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	61bb      	str	r3, [r7, #24]
}
 8005862:	bf00      	nop
 8005864:	bf00      	nop
 8005866:	e7fd      	b.n	8005864 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005868:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01e      	beq.n	80058ae <xTaskCreateStatic+0xb2>
 8005870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01b      	beq.n	80058ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	2202      	movs	r2, #2
 8005884:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005888:	2300      	movs	r3, #0
 800588a:	9303      	str	r3, [sp, #12]
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	9302      	str	r3, [sp, #8]
 8005890:	f107 0314 	add.w	r3, r7, #20
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f851 	bl	8005948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058a8:	f000 f8f6 	bl	8005a98 <prvAddNewTaskToReadyList>
 80058ac:	e001      	b.n	80058b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058b2:	697b      	ldr	r3, [r7, #20]
	}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3728      	adds	r7, #40	@ 0x28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08c      	sub	sp, #48	@ 0x30
 80058c0:	af04      	add	r7, sp, #16
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fc7b 	bl	80071cc <pvPortMalloc>
 80058d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00e      	beq.n	80058fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058de:	20a8      	movs	r0, #168	@ 0xa8
 80058e0:	f001 fc74 	bl	80071cc <pvPortMalloc>
 80058e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80058f2:	e005      	b.n	8005900 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058f4:	6978      	ldr	r0, [r7, #20]
 80058f6:	f001 fd37 	bl	8007368 <vPortFree>
 80058fa:	e001      	b.n	8005900 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d017      	beq.n	8005936 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	2300      	movs	r3, #0
 8005912:	9303      	str	r3, [sp, #12]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	9302      	str	r3, [sp, #8]
 8005918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591a:	9301      	str	r3, [sp, #4]
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f80f 	bl	8005948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800592a:	69f8      	ldr	r0, [r7, #28]
 800592c:	f000 f8b4 	bl	8005a98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005930:	2301      	movs	r3, #1
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	e002      	b.n	800593c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800593c:	69bb      	ldr	r3, [r7, #24]
	}
 800593e:	4618      	mov	r0, r3
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	461a      	mov	r2, r3
 8005960:	21a5      	movs	r1, #165	@ 0xa5
 8005962:	f001 ffae 	bl	80078c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005970:	3b01      	subs	r3, #1
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	617b      	str	r3, [r7, #20]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01f      	beq.n	80059e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	e012      	b.n	80059d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	7819      	ldrb	r1, [r3, #0]
 80059b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	3334      	adds	r3, #52	@ 0x34
 80059be:	460a      	mov	r2, r1
 80059c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d006      	beq.n	80059dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3301      	adds	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b0f      	cmp	r3, #15
 80059d8:	d9e9      	bls.n	80059ae <prvInitialiseNewTask+0x66>
 80059da:	e000      	b.n	80059de <prvInitialiseNewTask+0x96>
			{
				break;
 80059dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059e6:	e003      	b.n	80059f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f2:	2b37      	cmp	r3, #55	@ 0x37
 80059f4:	d901      	bls.n	80059fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059f6:	2337      	movs	r3, #55	@ 0x37
 80059f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	2200      	movs	r2, #0
 8005a0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff f965 	bl	8004ce0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	3318      	adds	r3, #24
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff f960 	bl	8004ce0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	3354      	adds	r3, #84	@ 0x54
 8005a4a:	224c      	movs	r2, #76	@ 0x4c
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 ff37 	bl	80078c2 <memset>
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	4a0d      	ldr	r2, [pc, #52]	@ (8005a8c <prvInitialiseNewTask+0x144>)
 8005a58:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005a90 <prvInitialiseNewTask+0x148>)
 8005a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a62:	4a0c      	ldr	r2, [pc, #48]	@ (8005a94 <prvInitialiseNewTask+0x14c>)
 8005a64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	69b8      	ldr	r0, [r7, #24]
 8005a6c:	f001 f95a 	bl	8006d24 <pxPortInitialiseStack>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a82:	bf00      	nop
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20004c60 	.word	0x20004c60
 8005a90:	20004cc8 	.word	0x20004cc8
 8005a94:	20004d30 	.word	0x20004d30

08005a98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005aa0:	f001 fa72 	bl	8006f88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8005b5c <prvAddNewTaskToReadyList+0xc4>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8005b5c <prvAddNewTaskToReadyList+0xc4>)
 8005aac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005aae:	4b2c      	ldr	r3, [pc, #176]	@ (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005abc:	4b27      	ldr	r3, [pc, #156]	@ (8005b5c <prvAddNewTaskToReadyList+0xc4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d110      	bne.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ac4:	f000 fc2e 	bl	8006324 <prvInitialiseTaskLists>
 8005ac8:	e00d      	b.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aca:	4b26      	ldr	r3, [pc, #152]	@ (8005b64 <prvAddNewTaskToReadyList+0xcc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ad2:	4b23      	ldr	r3, [pc, #140]	@ (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d802      	bhi.n	8005ae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ae6:	4b20      	ldr	r3, [pc, #128]	@ (8005b68 <prvAddNewTaskToReadyList+0xd0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3301      	adds	r3, #1
 8005aec:	4a1e      	ldr	r2, [pc, #120]	@ (8005b68 <prvAddNewTaskToReadyList+0xd0>)
 8005aee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005af0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b68 <prvAddNewTaskToReadyList+0xd0>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <prvAddNewTaskToReadyList+0xd4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d903      	bls.n	8005b0c <prvAddNewTaskToReadyList+0x74>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	4a18      	ldr	r2, [pc, #96]	@ (8005b6c <prvAddNewTaskToReadyList+0xd4>)
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4a15      	ldr	r2, [pc, #84]	@ (8005b70 <prvAddNewTaskToReadyList+0xd8>)
 8005b1a:	441a      	add	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f7ff f8e9 	bl	8004cfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b28:	f001 fa60 	bl	8006fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b64 <prvAddNewTaskToReadyList+0xcc>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b34:	4b0a      	ldr	r3, [pc, #40]	@ (8005b60 <prvAddNewTaskToReadyList+0xc8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d207      	bcs.n	8005b52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b42:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <prvAddNewTaskToReadyList+0xdc>)
 8005b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000ee0 	.word	0x20000ee0
 8005b60:	20000a0c 	.word	0x20000a0c
 8005b64:	20000eec 	.word	0x20000eec
 8005b68:	20000efc 	.word	0x20000efc
 8005b6c:	20000ee8 	.word	0x20000ee8
 8005b70:	20000a10 	.word	0x20000a10
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d018      	beq.n	8005bbc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b8a:	4b14      	ldr	r3, [pc, #80]	@ (8005bdc <vTaskDelay+0x64>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <vTaskDelay+0x32>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	60bb      	str	r3, [r7, #8]
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	e7fd      	b.n	8005ba6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005baa:	f000 f88b 	bl	8005cc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bae:	2100      	movs	r1, #0
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fd09 	bl	80065c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bb6:	f000 f893 	bl	8005ce0 <xTaskResumeAll>
 8005bba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d107      	bne.n	8005bd2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005bc2:	4b07      	ldr	r3, [pc, #28]	@ (8005be0 <vTaskDelay+0x68>)
 8005bc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000f08 	.word	0x20000f08
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	@ 0x28
 8005be8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	1d39      	adds	r1, r7, #4
 8005bf6:	f107 0308 	add.w	r3, r7, #8
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff f81c 	bl	8004c38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	9202      	str	r2, [sp, #8]
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	460a      	mov	r2, r1
 8005c12:	4924      	ldr	r1, [pc, #144]	@ (8005ca4 <vTaskStartScheduler+0xc0>)
 8005c14:	4824      	ldr	r0, [pc, #144]	@ (8005ca8 <vTaskStartScheduler+0xc4>)
 8005c16:	f7ff fdf1 	bl	80057fc <xTaskCreateStatic>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4a23      	ldr	r2, [pc, #140]	@ (8005cac <vTaskStartScheduler+0xc8>)
 8005c1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c20:	4b22      	ldr	r3, [pc, #136]	@ (8005cac <vTaskStartScheduler+0xc8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e001      	b.n	8005c32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d102      	bne.n	8005c3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c38:	f000 fd1a 	bl	8006670 <xTimerCreateTimerTask>
 8005c3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d11b      	bne.n	8005c7c <vTaskStartScheduler+0x98>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	613b      	str	r3, [r7, #16]
}
 8005c56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c58:	4b15      	ldr	r3, [pc, #84]	@ (8005cb0 <vTaskStartScheduler+0xcc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3354      	adds	r3, #84	@ 0x54
 8005c5e:	4a15      	ldr	r2, [pc, #84]	@ (8005cb4 <vTaskStartScheduler+0xd0>)
 8005c60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c62:	4b15      	ldr	r3, [pc, #84]	@ (8005cb8 <vTaskStartScheduler+0xd4>)
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c6a:	4b14      	ldr	r3, [pc, #80]	@ (8005cbc <vTaskStartScheduler+0xd8>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c70:	4b13      	ldr	r3, [pc, #76]	@ (8005cc0 <vTaskStartScheduler+0xdc>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c76:	f001 f8e3 	bl	8006e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c7a:	e00f      	b.n	8005c9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d10b      	bne.n	8005c9c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	e7fd      	b.n	8005c98 <vTaskStartScheduler+0xb4>
}
 8005c9c:	bf00      	nop
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	080087d8 	.word	0x080087d8
 8005ca8:	080062f5 	.word	0x080062f5
 8005cac:	20000f04 	.word	0x20000f04
 8005cb0:	20000a0c 	.word	0x20000a0c
 8005cb4:	20000024 	.word	0x20000024
 8005cb8:	20000f00 	.word	0x20000f00
 8005cbc:	20000eec 	.word	0x20000eec
 8005cc0:	20000ee4 	.word	0x20000ee4

08005cc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cc8:	4b04      	ldr	r3, [pc, #16]	@ (8005cdc <vTaskSuspendAll+0x18>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	4a03      	ldr	r2, [pc, #12]	@ (8005cdc <vTaskSuspendAll+0x18>)
 8005cd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cd2:	bf00      	nop
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000f08 	.word	0x20000f08

08005ce0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cee:	4b42      	ldr	r3, [pc, #264]	@ (8005df8 <xTaskResumeAll+0x118>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <xTaskResumeAll+0x2e>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	603b      	str	r3, [r7, #0]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d0e:	f001 f93b 	bl	8006f88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d12:	4b39      	ldr	r3, [pc, #228]	@ (8005df8 <xTaskResumeAll+0x118>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4a37      	ldr	r2, [pc, #220]	@ (8005df8 <xTaskResumeAll+0x118>)
 8005d1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d1c:	4b36      	ldr	r3, [pc, #216]	@ (8005df8 <xTaskResumeAll+0x118>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d162      	bne.n	8005dea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d24:	4b35      	ldr	r3, [pc, #212]	@ (8005dfc <xTaskResumeAll+0x11c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d05e      	beq.n	8005dea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d2c:	e02f      	b.n	8005d8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2e:	4b34      	ldr	r3, [pc, #208]	@ (8005e00 <xTaskResumeAll+0x120>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3318      	adds	r3, #24
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff f83a 	bl	8004db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff f835 	bl	8004db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005e04 <xTaskResumeAll+0x124>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d903      	bls.n	8005d5e <xTaskResumeAll+0x7e>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005e04 <xTaskResumeAll+0x124>)
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4a27      	ldr	r2, [pc, #156]	@ (8005e08 <xTaskResumeAll+0x128>)
 8005d6c:	441a      	add	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7fe ffc0 	bl	8004cfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7e:	4b23      	ldr	r3, [pc, #140]	@ (8005e0c <xTaskResumeAll+0x12c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d302      	bcc.n	8005d8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005d88:	4b21      	ldr	r3, [pc, #132]	@ (8005e10 <xTaskResumeAll+0x130>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005e00 <xTaskResumeAll+0x120>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1cb      	bne.n	8005d2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d9c:	f000 fb66 	bl	800646c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005da0:	4b1c      	ldr	r3, [pc, #112]	@ (8005e14 <xTaskResumeAll+0x134>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d010      	beq.n	8005dce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dac:	f000 f846 	bl	8005e3c <xTaskIncrementTick>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005db6:	4b16      	ldr	r3, [pc, #88]	@ (8005e10 <xTaskResumeAll+0x130>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1f1      	bne.n	8005dac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005dc8:	4b12      	ldr	r3, [pc, #72]	@ (8005e14 <xTaskResumeAll+0x134>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dce:	4b10      	ldr	r3, [pc, #64]	@ (8005e10 <xTaskResumeAll+0x130>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dda:	4b0f      	ldr	r3, [pc, #60]	@ (8005e18 <xTaskResumeAll+0x138>)
 8005ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dea:	f001 f8ff 	bl	8006fec <vPortExitCritical>

	return xAlreadyYielded;
 8005dee:	68bb      	ldr	r3, [r7, #8]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20000f08 	.word	0x20000f08
 8005dfc:	20000ee0 	.word	0x20000ee0
 8005e00:	20000ea0 	.word	0x20000ea0
 8005e04:	20000ee8 	.word	0x20000ee8
 8005e08:	20000a10 	.word	0x20000a10
 8005e0c:	20000a0c 	.word	0x20000a0c
 8005e10:	20000ef4 	.word	0x20000ef4
 8005e14:	20000ef0 	.word	0x20000ef0
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e22:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <xTaskGetTickCount+0x1c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e28:	687b      	ldr	r3, [r7, #4]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000ee4 	.word	0x20000ee4

08005e3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e46:	4b4f      	ldr	r3, [pc, #316]	@ (8005f84 <xTaskIncrementTick+0x148>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 8090 	bne.w	8005f70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e50:	4b4d      	ldr	r3, [pc, #308]	@ (8005f88 <xTaskIncrementTick+0x14c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e58:	4a4b      	ldr	r2, [pc, #300]	@ (8005f88 <xTaskIncrementTick+0x14c>)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d121      	bne.n	8005ea8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e64:	4b49      	ldr	r3, [pc, #292]	@ (8005f8c <xTaskIncrementTick+0x150>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	603b      	str	r3, [r7, #0]
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <xTaskIncrementTick+0x46>
 8005e86:	4b41      	ldr	r3, [pc, #260]	@ (8005f8c <xTaskIncrementTick+0x150>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	4b40      	ldr	r3, [pc, #256]	@ (8005f90 <xTaskIncrementTick+0x154>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a3e      	ldr	r2, [pc, #248]	@ (8005f8c <xTaskIncrementTick+0x150>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	4a3e      	ldr	r2, [pc, #248]	@ (8005f90 <xTaskIncrementTick+0x154>)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <xTaskIncrementTick+0x158>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8005f94 <xTaskIncrementTick+0x158>)
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	f000 fae2 	bl	800646c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8005f98 <xTaskIncrementTick+0x15c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d349      	bcc.n	8005f46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb2:	4b36      	ldr	r3, [pc, #216]	@ (8005f8c <xTaskIncrementTick+0x150>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ebc:	4b36      	ldr	r3, [pc, #216]	@ (8005f98 <xTaskIncrementTick+0x15c>)
 8005ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec2:	601a      	str	r2, [r3, #0]
					break;
 8005ec4:	e03f      	b.n	8005f46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec6:	4b31      	ldr	r3, [pc, #196]	@ (8005f8c <xTaskIncrementTick+0x150>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d203      	bcs.n	8005ee6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ede:	4a2e      	ldr	r2, [pc, #184]	@ (8005f98 <xTaskIncrementTick+0x15c>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ee4:	e02f      	b.n	8005f46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fe ff62 	bl	8004db4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	3318      	adds	r3, #24
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe ff59 	bl	8004db4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f06:	4b25      	ldr	r3, [pc, #148]	@ (8005f9c <xTaskIncrementTick+0x160>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d903      	bls.n	8005f16 <xTaskIncrementTick+0xda>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	4a22      	ldr	r2, [pc, #136]	@ (8005f9c <xTaskIncrementTick+0x160>)
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <xTaskIncrementTick+0x164>)
 8005f24:	441a      	add	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f7fe fee4 	bl	8004cfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f36:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <xTaskIncrementTick+0x168>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d3b8      	bcc.n	8005eb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f44:	e7b5      	b.n	8005eb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f46:	4b17      	ldr	r3, [pc, #92]	@ (8005fa4 <xTaskIncrementTick+0x168>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4c:	4914      	ldr	r1, [pc, #80]	@ (8005fa0 <xTaskIncrementTick+0x164>)
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d901      	bls.n	8005f62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f62:	4b11      	ldr	r3, [pc, #68]	@ (8005fa8 <xTaskIncrementTick+0x16c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e004      	b.n	8005f7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f70:	4b0e      	ldr	r3, [pc, #56]	@ (8005fac <xTaskIncrementTick+0x170>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a0d      	ldr	r2, [pc, #52]	@ (8005fac <xTaskIncrementTick+0x170>)
 8005f78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f7a:	697b      	ldr	r3, [r7, #20]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000f08 	.word	0x20000f08
 8005f88:	20000ee4 	.word	0x20000ee4
 8005f8c:	20000e98 	.word	0x20000e98
 8005f90:	20000e9c 	.word	0x20000e9c
 8005f94:	20000ef8 	.word	0x20000ef8
 8005f98:	20000f00 	.word	0x20000f00
 8005f9c:	20000ee8 	.word	0x20000ee8
 8005fa0:	20000a10 	.word	0x20000a10
 8005fa4:	20000a0c 	.word	0x20000a0c
 8005fa8:	20000ef4 	.word	0x20000ef4
 8005fac:	20000ef0 	.word	0x20000ef0

08005fb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8006064 <vTaskSwitchContext+0xb4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006068 <vTaskSwitchContext+0xb8>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fc4:	e047      	b.n	8006056 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005fc6:	4b28      	ldr	r3, [pc, #160]	@ (8006068 <vTaskSwitchContext+0xb8>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fcc:	4b27      	ldr	r3, [pc, #156]	@ (800606c <vTaskSwitchContext+0xbc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e011      	b.n	8005ff8 <vTaskSwitchContext+0x48>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <vTaskSwitchContext+0x42>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	607b      	str	r3, [r7, #4]
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	e7fd      	b.n	8005fee <vTaskSwitchContext+0x3e>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	491d      	ldr	r1, [pc, #116]	@ (8006070 <vTaskSwitchContext+0xc0>)
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0e3      	beq.n	8005fd4 <vTaskSwitchContext+0x24>
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4a16      	ldr	r2, [pc, #88]	@ (8006070 <vTaskSwitchContext+0xc0>)
 8006018:	4413      	add	r3, r2
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	3308      	adds	r3, #8
 800602e:	429a      	cmp	r2, r3
 8006030:	d104      	bne.n	800603c <vTaskSwitchContext+0x8c>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	605a      	str	r2, [r3, #4]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	4a0c      	ldr	r2, [pc, #48]	@ (8006074 <vTaskSwitchContext+0xc4>)
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	4a09      	ldr	r2, [pc, #36]	@ (800606c <vTaskSwitchContext+0xbc>)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800604c:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <vTaskSwitchContext+0xc4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3354      	adds	r3, #84	@ 0x54
 8006052:	4a09      	ldr	r2, [pc, #36]	@ (8006078 <vTaskSwitchContext+0xc8>)
 8006054:	6013      	str	r3, [r2, #0]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000f08 	.word	0x20000f08
 8006068:	20000ef4 	.word	0x20000ef4
 800606c:	20000ee8 	.word	0x20000ee8
 8006070:	20000a10 	.word	0x20000a10
 8006074:	20000a0c 	.word	0x20000a0c
 8006078:	20000024 	.word	0x20000024

0800607c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10b      	bne.n	80060a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	60fb      	str	r3, [r7, #12]
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	e7fd      	b.n	80060a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060a4:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <vTaskPlaceOnEventList+0x48>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3318      	adds	r3, #24
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7fe fe48 	bl	8004d42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060b2:	2101      	movs	r1, #1
 80060b4:	6838      	ldr	r0, [r7, #0]
 80060b6:	f000 fa87 	bl	80065c8 <prvAddCurrentTaskToDelayedList>
}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000a0c 	.word	0x20000a0c

080060c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10b      	bne.n	80060f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	617b      	str	r3, [r7, #20]
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	e7fd      	b.n	80060ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060f2:	4b0a      	ldr	r3, [pc, #40]	@ (800611c <vTaskPlaceOnEventListRestricted+0x54>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3318      	adds	r3, #24
 80060f8:	4619      	mov	r1, r3
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7fe fdfd 	bl	8004cfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006106:	f04f 33ff 	mov.w	r3, #4294967295
 800610a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f000 fa5a 	bl	80065c8 <prvAddCurrentTaskToDelayedList>
	}
 8006114:	bf00      	nop
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000a0c 	.word	0x20000a0c

08006120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	60fb      	str	r3, [r7, #12]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	3318      	adds	r3, #24
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fe2e 	bl	8004db4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006158:	4b1d      	ldr	r3, [pc, #116]	@ (80061d0 <xTaskRemoveFromEventList+0xb0>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d11d      	bne.n	800619c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	3304      	adds	r3, #4
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe fe25 	bl	8004db4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616e:	4b19      	ldr	r3, [pc, #100]	@ (80061d4 <xTaskRemoveFromEventList+0xb4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d903      	bls.n	800617e <xTaskRemoveFromEventList+0x5e>
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	4a16      	ldr	r2, [pc, #88]	@ (80061d4 <xTaskRemoveFromEventList+0xb4>)
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4a13      	ldr	r2, [pc, #76]	@ (80061d8 <xTaskRemoveFromEventList+0xb8>)
 800618c:	441a      	add	r2, r3
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	3304      	adds	r3, #4
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f7fe fdb0 	bl	8004cfa <vListInsertEnd>
 800619a:	e005      	b.n	80061a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3318      	adds	r3, #24
 80061a0:	4619      	mov	r1, r3
 80061a2:	480e      	ldr	r0, [pc, #56]	@ (80061dc <xTaskRemoveFromEventList+0xbc>)
 80061a4:	f7fe fda9 	bl	8004cfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ac:	4b0c      	ldr	r3, [pc, #48]	@ (80061e0 <xTaskRemoveFromEventList+0xc0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d905      	bls.n	80061c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061b6:	2301      	movs	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061ba:	4b0a      	ldr	r3, [pc, #40]	@ (80061e4 <xTaskRemoveFromEventList+0xc4>)
 80061bc:	2201      	movs	r2, #1
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e001      	b.n	80061c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061c6:	697b      	ldr	r3, [r7, #20]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000f08 	.word	0x20000f08
 80061d4:	20000ee8 	.word	0x20000ee8
 80061d8:	20000a10 	.word	0x20000a10
 80061dc:	20000ea0 	.word	0x20000ea0
 80061e0:	20000a0c 	.word	0x20000a0c
 80061e4:	20000ef4 	.word	0x20000ef4

080061e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061f0:	4b06      	ldr	r3, [pc, #24]	@ (800620c <vTaskInternalSetTimeOutState+0x24>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061f8:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <vTaskInternalSetTimeOutState+0x28>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	605a      	str	r2, [r3, #4]
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	20000ef8 	.word	0x20000ef8
 8006210:	20000ee4 	.word	0x20000ee4

08006214 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	613b      	str	r3, [r7, #16]
}
 8006236:	bf00      	nop
 8006238:	bf00      	nop
 800623a:	e7fd      	b.n	8006238 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	60fb      	str	r3, [r7, #12]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800625a:	f000 fe95 	bl	8006f88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800625e:	4b1d      	ldr	r3, [pc, #116]	@ (80062d4 <xTaskCheckForTimeOut+0xc0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d102      	bne.n	800627e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e023      	b.n	80062c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b15      	ldr	r3, [pc, #84]	@ (80062d8 <xTaskCheckForTimeOut+0xc4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d007      	beq.n	800629a <xTaskCheckForTimeOut+0x86>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	429a      	cmp	r2, r3
 8006292:	d302      	bcc.n	800629a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006294:	2301      	movs	r3, #1
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	e015      	b.n	80062c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d20b      	bcs.n	80062bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1ad2      	subs	r2, r2, r3
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff ff99 	bl	80061e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	e004      	b.n	80062c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062c2:	2301      	movs	r3, #1
 80062c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062c6:	f000 fe91 	bl	8006fec <vPortExitCritical>

	return xReturn;
 80062ca:	69fb      	ldr	r3, [r7, #28]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000ee4 	.word	0x20000ee4
 80062d8:	20000ef8 	.word	0x20000ef8

080062dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062e0:	4b03      	ldr	r3, [pc, #12]	@ (80062f0 <vTaskMissedYield+0x14>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
}
 80062e6:	bf00      	nop
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	20000ef4 	.word	0x20000ef4

080062f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062fc:	f000 f852 	bl	80063a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006300:	4b06      	ldr	r3, [pc, #24]	@ (800631c <prvIdleTask+0x28>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d9f9      	bls.n	80062fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006308:	4b05      	ldr	r3, [pc, #20]	@ (8006320 <prvIdleTask+0x2c>)
 800630a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006318:	e7f0      	b.n	80062fc <prvIdleTask+0x8>
 800631a:	bf00      	nop
 800631c:	20000a10 	.word	0x20000a10
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800632a:	2300      	movs	r3, #0
 800632c:	607b      	str	r3, [r7, #4]
 800632e:	e00c      	b.n	800634a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4a12      	ldr	r2, [pc, #72]	@ (8006384 <prvInitialiseTaskLists+0x60>)
 800633c:	4413      	add	r3, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fcae 	bl	8004ca0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3301      	adds	r3, #1
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b37      	cmp	r3, #55	@ 0x37
 800634e:	d9ef      	bls.n	8006330 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006350:	480d      	ldr	r0, [pc, #52]	@ (8006388 <prvInitialiseTaskLists+0x64>)
 8006352:	f7fe fca5 	bl	8004ca0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006356:	480d      	ldr	r0, [pc, #52]	@ (800638c <prvInitialiseTaskLists+0x68>)
 8006358:	f7fe fca2 	bl	8004ca0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800635c:	480c      	ldr	r0, [pc, #48]	@ (8006390 <prvInitialiseTaskLists+0x6c>)
 800635e:	f7fe fc9f 	bl	8004ca0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006362:	480c      	ldr	r0, [pc, #48]	@ (8006394 <prvInitialiseTaskLists+0x70>)
 8006364:	f7fe fc9c 	bl	8004ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006368:	480b      	ldr	r0, [pc, #44]	@ (8006398 <prvInitialiseTaskLists+0x74>)
 800636a:	f7fe fc99 	bl	8004ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800636e:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <prvInitialiseTaskLists+0x78>)
 8006370:	4a05      	ldr	r2, [pc, #20]	@ (8006388 <prvInitialiseTaskLists+0x64>)
 8006372:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006374:	4b0a      	ldr	r3, [pc, #40]	@ (80063a0 <prvInitialiseTaskLists+0x7c>)
 8006376:	4a05      	ldr	r2, [pc, #20]	@ (800638c <prvInitialiseTaskLists+0x68>)
 8006378:	601a      	str	r2, [r3, #0]
}
 800637a:	bf00      	nop
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000a10 	.word	0x20000a10
 8006388:	20000e70 	.word	0x20000e70
 800638c:	20000e84 	.word	0x20000e84
 8006390:	20000ea0 	.word	0x20000ea0
 8006394:	20000eb4 	.word	0x20000eb4
 8006398:	20000ecc 	.word	0x20000ecc
 800639c:	20000e98 	.word	0x20000e98
 80063a0:	20000e9c 	.word	0x20000e9c

080063a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063aa:	e019      	b.n	80063e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063ac:	f000 fdec 	bl	8006f88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b0:	4b10      	ldr	r3, [pc, #64]	@ (80063f4 <prvCheckTasksWaitingTermination+0x50>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe fcf9 	bl	8004db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <prvCheckTasksWaitingTermination+0x54>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	4a0b      	ldr	r2, [pc, #44]	@ (80063f8 <prvCheckTasksWaitingTermination+0x54>)
 80063ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063cc:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <prvCheckTasksWaitingTermination+0x58>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	4a0a      	ldr	r2, [pc, #40]	@ (80063fc <prvCheckTasksWaitingTermination+0x58>)
 80063d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063d6:	f000 fe09 	bl	8006fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f810 	bl	8006400 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063e0:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <prvCheckTasksWaitingTermination+0x58>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e1      	bne.n	80063ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000eb4 	.word	0x20000eb4
 80063f8:	20000ee0 	.word	0x20000ee0
 80063fc:	20000ec8 	.word	0x20000ec8

08006400 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3354      	adds	r3, #84	@ 0x54
 800640c:	4618      	mov	r0, r3
 800640e:	f001 facd 	bl	80079ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006418:	2b00      	cmp	r3, #0
 800641a:	d108      	bne.n	800642e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006420:	4618      	mov	r0, r3
 8006422:	f000 ffa1 	bl	8007368 <vPortFree>
				vPortFree( pxTCB );
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 ff9e 	bl	8007368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800642c:	e019      	b.n	8006462 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006434:	2b01      	cmp	r3, #1
 8006436:	d103      	bne.n	8006440 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 ff95 	bl	8007368 <vPortFree>
	}
 800643e:	e010      	b.n	8006462 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006446:	2b02      	cmp	r3, #2
 8006448:	d00b      	beq.n	8006462 <prvDeleteTCB+0x62>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60fb      	str	r3, [r7, #12]
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <prvDeleteTCB+0x5e>
	}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006472:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <prvResetNextTaskUnblockTime+0x38>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800647c:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <prvResetNextTaskUnblockTime+0x3c>)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006484:	e008      	b.n	8006498 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006486:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <prvResetNextTaskUnblockTime+0x38>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	4a04      	ldr	r2, [pc, #16]	@ (80064a8 <prvResetNextTaskUnblockTime+0x3c>)
 8006496:	6013      	str	r3, [r2, #0]
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	20000e98 	.word	0x20000e98
 80064a8:	20000f00 	.word	0x20000f00

080064ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064b2:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <xTaskGetSchedulerState+0x34>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064ba:	2301      	movs	r3, #1
 80064bc:	607b      	str	r3, [r7, #4]
 80064be:	e008      	b.n	80064d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c0:	4b08      	ldr	r3, [pc, #32]	@ (80064e4 <xTaskGetSchedulerState+0x38>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d102      	bne.n	80064ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064c8:	2302      	movs	r3, #2
 80064ca:	607b      	str	r3, [r7, #4]
 80064cc:	e001      	b.n	80064d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064d2:	687b      	ldr	r3, [r7, #4]
	}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000eec 	.word	0x20000eec
 80064e4:	20000f08 	.word	0x20000f08

080064e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d058      	beq.n	80065b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064fe:	4b2f      	ldr	r3, [pc, #188]	@ (80065bc <xTaskPriorityDisinherit+0xd4>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	429a      	cmp	r2, r3
 8006506:	d00b      	beq.n	8006520 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	60fb      	str	r3, [r7, #12]
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	e7fd      	b.n	800651c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10b      	bne.n	8006540 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	60bb      	str	r3, [r7, #8]
}
 800653a:	bf00      	nop
 800653c:	bf00      	nop
 800653e:	e7fd      	b.n	800653c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006544:	1e5a      	subs	r2, r3, #1
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006552:	429a      	cmp	r2, r3
 8006554:	d02c      	beq.n	80065b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655a:	2b00      	cmp	r3, #0
 800655c:	d128      	bne.n	80065b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	3304      	adds	r3, #4
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe fc26 	bl	8004db4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006574:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006580:	4b0f      	ldr	r3, [pc, #60]	@ (80065c0 <xTaskPriorityDisinherit+0xd8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d903      	bls.n	8006590 <xTaskPriorityDisinherit+0xa8>
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658c:	4a0c      	ldr	r2, [pc, #48]	@ (80065c0 <xTaskPriorityDisinherit+0xd8>)
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4a09      	ldr	r2, [pc, #36]	@ (80065c4 <xTaskPriorityDisinherit+0xdc>)
 800659e:	441a      	add	r2, r3
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f7fe fba7 	bl	8004cfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065ac:	2301      	movs	r3, #1
 80065ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065b0:	697b      	ldr	r3, [r7, #20]
	}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000a0c 	.word	0x20000a0c
 80065c0:	20000ee8 	.word	0x20000ee8
 80065c4:	20000a10 	.word	0x20000a10

080065c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065d2:	4b21      	ldr	r3, [pc, #132]	@ (8006658 <prvAddCurrentTaskToDelayedList+0x90>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065d8:	4b20      	ldr	r3, [pc, #128]	@ (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe fbe8 	bl	8004db4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d10a      	bne.n	8006602 <prvAddCurrentTaskToDelayedList+0x3a>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f2:	4b1a      	ldr	r3, [pc, #104]	@ (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4619      	mov	r1, r3
 80065fa:	4819      	ldr	r0, [pc, #100]	@ (8006660 <prvAddCurrentTaskToDelayedList+0x98>)
 80065fc:	f7fe fb7d 	bl	8004cfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006600:	e026      	b.n	8006650 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4413      	add	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800660a:	4b14      	ldr	r3, [pc, #80]	@ (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	429a      	cmp	r2, r3
 8006618:	d209      	bcs.n	800662e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800661a:	4b12      	ldr	r3, [pc, #72]	@ (8006664 <prvAddCurrentTaskToDelayedList+0x9c>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b0f      	ldr	r3, [pc, #60]	@ (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f7fe fb8b 	bl	8004d42 <vListInsert>
}
 800662c:	e010      	b.n	8006650 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800662e:	4b0e      	ldr	r3, [pc, #56]	@ (8006668 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b0a      	ldr	r3, [pc, #40]	@ (800665c <prvAddCurrentTaskToDelayedList+0x94>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3304      	adds	r3, #4
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f7fe fb81 	bl	8004d42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006640:	4b0a      	ldr	r3, [pc, #40]	@ (800666c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	d202      	bcs.n	8006650 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800664a:	4a08      	ldr	r2, [pc, #32]	@ (800666c <prvAddCurrentTaskToDelayedList+0xa4>)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000ee4 	.word	0x20000ee4
 800665c:	20000a0c 	.word	0x20000a0c
 8006660:	20000ecc 	.word	0x20000ecc
 8006664:	20000e9c 	.word	0x20000e9c
 8006668:	20000e98 	.word	0x20000e98
 800666c:	20000f00 	.word	0x20000f00

08006670 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	@ 0x28
 8006674:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800667a:	f000 fb13 	bl	8006ca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800667e:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <xTimerCreateTimerTask+0x84>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d021      	beq.n	80066ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800668e:	1d3a      	adds	r2, r7, #4
 8006690:	f107 0108 	add.w	r1, r7, #8
 8006694:	f107 030c 	add.w	r3, r7, #12
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe fae7 	bl	8004c6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	9202      	str	r2, [sp, #8]
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	2302      	movs	r3, #2
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	2300      	movs	r3, #0
 80066ae:	460a      	mov	r2, r1
 80066b0:	4911      	ldr	r1, [pc, #68]	@ (80066f8 <xTimerCreateTimerTask+0x88>)
 80066b2:	4812      	ldr	r0, [pc, #72]	@ (80066fc <xTimerCreateTimerTask+0x8c>)
 80066b4:	f7ff f8a2 	bl	80057fc <xTaskCreateStatic>
 80066b8:	4603      	mov	r3, r0
 80066ba:	4a11      	ldr	r2, [pc, #68]	@ (8006700 <xTimerCreateTimerTask+0x90>)
 80066bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066be:	4b10      	ldr	r3, [pc, #64]	@ (8006700 <xTimerCreateTimerTask+0x90>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066c6:	2301      	movs	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	613b      	str	r3, [r7, #16]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80066e8:	697b      	ldr	r3, [r7, #20]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000f3c 	.word	0x20000f3c
 80066f8:	080087e0 	.word	0x080087e0
 80066fc:	0800683d 	.word	0x0800683d
 8006700:	20000f40 	.word	0x20000f40

08006704 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	@ 0x28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006712:	2300      	movs	r3, #0
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <xTimerGenericCommand+0x30>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	623b      	str	r3, [r7, #32]
}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	e7fd      	b.n	8006730 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006734:	4b19      	ldr	r3, [pc, #100]	@ (800679c <xTimerGenericCommand+0x98>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d02a      	beq.n	8006792 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b05      	cmp	r3, #5
 800674c:	dc18      	bgt.n	8006780 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800674e:	f7ff fead 	bl	80064ac <xTaskGetSchedulerState>
 8006752:	4603      	mov	r3, r0
 8006754:	2b02      	cmp	r3, #2
 8006756:	d109      	bne.n	800676c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006758:	4b10      	ldr	r3, [pc, #64]	@ (800679c <xTimerGenericCommand+0x98>)
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	f107 0110 	add.w	r1, r7, #16
 8006760:	2300      	movs	r3, #0
 8006762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006764:	f7fe fc5a 	bl	800501c <xQueueGenericSend>
 8006768:	6278      	str	r0, [r7, #36]	@ 0x24
 800676a:	e012      	b.n	8006792 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800676c:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <xTimerGenericCommand+0x98>)
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	f107 0110 	add.w	r1, r7, #16
 8006774:	2300      	movs	r3, #0
 8006776:	2200      	movs	r2, #0
 8006778:	f7fe fc50 	bl	800501c <xQueueGenericSend>
 800677c:	6278      	str	r0, [r7, #36]	@ 0x24
 800677e:	e008      	b.n	8006792 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006780:	4b06      	ldr	r3, [pc, #24]	@ (800679c <xTimerGenericCommand+0x98>)
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	f107 0110 	add.w	r1, r7, #16
 8006788:	2300      	movs	r3, #0
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	f7fe fd48 	bl	8005220 <xQueueGenericSendFromISR>
 8006790:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006794:	4618      	mov	r0, r3
 8006796:	3728      	adds	r7, #40	@ 0x28
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000f3c 	.word	0x20000f3c

080067a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067aa:	4b23      	ldr	r3, [pc, #140]	@ (8006838 <prvProcessExpiredTimer+0x98>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe fafb 	bl	8004db4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d023      	beq.n	8006814 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	18d1      	adds	r1, r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	6978      	ldr	r0, [r7, #20]
 80067da:	f000 f8d5 	bl	8006988 <prvInsertTimerInActiveList>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d020      	beq.n	8006826 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067e4:	2300      	movs	r3, #0
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	2300      	movs	r3, #0
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	2100      	movs	r1, #0
 80067ee:	6978      	ldr	r0, [r7, #20]
 80067f0:	f7ff ff88 	bl	8006704 <xTimerGenericCommand>
 80067f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d114      	bne.n	8006826 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60fb      	str	r3, [r7, #12]
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	b2da      	uxtb	r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	6978      	ldr	r0, [r7, #20]
 800682c:	4798      	blx	r3
}
 800682e:	bf00      	nop
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000f34 	.word	0x20000f34

0800683c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006844:	f107 0308 	add.w	r3, r7, #8
 8006848:	4618      	mov	r0, r3
 800684a:	f000 f859 	bl	8006900 <prvGetNextExpireTime>
 800684e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4619      	mov	r1, r3
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f805 	bl	8006864 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800685a:	f000 f8d7 	bl	8006a0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800685e:	bf00      	nop
 8006860:	e7f0      	b.n	8006844 <prvTimerTask+0x8>
	...

08006864 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800686e:	f7ff fa29 	bl	8005cc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006872:	f107 0308 	add.w	r3, r7, #8
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f866 	bl	8006948 <prvSampleTimeNow>
 800687c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d130      	bne.n	80068e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <prvProcessTimerOrBlockTask+0x3c>
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	429a      	cmp	r2, r3
 8006890:	d806      	bhi.n	80068a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006892:	f7ff fa25 	bl	8005ce0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff ff81 	bl	80067a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800689e:	e024      	b.n	80068ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068a6:	4b13      	ldr	r3, [pc, #76]	@ (80068f4 <prvProcessTimerOrBlockTask+0x90>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <prvProcessTimerOrBlockTask+0x50>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <prvProcessTimerOrBlockTask+0x52>
 80068b4:	2300      	movs	r3, #0
 80068b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068b8:	4b0f      	ldr	r3, [pc, #60]	@ (80068f8 <prvProcessTimerOrBlockTask+0x94>)
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	4619      	mov	r1, r3
 80068c6:	f7fe ff65 	bl	8005794 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068ca:	f7ff fa09 	bl	8005ce0 <xTaskResumeAll>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068d4:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <prvProcessTimerOrBlockTask+0x98>)
 80068d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	f3bf 8f6f 	isb	sy
}
 80068e4:	e001      	b.n	80068ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068e6:	f7ff f9fb 	bl	8005ce0 <xTaskResumeAll>
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000f38 	.word	0x20000f38
 80068f8:	20000f3c 	.word	0x20000f3c
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006908:	4b0e      	ldr	r3, [pc, #56]	@ (8006944 <prvGetNextExpireTime+0x44>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <prvGetNextExpireTime+0x16>
 8006912:	2201      	movs	r2, #1
 8006914:	e000      	b.n	8006918 <prvGetNextExpireTime+0x18>
 8006916:	2200      	movs	r2, #0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006924:	4b07      	ldr	r3, [pc, #28]	@ (8006944 <prvGetNextExpireTime+0x44>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	e001      	b.n	8006934 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006934:	68fb      	ldr	r3, [r7, #12]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000f34 	.word	0x20000f34

08006948 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006950:	f7ff fa64 	bl	8005e1c <xTaskGetTickCount>
 8006954:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006956:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <prvSampleTimeNow+0x3c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	429a      	cmp	r2, r3
 800695e:	d205      	bcs.n	800696c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006960:	f000 f93a 	bl	8006bd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e002      	b.n	8006972 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006972:	4a04      	ldr	r2, [pc, #16]	@ (8006984 <prvSampleTimeNow+0x3c>)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006978:	68fb      	ldr	r3, [r7, #12]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000f44 	.word	0x20000f44

08006988 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d812      	bhi.n	80069d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d302      	bcc.n	80069c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069bc:	2301      	movs	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e01b      	b.n	80069fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069c2:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <prvInsertTimerInActiveList+0x7c>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f7fe f9b8 	bl	8004d42 <vListInsert>
 80069d2:	e012      	b.n	80069fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d206      	bcs.n	80069ea <prvInsertTimerInActiveList+0x62>
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d302      	bcc.n	80069ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	e007      	b.n	80069fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069ea:	4b07      	ldr	r3, [pc, #28]	@ (8006a08 <prvInsertTimerInActiveList+0x80>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f7fe f9a4 	bl	8004d42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069fa:	697b      	ldr	r3, [r7, #20]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20000f38 	.word	0x20000f38
 8006a08:	20000f34 	.word	0x20000f34

08006a0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08e      	sub	sp, #56	@ 0x38
 8006a10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a12:	e0ce      	b.n	8006bb2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da19      	bge.n	8006a4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10b      	bne.n	8006a3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	61fb      	str	r3, [r7, #28]
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a44:	6850      	ldr	r0, [r2, #4]
 8006a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a48:	6892      	ldr	r2, [r2, #8]
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f2c0 80ae 	blt.w	8006bb2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	3304      	adds	r3, #4
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe f9a4 	bl	8004db4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff ff6a 	bl	8006948 <prvSampleTimeNow>
 8006a74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b09      	cmp	r3, #9
 8006a7a:	f200 8097 	bhi.w	8006bac <prvProcessReceivedCommands+0x1a0>
 8006a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a84 <prvProcessReceivedCommands+0x78>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006aad 	.word	0x08006aad
 8006a88:	08006aad 	.word	0x08006aad
 8006a8c:	08006aad 	.word	0x08006aad
 8006a90:	08006b23 	.word	0x08006b23
 8006a94:	08006b37 	.word	0x08006b37
 8006a98:	08006b83 	.word	0x08006b83
 8006a9c:	08006aad 	.word	0x08006aad
 8006aa0:	08006aad 	.word	0x08006aad
 8006aa4:	08006b23 	.word	0x08006b23
 8006aa8:	08006b37 	.word	0x08006b37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	18d1      	adds	r1, r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006acc:	f7ff ff5c 	bl	8006988 <prvInsertTimerInActiveList>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d06c      	beq.n	8006bb0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006adc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d061      	beq.n	8006bb0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	441a      	add	r2, r3
 8006af4:	2300      	movs	r3, #0
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	2300      	movs	r3, #0
 8006afa:	2100      	movs	r1, #0
 8006afc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006afe:	f7ff fe01 	bl	8006704 <xTimerGenericCommand>
 8006b02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d152      	bne.n	8006bb0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	61bb      	str	r3, [r7, #24]
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	e7fd      	b.n	8006b1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b34:	e03d      	b.n	8006bb2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10b      	bne.n	8006b6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	617b      	str	r3, [r7, #20]
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	e7fd      	b.n	8006b6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	18d1      	adds	r1, r2, r3
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b7c:	f7ff ff04 	bl	8006988 <prvInsertTimerInActiveList>
					break;
 8006b80:	e017      	b.n	8006bb2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006b90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b92:	f000 fbe9 	bl	8007368 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b96:	e00c      	b.n	8006bb2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006baa:	e002      	b.n	8006bb2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006bac:	bf00      	nop
 8006bae:	e000      	b.n	8006bb2 <prvProcessReceivedCommands+0x1a6>
					break;
 8006bb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bb2:	4b08      	ldr	r3, [pc, #32]	@ (8006bd4 <prvProcessReceivedCommands+0x1c8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	1d39      	adds	r1, r7, #4
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fbce 	bl	800535c <xQueueReceive>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f47f af26 	bne.w	8006a14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	3730      	adds	r7, #48	@ 0x30
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000f3c 	.word	0x20000f3c

08006bd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bde:	e049      	b.n	8006c74 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006be0:	4b2e      	ldr	r3, [pc, #184]	@ (8006c9c <prvSwitchTimerLists+0xc4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bea:	4b2c      	ldr	r3, [pc, #176]	@ (8006c9c <prvSwitchTimerLists+0xc4>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fe f8db 	bl	8004db4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02f      	beq.n	8006c74 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d90e      	bls.n	8006c44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c32:	4b1a      	ldr	r3, [pc, #104]	@ (8006c9c <prvSwitchTimerLists+0xc4>)
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	f7fe f880 	bl	8004d42 <vListInsert>
 8006c42:	e017      	b.n	8006c74 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c44:	2300      	movs	r3, #0
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f7ff fd58 	bl	8006704 <xTimerGenericCommand>
 8006c54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10b      	bne.n	8006c74 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	603b      	str	r3, [r7, #0]
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	e7fd      	b.n	8006c70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c74:	4b09      	ldr	r3, [pc, #36]	@ (8006c9c <prvSwitchTimerLists+0xc4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1b0      	bne.n	8006be0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c7e:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <prvSwitchTimerLists+0xc4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c84:	4b06      	ldr	r3, [pc, #24]	@ (8006ca0 <prvSwitchTimerLists+0xc8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a04      	ldr	r2, [pc, #16]	@ (8006c9c <prvSwitchTimerLists+0xc4>)
 8006c8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c8c:	4a04      	ldr	r2, [pc, #16]	@ (8006ca0 <prvSwitchTimerLists+0xc8>)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	6013      	str	r3, [r2, #0]
}
 8006c92:	bf00      	nop
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000f34 	.word	0x20000f34
 8006ca0:	20000f38 	.word	0x20000f38

08006ca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006caa:	f000 f96d 	bl	8006f88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006cae:	4b15      	ldr	r3, [pc, #84]	@ (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d120      	bne.n	8006cf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cb6:	4814      	ldr	r0, [pc, #80]	@ (8006d08 <prvCheckForValidListAndQueue+0x64>)
 8006cb8:	f7fd fff2 	bl	8004ca0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006cbc:	4813      	ldr	r0, [pc, #76]	@ (8006d0c <prvCheckForValidListAndQueue+0x68>)
 8006cbe:	f7fd ffef 	bl	8004ca0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006cc2:	4b13      	ldr	r3, [pc, #76]	@ (8006d10 <prvCheckForValidListAndQueue+0x6c>)
 8006cc4:	4a10      	ldr	r2, [pc, #64]	@ (8006d08 <prvCheckForValidListAndQueue+0x64>)
 8006cc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006cc8:	4b12      	ldr	r3, [pc, #72]	@ (8006d14 <prvCheckForValidListAndQueue+0x70>)
 8006cca:	4a10      	ldr	r2, [pc, #64]	@ (8006d0c <prvCheckForValidListAndQueue+0x68>)
 8006ccc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cce:	2300      	movs	r3, #0
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4b11      	ldr	r3, [pc, #68]	@ (8006d18 <prvCheckForValidListAndQueue+0x74>)
 8006cd4:	4a11      	ldr	r2, [pc, #68]	@ (8006d1c <prvCheckForValidListAndQueue+0x78>)
 8006cd6:	2110      	movs	r1, #16
 8006cd8:	200a      	movs	r0, #10
 8006cda:	f7fe f8ff 	bl	8004edc <xQueueGenericCreateStatic>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4a08      	ldr	r2, [pc, #32]	@ (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006ce2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ce4:	4b07      	ldr	r3, [pc, #28]	@ (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cec:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	490b      	ldr	r1, [pc, #44]	@ (8006d20 <prvCheckForValidListAndQueue+0x7c>)
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fd24 	bl	8005740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cf8:	f000 f978 	bl	8006fec <vPortExitCritical>
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000f3c 	.word	0x20000f3c
 8006d08:	20000f0c 	.word	0x20000f0c
 8006d0c:	20000f20 	.word	0x20000f20
 8006d10:	20000f34 	.word	0x20000f34
 8006d14:	20000f38 	.word	0x20000f38
 8006d18:	20000fe8 	.word	0x20000fe8
 8006d1c:	20000f48 	.word	0x20000f48
 8006d20:	080087e8 	.word	0x080087e8

08006d24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3b04      	subs	r3, #4
 8006d34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3b04      	subs	r3, #4
 8006d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d54:	4a0c      	ldr	r2, [pc, #48]	@ (8006d88 <pxPortInitialiseStack+0x64>)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3b14      	subs	r3, #20
 8006d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3b04      	subs	r3, #4
 8006d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f06f 0202 	mvn.w	r2, #2
 8006d72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3b20      	subs	r3, #32
 8006d78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	08006d8d 	.word	0x08006d8d

08006d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d96:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <prvTaskExitError+0x58>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d00b      	beq.n	8006db8 <prvTaskExitError+0x2c>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	bf00      	nop
 8006db6:	e7fd      	b.n	8006db4 <prvTaskExitError+0x28>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	60bb      	str	r3, [r7, #8]
}
 8006dca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006dcc:	bf00      	nop
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0fc      	beq.n	8006dce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	20000014 	.word	0x20000014
	...

08006df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006df0:	4b07      	ldr	r3, [pc, #28]	@ (8006e10 <pxCurrentTCBConst2>)
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	6808      	ldr	r0, [r1, #0]
 8006df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfa:	f380 8809 	msr	PSP, r0
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f04f 0000 	mov.w	r0, #0
 8006e06:	f380 8811 	msr	BASEPRI, r0
 8006e0a:	4770      	bx	lr
 8006e0c:	f3af 8000 	nop.w

08006e10 <pxCurrentTCBConst2>:
 8006e10:	20000a0c 	.word	0x20000a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop

08006e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e18:	4808      	ldr	r0, [pc, #32]	@ (8006e3c <prvPortStartFirstTask+0x24>)
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	6800      	ldr	r0, [r0, #0]
 8006e1e:	f380 8808 	msr	MSP, r0
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f380 8814 	msr	CONTROL, r0
 8006e2a:	b662      	cpsie	i
 8006e2c:	b661      	cpsie	f
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	df00      	svc	0
 8006e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e3a:	bf00      	nop
 8006e3c:	e000ed08 	.word	0xe000ed08

08006e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e46:	4b47      	ldr	r3, [pc, #284]	@ (8006f64 <xPortStartScheduler+0x124>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a47      	ldr	r2, [pc, #284]	@ (8006f68 <xPortStartScheduler+0x128>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10b      	bne.n	8006e68 <xPortStartScheduler+0x28>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
 8006e66:	e7fd      	b.n	8006e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e68:	4b3e      	ldr	r3, [pc, #248]	@ (8006f64 <xPortStartScheduler+0x124>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f6c <xPortStartScheduler+0x12c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d10b      	bne.n	8006e8a <xPortStartScheduler+0x4a>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	613b      	str	r3, [r7, #16]
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	e7fd      	b.n	8006e86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e8a:	4b39      	ldr	r3, [pc, #228]	@ (8006f70 <xPortStartScheduler+0x130>)
 8006e8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	22ff      	movs	r2, #255	@ 0xff
 8006e9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	4b31      	ldr	r3, [pc, #196]	@ (8006f74 <xPortStartScheduler+0x134>)
 8006eb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006eb2:	4b31      	ldr	r3, [pc, #196]	@ (8006f78 <xPortStartScheduler+0x138>)
 8006eb4:	2207      	movs	r2, #7
 8006eb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eb8:	e009      	b.n	8006ece <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006eba:	4b2f      	ldr	r3, [pc, #188]	@ (8006f78 <xPortStartScheduler+0x138>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8006f78 <xPortStartScheduler+0x138>)
 8006ec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ece:	78fb      	ldrb	r3, [r7, #3]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed6:	2b80      	cmp	r3, #128	@ 0x80
 8006ed8:	d0ef      	beq.n	8006eba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006eda:	4b27      	ldr	r3, [pc, #156]	@ (8006f78 <xPortStartScheduler+0x138>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f1c3 0307 	rsb	r3, r3, #7
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d00b      	beq.n	8006efe <xPortStartScheduler+0xbe>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	60bb      	str	r3, [r7, #8]
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	e7fd      	b.n	8006efa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006efe:	4b1e      	ldr	r3, [pc, #120]	@ (8006f78 <xPortStartScheduler+0x138>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	4a1c      	ldr	r2, [pc, #112]	@ (8006f78 <xPortStartScheduler+0x138>)
 8006f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f08:	4b1b      	ldr	r3, [pc, #108]	@ (8006f78 <xPortStartScheduler+0x138>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f10:	4a19      	ldr	r2, [pc, #100]	@ (8006f78 <xPortStartScheduler+0x138>)
 8006f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f1c:	4b17      	ldr	r3, [pc, #92]	@ (8006f7c <xPortStartScheduler+0x13c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a16      	ldr	r2, [pc, #88]	@ (8006f7c <xPortStartScheduler+0x13c>)
 8006f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f28:	4b14      	ldr	r3, [pc, #80]	@ (8006f7c <xPortStartScheduler+0x13c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a13      	ldr	r2, [pc, #76]	@ (8006f7c <xPortStartScheduler+0x13c>)
 8006f2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f34:	f000 f8da 	bl	80070ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f38:	4b11      	ldr	r3, [pc, #68]	@ (8006f80 <xPortStartScheduler+0x140>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f3e:	f000 f8f9 	bl	8007134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f42:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <xPortStartScheduler+0x144>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a0f      	ldr	r2, [pc, #60]	@ (8006f84 <xPortStartScheduler+0x144>)
 8006f48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006f4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f4e:	f7ff ff63 	bl	8006e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f52:	f7ff f82d 	bl	8005fb0 <vTaskSwitchContext>
	prvTaskExitError();
 8006f56:	f7ff ff19 	bl	8006d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	e000ed00 	.word	0xe000ed00
 8006f68:	410fc271 	.word	0x410fc271
 8006f6c:	410fc270 	.word	0x410fc270
 8006f70:	e000e400 	.word	0xe000e400
 8006f74:	20001038 	.word	0x20001038
 8006f78:	2000103c 	.word	0x2000103c
 8006f7c:	e000ed20 	.word	0xe000ed20
 8006f80:	20000014 	.word	0x20000014
 8006f84:	e000ef34 	.word	0xe000ef34

08006f88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	607b      	str	r3, [r7, #4]
}
 8006fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fa2:	4b10      	ldr	r3, [pc, #64]	@ (8006fe4 <vPortEnterCritical+0x5c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8006fe4 <vPortEnterCritical+0x5c>)
 8006faa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fac:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <vPortEnterCritical+0x5c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d110      	bne.n	8006fd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe8 <vPortEnterCritical+0x60>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	603b      	str	r3, [r7, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <vPortEnterCritical+0x4a>
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000014 	.word	0x20000014
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ff2:	4b12      	ldr	r3, [pc, #72]	@ (800703c <vPortExitCritical+0x50>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <vPortExitCritical+0x26>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	607b      	str	r3, [r7, #4]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007012:	4b0a      	ldr	r3, [pc, #40]	@ (800703c <vPortExitCritical+0x50>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3b01      	subs	r3, #1
 8007018:	4a08      	ldr	r2, [pc, #32]	@ (800703c <vPortExitCritical+0x50>)
 800701a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800701c:	4b07      	ldr	r3, [pc, #28]	@ (800703c <vPortExitCritical+0x50>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <vPortExitCritical+0x44>
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
}
 800702e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	20000014 	.word	0x20000014

08007040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007040:	f3ef 8009 	mrs	r0, PSP
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4b15      	ldr	r3, [pc, #84]	@ (80070a0 <pxCurrentTCBConst>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	f01e 0f10 	tst.w	lr, #16
 8007050:	bf08      	it	eq
 8007052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	6010      	str	r0, [r2, #0]
 800705c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007064:	f380 8811 	msr	BASEPRI, r0
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f7fe ff9e 	bl	8005fb0 <vTaskSwitchContext>
 8007074:	f04f 0000 	mov.w	r0, #0
 8007078:	f380 8811 	msr	BASEPRI, r0
 800707c:	bc09      	pop	{r0, r3}
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	6808      	ldr	r0, [r1, #0]
 8007082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007086:	f01e 0f10 	tst.w	lr, #16
 800708a:	bf08      	it	eq
 800708c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007090:	f380 8809 	msr	PSP, r0
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	f3af 8000 	nop.w

080070a0 <pxCurrentTCBConst>:
 80070a0:	20000a0c 	.word	0x20000a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop

080070a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	607b      	str	r3, [r7, #4]
}
 80070c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070c2:	f7fe febb 	bl	8005e3c <xTaskIncrementTick>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <xPortSysTickHandler+0x40>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	2300      	movs	r3, #0
 80070d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f383 8811 	msr	BASEPRI, r3
}
 80070de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007120 <vPortSetupTimerInterrupt+0x34>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007124 <vPortSetupTimerInterrupt+0x38>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007128 <vPortSetupTimerInterrupt+0x3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a0a      	ldr	r2, [pc, #40]	@ (800712c <vPortSetupTimerInterrupt+0x40>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	4a09      	ldr	r2, [pc, #36]	@ (8007130 <vPortSetupTimerInterrupt+0x44>)
 800710a:	3b01      	subs	r3, #1
 800710c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800710e:	4b04      	ldr	r3, [pc, #16]	@ (8007120 <vPortSetupTimerInterrupt+0x34>)
 8007110:	2207      	movs	r2, #7
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	e000e010 	.word	0xe000e010
 8007124:	e000e018 	.word	0xe000e018
 8007128:	20000008 	.word	0x20000008
 800712c:	10624dd3 	.word	0x10624dd3
 8007130:	e000e014 	.word	0xe000e014

08007134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007144 <vPortEnableVFP+0x10>
 8007138:	6801      	ldr	r1, [r0, #0]
 800713a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800713e:	6001      	str	r1, [r0, #0]
 8007140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007142:	bf00      	nop
 8007144:	e000ed88 	.word	0xe000ed88

08007148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b0f      	cmp	r3, #15
 8007158:	d915      	bls.n	8007186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800715a:	4a18      	ldr	r2, [pc, #96]	@ (80071bc <vPortValidateInterruptPriority+0x74>)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007164:	4b16      	ldr	r3, [pc, #88]	@ (80071c0 <vPortValidateInterruptPriority+0x78>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	7afa      	ldrb	r2, [r7, #11]
 800716a:	429a      	cmp	r2, r3
 800716c:	d20b      	bcs.n	8007186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	607b      	str	r3, [r7, #4]
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	e7fd      	b.n	8007182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007186:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <vPortValidateInterruptPriority+0x7c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800718e:	4b0e      	ldr	r3, [pc, #56]	@ (80071c8 <vPortValidateInterruptPriority+0x80>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d90b      	bls.n	80071ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	603b      	str	r3, [r7, #0]
}
 80071a8:	bf00      	nop
 80071aa:	bf00      	nop
 80071ac:	e7fd      	b.n	80071aa <vPortValidateInterruptPriority+0x62>
	}
 80071ae:	bf00      	nop
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	e000e3f0 	.word	0xe000e3f0
 80071c0:	20001038 	.word	0x20001038
 80071c4:	e000ed0c 	.word	0xe000ed0c
 80071c8:	2000103c 	.word	0x2000103c

080071cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	@ 0x28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071d8:	f7fe fd74 	bl	8005cc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007350 <pvPortMalloc+0x184>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071e4:	f000 f924 	bl	8007430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007354 <pvPortMalloc+0x188>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4013      	ands	r3, r2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f040 8095 	bne.w	8007320 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01e      	beq.n	800723a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80071fc:	2208      	movs	r2, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4413      	add	r3, r2
 8007202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	2b00      	cmp	r3, #0
 800720c:	d015      	beq.n	800723a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f023 0307 	bic.w	r3, r3, #7
 8007214:	3308      	adds	r3, #8
 8007216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00b      	beq.n	800723a <pvPortMalloc+0x6e>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	617b      	str	r3, [r7, #20]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d06f      	beq.n	8007320 <pvPortMalloc+0x154>
 8007240:	4b45      	ldr	r3, [pc, #276]	@ (8007358 <pvPortMalloc+0x18c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	429a      	cmp	r2, r3
 8007248:	d86a      	bhi.n	8007320 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800724a:	4b44      	ldr	r3, [pc, #272]	@ (800735c <pvPortMalloc+0x190>)
 800724c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800724e:	4b43      	ldr	r3, [pc, #268]	@ (800735c <pvPortMalloc+0x190>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007254:	e004      	b.n	8007260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d903      	bls.n	8007272 <pvPortMalloc+0xa6>
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f1      	bne.n	8007256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007272:	4b37      	ldr	r3, [pc, #220]	@ (8007350 <pvPortMalloc+0x184>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007278:	429a      	cmp	r2, r3
 800727a:	d051      	beq.n	8007320 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2208      	movs	r2, #8
 8007282:	4413      	add	r3, r2
 8007284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	2308      	movs	r3, #8
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	429a      	cmp	r2, r3
 800729c:	d920      	bls.n	80072e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800729e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <pvPortMalloc+0xfc>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	613b      	str	r3, [r7, #16]
}
 80072c2:	bf00      	nop
 80072c4:	bf00      	nop
 80072c6:	e7fd      	b.n	80072c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072da:	69b8      	ldr	r0, [r7, #24]
 80072dc:	f000 f90a 	bl	80074f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007358 <pvPortMalloc+0x18c>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007358 <pvPortMalloc+0x18c>)
 80072ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007358 <pvPortMalloc+0x18c>)
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007360 <pvPortMalloc+0x194>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d203      	bcs.n	8007302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072fa:	4b17      	ldr	r3, [pc, #92]	@ (8007358 <pvPortMalloc+0x18c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a18      	ldr	r2, [pc, #96]	@ (8007360 <pvPortMalloc+0x194>)
 8007300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	4b13      	ldr	r3, [pc, #76]	@ (8007354 <pvPortMalloc+0x188>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	431a      	orrs	r2, r3
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007316:	4b13      	ldr	r3, [pc, #76]	@ (8007364 <pvPortMalloc+0x198>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	4a11      	ldr	r2, [pc, #68]	@ (8007364 <pvPortMalloc+0x198>)
 800731e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007320:	f7fe fcde 	bl	8005ce0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <pvPortMalloc+0x17a>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	60fb      	str	r3, [r7, #12]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <pvPortMalloc+0x176>
	return pvReturn;
 8007346:	69fb      	ldr	r3, [r7, #28]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3728      	adds	r7, #40	@ 0x28
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20004c48 	.word	0x20004c48
 8007354:	20004c5c 	.word	0x20004c5c
 8007358:	20004c4c 	.word	0x20004c4c
 800735c:	20004c40 	.word	0x20004c40
 8007360:	20004c50 	.word	0x20004c50
 8007364:	20004c54 	.word	0x20004c54

08007368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d04f      	beq.n	800741a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800737a:	2308      	movs	r3, #8
 800737c:	425b      	negs	r3, r3
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	4b25      	ldr	r3, [pc, #148]	@ (8007424 <vPortFree+0xbc>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4013      	ands	r3, r2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <vPortFree+0x46>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	60fb      	str	r3, [r7, #12]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00b      	beq.n	80073ce <vPortFree+0x66>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	60bb      	str	r3, [r7, #8]
}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop
 80073cc:	e7fd      	b.n	80073ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	4b14      	ldr	r3, [pc, #80]	@ (8007424 <vPortFree+0xbc>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01e      	beq.n	800741a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d11a      	bne.n	800741a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007424 <vPortFree+0xbc>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	43db      	mvns	r3, r3
 80073ee:	401a      	ands	r2, r3
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073f4:	f7fe fc66 	bl	8005cc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007428 <vPortFree+0xc0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4413      	add	r3, r2
 8007402:	4a09      	ldr	r2, [pc, #36]	@ (8007428 <vPortFree+0xc0>)
 8007404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007406:	6938      	ldr	r0, [r7, #16]
 8007408:	f000 f874 	bl	80074f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800740c:	4b07      	ldr	r3, [pc, #28]	@ (800742c <vPortFree+0xc4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	4a06      	ldr	r2, [pc, #24]	@ (800742c <vPortFree+0xc4>)
 8007414:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007416:	f7fe fc63 	bl	8005ce0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800741a:	bf00      	nop
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20004c5c 	.word	0x20004c5c
 8007428:	20004c4c 	.word	0x20004c4c
 800742c:	20004c58 	.word	0x20004c58

08007430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007436:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800743a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800743c:	4b27      	ldr	r3, [pc, #156]	@ (80074dc <prvHeapInit+0xac>)
 800743e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3307      	adds	r3, #7
 800744e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0307 	bic.w	r3, r3, #7
 8007456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	4a1f      	ldr	r2, [pc, #124]	@ (80074dc <prvHeapInit+0xac>)
 8007460:	4413      	add	r3, r2
 8007462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007468:	4a1d      	ldr	r2, [pc, #116]	@ (80074e0 <prvHeapInit+0xb0>)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800746e:	4b1c      	ldr	r3, [pc, #112]	@ (80074e0 <prvHeapInit+0xb0>)
 8007470:	2200      	movs	r2, #0
 8007472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	4413      	add	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800747c:	2208      	movs	r2, #8
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	1a9b      	subs	r3, r3, r2
 8007482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0307 	bic.w	r3, r3, #7
 800748a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4a15      	ldr	r2, [pc, #84]	@ (80074e4 <prvHeapInit+0xb4>)
 8007490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007492:	4b14      	ldr	r3, [pc, #80]	@ (80074e4 <prvHeapInit+0xb4>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2200      	movs	r2, #0
 8007498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800749a:	4b12      	ldr	r3, [pc, #72]	@ (80074e4 <prvHeapInit+0xb4>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	1ad2      	subs	r2, r2, r3
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074b0:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <prvHeapInit+0xb4>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	4a0a      	ldr	r2, [pc, #40]	@ (80074e8 <prvHeapInit+0xb8>)
 80074be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4a09      	ldr	r2, [pc, #36]	@ (80074ec <prvHeapInit+0xbc>)
 80074c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074c8:	4b09      	ldr	r3, [pc, #36]	@ (80074f0 <prvHeapInit+0xc0>)
 80074ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80074ce:	601a      	str	r2, [r3, #0]
}
 80074d0:	bf00      	nop
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20001040 	.word	0x20001040
 80074e0:	20004c40 	.word	0x20004c40
 80074e4:	20004c48 	.word	0x20004c48
 80074e8:	20004c50 	.word	0x20004c50
 80074ec:	20004c4c 	.word	0x20004c4c
 80074f0:	20004c5c 	.word	0x20004c5c

080074f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074fc:	4b28      	ldr	r3, [pc, #160]	@ (80075a0 <prvInsertBlockIntoFreeList+0xac>)
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	e002      	b.n	8007508 <prvInsertBlockIntoFreeList+0x14>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d8f7      	bhi.n	8007502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4413      	add	r3, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	429a      	cmp	r2, r3
 8007522:	d108      	bne.n	8007536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	441a      	add	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d118      	bne.n	800757c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4b15      	ldr	r3, [pc, #84]	@ (80075a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d00d      	beq.n	8007572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	441a      	add	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	e008      	b.n	8007584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007572:	4b0c      	ldr	r3, [pc, #48]	@ (80075a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e003      	b.n	8007584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	429a      	cmp	r2, r3
 800758a:	d002      	beq.n	8007592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20004c40 	.word	0x20004c40
 80075a4:	20004c48 	.word	0x20004c48

080075a8 <atoi>:
 80075a8:	220a      	movs	r2, #10
 80075aa:	2100      	movs	r1, #0
 80075ac:	f000 b87a 	b.w	80076a4 <strtol>

080075b0 <_strtol_l.isra.0>:
 80075b0:	2b24      	cmp	r3, #36	@ 0x24
 80075b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b6:	4686      	mov	lr, r0
 80075b8:	4690      	mov	r8, r2
 80075ba:	d801      	bhi.n	80075c0 <_strtol_l.isra.0+0x10>
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d106      	bne.n	80075ce <_strtol_l.isra.0+0x1e>
 80075c0:	f000 fa88 	bl	8007ad4 <__errno>
 80075c4:	2316      	movs	r3, #22
 80075c6:	6003      	str	r3, [r0, #0]
 80075c8:	2000      	movs	r0, #0
 80075ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ce:	4834      	ldr	r0, [pc, #208]	@ (80076a0 <_strtol_l.isra.0+0xf0>)
 80075d0:	460d      	mov	r5, r1
 80075d2:	462a      	mov	r2, r5
 80075d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075d8:	5d06      	ldrb	r6, [r0, r4]
 80075da:	f016 0608 	ands.w	r6, r6, #8
 80075de:	d1f8      	bne.n	80075d2 <_strtol_l.isra.0+0x22>
 80075e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80075e2:	d110      	bne.n	8007606 <_strtol_l.isra.0+0x56>
 80075e4:	782c      	ldrb	r4, [r5, #0]
 80075e6:	2601      	movs	r6, #1
 80075e8:	1c95      	adds	r5, r2, #2
 80075ea:	f033 0210 	bics.w	r2, r3, #16
 80075ee:	d115      	bne.n	800761c <_strtol_l.isra.0+0x6c>
 80075f0:	2c30      	cmp	r4, #48	@ 0x30
 80075f2:	d10d      	bne.n	8007610 <_strtol_l.isra.0+0x60>
 80075f4:	782a      	ldrb	r2, [r5, #0]
 80075f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075fa:	2a58      	cmp	r2, #88	@ 0x58
 80075fc:	d108      	bne.n	8007610 <_strtol_l.isra.0+0x60>
 80075fe:	786c      	ldrb	r4, [r5, #1]
 8007600:	3502      	adds	r5, #2
 8007602:	2310      	movs	r3, #16
 8007604:	e00a      	b.n	800761c <_strtol_l.isra.0+0x6c>
 8007606:	2c2b      	cmp	r4, #43	@ 0x2b
 8007608:	bf04      	itt	eq
 800760a:	782c      	ldrbeq	r4, [r5, #0]
 800760c:	1c95      	addeq	r5, r2, #2
 800760e:	e7ec      	b.n	80075ea <_strtol_l.isra.0+0x3a>
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1f6      	bne.n	8007602 <_strtol_l.isra.0+0x52>
 8007614:	2c30      	cmp	r4, #48	@ 0x30
 8007616:	bf14      	ite	ne
 8007618:	230a      	movne	r3, #10
 800761a:	2308      	moveq	r3, #8
 800761c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007620:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007624:	2200      	movs	r2, #0
 8007626:	fbbc f9f3 	udiv	r9, ip, r3
 800762a:	4610      	mov	r0, r2
 800762c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007630:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007634:	2f09      	cmp	r7, #9
 8007636:	d80f      	bhi.n	8007658 <_strtol_l.isra.0+0xa8>
 8007638:	463c      	mov	r4, r7
 800763a:	42a3      	cmp	r3, r4
 800763c:	dd1b      	ble.n	8007676 <_strtol_l.isra.0+0xc6>
 800763e:	1c57      	adds	r7, r2, #1
 8007640:	d007      	beq.n	8007652 <_strtol_l.isra.0+0xa2>
 8007642:	4581      	cmp	r9, r0
 8007644:	d314      	bcc.n	8007670 <_strtol_l.isra.0+0xc0>
 8007646:	d101      	bne.n	800764c <_strtol_l.isra.0+0x9c>
 8007648:	45a2      	cmp	sl, r4
 800764a:	db11      	blt.n	8007670 <_strtol_l.isra.0+0xc0>
 800764c:	fb00 4003 	mla	r0, r0, r3, r4
 8007650:	2201      	movs	r2, #1
 8007652:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007656:	e7eb      	b.n	8007630 <_strtol_l.isra.0+0x80>
 8007658:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800765c:	2f19      	cmp	r7, #25
 800765e:	d801      	bhi.n	8007664 <_strtol_l.isra.0+0xb4>
 8007660:	3c37      	subs	r4, #55	@ 0x37
 8007662:	e7ea      	b.n	800763a <_strtol_l.isra.0+0x8a>
 8007664:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007668:	2f19      	cmp	r7, #25
 800766a:	d804      	bhi.n	8007676 <_strtol_l.isra.0+0xc6>
 800766c:	3c57      	subs	r4, #87	@ 0x57
 800766e:	e7e4      	b.n	800763a <_strtol_l.isra.0+0x8a>
 8007670:	f04f 32ff 	mov.w	r2, #4294967295
 8007674:	e7ed      	b.n	8007652 <_strtol_l.isra.0+0xa2>
 8007676:	1c53      	adds	r3, r2, #1
 8007678:	d108      	bne.n	800768c <_strtol_l.isra.0+0xdc>
 800767a:	2322      	movs	r3, #34	@ 0x22
 800767c:	f8ce 3000 	str.w	r3, [lr]
 8007680:	4660      	mov	r0, ip
 8007682:	f1b8 0f00 	cmp.w	r8, #0
 8007686:	d0a0      	beq.n	80075ca <_strtol_l.isra.0+0x1a>
 8007688:	1e69      	subs	r1, r5, #1
 800768a:	e006      	b.n	800769a <_strtol_l.isra.0+0xea>
 800768c:	b106      	cbz	r6, 8007690 <_strtol_l.isra.0+0xe0>
 800768e:	4240      	negs	r0, r0
 8007690:	f1b8 0f00 	cmp.w	r8, #0
 8007694:	d099      	beq.n	80075ca <_strtol_l.isra.0+0x1a>
 8007696:	2a00      	cmp	r2, #0
 8007698:	d1f6      	bne.n	8007688 <_strtol_l.isra.0+0xd8>
 800769a:	f8c8 1000 	str.w	r1, [r8]
 800769e:	e794      	b.n	80075ca <_strtol_l.isra.0+0x1a>
 80076a0:	08008875 	.word	0x08008875

080076a4 <strtol>:
 80076a4:	4613      	mov	r3, r2
 80076a6:	460a      	mov	r2, r1
 80076a8:	4601      	mov	r1, r0
 80076aa:	4802      	ldr	r0, [pc, #8]	@ (80076b4 <strtol+0x10>)
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f7ff bf7f 	b.w	80075b0 <_strtol_l.isra.0>
 80076b2:	bf00      	nop
 80076b4:	20000024 	.word	0x20000024

080076b8 <std>:
 80076b8:	2300      	movs	r3, #0
 80076ba:	b510      	push	{r4, lr}
 80076bc:	4604      	mov	r4, r0
 80076be:	e9c0 3300 	strd	r3, r3, [r0]
 80076c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076c6:	6083      	str	r3, [r0, #8]
 80076c8:	8181      	strh	r1, [r0, #12]
 80076ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80076cc:	81c2      	strh	r2, [r0, #14]
 80076ce:	6183      	str	r3, [r0, #24]
 80076d0:	4619      	mov	r1, r3
 80076d2:	2208      	movs	r2, #8
 80076d4:	305c      	adds	r0, #92	@ 0x5c
 80076d6:	f000 f8f4 	bl	80078c2 <memset>
 80076da:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <std+0x58>)
 80076dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80076de:	4b0d      	ldr	r3, [pc, #52]	@ (8007714 <std+0x5c>)
 80076e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007718 <std+0x60>)
 80076e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076e6:	4b0d      	ldr	r3, [pc, #52]	@ (800771c <std+0x64>)
 80076e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80076ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007720 <std+0x68>)
 80076ec:	6224      	str	r4, [r4, #32]
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d006      	beq.n	8007700 <std+0x48>
 80076f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076f6:	4294      	cmp	r4, r2
 80076f8:	d002      	beq.n	8007700 <std+0x48>
 80076fa:	33d0      	adds	r3, #208	@ 0xd0
 80076fc:	429c      	cmp	r4, r3
 80076fe:	d105      	bne.n	800770c <std+0x54>
 8007700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007708:	f000 ba0e 	b.w	8007b28 <__retarget_lock_init_recursive>
 800770c:	bd10      	pop	{r4, pc}
 800770e:	bf00      	nop
 8007710:	0800783d 	.word	0x0800783d
 8007714:	0800785f 	.word	0x0800785f
 8007718:	08007897 	.word	0x08007897
 800771c:	080078bb 	.word	0x080078bb
 8007720:	20004c60 	.word	0x20004c60

08007724 <stdio_exit_handler>:
 8007724:	4a02      	ldr	r2, [pc, #8]	@ (8007730 <stdio_exit_handler+0xc>)
 8007726:	4903      	ldr	r1, [pc, #12]	@ (8007734 <stdio_exit_handler+0x10>)
 8007728:	4803      	ldr	r0, [pc, #12]	@ (8007738 <stdio_exit_handler+0x14>)
 800772a:	f000 b869 	b.w	8007800 <_fwalk_sglue>
 800772e:	bf00      	nop
 8007730:	20000018 	.word	0x20000018
 8007734:	08007ea1 	.word	0x08007ea1
 8007738:	20000028 	.word	0x20000028

0800773c <cleanup_stdio>:
 800773c:	6841      	ldr	r1, [r0, #4]
 800773e:	4b0c      	ldr	r3, [pc, #48]	@ (8007770 <cleanup_stdio+0x34>)
 8007740:	4299      	cmp	r1, r3
 8007742:	b510      	push	{r4, lr}
 8007744:	4604      	mov	r4, r0
 8007746:	d001      	beq.n	800774c <cleanup_stdio+0x10>
 8007748:	f000 fbaa 	bl	8007ea0 <_fflush_r>
 800774c:	68a1      	ldr	r1, [r4, #8]
 800774e:	4b09      	ldr	r3, [pc, #36]	@ (8007774 <cleanup_stdio+0x38>)
 8007750:	4299      	cmp	r1, r3
 8007752:	d002      	beq.n	800775a <cleanup_stdio+0x1e>
 8007754:	4620      	mov	r0, r4
 8007756:	f000 fba3 	bl	8007ea0 <_fflush_r>
 800775a:	68e1      	ldr	r1, [r4, #12]
 800775c:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <cleanup_stdio+0x3c>)
 800775e:	4299      	cmp	r1, r3
 8007760:	d004      	beq.n	800776c <cleanup_stdio+0x30>
 8007762:	4620      	mov	r0, r4
 8007764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007768:	f000 bb9a 	b.w	8007ea0 <_fflush_r>
 800776c:	bd10      	pop	{r4, pc}
 800776e:	bf00      	nop
 8007770:	20004c60 	.word	0x20004c60
 8007774:	20004cc8 	.word	0x20004cc8
 8007778:	20004d30 	.word	0x20004d30

0800777c <global_stdio_init.part.0>:
 800777c:	b510      	push	{r4, lr}
 800777e:	4b0b      	ldr	r3, [pc, #44]	@ (80077ac <global_stdio_init.part.0+0x30>)
 8007780:	4c0b      	ldr	r4, [pc, #44]	@ (80077b0 <global_stdio_init.part.0+0x34>)
 8007782:	4a0c      	ldr	r2, [pc, #48]	@ (80077b4 <global_stdio_init.part.0+0x38>)
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	4620      	mov	r0, r4
 8007788:	2200      	movs	r2, #0
 800778a:	2104      	movs	r1, #4
 800778c:	f7ff ff94 	bl	80076b8 <std>
 8007790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007794:	2201      	movs	r2, #1
 8007796:	2109      	movs	r1, #9
 8007798:	f7ff ff8e 	bl	80076b8 <std>
 800779c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077a0:	2202      	movs	r2, #2
 80077a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a6:	2112      	movs	r1, #18
 80077a8:	f7ff bf86 	b.w	80076b8 <std>
 80077ac:	20004d98 	.word	0x20004d98
 80077b0:	20004c60 	.word	0x20004c60
 80077b4:	08007725 	.word	0x08007725

080077b8 <__sfp_lock_acquire>:
 80077b8:	4801      	ldr	r0, [pc, #4]	@ (80077c0 <__sfp_lock_acquire+0x8>)
 80077ba:	f000 b9b6 	b.w	8007b2a <__retarget_lock_acquire_recursive>
 80077be:	bf00      	nop
 80077c0:	20004da1 	.word	0x20004da1

080077c4 <__sfp_lock_release>:
 80077c4:	4801      	ldr	r0, [pc, #4]	@ (80077cc <__sfp_lock_release+0x8>)
 80077c6:	f000 b9b1 	b.w	8007b2c <__retarget_lock_release_recursive>
 80077ca:	bf00      	nop
 80077cc:	20004da1 	.word	0x20004da1

080077d0 <__sinit>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	4604      	mov	r4, r0
 80077d4:	f7ff fff0 	bl	80077b8 <__sfp_lock_acquire>
 80077d8:	6a23      	ldr	r3, [r4, #32]
 80077da:	b11b      	cbz	r3, 80077e4 <__sinit+0x14>
 80077dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e0:	f7ff bff0 	b.w	80077c4 <__sfp_lock_release>
 80077e4:	4b04      	ldr	r3, [pc, #16]	@ (80077f8 <__sinit+0x28>)
 80077e6:	6223      	str	r3, [r4, #32]
 80077e8:	4b04      	ldr	r3, [pc, #16]	@ (80077fc <__sinit+0x2c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f5      	bne.n	80077dc <__sinit+0xc>
 80077f0:	f7ff ffc4 	bl	800777c <global_stdio_init.part.0>
 80077f4:	e7f2      	b.n	80077dc <__sinit+0xc>
 80077f6:	bf00      	nop
 80077f8:	0800773d 	.word	0x0800773d
 80077fc:	20004d98 	.word	0x20004d98

08007800 <_fwalk_sglue>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	4607      	mov	r7, r0
 8007806:	4688      	mov	r8, r1
 8007808:	4614      	mov	r4, r2
 800780a:	2600      	movs	r6, #0
 800780c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007810:	f1b9 0901 	subs.w	r9, r9, #1
 8007814:	d505      	bpl.n	8007822 <_fwalk_sglue+0x22>
 8007816:	6824      	ldr	r4, [r4, #0]
 8007818:	2c00      	cmp	r4, #0
 800781a:	d1f7      	bne.n	800780c <_fwalk_sglue+0xc>
 800781c:	4630      	mov	r0, r6
 800781e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d907      	bls.n	8007838 <_fwalk_sglue+0x38>
 8007828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800782c:	3301      	adds	r3, #1
 800782e:	d003      	beq.n	8007838 <_fwalk_sglue+0x38>
 8007830:	4629      	mov	r1, r5
 8007832:	4638      	mov	r0, r7
 8007834:	47c0      	blx	r8
 8007836:	4306      	orrs	r6, r0
 8007838:	3568      	adds	r5, #104	@ 0x68
 800783a:	e7e9      	b.n	8007810 <_fwalk_sglue+0x10>

0800783c <__sread>:
 800783c:	b510      	push	{r4, lr}
 800783e:	460c      	mov	r4, r1
 8007840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007844:	f000 f922 	bl	8007a8c <_read_r>
 8007848:	2800      	cmp	r0, #0
 800784a:	bfab      	itete	ge
 800784c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800784e:	89a3      	ldrhlt	r3, [r4, #12]
 8007850:	181b      	addge	r3, r3, r0
 8007852:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007856:	bfac      	ite	ge
 8007858:	6563      	strge	r3, [r4, #84]	@ 0x54
 800785a:	81a3      	strhlt	r3, [r4, #12]
 800785c:	bd10      	pop	{r4, pc}

0800785e <__swrite>:
 800785e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007862:	461f      	mov	r7, r3
 8007864:	898b      	ldrh	r3, [r1, #12]
 8007866:	05db      	lsls	r3, r3, #23
 8007868:	4605      	mov	r5, r0
 800786a:	460c      	mov	r4, r1
 800786c:	4616      	mov	r6, r2
 800786e:	d505      	bpl.n	800787c <__swrite+0x1e>
 8007870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007874:	2302      	movs	r3, #2
 8007876:	2200      	movs	r2, #0
 8007878:	f000 f8f6 	bl	8007a68 <_lseek_r>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007882:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	4632      	mov	r2, r6
 800788a:	463b      	mov	r3, r7
 800788c:	4628      	mov	r0, r5
 800788e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007892:	f000 b90d 	b.w	8007ab0 <_write_r>

08007896 <__sseek>:
 8007896:	b510      	push	{r4, lr}
 8007898:	460c      	mov	r4, r1
 800789a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789e:	f000 f8e3 	bl	8007a68 <_lseek_r>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	bf15      	itete	ne
 80078a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078b2:	81a3      	strheq	r3, [r4, #12]
 80078b4:	bf18      	it	ne
 80078b6:	81a3      	strhne	r3, [r4, #12]
 80078b8:	bd10      	pop	{r4, pc}

080078ba <__sclose>:
 80078ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078be:	f000 b865 	b.w	800798c <_close_r>

080078c2 <memset>:
 80078c2:	4402      	add	r2, r0
 80078c4:	4603      	mov	r3, r0
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d100      	bne.n	80078cc <memset+0xa>
 80078ca:	4770      	bx	lr
 80078cc:	f803 1b01 	strb.w	r1, [r3], #1
 80078d0:	e7f9      	b.n	80078c6 <memset+0x4>
	...

080078d4 <strtok>:
 80078d4:	4b16      	ldr	r3, [pc, #88]	@ (8007930 <strtok+0x5c>)
 80078d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078da:	681f      	ldr	r7, [r3, #0]
 80078dc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80078de:	4605      	mov	r5, r0
 80078e0:	460e      	mov	r6, r1
 80078e2:	b9ec      	cbnz	r4, 8007920 <strtok+0x4c>
 80078e4:	2050      	movs	r0, #80	@ 0x50
 80078e6:	f000 f9a1 	bl	8007c2c <malloc>
 80078ea:	4602      	mov	r2, r0
 80078ec:	6478      	str	r0, [r7, #68]	@ 0x44
 80078ee:	b920      	cbnz	r0, 80078fa <strtok+0x26>
 80078f0:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <strtok+0x60>)
 80078f2:	4811      	ldr	r0, [pc, #68]	@ (8007938 <strtok+0x64>)
 80078f4:	215b      	movs	r1, #91	@ 0x5b
 80078f6:	f000 f931 	bl	8007b5c <__assert_func>
 80078fa:	e9c0 4400 	strd	r4, r4, [r0]
 80078fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007902:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007906:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800790a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800790e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007912:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007916:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800791a:	6184      	str	r4, [r0, #24]
 800791c:	7704      	strb	r4, [r0, #28]
 800791e:	6244      	str	r4, [r0, #36]	@ 0x24
 8007920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	2301      	movs	r3, #1
 8007928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800792c:	f000 b806 	b.w	800793c <__strtok_r>
 8007930:	20000024 	.word	0x20000024
 8007934:	08008975 	.word	0x08008975
 8007938:	0800898c 	.word	0x0800898c

0800793c <__strtok_r>:
 800793c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793e:	4604      	mov	r4, r0
 8007940:	b908      	cbnz	r0, 8007946 <__strtok_r+0xa>
 8007942:	6814      	ldr	r4, [r2, #0]
 8007944:	b144      	cbz	r4, 8007958 <__strtok_r+0x1c>
 8007946:	4620      	mov	r0, r4
 8007948:	f814 5b01 	ldrb.w	r5, [r4], #1
 800794c:	460f      	mov	r7, r1
 800794e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007952:	b91e      	cbnz	r6, 800795c <__strtok_r+0x20>
 8007954:	b965      	cbnz	r5, 8007970 <__strtok_r+0x34>
 8007956:	6015      	str	r5, [r2, #0]
 8007958:	2000      	movs	r0, #0
 800795a:	e005      	b.n	8007968 <__strtok_r+0x2c>
 800795c:	42b5      	cmp	r5, r6
 800795e:	d1f6      	bne.n	800794e <__strtok_r+0x12>
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f0      	bne.n	8007946 <__strtok_r+0xa>
 8007964:	6014      	str	r4, [r2, #0]
 8007966:	7003      	strb	r3, [r0, #0]
 8007968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800796a:	461c      	mov	r4, r3
 800796c:	e00c      	b.n	8007988 <__strtok_r+0x4c>
 800796e:	b91d      	cbnz	r5, 8007978 <__strtok_r+0x3c>
 8007970:	4627      	mov	r7, r4
 8007972:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007976:	460e      	mov	r6, r1
 8007978:	f816 5b01 	ldrb.w	r5, [r6], #1
 800797c:	42ab      	cmp	r3, r5
 800797e:	d1f6      	bne.n	800796e <__strtok_r+0x32>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0f2      	beq.n	800796a <__strtok_r+0x2e>
 8007984:	2300      	movs	r3, #0
 8007986:	703b      	strb	r3, [r7, #0]
 8007988:	6014      	str	r4, [r2, #0]
 800798a:	e7ed      	b.n	8007968 <__strtok_r+0x2c>

0800798c <_close_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d06      	ldr	r5, [pc, #24]	@ (80079a8 <_close_r+0x1c>)
 8007990:	2300      	movs	r3, #0
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	f7f9 ff0c 	bl	80017b4 <_close>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_close_r+0x1a>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_close_r+0x1a>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	20004d9c 	.word	0x20004d9c

080079ac <_reclaim_reent>:
 80079ac:	4b2d      	ldr	r3, [pc, #180]	@ (8007a64 <_reclaim_reent+0xb8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4283      	cmp	r3, r0
 80079b2:	b570      	push	{r4, r5, r6, lr}
 80079b4:	4604      	mov	r4, r0
 80079b6:	d053      	beq.n	8007a60 <_reclaim_reent+0xb4>
 80079b8:	69c3      	ldr	r3, [r0, #28]
 80079ba:	b31b      	cbz	r3, 8007a04 <_reclaim_reent+0x58>
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	b163      	cbz	r3, 80079da <_reclaim_reent+0x2e>
 80079c0:	2500      	movs	r5, #0
 80079c2:	69e3      	ldr	r3, [r4, #28]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	5959      	ldr	r1, [r3, r5]
 80079c8:	b9b1      	cbnz	r1, 80079f8 <_reclaim_reent+0x4c>
 80079ca:	3504      	adds	r5, #4
 80079cc:	2d80      	cmp	r5, #128	@ 0x80
 80079ce:	d1f8      	bne.n	80079c2 <_reclaim_reent+0x16>
 80079d0:	69e3      	ldr	r3, [r4, #28]
 80079d2:	4620      	mov	r0, r4
 80079d4:	68d9      	ldr	r1, [r3, #12]
 80079d6:	f000 f8df 	bl	8007b98 <_free_r>
 80079da:	69e3      	ldr	r3, [r4, #28]
 80079dc:	6819      	ldr	r1, [r3, #0]
 80079de:	b111      	cbz	r1, 80079e6 <_reclaim_reent+0x3a>
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 f8d9 	bl	8007b98 <_free_r>
 80079e6:	69e3      	ldr	r3, [r4, #28]
 80079e8:	689d      	ldr	r5, [r3, #8]
 80079ea:	b15d      	cbz	r5, 8007a04 <_reclaim_reent+0x58>
 80079ec:	4629      	mov	r1, r5
 80079ee:	4620      	mov	r0, r4
 80079f0:	682d      	ldr	r5, [r5, #0]
 80079f2:	f000 f8d1 	bl	8007b98 <_free_r>
 80079f6:	e7f8      	b.n	80079ea <_reclaim_reent+0x3e>
 80079f8:	680e      	ldr	r6, [r1, #0]
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 f8cc 	bl	8007b98 <_free_r>
 8007a00:	4631      	mov	r1, r6
 8007a02:	e7e1      	b.n	80079c8 <_reclaim_reent+0x1c>
 8007a04:	6961      	ldr	r1, [r4, #20]
 8007a06:	b111      	cbz	r1, 8007a0e <_reclaim_reent+0x62>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f8c5 	bl	8007b98 <_free_r>
 8007a0e:	69e1      	ldr	r1, [r4, #28]
 8007a10:	b111      	cbz	r1, 8007a18 <_reclaim_reent+0x6c>
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 f8c0 	bl	8007b98 <_free_r>
 8007a18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a1a:	b111      	cbz	r1, 8007a22 <_reclaim_reent+0x76>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 f8bb 	bl	8007b98 <_free_r>
 8007a22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a24:	b111      	cbz	r1, 8007a2c <_reclaim_reent+0x80>
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 f8b6 	bl	8007b98 <_free_r>
 8007a2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a2e:	b111      	cbz	r1, 8007a36 <_reclaim_reent+0x8a>
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 f8b1 	bl	8007b98 <_free_r>
 8007a36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a38:	b111      	cbz	r1, 8007a40 <_reclaim_reent+0x94>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 f8ac 	bl	8007b98 <_free_r>
 8007a40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a42:	b111      	cbz	r1, 8007a4a <_reclaim_reent+0x9e>
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 f8a7 	bl	8007b98 <_free_r>
 8007a4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a4c:	b111      	cbz	r1, 8007a54 <_reclaim_reent+0xa8>
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f000 f8a2 	bl	8007b98 <_free_r>
 8007a54:	6a23      	ldr	r3, [r4, #32]
 8007a56:	b11b      	cbz	r3, 8007a60 <_reclaim_reent+0xb4>
 8007a58:	4620      	mov	r0, r4
 8007a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a5e:	4718      	bx	r3
 8007a60:	bd70      	pop	{r4, r5, r6, pc}
 8007a62:	bf00      	nop
 8007a64:	20000024 	.word	0x20000024

08007a68 <_lseek_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d07      	ldr	r5, [pc, #28]	@ (8007a88 <_lseek_r+0x20>)
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	4608      	mov	r0, r1
 8007a70:	4611      	mov	r1, r2
 8007a72:	2200      	movs	r2, #0
 8007a74:	602a      	str	r2, [r5, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f7f9 fec3 	bl	8001802 <_lseek>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_lseek_r+0x1e>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_lseek_r+0x1e>
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	20004d9c 	.word	0x20004d9c

08007a8c <_read_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d07      	ldr	r5, [pc, #28]	@ (8007aac <_read_r+0x20>)
 8007a90:	4604      	mov	r4, r0
 8007a92:	4608      	mov	r0, r1
 8007a94:	4611      	mov	r1, r2
 8007a96:	2200      	movs	r2, #0
 8007a98:	602a      	str	r2, [r5, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f7f9 fe51 	bl	8001742 <_read>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_read_r+0x1e>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_read_r+0x1e>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	20004d9c 	.word	0x20004d9c

08007ab0 <_write_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	@ (8007ad0 <_write_r+0x20>)
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4611      	mov	r1, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7f9 fe5c 	bl	800177c <_write>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_write_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_write_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20004d9c 	.word	0x20004d9c

08007ad4 <__errno>:
 8007ad4:	4b01      	ldr	r3, [pc, #4]	@ (8007adc <__errno+0x8>)
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000024 	.word	0x20000024

08007ae0 <__libc_init_array>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8007b18 <__libc_init_array+0x38>)
 8007ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8007b1c <__libc_init_array+0x3c>)
 8007ae6:	1b64      	subs	r4, r4, r5
 8007ae8:	10a4      	asrs	r4, r4, #2
 8007aea:	2600      	movs	r6, #0
 8007aec:	42a6      	cmp	r6, r4
 8007aee:	d109      	bne.n	8007b04 <__libc_init_array+0x24>
 8007af0:	4d0b      	ldr	r5, [pc, #44]	@ (8007b20 <__libc_init_array+0x40>)
 8007af2:	4c0c      	ldr	r4, [pc, #48]	@ (8007b24 <__libc_init_array+0x44>)
 8007af4:	f000 fe4e 	bl	8008794 <_init>
 8007af8:	1b64      	subs	r4, r4, r5
 8007afa:	10a4      	asrs	r4, r4, #2
 8007afc:	2600      	movs	r6, #0
 8007afe:	42a6      	cmp	r6, r4
 8007b00:	d105      	bne.n	8007b0e <__libc_init_array+0x2e>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b08:	4798      	blx	r3
 8007b0a:	3601      	adds	r6, #1
 8007b0c:	e7ee      	b.n	8007aec <__libc_init_array+0xc>
 8007b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b12:	4798      	blx	r3
 8007b14:	3601      	adds	r6, #1
 8007b16:	e7f2      	b.n	8007afe <__libc_init_array+0x1e>
 8007b18:	08008a60 	.word	0x08008a60
 8007b1c:	08008a60 	.word	0x08008a60
 8007b20:	08008a60 	.word	0x08008a60
 8007b24:	08008a64 	.word	0x08008a64

08007b28 <__retarget_lock_init_recursive>:
 8007b28:	4770      	bx	lr

08007b2a <__retarget_lock_acquire_recursive>:
 8007b2a:	4770      	bx	lr

08007b2c <__retarget_lock_release_recursive>:
 8007b2c:	4770      	bx	lr

08007b2e <strcpy>:
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b34:	f803 2b01 	strb.w	r2, [r3], #1
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	d1f9      	bne.n	8007b30 <strcpy+0x2>
 8007b3c:	4770      	bx	lr

08007b3e <memcpy>:
 8007b3e:	440a      	add	r2, r1
 8007b40:	4291      	cmp	r1, r2
 8007b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b46:	d100      	bne.n	8007b4a <memcpy+0xc>
 8007b48:	4770      	bx	lr
 8007b4a:	b510      	push	{r4, lr}
 8007b4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b54:	4291      	cmp	r1, r2
 8007b56:	d1f9      	bne.n	8007b4c <memcpy+0xe>
 8007b58:	bd10      	pop	{r4, pc}
	...

08007b5c <__assert_func>:
 8007b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b5e:	4614      	mov	r4, r2
 8007b60:	461a      	mov	r2, r3
 8007b62:	4b09      	ldr	r3, [pc, #36]	@ (8007b88 <__assert_func+0x2c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4605      	mov	r5, r0
 8007b68:	68d8      	ldr	r0, [r3, #12]
 8007b6a:	b14c      	cbz	r4, 8007b80 <__assert_func+0x24>
 8007b6c:	4b07      	ldr	r3, [pc, #28]	@ (8007b8c <__assert_func+0x30>)
 8007b6e:	9100      	str	r1, [sp, #0]
 8007b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b74:	4906      	ldr	r1, [pc, #24]	@ (8007b90 <__assert_func+0x34>)
 8007b76:	462b      	mov	r3, r5
 8007b78:	f000 f9ba 	bl	8007ef0 <fiprintf>
 8007b7c:	f000 f9da 	bl	8007f34 <abort>
 8007b80:	4b04      	ldr	r3, [pc, #16]	@ (8007b94 <__assert_func+0x38>)
 8007b82:	461c      	mov	r4, r3
 8007b84:	e7f3      	b.n	8007b6e <__assert_func+0x12>
 8007b86:	bf00      	nop
 8007b88:	20000024 	.word	0x20000024
 8007b8c:	080089e6 	.word	0x080089e6
 8007b90:	080089f3 	.word	0x080089f3
 8007b94:	08008a21 	.word	0x08008a21

08007b98 <_free_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d041      	beq.n	8007c24 <_free_r+0x8c>
 8007ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba4:	1f0c      	subs	r4, r1, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfb8      	it	lt
 8007baa:	18e4      	addlt	r4, r4, r3
 8007bac:	f000 f8e8 	bl	8007d80 <__malloc_lock>
 8007bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c28 <_free_r+0x90>)
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	b933      	cbnz	r3, 8007bc4 <_free_r+0x2c>
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	6014      	str	r4, [r2, #0]
 8007bba:	4628      	mov	r0, r5
 8007bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc0:	f000 b8e4 	b.w	8007d8c <__malloc_unlock>
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d908      	bls.n	8007bda <_free_r+0x42>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	1821      	adds	r1, r4, r0
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf01      	itttt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	1809      	addeq	r1, r1, r0
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	e7ed      	b.n	8007bb6 <_free_r+0x1e>
 8007bda:	461a      	mov	r2, r3
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b10b      	cbz	r3, 8007be4 <_free_r+0x4c>
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d9fa      	bls.n	8007bda <_free_r+0x42>
 8007be4:	6811      	ldr	r1, [r2, #0]
 8007be6:	1850      	adds	r0, r2, r1
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d10b      	bne.n	8007c04 <_free_r+0x6c>
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	4401      	add	r1, r0
 8007bf0:	1850      	adds	r0, r2, r1
 8007bf2:	4283      	cmp	r3, r0
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	d1e0      	bne.n	8007bba <_free_r+0x22>
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	6053      	str	r3, [r2, #4]
 8007bfe:	4408      	add	r0, r1
 8007c00:	6010      	str	r0, [r2, #0]
 8007c02:	e7da      	b.n	8007bba <_free_r+0x22>
 8007c04:	d902      	bls.n	8007c0c <_free_r+0x74>
 8007c06:	230c      	movs	r3, #12
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	e7d6      	b.n	8007bba <_free_r+0x22>
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	1821      	adds	r1, r4, r0
 8007c10:	428b      	cmp	r3, r1
 8007c12:	bf04      	itt	eq
 8007c14:	6819      	ldreq	r1, [r3, #0]
 8007c16:	685b      	ldreq	r3, [r3, #4]
 8007c18:	6063      	str	r3, [r4, #4]
 8007c1a:	bf04      	itt	eq
 8007c1c:	1809      	addeq	r1, r1, r0
 8007c1e:	6021      	streq	r1, [r4, #0]
 8007c20:	6054      	str	r4, [r2, #4]
 8007c22:	e7ca      	b.n	8007bba <_free_r+0x22>
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
 8007c26:	bf00      	nop
 8007c28:	20004da8 	.word	0x20004da8

08007c2c <malloc>:
 8007c2c:	4b02      	ldr	r3, [pc, #8]	@ (8007c38 <malloc+0xc>)
 8007c2e:	4601      	mov	r1, r0
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	f000 b825 	b.w	8007c80 <_malloc_r>
 8007c36:	bf00      	nop
 8007c38:	20000024 	.word	0x20000024

08007c3c <sbrk_aligned>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c7c <sbrk_aligned+0x40>)
 8007c40:	460c      	mov	r4, r1
 8007c42:	6831      	ldr	r1, [r6, #0]
 8007c44:	4605      	mov	r5, r0
 8007c46:	b911      	cbnz	r1, 8007c4e <sbrk_aligned+0x12>
 8007c48:	f000 f964 	bl	8007f14 <_sbrk_r>
 8007c4c:	6030      	str	r0, [r6, #0]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	4628      	mov	r0, r5
 8007c52:	f000 f95f 	bl	8007f14 <_sbrk_r>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	d103      	bne.n	8007c62 <sbrk_aligned+0x26>
 8007c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8007c5e:	4620      	mov	r0, r4
 8007c60:	bd70      	pop	{r4, r5, r6, pc}
 8007c62:	1cc4      	adds	r4, r0, #3
 8007c64:	f024 0403 	bic.w	r4, r4, #3
 8007c68:	42a0      	cmp	r0, r4
 8007c6a:	d0f8      	beq.n	8007c5e <sbrk_aligned+0x22>
 8007c6c:	1a21      	subs	r1, r4, r0
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 f950 	bl	8007f14 <_sbrk_r>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d1f2      	bne.n	8007c5e <sbrk_aligned+0x22>
 8007c78:	e7ef      	b.n	8007c5a <sbrk_aligned+0x1e>
 8007c7a:	bf00      	nop
 8007c7c:	20004da4 	.word	0x20004da4

08007c80 <_malloc_r>:
 8007c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c84:	1ccd      	adds	r5, r1, #3
 8007c86:	f025 0503 	bic.w	r5, r5, #3
 8007c8a:	3508      	adds	r5, #8
 8007c8c:	2d0c      	cmp	r5, #12
 8007c8e:	bf38      	it	cc
 8007c90:	250c      	movcc	r5, #12
 8007c92:	2d00      	cmp	r5, #0
 8007c94:	4606      	mov	r6, r0
 8007c96:	db01      	blt.n	8007c9c <_malloc_r+0x1c>
 8007c98:	42a9      	cmp	r1, r5
 8007c9a:	d904      	bls.n	8007ca6 <_malloc_r+0x26>
 8007c9c:	230c      	movs	r3, #12
 8007c9e:	6033      	str	r3, [r6, #0]
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d7c <_malloc_r+0xfc>
 8007caa:	f000 f869 	bl	8007d80 <__malloc_lock>
 8007cae:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb2:	461c      	mov	r4, r3
 8007cb4:	bb44      	cbnz	r4, 8007d08 <_malloc_r+0x88>
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f7ff ffbf 	bl	8007c3c <sbrk_aligned>
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	d158      	bne.n	8007d76 <_malloc_r+0xf6>
 8007cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8007cc8:	4627      	mov	r7, r4
 8007cca:	2f00      	cmp	r7, #0
 8007ccc:	d143      	bne.n	8007d56 <_malloc_r+0xd6>
 8007cce:	2c00      	cmp	r4, #0
 8007cd0:	d04b      	beq.n	8007d6a <_malloc_r+0xea>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	eb04 0903 	add.w	r9, r4, r3
 8007cdc:	f000 f91a 	bl	8007f14 <_sbrk_r>
 8007ce0:	4581      	cmp	r9, r0
 8007ce2:	d142      	bne.n	8007d6a <_malloc_r+0xea>
 8007ce4:	6821      	ldr	r1, [r4, #0]
 8007ce6:	1a6d      	subs	r5, r5, r1
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	f7ff ffa6 	bl	8007c3c <sbrk_aligned>
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d03a      	beq.n	8007d6a <_malloc_r+0xea>
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	442b      	add	r3, r5
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	bb62      	cbnz	r2, 8007d5c <_malloc_r+0xdc>
 8007d02:	f8c8 7000 	str.w	r7, [r8]
 8007d06:	e00f      	b.n	8007d28 <_malloc_r+0xa8>
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	1b52      	subs	r2, r2, r5
 8007d0c:	d420      	bmi.n	8007d50 <_malloc_r+0xd0>
 8007d0e:	2a0b      	cmp	r2, #11
 8007d10:	d917      	bls.n	8007d42 <_malloc_r+0xc2>
 8007d12:	1961      	adds	r1, r4, r5
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	6025      	str	r5, [r4, #0]
 8007d18:	bf18      	it	ne
 8007d1a:	6059      	strne	r1, [r3, #4]
 8007d1c:	6863      	ldr	r3, [r4, #4]
 8007d1e:	bf08      	it	eq
 8007d20:	f8c8 1000 	streq.w	r1, [r8]
 8007d24:	5162      	str	r2, [r4, r5]
 8007d26:	604b      	str	r3, [r1, #4]
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f000 f82f 	bl	8007d8c <__malloc_unlock>
 8007d2e:	f104 000b 	add.w	r0, r4, #11
 8007d32:	1d23      	adds	r3, r4, #4
 8007d34:	f020 0007 	bic.w	r0, r0, #7
 8007d38:	1ac2      	subs	r2, r0, r3
 8007d3a:	bf1c      	itt	ne
 8007d3c:	1a1b      	subne	r3, r3, r0
 8007d3e:	50a3      	strne	r3, [r4, r2]
 8007d40:	e7af      	b.n	8007ca2 <_malloc_r+0x22>
 8007d42:	6862      	ldr	r2, [r4, #4]
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	bf0c      	ite	eq
 8007d48:	f8c8 2000 	streq.w	r2, [r8]
 8007d4c:	605a      	strne	r2, [r3, #4]
 8007d4e:	e7eb      	b.n	8007d28 <_malloc_r+0xa8>
 8007d50:	4623      	mov	r3, r4
 8007d52:	6864      	ldr	r4, [r4, #4]
 8007d54:	e7ae      	b.n	8007cb4 <_malloc_r+0x34>
 8007d56:	463c      	mov	r4, r7
 8007d58:	687f      	ldr	r7, [r7, #4]
 8007d5a:	e7b6      	b.n	8007cca <_malloc_r+0x4a>
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	d1fb      	bne.n	8007d5c <_malloc_r+0xdc>
 8007d64:	2300      	movs	r3, #0
 8007d66:	6053      	str	r3, [r2, #4]
 8007d68:	e7de      	b.n	8007d28 <_malloc_r+0xa8>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	6033      	str	r3, [r6, #0]
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f000 f80c 	bl	8007d8c <__malloc_unlock>
 8007d74:	e794      	b.n	8007ca0 <_malloc_r+0x20>
 8007d76:	6005      	str	r5, [r0, #0]
 8007d78:	e7d6      	b.n	8007d28 <_malloc_r+0xa8>
 8007d7a:	bf00      	nop
 8007d7c:	20004da8 	.word	0x20004da8

08007d80 <__malloc_lock>:
 8007d80:	4801      	ldr	r0, [pc, #4]	@ (8007d88 <__malloc_lock+0x8>)
 8007d82:	f7ff bed2 	b.w	8007b2a <__retarget_lock_acquire_recursive>
 8007d86:	bf00      	nop
 8007d88:	20004da0 	.word	0x20004da0

08007d8c <__malloc_unlock>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	@ (8007d94 <__malloc_unlock+0x8>)
 8007d8e:	f7ff becd 	b.w	8007b2c <__retarget_lock_release_recursive>
 8007d92:	bf00      	nop
 8007d94:	20004da0 	.word	0x20004da0

08007d98 <__sflush_r>:
 8007d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da0:	0716      	lsls	r6, r2, #28
 8007da2:	4605      	mov	r5, r0
 8007da4:	460c      	mov	r4, r1
 8007da6:	d454      	bmi.n	8007e52 <__sflush_r+0xba>
 8007da8:	684b      	ldr	r3, [r1, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	dc02      	bgt.n	8007db4 <__sflush_r+0x1c>
 8007dae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dd48      	ble.n	8007e46 <__sflush_r+0xae>
 8007db4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d045      	beq.n	8007e46 <__sflush_r+0xae>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007dc0:	682f      	ldr	r7, [r5, #0]
 8007dc2:	6a21      	ldr	r1, [r4, #32]
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	d030      	beq.n	8007e2a <__sflush_r+0x92>
 8007dc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	0759      	lsls	r1, r3, #29
 8007dce:	d505      	bpl.n	8007ddc <__sflush_r+0x44>
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	1ad2      	subs	r2, r2, r3
 8007dd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dd6:	b10b      	cbz	r3, 8007ddc <__sflush_r+0x44>
 8007dd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	2300      	movs	r3, #0
 8007dde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007de0:	6a21      	ldr	r1, [r4, #32]
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b0      	blx	r6
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	d106      	bne.n	8007dfa <__sflush_r+0x62>
 8007dec:	6829      	ldr	r1, [r5, #0]
 8007dee:	291d      	cmp	r1, #29
 8007df0:	d82b      	bhi.n	8007e4a <__sflush_r+0xb2>
 8007df2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e9c <__sflush_r+0x104>)
 8007df4:	40ca      	lsrs	r2, r1
 8007df6:	07d6      	lsls	r6, r2, #31
 8007df8:	d527      	bpl.n	8007e4a <__sflush_r+0xb2>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	6062      	str	r2, [r4, #4]
 8007dfe:	04d9      	lsls	r1, r3, #19
 8007e00:	6922      	ldr	r2, [r4, #16]
 8007e02:	6022      	str	r2, [r4, #0]
 8007e04:	d504      	bpl.n	8007e10 <__sflush_r+0x78>
 8007e06:	1c42      	adds	r2, r0, #1
 8007e08:	d101      	bne.n	8007e0e <__sflush_r+0x76>
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	b903      	cbnz	r3, 8007e10 <__sflush_r+0x78>
 8007e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e12:	602f      	str	r7, [r5, #0]
 8007e14:	b1b9      	cbz	r1, 8007e46 <__sflush_r+0xae>
 8007e16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	d002      	beq.n	8007e24 <__sflush_r+0x8c>
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f7ff feba 	bl	8007b98 <_free_r>
 8007e24:	2300      	movs	r3, #0
 8007e26:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e28:	e00d      	b.n	8007e46 <__sflush_r+0xae>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b0      	blx	r6
 8007e30:	4602      	mov	r2, r0
 8007e32:	1c50      	adds	r0, r2, #1
 8007e34:	d1c9      	bne.n	8007dca <__sflush_r+0x32>
 8007e36:	682b      	ldr	r3, [r5, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0c6      	beq.n	8007dca <__sflush_r+0x32>
 8007e3c:	2b1d      	cmp	r3, #29
 8007e3e:	d001      	beq.n	8007e44 <__sflush_r+0xac>
 8007e40:	2b16      	cmp	r3, #22
 8007e42:	d11e      	bne.n	8007e82 <__sflush_r+0xea>
 8007e44:	602f      	str	r7, [r5, #0]
 8007e46:	2000      	movs	r0, #0
 8007e48:	e022      	b.n	8007e90 <__sflush_r+0xf8>
 8007e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e4e:	b21b      	sxth	r3, r3
 8007e50:	e01b      	b.n	8007e8a <__sflush_r+0xf2>
 8007e52:	690f      	ldr	r7, [r1, #16]
 8007e54:	2f00      	cmp	r7, #0
 8007e56:	d0f6      	beq.n	8007e46 <__sflush_r+0xae>
 8007e58:	0793      	lsls	r3, r2, #30
 8007e5a:	680e      	ldr	r6, [r1, #0]
 8007e5c:	bf08      	it	eq
 8007e5e:	694b      	ldreq	r3, [r1, #20]
 8007e60:	600f      	str	r7, [r1, #0]
 8007e62:	bf18      	it	ne
 8007e64:	2300      	movne	r3, #0
 8007e66:	eba6 0807 	sub.w	r8, r6, r7
 8007e6a:	608b      	str	r3, [r1, #8]
 8007e6c:	f1b8 0f00 	cmp.w	r8, #0
 8007e70:	dde9      	ble.n	8007e46 <__sflush_r+0xae>
 8007e72:	6a21      	ldr	r1, [r4, #32]
 8007e74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e76:	4643      	mov	r3, r8
 8007e78:	463a      	mov	r2, r7
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b0      	blx	r6
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	dc08      	bgt.n	8007e94 <__sflush_r+0xfc>
 8007e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e94:	4407      	add	r7, r0
 8007e96:	eba8 0800 	sub.w	r8, r8, r0
 8007e9a:	e7e7      	b.n	8007e6c <__sflush_r+0xd4>
 8007e9c:	20400001 	.word	0x20400001

08007ea0 <_fflush_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	690b      	ldr	r3, [r1, #16]
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	b913      	cbnz	r3, 8007eb0 <_fflush_r+0x10>
 8007eaa:	2500      	movs	r5, #0
 8007eac:	4628      	mov	r0, r5
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	b118      	cbz	r0, 8007eba <_fflush_r+0x1a>
 8007eb2:	6a03      	ldr	r3, [r0, #32]
 8007eb4:	b90b      	cbnz	r3, 8007eba <_fflush_r+0x1a>
 8007eb6:	f7ff fc8b 	bl	80077d0 <__sinit>
 8007eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f3      	beq.n	8007eaa <_fflush_r+0xa>
 8007ec2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ec4:	07d0      	lsls	r0, r2, #31
 8007ec6:	d404      	bmi.n	8007ed2 <_fflush_r+0x32>
 8007ec8:	0599      	lsls	r1, r3, #22
 8007eca:	d402      	bmi.n	8007ed2 <_fflush_r+0x32>
 8007ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ece:	f7ff fe2c 	bl	8007b2a <__retarget_lock_acquire_recursive>
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	f7ff ff5f 	bl	8007d98 <__sflush_r>
 8007eda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007edc:	07da      	lsls	r2, r3, #31
 8007ede:	4605      	mov	r5, r0
 8007ee0:	d4e4      	bmi.n	8007eac <_fflush_r+0xc>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	059b      	lsls	r3, r3, #22
 8007ee6:	d4e1      	bmi.n	8007eac <_fflush_r+0xc>
 8007ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eea:	f7ff fe1f 	bl	8007b2c <__retarget_lock_release_recursive>
 8007eee:	e7dd      	b.n	8007eac <_fflush_r+0xc>

08007ef0 <fiprintf>:
 8007ef0:	b40e      	push	{r1, r2, r3}
 8007ef2:	b503      	push	{r0, r1, lr}
 8007ef4:	4601      	mov	r1, r0
 8007ef6:	ab03      	add	r3, sp, #12
 8007ef8:	4805      	ldr	r0, [pc, #20]	@ (8007f10 <fiprintf+0x20>)
 8007efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007efe:	6800      	ldr	r0, [r0, #0]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	f000 f847 	bl	8007f94 <_vfiprintf_r>
 8007f06:	b002      	add	sp, #8
 8007f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f0c:	b003      	add	sp, #12
 8007f0e:	4770      	bx	lr
 8007f10:	20000024 	.word	0x20000024

08007f14 <_sbrk_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d06      	ldr	r5, [pc, #24]	@ (8007f30 <_sbrk_r+0x1c>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	602b      	str	r3, [r5, #0]
 8007f20:	f7f9 fc7c 	bl	800181c <_sbrk>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d102      	bne.n	8007f2e <_sbrk_r+0x1a>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	b103      	cbz	r3, 8007f2e <_sbrk_r+0x1a>
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	20004d9c 	.word	0x20004d9c

08007f34 <abort>:
 8007f34:	b508      	push	{r3, lr}
 8007f36:	2006      	movs	r0, #6
 8007f38:	f000 fb8c 	bl	8008654 <raise>
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	f7f9 fbf5 	bl	800172c <_exit>

08007f42 <__sfputc_r>:
 8007f42:	6893      	ldr	r3, [r2, #8]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	b410      	push	{r4}
 8007f4a:	6093      	str	r3, [r2, #8]
 8007f4c:	da08      	bge.n	8007f60 <__sfputc_r+0x1e>
 8007f4e:	6994      	ldr	r4, [r2, #24]
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	db01      	blt.n	8007f58 <__sfputc_r+0x16>
 8007f54:	290a      	cmp	r1, #10
 8007f56:	d103      	bne.n	8007f60 <__sfputc_r+0x1e>
 8007f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f5c:	f000 babe 	b.w	80084dc <__swbuf_r>
 8007f60:	6813      	ldr	r3, [r2, #0]
 8007f62:	1c58      	adds	r0, r3, #1
 8007f64:	6010      	str	r0, [r2, #0]
 8007f66:	7019      	strb	r1, [r3, #0]
 8007f68:	4608      	mov	r0, r1
 8007f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <__sfputs_r>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	4606      	mov	r6, r0
 8007f74:	460f      	mov	r7, r1
 8007f76:	4614      	mov	r4, r2
 8007f78:	18d5      	adds	r5, r2, r3
 8007f7a:	42ac      	cmp	r4, r5
 8007f7c:	d101      	bne.n	8007f82 <__sfputs_r+0x12>
 8007f7e:	2000      	movs	r0, #0
 8007f80:	e007      	b.n	8007f92 <__sfputs_r+0x22>
 8007f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f86:	463a      	mov	r2, r7
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f7ff ffda 	bl	8007f42 <__sfputc_r>
 8007f8e:	1c43      	adds	r3, r0, #1
 8007f90:	d1f3      	bne.n	8007f7a <__sfputs_r+0xa>
 8007f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f94 <_vfiprintf_r>:
 8007f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	460d      	mov	r5, r1
 8007f9a:	b09d      	sub	sp, #116	@ 0x74
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	4698      	mov	r8, r3
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	b118      	cbz	r0, 8007fac <_vfiprintf_r+0x18>
 8007fa4:	6a03      	ldr	r3, [r0, #32]
 8007fa6:	b90b      	cbnz	r3, 8007fac <_vfiprintf_r+0x18>
 8007fa8:	f7ff fc12 	bl	80077d0 <__sinit>
 8007fac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fae:	07d9      	lsls	r1, r3, #31
 8007fb0:	d405      	bmi.n	8007fbe <_vfiprintf_r+0x2a>
 8007fb2:	89ab      	ldrh	r3, [r5, #12]
 8007fb4:	059a      	lsls	r2, r3, #22
 8007fb6:	d402      	bmi.n	8007fbe <_vfiprintf_r+0x2a>
 8007fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fba:	f7ff fdb6 	bl	8007b2a <__retarget_lock_acquire_recursive>
 8007fbe:	89ab      	ldrh	r3, [r5, #12]
 8007fc0:	071b      	lsls	r3, r3, #28
 8007fc2:	d501      	bpl.n	8007fc8 <_vfiprintf_r+0x34>
 8007fc4:	692b      	ldr	r3, [r5, #16]
 8007fc6:	b99b      	cbnz	r3, 8007ff0 <_vfiprintf_r+0x5c>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 fac4 	bl	8008558 <__swsetup_r>
 8007fd0:	b170      	cbz	r0, 8007ff0 <_vfiprintf_r+0x5c>
 8007fd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fd4:	07dc      	lsls	r4, r3, #31
 8007fd6:	d504      	bpl.n	8007fe2 <_vfiprintf_r+0x4e>
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fdc:	b01d      	add	sp, #116	@ 0x74
 8007fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	0598      	lsls	r0, r3, #22
 8007fe6:	d4f7      	bmi.n	8007fd8 <_vfiprintf_r+0x44>
 8007fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fea:	f7ff fd9f 	bl	8007b2c <__retarget_lock_release_recursive>
 8007fee:	e7f3      	b.n	8007fd8 <_vfiprintf_r+0x44>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff4:	2320      	movs	r3, #32
 8007ff6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ffe:	2330      	movs	r3, #48	@ 0x30
 8008000:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081b0 <_vfiprintf_r+0x21c>
 8008004:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008008:	f04f 0901 	mov.w	r9, #1
 800800c:	4623      	mov	r3, r4
 800800e:	469a      	mov	sl, r3
 8008010:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008014:	b10a      	cbz	r2, 800801a <_vfiprintf_r+0x86>
 8008016:	2a25      	cmp	r2, #37	@ 0x25
 8008018:	d1f9      	bne.n	800800e <_vfiprintf_r+0x7a>
 800801a:	ebba 0b04 	subs.w	fp, sl, r4
 800801e:	d00b      	beq.n	8008038 <_vfiprintf_r+0xa4>
 8008020:	465b      	mov	r3, fp
 8008022:	4622      	mov	r2, r4
 8008024:	4629      	mov	r1, r5
 8008026:	4630      	mov	r0, r6
 8008028:	f7ff ffa2 	bl	8007f70 <__sfputs_r>
 800802c:	3001      	adds	r0, #1
 800802e:	f000 80a7 	beq.w	8008180 <_vfiprintf_r+0x1ec>
 8008032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008034:	445a      	add	r2, fp
 8008036:	9209      	str	r2, [sp, #36]	@ 0x24
 8008038:	f89a 3000 	ldrb.w	r3, [sl]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 809f 	beq.w	8008180 <_vfiprintf_r+0x1ec>
 8008042:	2300      	movs	r3, #0
 8008044:	f04f 32ff 	mov.w	r2, #4294967295
 8008048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800804c:	f10a 0a01 	add.w	sl, sl, #1
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	9307      	str	r3, [sp, #28]
 8008054:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008058:	931a      	str	r3, [sp, #104]	@ 0x68
 800805a:	4654      	mov	r4, sl
 800805c:	2205      	movs	r2, #5
 800805e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008062:	4853      	ldr	r0, [pc, #332]	@ (80081b0 <_vfiprintf_r+0x21c>)
 8008064:	f7f8 f8c4 	bl	80001f0 <memchr>
 8008068:	9a04      	ldr	r2, [sp, #16]
 800806a:	b9d8      	cbnz	r0, 80080a4 <_vfiprintf_r+0x110>
 800806c:	06d1      	lsls	r1, r2, #27
 800806e:	bf44      	itt	mi
 8008070:	2320      	movmi	r3, #32
 8008072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008076:	0713      	lsls	r3, r2, #28
 8008078:	bf44      	itt	mi
 800807a:	232b      	movmi	r3, #43	@ 0x2b
 800807c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008080:	f89a 3000 	ldrb.w	r3, [sl]
 8008084:	2b2a      	cmp	r3, #42	@ 0x2a
 8008086:	d015      	beq.n	80080b4 <_vfiprintf_r+0x120>
 8008088:	9a07      	ldr	r2, [sp, #28]
 800808a:	4654      	mov	r4, sl
 800808c:	2000      	movs	r0, #0
 800808e:	f04f 0c0a 	mov.w	ip, #10
 8008092:	4621      	mov	r1, r4
 8008094:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008098:	3b30      	subs	r3, #48	@ 0x30
 800809a:	2b09      	cmp	r3, #9
 800809c:	d94b      	bls.n	8008136 <_vfiprintf_r+0x1a2>
 800809e:	b1b0      	cbz	r0, 80080ce <_vfiprintf_r+0x13a>
 80080a0:	9207      	str	r2, [sp, #28]
 80080a2:	e014      	b.n	80080ce <_vfiprintf_r+0x13a>
 80080a4:	eba0 0308 	sub.w	r3, r0, r8
 80080a8:	fa09 f303 	lsl.w	r3, r9, r3
 80080ac:	4313      	orrs	r3, r2
 80080ae:	9304      	str	r3, [sp, #16]
 80080b0:	46a2      	mov	sl, r4
 80080b2:	e7d2      	b.n	800805a <_vfiprintf_r+0xc6>
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	1d19      	adds	r1, r3, #4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	9103      	str	r1, [sp, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bfbb      	ittet	lt
 80080c0:	425b      	neglt	r3, r3
 80080c2:	f042 0202 	orrlt.w	r2, r2, #2
 80080c6:	9307      	strge	r3, [sp, #28]
 80080c8:	9307      	strlt	r3, [sp, #28]
 80080ca:	bfb8      	it	lt
 80080cc:	9204      	strlt	r2, [sp, #16]
 80080ce:	7823      	ldrb	r3, [r4, #0]
 80080d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80080d2:	d10a      	bne.n	80080ea <_vfiprintf_r+0x156>
 80080d4:	7863      	ldrb	r3, [r4, #1]
 80080d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80080d8:	d132      	bne.n	8008140 <_vfiprintf_r+0x1ac>
 80080da:	9b03      	ldr	r3, [sp, #12]
 80080dc:	1d1a      	adds	r2, r3, #4
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	9203      	str	r2, [sp, #12]
 80080e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080e6:	3402      	adds	r4, #2
 80080e8:	9305      	str	r3, [sp, #20]
 80080ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081c0 <_vfiprintf_r+0x22c>
 80080ee:	7821      	ldrb	r1, [r4, #0]
 80080f0:	2203      	movs	r2, #3
 80080f2:	4650      	mov	r0, sl
 80080f4:	f7f8 f87c 	bl	80001f0 <memchr>
 80080f8:	b138      	cbz	r0, 800810a <_vfiprintf_r+0x176>
 80080fa:	9b04      	ldr	r3, [sp, #16]
 80080fc:	eba0 000a 	sub.w	r0, r0, sl
 8008100:	2240      	movs	r2, #64	@ 0x40
 8008102:	4082      	lsls	r2, r0
 8008104:	4313      	orrs	r3, r2
 8008106:	3401      	adds	r4, #1
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800810e:	4829      	ldr	r0, [pc, #164]	@ (80081b4 <_vfiprintf_r+0x220>)
 8008110:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008114:	2206      	movs	r2, #6
 8008116:	f7f8 f86b 	bl	80001f0 <memchr>
 800811a:	2800      	cmp	r0, #0
 800811c:	d03f      	beq.n	800819e <_vfiprintf_r+0x20a>
 800811e:	4b26      	ldr	r3, [pc, #152]	@ (80081b8 <_vfiprintf_r+0x224>)
 8008120:	bb1b      	cbnz	r3, 800816a <_vfiprintf_r+0x1d6>
 8008122:	9b03      	ldr	r3, [sp, #12]
 8008124:	3307      	adds	r3, #7
 8008126:	f023 0307 	bic.w	r3, r3, #7
 800812a:	3308      	adds	r3, #8
 800812c:	9303      	str	r3, [sp, #12]
 800812e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008130:	443b      	add	r3, r7
 8008132:	9309      	str	r3, [sp, #36]	@ 0x24
 8008134:	e76a      	b.n	800800c <_vfiprintf_r+0x78>
 8008136:	fb0c 3202 	mla	r2, ip, r2, r3
 800813a:	460c      	mov	r4, r1
 800813c:	2001      	movs	r0, #1
 800813e:	e7a8      	b.n	8008092 <_vfiprintf_r+0xfe>
 8008140:	2300      	movs	r3, #0
 8008142:	3401      	adds	r4, #1
 8008144:	9305      	str	r3, [sp, #20]
 8008146:	4619      	mov	r1, r3
 8008148:	f04f 0c0a 	mov.w	ip, #10
 800814c:	4620      	mov	r0, r4
 800814e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008152:	3a30      	subs	r2, #48	@ 0x30
 8008154:	2a09      	cmp	r2, #9
 8008156:	d903      	bls.n	8008160 <_vfiprintf_r+0x1cc>
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0c6      	beq.n	80080ea <_vfiprintf_r+0x156>
 800815c:	9105      	str	r1, [sp, #20]
 800815e:	e7c4      	b.n	80080ea <_vfiprintf_r+0x156>
 8008160:	fb0c 2101 	mla	r1, ip, r1, r2
 8008164:	4604      	mov	r4, r0
 8008166:	2301      	movs	r3, #1
 8008168:	e7f0      	b.n	800814c <_vfiprintf_r+0x1b8>
 800816a:	ab03      	add	r3, sp, #12
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	462a      	mov	r2, r5
 8008170:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <_vfiprintf_r+0x228>)
 8008172:	a904      	add	r1, sp, #16
 8008174:	4630      	mov	r0, r6
 8008176:	f3af 8000 	nop.w
 800817a:	4607      	mov	r7, r0
 800817c:	1c78      	adds	r0, r7, #1
 800817e:	d1d6      	bne.n	800812e <_vfiprintf_r+0x19a>
 8008180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008182:	07d9      	lsls	r1, r3, #31
 8008184:	d405      	bmi.n	8008192 <_vfiprintf_r+0x1fe>
 8008186:	89ab      	ldrh	r3, [r5, #12]
 8008188:	059a      	lsls	r2, r3, #22
 800818a:	d402      	bmi.n	8008192 <_vfiprintf_r+0x1fe>
 800818c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800818e:	f7ff fccd 	bl	8007b2c <__retarget_lock_release_recursive>
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	065b      	lsls	r3, r3, #25
 8008196:	f53f af1f 	bmi.w	8007fd8 <_vfiprintf_r+0x44>
 800819a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800819c:	e71e      	b.n	8007fdc <_vfiprintf_r+0x48>
 800819e:	ab03      	add	r3, sp, #12
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	462a      	mov	r2, r5
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <_vfiprintf_r+0x228>)
 80081a6:	a904      	add	r1, sp, #16
 80081a8:	4630      	mov	r0, r6
 80081aa:	f000 f879 	bl	80082a0 <_printf_i>
 80081ae:	e7e4      	b.n	800817a <_vfiprintf_r+0x1e6>
 80081b0:	08008a22 	.word	0x08008a22
 80081b4:	08008a2c 	.word	0x08008a2c
 80081b8:	00000000 	.word	0x00000000
 80081bc:	08007f71 	.word	0x08007f71
 80081c0:	08008a28 	.word	0x08008a28

080081c4 <_printf_common>:
 80081c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c8:	4616      	mov	r6, r2
 80081ca:	4698      	mov	r8, r3
 80081cc:	688a      	ldr	r2, [r1, #8]
 80081ce:	690b      	ldr	r3, [r1, #16]
 80081d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081d4:	4293      	cmp	r3, r2
 80081d6:	bfb8      	it	lt
 80081d8:	4613      	movlt	r3, r2
 80081da:	6033      	str	r3, [r6, #0]
 80081dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081e0:	4607      	mov	r7, r0
 80081e2:	460c      	mov	r4, r1
 80081e4:	b10a      	cbz	r2, 80081ea <_printf_common+0x26>
 80081e6:	3301      	adds	r3, #1
 80081e8:	6033      	str	r3, [r6, #0]
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	0699      	lsls	r1, r3, #26
 80081ee:	bf42      	ittt	mi
 80081f0:	6833      	ldrmi	r3, [r6, #0]
 80081f2:	3302      	addmi	r3, #2
 80081f4:	6033      	strmi	r3, [r6, #0]
 80081f6:	6825      	ldr	r5, [r4, #0]
 80081f8:	f015 0506 	ands.w	r5, r5, #6
 80081fc:	d106      	bne.n	800820c <_printf_common+0x48>
 80081fe:	f104 0a19 	add.w	sl, r4, #25
 8008202:	68e3      	ldr	r3, [r4, #12]
 8008204:	6832      	ldr	r2, [r6, #0]
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	42ab      	cmp	r3, r5
 800820a:	dc26      	bgt.n	800825a <_printf_common+0x96>
 800820c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	3b00      	subs	r3, #0
 8008214:	bf18      	it	ne
 8008216:	2301      	movne	r3, #1
 8008218:	0692      	lsls	r2, r2, #26
 800821a:	d42b      	bmi.n	8008274 <_printf_common+0xb0>
 800821c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008220:	4641      	mov	r1, r8
 8008222:	4638      	mov	r0, r7
 8008224:	47c8      	blx	r9
 8008226:	3001      	adds	r0, #1
 8008228:	d01e      	beq.n	8008268 <_printf_common+0xa4>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	6922      	ldr	r2, [r4, #16]
 800822e:	f003 0306 	and.w	r3, r3, #6
 8008232:	2b04      	cmp	r3, #4
 8008234:	bf02      	ittt	eq
 8008236:	68e5      	ldreq	r5, [r4, #12]
 8008238:	6833      	ldreq	r3, [r6, #0]
 800823a:	1aed      	subeq	r5, r5, r3
 800823c:	68a3      	ldr	r3, [r4, #8]
 800823e:	bf0c      	ite	eq
 8008240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008244:	2500      	movne	r5, #0
 8008246:	4293      	cmp	r3, r2
 8008248:	bfc4      	itt	gt
 800824a:	1a9b      	subgt	r3, r3, r2
 800824c:	18ed      	addgt	r5, r5, r3
 800824e:	2600      	movs	r6, #0
 8008250:	341a      	adds	r4, #26
 8008252:	42b5      	cmp	r5, r6
 8008254:	d11a      	bne.n	800828c <_printf_common+0xc8>
 8008256:	2000      	movs	r0, #0
 8008258:	e008      	b.n	800826c <_printf_common+0xa8>
 800825a:	2301      	movs	r3, #1
 800825c:	4652      	mov	r2, sl
 800825e:	4641      	mov	r1, r8
 8008260:	4638      	mov	r0, r7
 8008262:	47c8      	blx	r9
 8008264:	3001      	adds	r0, #1
 8008266:	d103      	bne.n	8008270 <_printf_common+0xac>
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008270:	3501      	adds	r5, #1
 8008272:	e7c6      	b.n	8008202 <_printf_common+0x3e>
 8008274:	18e1      	adds	r1, r4, r3
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	2030      	movs	r0, #48	@ 0x30
 800827a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800827e:	4422      	add	r2, r4
 8008280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008288:	3302      	adds	r3, #2
 800828a:	e7c7      	b.n	800821c <_printf_common+0x58>
 800828c:	2301      	movs	r3, #1
 800828e:	4622      	mov	r2, r4
 8008290:	4641      	mov	r1, r8
 8008292:	4638      	mov	r0, r7
 8008294:	47c8      	blx	r9
 8008296:	3001      	adds	r0, #1
 8008298:	d0e6      	beq.n	8008268 <_printf_common+0xa4>
 800829a:	3601      	adds	r6, #1
 800829c:	e7d9      	b.n	8008252 <_printf_common+0x8e>
	...

080082a0 <_printf_i>:
 80082a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082a4:	7e0f      	ldrb	r7, [r1, #24]
 80082a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082a8:	2f78      	cmp	r7, #120	@ 0x78
 80082aa:	4691      	mov	r9, r2
 80082ac:	4680      	mov	r8, r0
 80082ae:	460c      	mov	r4, r1
 80082b0:	469a      	mov	sl, r3
 80082b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082b6:	d807      	bhi.n	80082c8 <_printf_i+0x28>
 80082b8:	2f62      	cmp	r7, #98	@ 0x62
 80082ba:	d80a      	bhi.n	80082d2 <_printf_i+0x32>
 80082bc:	2f00      	cmp	r7, #0
 80082be:	f000 80d1 	beq.w	8008464 <_printf_i+0x1c4>
 80082c2:	2f58      	cmp	r7, #88	@ 0x58
 80082c4:	f000 80b8 	beq.w	8008438 <_printf_i+0x198>
 80082c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082d0:	e03a      	b.n	8008348 <_printf_i+0xa8>
 80082d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082d6:	2b15      	cmp	r3, #21
 80082d8:	d8f6      	bhi.n	80082c8 <_printf_i+0x28>
 80082da:	a101      	add	r1, pc, #4	@ (adr r1, 80082e0 <_printf_i+0x40>)
 80082dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082e0:	08008339 	.word	0x08008339
 80082e4:	0800834d 	.word	0x0800834d
 80082e8:	080082c9 	.word	0x080082c9
 80082ec:	080082c9 	.word	0x080082c9
 80082f0:	080082c9 	.word	0x080082c9
 80082f4:	080082c9 	.word	0x080082c9
 80082f8:	0800834d 	.word	0x0800834d
 80082fc:	080082c9 	.word	0x080082c9
 8008300:	080082c9 	.word	0x080082c9
 8008304:	080082c9 	.word	0x080082c9
 8008308:	080082c9 	.word	0x080082c9
 800830c:	0800844b 	.word	0x0800844b
 8008310:	08008377 	.word	0x08008377
 8008314:	08008405 	.word	0x08008405
 8008318:	080082c9 	.word	0x080082c9
 800831c:	080082c9 	.word	0x080082c9
 8008320:	0800846d 	.word	0x0800846d
 8008324:	080082c9 	.word	0x080082c9
 8008328:	08008377 	.word	0x08008377
 800832c:	080082c9 	.word	0x080082c9
 8008330:	080082c9 	.word	0x080082c9
 8008334:	0800840d 	.word	0x0800840d
 8008338:	6833      	ldr	r3, [r6, #0]
 800833a:	1d1a      	adds	r2, r3, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6032      	str	r2, [r6, #0]
 8008340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008348:	2301      	movs	r3, #1
 800834a:	e09c      	b.n	8008486 <_printf_i+0x1e6>
 800834c:	6833      	ldr	r3, [r6, #0]
 800834e:	6820      	ldr	r0, [r4, #0]
 8008350:	1d19      	adds	r1, r3, #4
 8008352:	6031      	str	r1, [r6, #0]
 8008354:	0606      	lsls	r6, r0, #24
 8008356:	d501      	bpl.n	800835c <_printf_i+0xbc>
 8008358:	681d      	ldr	r5, [r3, #0]
 800835a:	e003      	b.n	8008364 <_printf_i+0xc4>
 800835c:	0645      	lsls	r5, r0, #25
 800835e:	d5fb      	bpl.n	8008358 <_printf_i+0xb8>
 8008360:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008364:	2d00      	cmp	r5, #0
 8008366:	da03      	bge.n	8008370 <_printf_i+0xd0>
 8008368:	232d      	movs	r3, #45	@ 0x2d
 800836a:	426d      	negs	r5, r5
 800836c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008370:	4858      	ldr	r0, [pc, #352]	@ (80084d4 <_printf_i+0x234>)
 8008372:	230a      	movs	r3, #10
 8008374:	e011      	b.n	800839a <_printf_i+0xfa>
 8008376:	6821      	ldr	r1, [r4, #0]
 8008378:	6833      	ldr	r3, [r6, #0]
 800837a:	0608      	lsls	r0, r1, #24
 800837c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008380:	d402      	bmi.n	8008388 <_printf_i+0xe8>
 8008382:	0649      	lsls	r1, r1, #25
 8008384:	bf48      	it	mi
 8008386:	b2ad      	uxthmi	r5, r5
 8008388:	2f6f      	cmp	r7, #111	@ 0x6f
 800838a:	4852      	ldr	r0, [pc, #328]	@ (80084d4 <_printf_i+0x234>)
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	bf14      	ite	ne
 8008390:	230a      	movne	r3, #10
 8008392:	2308      	moveq	r3, #8
 8008394:	2100      	movs	r1, #0
 8008396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800839a:	6866      	ldr	r6, [r4, #4]
 800839c:	60a6      	str	r6, [r4, #8]
 800839e:	2e00      	cmp	r6, #0
 80083a0:	db05      	blt.n	80083ae <_printf_i+0x10e>
 80083a2:	6821      	ldr	r1, [r4, #0]
 80083a4:	432e      	orrs	r6, r5
 80083a6:	f021 0104 	bic.w	r1, r1, #4
 80083aa:	6021      	str	r1, [r4, #0]
 80083ac:	d04b      	beq.n	8008446 <_printf_i+0x1a6>
 80083ae:	4616      	mov	r6, r2
 80083b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80083b4:	fb03 5711 	mls	r7, r3, r1, r5
 80083b8:	5dc7      	ldrb	r7, [r0, r7]
 80083ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083be:	462f      	mov	r7, r5
 80083c0:	42bb      	cmp	r3, r7
 80083c2:	460d      	mov	r5, r1
 80083c4:	d9f4      	bls.n	80083b0 <_printf_i+0x110>
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d10b      	bne.n	80083e2 <_printf_i+0x142>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	07df      	lsls	r7, r3, #31
 80083ce:	d508      	bpl.n	80083e2 <_printf_i+0x142>
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	6861      	ldr	r1, [r4, #4]
 80083d4:	4299      	cmp	r1, r3
 80083d6:	bfde      	ittt	le
 80083d8:	2330      	movle	r3, #48	@ 0x30
 80083da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083e2:	1b92      	subs	r2, r2, r6
 80083e4:	6122      	str	r2, [r4, #16]
 80083e6:	f8cd a000 	str.w	sl, [sp]
 80083ea:	464b      	mov	r3, r9
 80083ec:	aa03      	add	r2, sp, #12
 80083ee:	4621      	mov	r1, r4
 80083f0:	4640      	mov	r0, r8
 80083f2:	f7ff fee7 	bl	80081c4 <_printf_common>
 80083f6:	3001      	adds	r0, #1
 80083f8:	d14a      	bne.n	8008490 <_printf_i+0x1f0>
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	b004      	add	sp, #16
 8008400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	f043 0320 	orr.w	r3, r3, #32
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	4832      	ldr	r0, [pc, #200]	@ (80084d8 <_printf_i+0x238>)
 800840e:	2778      	movs	r7, #120	@ 0x78
 8008410:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	6831      	ldr	r1, [r6, #0]
 8008418:	061f      	lsls	r7, r3, #24
 800841a:	f851 5b04 	ldr.w	r5, [r1], #4
 800841e:	d402      	bmi.n	8008426 <_printf_i+0x186>
 8008420:	065f      	lsls	r7, r3, #25
 8008422:	bf48      	it	mi
 8008424:	b2ad      	uxthmi	r5, r5
 8008426:	6031      	str	r1, [r6, #0]
 8008428:	07d9      	lsls	r1, r3, #31
 800842a:	bf44      	itt	mi
 800842c:	f043 0320 	orrmi.w	r3, r3, #32
 8008430:	6023      	strmi	r3, [r4, #0]
 8008432:	b11d      	cbz	r5, 800843c <_printf_i+0x19c>
 8008434:	2310      	movs	r3, #16
 8008436:	e7ad      	b.n	8008394 <_printf_i+0xf4>
 8008438:	4826      	ldr	r0, [pc, #152]	@ (80084d4 <_printf_i+0x234>)
 800843a:	e7e9      	b.n	8008410 <_printf_i+0x170>
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	f023 0320 	bic.w	r3, r3, #32
 8008442:	6023      	str	r3, [r4, #0]
 8008444:	e7f6      	b.n	8008434 <_printf_i+0x194>
 8008446:	4616      	mov	r6, r2
 8008448:	e7bd      	b.n	80083c6 <_printf_i+0x126>
 800844a:	6833      	ldr	r3, [r6, #0]
 800844c:	6825      	ldr	r5, [r4, #0]
 800844e:	6961      	ldr	r1, [r4, #20]
 8008450:	1d18      	adds	r0, r3, #4
 8008452:	6030      	str	r0, [r6, #0]
 8008454:	062e      	lsls	r6, r5, #24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	d501      	bpl.n	800845e <_printf_i+0x1be>
 800845a:	6019      	str	r1, [r3, #0]
 800845c:	e002      	b.n	8008464 <_printf_i+0x1c4>
 800845e:	0668      	lsls	r0, r5, #25
 8008460:	d5fb      	bpl.n	800845a <_printf_i+0x1ba>
 8008462:	8019      	strh	r1, [r3, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	4616      	mov	r6, r2
 800846a:	e7bc      	b.n	80083e6 <_printf_i+0x146>
 800846c:	6833      	ldr	r3, [r6, #0]
 800846e:	1d1a      	adds	r2, r3, #4
 8008470:	6032      	str	r2, [r6, #0]
 8008472:	681e      	ldr	r6, [r3, #0]
 8008474:	6862      	ldr	r2, [r4, #4]
 8008476:	2100      	movs	r1, #0
 8008478:	4630      	mov	r0, r6
 800847a:	f7f7 feb9 	bl	80001f0 <memchr>
 800847e:	b108      	cbz	r0, 8008484 <_printf_i+0x1e4>
 8008480:	1b80      	subs	r0, r0, r6
 8008482:	6060      	str	r0, [r4, #4]
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	2300      	movs	r3, #0
 800848a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800848e:	e7aa      	b.n	80083e6 <_printf_i+0x146>
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	4632      	mov	r2, r6
 8008494:	4649      	mov	r1, r9
 8008496:	4640      	mov	r0, r8
 8008498:	47d0      	blx	sl
 800849a:	3001      	adds	r0, #1
 800849c:	d0ad      	beq.n	80083fa <_printf_i+0x15a>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	079b      	lsls	r3, r3, #30
 80084a2:	d413      	bmi.n	80084cc <_printf_i+0x22c>
 80084a4:	68e0      	ldr	r0, [r4, #12]
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	4298      	cmp	r0, r3
 80084aa:	bfb8      	it	lt
 80084ac:	4618      	movlt	r0, r3
 80084ae:	e7a6      	b.n	80083fe <_printf_i+0x15e>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4632      	mov	r2, r6
 80084b4:	4649      	mov	r1, r9
 80084b6:	4640      	mov	r0, r8
 80084b8:	47d0      	blx	sl
 80084ba:	3001      	adds	r0, #1
 80084bc:	d09d      	beq.n	80083fa <_printf_i+0x15a>
 80084be:	3501      	adds	r5, #1
 80084c0:	68e3      	ldr	r3, [r4, #12]
 80084c2:	9903      	ldr	r1, [sp, #12]
 80084c4:	1a5b      	subs	r3, r3, r1
 80084c6:	42ab      	cmp	r3, r5
 80084c8:	dcf2      	bgt.n	80084b0 <_printf_i+0x210>
 80084ca:	e7eb      	b.n	80084a4 <_printf_i+0x204>
 80084cc:	2500      	movs	r5, #0
 80084ce:	f104 0619 	add.w	r6, r4, #25
 80084d2:	e7f5      	b.n	80084c0 <_printf_i+0x220>
 80084d4:	08008a33 	.word	0x08008a33
 80084d8:	08008a44 	.word	0x08008a44

080084dc <__swbuf_r>:
 80084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084de:	460e      	mov	r6, r1
 80084e0:	4614      	mov	r4, r2
 80084e2:	4605      	mov	r5, r0
 80084e4:	b118      	cbz	r0, 80084ee <__swbuf_r+0x12>
 80084e6:	6a03      	ldr	r3, [r0, #32]
 80084e8:	b90b      	cbnz	r3, 80084ee <__swbuf_r+0x12>
 80084ea:	f7ff f971 	bl	80077d0 <__sinit>
 80084ee:	69a3      	ldr	r3, [r4, #24]
 80084f0:	60a3      	str	r3, [r4, #8]
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	071a      	lsls	r2, r3, #28
 80084f6:	d501      	bpl.n	80084fc <__swbuf_r+0x20>
 80084f8:	6923      	ldr	r3, [r4, #16]
 80084fa:	b943      	cbnz	r3, 800850e <__swbuf_r+0x32>
 80084fc:	4621      	mov	r1, r4
 80084fe:	4628      	mov	r0, r5
 8008500:	f000 f82a 	bl	8008558 <__swsetup_r>
 8008504:	b118      	cbz	r0, 800850e <__swbuf_r+0x32>
 8008506:	f04f 37ff 	mov.w	r7, #4294967295
 800850a:	4638      	mov	r0, r7
 800850c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	6922      	ldr	r2, [r4, #16]
 8008512:	1a98      	subs	r0, r3, r2
 8008514:	6963      	ldr	r3, [r4, #20]
 8008516:	b2f6      	uxtb	r6, r6
 8008518:	4283      	cmp	r3, r0
 800851a:	4637      	mov	r7, r6
 800851c:	dc05      	bgt.n	800852a <__swbuf_r+0x4e>
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f7ff fcbd 	bl	8007ea0 <_fflush_r>
 8008526:	2800      	cmp	r0, #0
 8008528:	d1ed      	bne.n	8008506 <__swbuf_r+0x2a>
 800852a:	68a3      	ldr	r3, [r4, #8]
 800852c:	3b01      	subs	r3, #1
 800852e:	60a3      	str	r3, [r4, #8]
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	6022      	str	r2, [r4, #0]
 8008536:	701e      	strb	r6, [r3, #0]
 8008538:	6962      	ldr	r2, [r4, #20]
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	429a      	cmp	r2, r3
 800853e:	d004      	beq.n	800854a <__swbuf_r+0x6e>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	07db      	lsls	r3, r3, #31
 8008544:	d5e1      	bpl.n	800850a <__swbuf_r+0x2e>
 8008546:	2e0a      	cmp	r6, #10
 8008548:	d1df      	bne.n	800850a <__swbuf_r+0x2e>
 800854a:	4621      	mov	r1, r4
 800854c:	4628      	mov	r0, r5
 800854e:	f7ff fca7 	bl	8007ea0 <_fflush_r>
 8008552:	2800      	cmp	r0, #0
 8008554:	d0d9      	beq.n	800850a <__swbuf_r+0x2e>
 8008556:	e7d6      	b.n	8008506 <__swbuf_r+0x2a>

08008558 <__swsetup_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4b29      	ldr	r3, [pc, #164]	@ (8008600 <__swsetup_r+0xa8>)
 800855c:	4605      	mov	r5, r0
 800855e:	6818      	ldr	r0, [r3, #0]
 8008560:	460c      	mov	r4, r1
 8008562:	b118      	cbz	r0, 800856c <__swsetup_r+0x14>
 8008564:	6a03      	ldr	r3, [r0, #32]
 8008566:	b90b      	cbnz	r3, 800856c <__swsetup_r+0x14>
 8008568:	f7ff f932 	bl	80077d0 <__sinit>
 800856c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008570:	0719      	lsls	r1, r3, #28
 8008572:	d422      	bmi.n	80085ba <__swsetup_r+0x62>
 8008574:	06da      	lsls	r2, r3, #27
 8008576:	d407      	bmi.n	8008588 <__swsetup_r+0x30>
 8008578:	2209      	movs	r2, #9
 800857a:	602a      	str	r2, [r5, #0]
 800857c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	f04f 30ff 	mov.w	r0, #4294967295
 8008586:	e033      	b.n	80085f0 <__swsetup_r+0x98>
 8008588:	0758      	lsls	r0, r3, #29
 800858a:	d512      	bpl.n	80085b2 <__swsetup_r+0x5a>
 800858c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800858e:	b141      	cbz	r1, 80085a2 <__swsetup_r+0x4a>
 8008590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008594:	4299      	cmp	r1, r3
 8008596:	d002      	beq.n	800859e <__swsetup_r+0x46>
 8008598:	4628      	mov	r0, r5
 800859a:	f7ff fafd 	bl	8007b98 <_free_r>
 800859e:	2300      	movs	r3, #0
 80085a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	2300      	movs	r3, #0
 80085ac:	6063      	str	r3, [r4, #4]
 80085ae:	6923      	ldr	r3, [r4, #16]
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	89a3      	ldrh	r3, [r4, #12]
 80085b4:	f043 0308 	orr.w	r3, r3, #8
 80085b8:	81a3      	strh	r3, [r4, #12]
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	b94b      	cbnz	r3, 80085d2 <__swsetup_r+0x7a>
 80085be:	89a3      	ldrh	r3, [r4, #12]
 80085c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c8:	d003      	beq.n	80085d2 <__swsetup_r+0x7a>
 80085ca:	4621      	mov	r1, r4
 80085cc:	4628      	mov	r0, r5
 80085ce:	f000 f883 	bl	80086d8 <__smakebuf_r>
 80085d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d6:	f013 0201 	ands.w	r2, r3, #1
 80085da:	d00a      	beq.n	80085f2 <__swsetup_r+0x9a>
 80085dc:	2200      	movs	r2, #0
 80085de:	60a2      	str	r2, [r4, #8]
 80085e0:	6962      	ldr	r2, [r4, #20]
 80085e2:	4252      	negs	r2, r2
 80085e4:	61a2      	str	r2, [r4, #24]
 80085e6:	6922      	ldr	r2, [r4, #16]
 80085e8:	b942      	cbnz	r2, 80085fc <__swsetup_r+0xa4>
 80085ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085ee:	d1c5      	bne.n	800857c <__swsetup_r+0x24>
 80085f0:	bd38      	pop	{r3, r4, r5, pc}
 80085f2:	0799      	lsls	r1, r3, #30
 80085f4:	bf58      	it	pl
 80085f6:	6962      	ldrpl	r2, [r4, #20]
 80085f8:	60a2      	str	r2, [r4, #8]
 80085fa:	e7f4      	b.n	80085e6 <__swsetup_r+0x8e>
 80085fc:	2000      	movs	r0, #0
 80085fe:	e7f7      	b.n	80085f0 <__swsetup_r+0x98>
 8008600:	20000024 	.word	0x20000024

08008604 <_raise_r>:
 8008604:	291f      	cmp	r1, #31
 8008606:	b538      	push	{r3, r4, r5, lr}
 8008608:	4605      	mov	r5, r0
 800860a:	460c      	mov	r4, r1
 800860c:	d904      	bls.n	8008618 <_raise_r+0x14>
 800860e:	2316      	movs	r3, #22
 8008610:	6003      	str	r3, [r0, #0]
 8008612:	f04f 30ff 	mov.w	r0, #4294967295
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800861a:	b112      	cbz	r2, 8008622 <_raise_r+0x1e>
 800861c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008620:	b94b      	cbnz	r3, 8008636 <_raise_r+0x32>
 8008622:	4628      	mov	r0, r5
 8008624:	f000 f830 	bl	8008688 <_getpid_r>
 8008628:	4622      	mov	r2, r4
 800862a:	4601      	mov	r1, r0
 800862c:	4628      	mov	r0, r5
 800862e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008632:	f000 b817 	b.w	8008664 <_kill_r>
 8008636:	2b01      	cmp	r3, #1
 8008638:	d00a      	beq.n	8008650 <_raise_r+0x4c>
 800863a:	1c59      	adds	r1, r3, #1
 800863c:	d103      	bne.n	8008646 <_raise_r+0x42>
 800863e:	2316      	movs	r3, #22
 8008640:	6003      	str	r3, [r0, #0]
 8008642:	2001      	movs	r0, #1
 8008644:	e7e7      	b.n	8008616 <_raise_r+0x12>
 8008646:	2100      	movs	r1, #0
 8008648:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800864c:	4620      	mov	r0, r4
 800864e:	4798      	blx	r3
 8008650:	2000      	movs	r0, #0
 8008652:	e7e0      	b.n	8008616 <_raise_r+0x12>

08008654 <raise>:
 8008654:	4b02      	ldr	r3, [pc, #8]	@ (8008660 <raise+0xc>)
 8008656:	4601      	mov	r1, r0
 8008658:	6818      	ldr	r0, [r3, #0]
 800865a:	f7ff bfd3 	b.w	8008604 <_raise_r>
 800865e:	bf00      	nop
 8008660:	20000024 	.word	0x20000024

08008664 <_kill_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4d07      	ldr	r5, [pc, #28]	@ (8008684 <_kill_r+0x20>)
 8008668:	2300      	movs	r3, #0
 800866a:	4604      	mov	r4, r0
 800866c:	4608      	mov	r0, r1
 800866e:	4611      	mov	r1, r2
 8008670:	602b      	str	r3, [r5, #0]
 8008672:	f7f9 f84b 	bl	800170c <_kill>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	d102      	bne.n	8008680 <_kill_r+0x1c>
 800867a:	682b      	ldr	r3, [r5, #0]
 800867c:	b103      	cbz	r3, 8008680 <_kill_r+0x1c>
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	bd38      	pop	{r3, r4, r5, pc}
 8008682:	bf00      	nop
 8008684:	20004d9c 	.word	0x20004d9c

08008688 <_getpid_r>:
 8008688:	f7f9 b838 	b.w	80016fc <_getpid>

0800868c <__swhatbuf_r>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	460c      	mov	r4, r1
 8008690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008694:	2900      	cmp	r1, #0
 8008696:	b096      	sub	sp, #88	@ 0x58
 8008698:	4615      	mov	r5, r2
 800869a:	461e      	mov	r6, r3
 800869c:	da0d      	bge.n	80086ba <__swhatbuf_r+0x2e>
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086a4:	f04f 0100 	mov.w	r1, #0
 80086a8:	bf14      	ite	ne
 80086aa:	2340      	movne	r3, #64	@ 0x40
 80086ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086b0:	2000      	movs	r0, #0
 80086b2:	6031      	str	r1, [r6, #0]
 80086b4:	602b      	str	r3, [r5, #0]
 80086b6:	b016      	add	sp, #88	@ 0x58
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	466a      	mov	r2, sp
 80086bc:	f000 f848 	bl	8008750 <_fstat_r>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	dbec      	blt.n	800869e <__swhatbuf_r+0x12>
 80086c4:	9901      	ldr	r1, [sp, #4]
 80086c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086ce:	4259      	negs	r1, r3
 80086d0:	4159      	adcs	r1, r3
 80086d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086d6:	e7eb      	b.n	80086b0 <__swhatbuf_r+0x24>

080086d8 <__smakebuf_r>:
 80086d8:	898b      	ldrh	r3, [r1, #12]
 80086da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086dc:	079d      	lsls	r5, r3, #30
 80086de:	4606      	mov	r6, r0
 80086e0:	460c      	mov	r4, r1
 80086e2:	d507      	bpl.n	80086f4 <__smakebuf_r+0x1c>
 80086e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	6123      	str	r3, [r4, #16]
 80086ec:	2301      	movs	r3, #1
 80086ee:	6163      	str	r3, [r4, #20]
 80086f0:	b003      	add	sp, #12
 80086f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f4:	ab01      	add	r3, sp, #4
 80086f6:	466a      	mov	r2, sp
 80086f8:	f7ff ffc8 	bl	800868c <__swhatbuf_r>
 80086fc:	9f00      	ldr	r7, [sp, #0]
 80086fe:	4605      	mov	r5, r0
 8008700:	4639      	mov	r1, r7
 8008702:	4630      	mov	r0, r6
 8008704:	f7ff fabc 	bl	8007c80 <_malloc_r>
 8008708:	b948      	cbnz	r0, 800871e <__smakebuf_r+0x46>
 800870a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800870e:	059a      	lsls	r2, r3, #22
 8008710:	d4ee      	bmi.n	80086f0 <__smakebuf_r+0x18>
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	f043 0302 	orr.w	r3, r3, #2
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	e7e2      	b.n	80086e4 <__smakebuf_r+0xc>
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	6020      	str	r0, [r4, #0]
 8008722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800872e:	b15b      	cbz	r3, 8008748 <__smakebuf_r+0x70>
 8008730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008734:	4630      	mov	r0, r6
 8008736:	f000 f81d 	bl	8008774 <_isatty_r>
 800873a:	b128      	cbz	r0, 8008748 <__smakebuf_r+0x70>
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	f023 0303 	bic.w	r3, r3, #3
 8008742:	f043 0301 	orr.w	r3, r3, #1
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	431d      	orrs	r5, r3
 800874c:	81a5      	strh	r5, [r4, #12]
 800874e:	e7cf      	b.n	80086f0 <__smakebuf_r+0x18>

08008750 <_fstat_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d07      	ldr	r5, [pc, #28]	@ (8008770 <_fstat_r+0x20>)
 8008754:	2300      	movs	r3, #0
 8008756:	4604      	mov	r4, r0
 8008758:	4608      	mov	r0, r1
 800875a:	4611      	mov	r1, r2
 800875c:	602b      	str	r3, [r5, #0]
 800875e:	f7f9 f835 	bl	80017cc <_fstat>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	d102      	bne.n	800876c <_fstat_r+0x1c>
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	b103      	cbz	r3, 800876c <_fstat_r+0x1c>
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	bd38      	pop	{r3, r4, r5, pc}
 800876e:	bf00      	nop
 8008770:	20004d9c 	.word	0x20004d9c

08008774 <_isatty_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d06      	ldr	r5, [pc, #24]	@ (8008790 <_isatty_r+0x1c>)
 8008778:	2300      	movs	r3, #0
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	602b      	str	r3, [r5, #0]
 8008780:	f7f9 f834 	bl	80017ec <_isatty>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_isatty_r+0x1a>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_isatty_r+0x1a>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20004d9c 	.word	0x20004d9c

08008794 <_init>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	bf00      	nop
 8008798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879a:	bc08      	pop	{r3}
 800879c:	469e      	mov	lr, r3
 800879e:	4770      	bx	lr

080087a0 <_fini>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	bf00      	nop
 80087a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a6:	bc08      	pop	{r3}
 80087a8:	469e      	mov	lr, r3
 80087aa:	4770      	bx	lr
