
Movement_Bluetooth_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800563c  0800563c  0000663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800585c  0800585c  00007070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800585c  0800585c  0000685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005864  08005864  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005864  08005864  00006864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005868  08005868  00006868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800586c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000070  080058dc  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  080058dc  00007410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de22  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d8  00000000  00000000  00014ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00016fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  00017cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017451  00000000  00000000  0001871c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0bb  00000000  00000000  0002fb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009042f  00000000  00000000  0003ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004194  00000000  00000000  000cf09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d3230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005624 	.word	0x08005624

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005624 	.word	0x08005624

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Set_Servo_Angle>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	4613      	mov	r3, r2
 80005c8:	71fb      	strb	r3, [r7, #7]
    uint32_t pulse_length = 210 + (angle * (1050 - 210) / 180);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	4a15      	ldr	r2, [pc, #84]	@ (800062c <Set_Servo_Angle+0x70>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	441a      	add	r2, r3
 80005dc:	11d2      	asrs	r2, r2, #7
 80005de:	17db      	asrs	r3, r3, #31
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	33d2      	adds	r3, #210	@ 0xd2
 80005e4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <Set_Servo_Angle+0x3a>
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005f4:	e013      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d104      	bne.n	8000606 <Set_Servo_Angle+0x4a>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000604:	e00b      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	2b08      	cmp	r3, #8
 800060a:	d104      	bne.n	8000616 <Set_Servo_Angle+0x5a>
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000614:	e003      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800061e:	bf00      	nop
 8000620:	371c      	adds	r7, #28
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	b60b60b7 	.word	0xb60b60b7

08000630 <Init_arm>:

void Init_arm()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1); // Enable motors
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	@ 0x40
 8000638:	4830      	ldr	r0, [pc, #192]	@ (80006fc <Init_arm+0xcc>)
 800063a:	f001 fc1b 	bl	8001e74 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // A0  - M1
 800063e:	2100      	movs	r1, #0
 8000640:	482f      	ldr	r0, [pc, #188]	@ (8000700 <Init_arm+0xd0>)
 8000642:	f002 f971 	bl	8002928 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // D10 - M2
 8000646:	2100      	movs	r1, #0
 8000648:	482e      	ldr	r0, [pc, #184]	@ (8000704 <Init_arm+0xd4>)
 800064a:	f002 f96d 	bl	8002928 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // D9  - M3
 800064e:	2104      	movs	r1, #4
 8000650:	482d      	ldr	r0, [pc, #180]	@ (8000708 <Init_arm+0xd8>)
 8000652:	f002 f969 	bl	8002928 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // D6  - M4
 8000656:	2108      	movs	r1, #8
 8000658:	4829      	ldr	r0, [pc, #164]	@ (8000700 <Init_arm+0xd0>)
 800065a:	f002 f965 	bl	8002928 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // D5  - M5
 800065e:	2100      	movs	r1, #0
 8000660:	4829      	ldr	r0, [pc, #164]	@ (8000708 <Init_arm+0xd8>)
 8000662:	f002 f961 	bl	8002928 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // D3  - M6
 8000666:	2104      	movs	r1, #4
 8000668:	4825      	ldr	r0, [pc, #148]	@ (8000700 <Init_arm+0xd0>)
 800066a:	f002 f95d 	bl	8002928 <HAL_TIM_PWM_Start>

	// Set arm to initial position
    Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 800066e:	4b27      	ldr	r3, [pc, #156]	@ (800070c <Init_arm+0xdc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	4822      	ldr	r0, [pc, #136]	@ (8000700 <Init_arm+0xd0>)
 8000678:	f7ff ffa0 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 800067c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000680:	f001 f8ac 	bl	80017dc <HAL_Delay>

    Set_Servo_Angle(&htim4, TIM_CHANNEL_1, current_value_shoulder+45);
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <Init_arm+0xe0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	332d      	adds	r3, #45	@ 0x2d
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	481c      	ldr	r0, [pc, #112]	@ (8000704 <Init_arm+0xd4>)
 8000692:	f7ff ff93 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 8000696:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800069a:	f001 f89f 	bl	80017dc <HAL_Delay>

    Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <Init_arm+0xe4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	2104      	movs	r1, #4
 80006a6:	4818      	ldr	r0, [pc, #96]	@ (8000708 <Init_arm+0xd8>)
 80006a8:	f7ff ff88 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 80006ac:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006b0:	f001 f894 	bl	80017dc <HAL_Delay>

    Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <Init_arm+0xe8>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	2108      	movs	r1, #8
 80006bc:	4810      	ldr	r0, [pc, #64]	@ (8000700 <Init_arm+0xd0>)
 80006be:	f7ff ff7d 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 80006c2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006c6:	f001 f889 	bl	80017dc <HAL_Delay>

    Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <Init_arm+0xec>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <Init_arm+0xd8>)
 80006d4:	f7ff ff72 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 80006d8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006dc:	f001 f87e 	bl	80017dc <HAL_Delay>

    Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <Init_arm+0xf0>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	2104      	movs	r1, #4
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <Init_arm+0xd0>)
 80006ea:	f7ff ff67 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 80006ee:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006f2:	f001 f873 	bl	80017dc <HAL_Delay>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020000 	.word	0x40020000
 8000700:	2000008c 	.word	0x2000008c
 8000704:	2000011c 	.word	0x2000011c
 8000708:	200000d4 	.word	0x200000d4
 800070c:	20000000 	.word	0x20000000
 8000710:	20000001 	.word	0x20000001
 8000714:	20000002 	.word	0x20000002
 8000718:	20000003 	.word	0x20000003
 800071c:	20000004 	.word	0x20000004
 8000720:	20000005 	.word	0x20000005

08000724 <MoveArm>:


void MoveArm(uint8_t base_angle, uint8_t shoulder_angle, uint8_t elbow_angle, uint8_t wrist_ver_angle, uint8_t wrist_rot_angle, uint8_t gripper_angle)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4604      	mov	r4, r0
 800072c:	4608      	mov	r0, r1
 800072e:	4611      	mov	r1, r2
 8000730:	461a      	mov	r2, r3
 8000732:	4623      	mov	r3, r4
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	4603      	mov	r3, r0
 8000738:	71bb      	strb	r3, [r7, #6]
 800073a:	460b      	mov	r3, r1
 800073c:	717b      	strb	r3, [r7, #5]
 800073e:	4613      	mov	r3, r2
 8000740:	713b      	strb	r3, [r7, #4]
    int isMoving = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]

    while (isMoving)
 8000746:	e0e4      	b.n	8000912 <MoveArm+0x1ee>
    {
        if (current_value_base != base_angle)
 8000748:	4b76      	ldr	r3, [pc, #472]	@ (8000924 <MoveArm+0x200>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	429a      	cmp	r2, r3
 8000750:	d018      	beq.n	8000784 <MoveArm+0x60>
        {
            if (current_value_base > base_angle)
 8000752:	4b74      	ldr	r3, [pc, #464]	@ (8000924 <MoveArm+0x200>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	429a      	cmp	r2, r3
 800075a:	d206      	bcs.n	800076a <MoveArm+0x46>
            {
            	current_value_base--;
 800075c:	4b71      	ldr	r3, [pc, #452]	@ (8000924 <MoveArm+0x200>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b6f      	ldr	r3, [pc, #444]	@ (8000924 <MoveArm+0x200>)
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e005      	b.n	8000776 <MoveArm+0x52>
            }
            else
            {
            	current_value_base++;
 800076a:	4b6e      	ldr	r3, [pc, #440]	@ (8000924 <MoveArm+0x200>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b6c      	ldr	r3, [pc, #432]	@ (8000924 <MoveArm+0x200>)
 8000774:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 8000776:	4b6b      	ldr	r3, [pc, #428]	@ (8000924 <MoveArm+0x200>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	486a      	ldr	r0, [pc, #424]	@ (8000928 <MoveArm+0x204>)
 8000780:	f7ff ff1c 	bl	80005bc <Set_Servo_Angle>
        }

        if ((current_value_shoulder + 45) != shoulder_angle)
 8000784:	4b69      	ldr	r3, [pc, #420]	@ (800092c <MoveArm+0x208>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	429a      	cmp	r2, r3
 8000790:	d01c      	beq.n	80007cc <MoveArm+0xa8>
        {
            if ((current_value_shoulder + 45) > shoulder_angle)
 8000792:	4b66      	ldr	r3, [pc, #408]	@ (800092c <MoveArm+0x208>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	429a      	cmp	r2, r3
 800079e:	db06      	blt.n	80007ae <MoveArm+0x8a>
            {
            	current_value_shoulder--;
 80007a0:	4b62      	ldr	r3, [pc, #392]	@ (800092c <MoveArm+0x208>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b60      	ldr	r3, [pc, #384]	@ (800092c <MoveArm+0x208>)
 80007aa:	701a      	strb	r2, [r3, #0]
 80007ac:	e005      	b.n	80007ba <MoveArm+0x96>
            }
            else
            {
            	current_value_shoulder++;
 80007ae:	4b5f      	ldr	r3, [pc, #380]	@ (800092c <MoveArm+0x208>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b5d      	ldr	r3, [pc, #372]	@ (800092c <MoveArm+0x208>)
 80007b8:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim4, TIM_CHANNEL_1, current_value_shoulder + 45);
 80007ba:	4b5c      	ldr	r3, [pc, #368]	@ (800092c <MoveArm+0x208>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	332d      	adds	r3, #45	@ 0x2d
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	485a      	ldr	r0, [pc, #360]	@ (8000930 <MoveArm+0x20c>)
 80007c8:	f7ff fef8 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_elbow != elbow_angle)
 80007cc:	4b59      	ldr	r3, [pc, #356]	@ (8000934 <MoveArm+0x210>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	797a      	ldrb	r2, [r7, #5]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d018      	beq.n	8000808 <MoveArm+0xe4>
        {
            if (current_value_elbow > elbow_angle)
 80007d6:	4b57      	ldr	r3, [pc, #348]	@ (8000934 <MoveArm+0x210>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	797a      	ldrb	r2, [r7, #5]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d206      	bcs.n	80007ee <MoveArm+0xca>
            {
            	current_value_elbow--;
 80007e0:	4b54      	ldr	r3, [pc, #336]	@ (8000934 <MoveArm+0x210>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b52      	ldr	r3, [pc, #328]	@ (8000934 <MoveArm+0x210>)
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e005      	b.n	80007fa <MoveArm+0xd6>
            }
            else
            {
            	current_value_elbow++;
 80007ee:	4b51      	ldr	r3, [pc, #324]	@ (8000934 <MoveArm+0x210>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000934 <MoveArm+0x210>)
 80007f8:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 80007fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000934 <MoveArm+0x210>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	2104      	movs	r1, #4
 8000802:	484d      	ldr	r0, [pc, #308]	@ (8000938 <MoveArm+0x214>)
 8000804:	f7ff feda 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_wrist_ver != wrist_ver_angle)
 8000808:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MoveArm+0x218>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	793a      	ldrb	r2, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d018      	beq.n	8000844 <MoveArm+0x120>
        {
            if (current_value_wrist_ver > wrist_ver_angle)
 8000812:	4b4a      	ldr	r3, [pc, #296]	@ (800093c <MoveArm+0x218>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	793a      	ldrb	r2, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	d206      	bcs.n	800082a <MoveArm+0x106>
            {
            	current_value_wrist_ver--;
 800081c:	4b47      	ldr	r3, [pc, #284]	@ (800093c <MoveArm+0x218>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b45      	ldr	r3, [pc, #276]	@ (800093c <MoveArm+0x218>)
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	e005      	b.n	8000836 <MoveArm+0x112>
            }
            else
            {
            	current_value_wrist_ver++;
 800082a:	4b44      	ldr	r3, [pc, #272]	@ (800093c <MoveArm+0x218>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b42      	ldr	r3, [pc, #264]	@ (800093c <MoveArm+0x218>)
 8000834:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 8000836:	4b41      	ldr	r3, [pc, #260]	@ (800093c <MoveArm+0x218>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	2108      	movs	r1, #8
 800083e:	483a      	ldr	r0, [pc, #232]	@ (8000928 <MoveArm+0x204>)
 8000840:	f7ff febc 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_wrist_rot != wrist_rot_angle)
 8000844:	4b3e      	ldr	r3, [pc, #248]	@ (8000940 <MoveArm+0x21c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	f897 2020 	ldrb.w	r2, [r7, #32]
 800084c:	429a      	cmp	r2, r3
 800084e:	d019      	beq.n	8000884 <MoveArm+0x160>
        {
            if (current_value_wrist_rot > wrist_rot_angle)
 8000850:	4b3b      	ldr	r3, [pc, #236]	@ (8000940 <MoveArm+0x21c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000858:	429a      	cmp	r2, r3
 800085a:	d206      	bcs.n	800086a <MoveArm+0x146>
            {
            	current_value_wrist_rot--;
 800085c:	4b38      	ldr	r3, [pc, #224]	@ (8000940 <MoveArm+0x21c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b36      	ldr	r3, [pc, #216]	@ (8000940 <MoveArm+0x21c>)
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e005      	b.n	8000876 <MoveArm+0x152>
            }
            else
                current_value_wrist_rot++;
 800086a:	4b35      	ldr	r3, [pc, #212]	@ (8000940 <MoveArm+0x21c>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <MoveArm+0x21c>)
 8000874:	701a      	strb	r2, [r3, #0]

            Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 8000876:	4b32      	ldr	r3, [pc, #200]	@ (8000940 <MoveArm+0x21c>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	482e      	ldr	r0, [pc, #184]	@ (8000938 <MoveArm+0x214>)
 8000880:	f7ff fe9c 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_gripper != gripper_angle)
 8000884:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <MoveArm+0x220>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800088c:	429a      	cmp	r2, r3
 800088e:	d019      	beq.n	80008c4 <MoveArm+0x1a0>
        {
            if (current_value_gripper > gripper_angle)
 8000890:	4b2c      	ldr	r3, [pc, #176]	@ (8000944 <MoveArm+0x220>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000898:	429a      	cmp	r2, r3
 800089a:	d206      	bcs.n	80008aa <MoveArm+0x186>
            {
            	current_value_gripper--;
 800089c:	4b29      	ldr	r3, [pc, #164]	@ (8000944 <MoveArm+0x220>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <MoveArm+0x220>)
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e005      	b.n	80008b6 <MoveArm+0x192>
            }
            else
            {
            	current_value_gripper++;
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <MoveArm+0x220>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <MoveArm+0x220>)
 80008b4:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80008b6:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MoveArm+0x220>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	2104      	movs	r1, #4
 80008be:	481a      	ldr	r0, [pc, #104]	@ (8000928 <MoveArm+0x204>)
 80008c0:	f7ff fe7c 	bl	80005bc <Set_Servo_Angle>
        }

        HAL_Delay(25);
 80008c4:	2019      	movs	r0, #25
 80008c6:	f000 ff89 	bl	80017dc <HAL_Delay>

        if ((current_value_base == base_angle) &&
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MoveArm+0x200>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d11e      	bne.n	8000912 <MoveArm+0x1ee>
            (current_value_shoulder + 45 == shoulder_angle) &&
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MoveArm+0x208>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80008dc:	79bb      	ldrb	r3, [r7, #6]
        if ((current_value_base == base_angle) &&
 80008de:	429a      	cmp	r2, r3
 80008e0:	d117      	bne.n	8000912 <MoveArm+0x1ee>
            (current_value_elbow == elbow_angle) &&
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MoveArm+0x210>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
            (current_value_shoulder + 45 == shoulder_angle) &&
 80008e6:	797a      	ldrb	r2, [r7, #5]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d112      	bne.n	8000912 <MoveArm+0x1ee>
            (current_value_wrist_ver == wrist_ver_angle) &&
 80008ec:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MoveArm+0x218>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
            (current_value_elbow == elbow_angle) &&
 80008f0:	793a      	ldrb	r2, [r7, #4]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d10d      	bne.n	8000912 <MoveArm+0x1ee>
            (current_value_wrist_rot == wrist_rot_angle) &&
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MoveArm+0x21c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_ver == wrist_ver_angle) &&
 80008fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d107      	bne.n	8000912 <MoveArm+0x1ee>
            (current_value_gripper == gripper_angle))
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MoveArm+0x220>)
 8000904:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_rot == wrist_rot_angle) &&
 8000906:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800090a:	429a      	cmp	r2, r3
 800090c:	d101      	bne.n	8000912 <MoveArm+0x1ee>
        {
        	isMoving = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
    while (isMoving)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	f47f af17 	bne.w	8000748 <MoveArm+0x24>
        }
    }
}
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	2000008c 	.word	0x2000008c
 800092c:	20000001 	.word	0x20000001
 8000930:	2000011c 	.word	0x2000011c
 8000934:	20000002 	.word	0x20000002
 8000938:	200000d4 	.word	0x200000d4
 800093c:	20000003 	.word	0x20000003
 8000940:	20000004 	.word	0x20000004
 8000944:	20000005 	.word	0x20000005

08000948 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000948:	b580      	push	{r7, lr}
 800094a:	b0a4      	sub	sp, #144	@ 0x90
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a64      	ldr	r2, [pc, #400]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x1a0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	f040 80c2 	bne.w	8000ae0 <HAL_UART_RxCpltCallback+0x198>
	        char response_msg[100];
	        char temp_buffer[21]; // Create a copy if you need to preserve the original
	        strcpy(temp_buffer, buffer); // Copy the original string
 800095c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000960:	4962      	ldr	r1, [pc, #392]	@ (8000aec <HAL_UART_RxCpltCallback+0x1a4>)
 8000962:	4618      	mov	r0, r3
 8000964:	f004 f839 	bl	80049da <strcpy>

	        for(int i = 0; i < 21; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800096e:	e017      	b.n	80009a0 <HAL_UART_RxCpltCallback+0x58>
	        	buffer_q[index_buffer][i] = buffer[i];
 8000970:	4b5f      	ldr	r3, [pc, #380]	@ (8000af0 <HAL_UART_RxCpltCallback+0x1a8>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	495d      	ldr	r1, [pc, #372]	@ (8000aec <HAL_UART_RxCpltCallback+0x1a4>)
 8000976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800097a:	440b      	add	r3, r1
 800097c:	7818      	ldrb	r0, [r3, #0]
 800097e:	495d      	ldr	r1, [pc, #372]	@ (8000af4 <HAL_UART_RxCpltCallback+0x1ac>)
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	00da      	lsls	r2, r3, #3
 8000988:	1ad2      	subs	r2, r2, r3
 800098a:	440a      	add	r2, r1
 800098c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000990:	4413      	add	r3, r2
 8000992:	4602      	mov	r2, r0
 8000994:	701a      	strb	r2, [r3, #0]
	        for(int i = 0; i < 21; i++)
 8000996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800099a:	3301      	adds	r3, #1
 800099c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80009a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009a4:	2b14      	cmp	r3, #20
 80009a6:	dde3      	ble.n	8000970 <HAL_UART_RxCpltCallback+0x28>

	        if(++index_buffer == 8)
 80009a8:	4b51      	ldr	r3, [pc, #324]	@ (8000af0 <HAL_UART_RxCpltCallback+0x1a8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	4a50      	ldr	r2, [pc, #320]	@ (8000af0 <HAL_UART_RxCpltCallback+0x1a8>)
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	4b4f      	ldr	r3, [pc, #316]	@ (8000af0 <HAL_UART_RxCpltCallback+0x1a8>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b08      	cmp	r3, #8
 80009b8:	d102      	bne.n	80009c0 <HAL_UART_RxCpltCallback+0x78>
	        	index_buffer = 0;
 80009ba:	4b4d      	ldr	r3, [pc, #308]	@ (8000af0 <HAL_UART_RxCpltCallback+0x1a8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]

	        char *token;

	            token = strtok(temp_buffer, ",");
 80009c0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80009c4:	494c      	ldr	r1, [pc, #304]	@ (8000af8 <HAL_UART_RxCpltCallback+0x1b0>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 ff38 	bl	800483c <strtok>
 80009cc:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 80009d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d007      	beq.n	80009e8 <HAL_UART_RxCpltCallback+0xa0>
	                base = atoi(token);
 80009d8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80009dc:	f003 fd8a 	bl	80044f4 <atoi>
 80009e0:	4603      	mov	r3, r0
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b45      	ldr	r3, [pc, #276]	@ (8000afc <HAL_UART_RxCpltCallback+0x1b4>)
 80009e6:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 80009e8:	4943      	ldr	r1, [pc, #268]	@ (8000af8 <HAL_UART_RxCpltCallback+0x1b0>)
 80009ea:	2000      	movs	r0, #0
 80009ec:	f003 ff26 	bl	800483c <strtok>
 80009f0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 80009f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d007      	beq.n	8000a0c <HAL_UART_RxCpltCallback+0xc4>
	                shoulder = atoi(token);
 80009fc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a00:	f003 fd78 	bl	80044f4 <atoi>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b3d      	ldr	r3, [pc, #244]	@ (8000b00 <HAL_UART_RxCpltCallback+0x1b8>)
 8000a0a:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a0c:	493a      	ldr	r1, [pc, #232]	@ (8000af8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f003 ff14 	bl	800483c <strtok>
 8000a14:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d007      	beq.n	8000a30 <HAL_UART_RxCpltCallback+0xe8>
	                elbow = atoi(token);
 8000a20:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a24:	f003 fd66 	bl	80044f4 <atoi>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b35      	ldr	r3, [pc, #212]	@ (8000b04 <HAL_UART_RxCpltCallback+0x1bc>)
 8000a2e:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a30:	4931      	ldr	r1, [pc, #196]	@ (8000af8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f003 ff02 	bl	800483c <strtok>
 8000a38:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d007      	beq.n	8000a54 <HAL_UART_RxCpltCallback+0x10c>
	                wrist_pitch = atoi(token);
 8000a44:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a48:	f003 fd54 	bl	80044f4 <atoi>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <HAL_UART_RxCpltCallback+0x1c0>)
 8000a52:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a54:	4928      	ldr	r1, [pc, #160]	@ (8000af8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a56:	2000      	movs	r0, #0
 8000a58:	f003 fef0 	bl	800483c <strtok>
 8000a5c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d007      	beq.n	8000a78 <HAL_UART_RxCpltCallback+0x130>
	            	wrist_roll = atoi(token);
 8000a68:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a6c:	f003 fd42 	bl	80044f4 <atoi>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <HAL_UART_RxCpltCallback+0x1c4>)
 8000a76:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a78:	491f      	ldr	r1, [pc, #124]	@ (8000af8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f003 fede 	bl	800483c <strtok>
 8000a80:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d007      	beq.n	8000a9c <HAL_UART_RxCpltCallback+0x154>
	                detected_class = atoi(token);
 8000a8c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a90:	f003 fd30 	bl	80044f4 <atoi>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <HAL_UART_RxCpltCallback+0x1c8>)
 8000a9a:	701a      	strb	r2, [r3, #0]
	            }
	        // Construct the response message
	        strcpy(response_msg, "Received: ");
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b14 <HAL_UART_RxCpltCallback+0x1cc>)
 8000aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aa4:	c303      	stmia	r3!, {r0, r1}
 8000aa6:	801a      	strh	r2, [r3, #0]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	0c12      	lsrs	r2, r2, #16
 8000aac:	701a      	strb	r2, [r3, #0]
	        strcat(response_msg, (char*)buffer); // Cast to char* is fine here as it's null-terminated
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	490e      	ldr	r1, [pc, #56]	@ (8000aec <HAL_UART_RxCpltCallback+0x1a4>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 feb2 	bl	800481e <strcat>

	        // Transmit the response
	        HAL_UART_Transmit(&huart1, (uint8_t*) response_msg, strlen(response_msg), HAL_MAX_DELAY);
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fb8e 	bl	80001e0 <strlen>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	f107 010c 	add.w	r1, r7, #12
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	4811      	ldr	r0, [pc, #68]	@ (8000b18 <HAL_UART_RxCpltCallback+0x1d0>)
 8000ad2:	f002 fcf3 	bl	80034bc <HAL_UART_Transmit>

	        // Re-enable the receive interrupt *after* processing the current data
	        HAL_UART_Receive_IT(&huart1, buffer, 21);
 8000ad6:	2215      	movs	r2, #21
 8000ad8:	4904      	ldr	r1, [pc, #16]	@ (8000aec <HAL_UART_RxCpltCallback+0x1a4>)
 8000ada:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <HAL_UART_RxCpltCallback+0x1d0>)
 8000adc:	f002 fd79 	bl	80035d2 <HAL_UART_Receive_IT>
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3790      	adds	r7, #144	@ 0x90
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	200002a0 	.word	0x200002a0
 8000af0:	2000029c 	.word	0x2000029c
 8000af4:	200001f4 	.word	0x200001f4
 8000af8:	0800563c 	.word	0x0800563c
 8000afc:	200002b5 	.word	0x200002b5
 8000b00:	200002b6 	.word	0x200002b6
 8000b04:	200002b7 	.word	0x200002b7
 8000b08:	200002b8 	.word	0x200002b8
 8000b0c:	200002b9 	.word	0x200002b9
 8000b10:	200002ba 	.word	0x200002ba
 8000b14:	08005640 	.word	0x08005640
 8000b18:	20000164 	.word	0x20000164

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fde9 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 f839 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2a:	f000 fa79 	bl	8001020 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b2e:	f000 fa4d 	bl	8000fcc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b32:	f000 f89d 	bl	8000c70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b36:	f000 f927 	bl	8000d88 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b3a:	f000 f9a7 	bl	8000e8c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000b3e:	f000 fa1b 	bl	8000f78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char temp_msg[32];
  strcpy(temp_msg, "HC-05 Initialised!\n");
 8000b42:	463b      	mov	r3, r7
 8000b44:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <main+0x74>)
 8000b46:	461c      	mov	r4, r3
 8000b48:	4615      	mov	r5, r2
 8000b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4e:	682b      	ldr	r3, [r5, #0]
 8000b50:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000b52:	463b      	mov	r3, r7
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb43 	bl	80001e0 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4639      	mov	r1, r7
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <main+0x78>)
 8000b66:	f002 fca9 	bl	80034bc <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, buffer, 21);
 8000b6a:	2215      	movs	r2, #21
 8000b6c:	490a      	ldr	r1, [pc, #40]	@ (8000b98 <main+0x7c>)
 8000b6e:	4809      	ldr	r0, [pc, #36]	@ (8000b94 <main+0x78>)
 8000b70:	f002 fd2f 	bl	80035d2 <HAL_UART_Receive_IT>

  Init_arm();
 8000b74:	f7ff fd5c 	bl	8000630 <Init_arm>

  MoveArm(45, 90, 45, 70, 45, 30);
 8000b78:	231e      	movs	r3, #30
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	232d      	movs	r3, #45	@ 0x2d
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2346      	movs	r3, #70	@ 0x46
 8000b82:	222d      	movs	r2, #45	@ 0x2d
 8000b84:	215a      	movs	r1, #90	@ 0x5a
 8000b86:	202d      	movs	r0, #45	@ 0x2d
 8000b88:	f7ff fdcc 	bl	8000724 <MoveArm>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <main+0x70>
 8000b90:	0800564c 	.word	0x0800564c
 8000b94:	20000164 	.word	0x20000164
 8000b98:	200002a0 	.word	0x200002a0

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	@ 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	2230      	movs	r2, #48	@ 0x30
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 fe2f 	bl	800480e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b28      	ldr	r3, [pc, #160]	@ (8000c68 <SystemClock_Config+0xcc>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	4a27      	ldr	r2, [pc, #156]	@ (8000c68 <SystemClock_Config+0xcc>)
 8000bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd0:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <SystemClock_Config+0xcc>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	4b22      	ldr	r3, [pc, #136]	@ (8000c6c <SystemClock_Config+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <SystemClock_Config+0xd0>)
 8000be6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b1f      	ldr	r3, [pc, #124]	@ (8000c6c <SystemClock_Config+0xd0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c00:	2310      	movs	r3, #16
 8000c02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	2302      	movs	r3, #2
 8000c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c10:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c16:	2304      	movs	r3, #4
 8000c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 f940 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c2e:	f000 fa65 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	230f      	movs	r3, #15
 8000c34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c36:	2302      	movs	r3, #2
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fba2 	bl	8002398 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c5a:	f000 fa4f 	bl	80010fc <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3750      	adds	r7, #80	@ 0x50
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40007000 	.word	0x40007000

08000c70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	@ 0x38
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]
 8000c9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ca0:	4b38      	ldr	r3, [pc, #224]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000ca2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000ca8:	4b36      	ldr	r3, [pc, #216]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000caa:	22c7      	movs	r2, #199	@ 0xc7
 8000cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b35      	ldr	r3, [pc, #212]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8000cb4:	4b33      	ldr	r3, [pc, #204]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000cb6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000cba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b31      	ldr	r3, [pc, #196]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc2:	4b30      	ldr	r3, [pc, #192]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc8:	482e      	ldr	r0, [pc, #184]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000cca:	f001 fd85 	bl	80027d8 <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000cd4:	f000 fa12 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4827      	ldr	r0, [pc, #156]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000ce6:	f001 ff91 	bl	8002c0c <HAL_TIM_ConfigClockSource>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cf0:	f000 fa04 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cf4:	4823      	ldr	r0, [pc, #140]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000cf6:	f001 fdbe 	bl	8002876 <HAL_TIM_PWM_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d00:	f000 f9fc 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	4619      	mov	r1, r3
 8000d12:	481c      	ldr	r0, [pc, #112]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000d14:	f002 fb14 	bl	8003340 <HAL_TIMEx_MasterConfigSynchronization>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d1e:	f000 f9ed 	bl	80010fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d22:	2360      	movs	r3, #96	@ 0x60
 8000d24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	4812      	ldr	r0, [pc, #72]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000d3a:	f001 fea5 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d44:	f000 f9da 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000d50:	f001 fe9a 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000d5a:	f000 f9cf 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2208      	movs	r2, #8
 8000d62:	4619      	mov	r1, r3
 8000d64:	4807      	ldr	r0, [pc, #28]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000d66:	f001 fe8f 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000d70:	f000 f9c4 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d74:	4803      	ldr	r0, [pc, #12]	@ (8000d84 <MX_TIM2_Init+0x114>)
 8000d76:	f000 fa3b 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 8000d7a:	bf00      	nop
 8000d7c:	3738      	adds	r7, #56	@ 0x38
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000008c 	.word	0x2000008c

08000d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	@ 0x38
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db8:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000dba:	4a33      	ldr	r2, [pc, #204]	@ (8000e88 <MX_TIM3_Init+0x100>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8000dbe:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000dc0:	22c7      	movs	r2, #199	@ 0xc7
 8000dc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000dcc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000dd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000dda:	2280      	movs	r2, #128	@ 0x80
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dde:	4829      	ldr	r0, [pc, #164]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000de0:	f001 fcfa 	bl	80027d8 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dea:	f000 f987 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4822      	ldr	r0, [pc, #136]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000dfc:	f001 ff06 	bl	8002c0c <HAL_TIM_ConfigClockSource>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e06:	f000 f979 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e0a:	481e      	ldr	r0, [pc, #120]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000e0c:	f001 fd33 	bl	8002876 <HAL_TIM_PWM_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e16:	f000 f971 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	4619      	mov	r1, r3
 8000e28:	4816      	ldr	r0, [pc, #88]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000e2a:	f002 fa89 	bl	8003340 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e34:	f000 f962 	bl	80010fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e38:	2360      	movs	r3, #96	@ 0x60
 8000e3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000e50:	f001 fe1a 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e5a:	f000 f94f 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2204      	movs	r2, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4807      	ldr	r0, [pc, #28]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000e66:	f001 fe0f 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000e70:	f000 f944 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e74:	4803      	ldr	r0, [pc, #12]	@ (8000e84 <MX_TIM3_Init+0xfc>)
 8000e76:	f000 f9bb 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 8000e7a:	bf00      	nop
 8000e7c:	3738      	adds	r7, #56	@ 0x38
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000d4 	.word	0x200000d4
 8000e88:	40000400 	.word	0x40000400

08000e8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	@ 0x38
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
 8000eba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8000f74 <MX_TIM4_Init+0xe8>)
 8000ec0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000ec4:	22c7      	movs	r2, #199	@ 0xc7
 8000ec6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ee2:	4823      	ldr	r0, [pc, #140]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000ee4:	f001 fc78 	bl	80027d8 <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000eee:	f000 f905 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efc:	4619      	mov	r1, r3
 8000efe:	481c      	ldr	r0, [pc, #112]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000f00:	f001 fe84 	bl	8002c0c <HAL_TIM_ConfigClockSource>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f0a:	f000 f8f7 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f0e:	4818      	ldr	r0, [pc, #96]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000f10:	f001 fcb1 	bl	8002876 <HAL_TIM_PWM_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f1a:	f000 f8ef 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4810      	ldr	r0, [pc, #64]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000f2e:	f002 fa07 	bl	8003340 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f38:	f000 f8e0 	bl	80010fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3c:	2360      	movs	r3, #96	@ 0x60
 8000f3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4807      	ldr	r0, [pc, #28]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000f54:	f001 fd98 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f5e:	f000 f8cd 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f62:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <MX_TIM4_Init+0xe4>)
 8000f64:	f000 f944 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 8000f68:	bf00      	nop
 8000f6a:	3738      	adds	r7, #56	@ 0x38
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000011c 	.word	0x2000011c
 8000f74:	40000800 	.word	0x40000800

08000f78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <MX_USART1_UART_Init+0x50>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	f002 fa34 	bl	800341c <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fba:	f000 f89f 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000164 	.word	0x20000164
 8000fc8:	40011000 	.word	0x40011000

08000fcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_USART2_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_USART2_UART_Init+0x4c>)
 8001004:	f002 fa0a 	bl	800341c <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 f875 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001ac 	.word	0x200001ac
 800101c:	40004400 	.word	0x40004400

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b2d      	ldr	r3, [pc, #180]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a2c      	ldr	r2, [pc, #176]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b2a      	ldr	r3, [pc, #168]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a25      	ldr	r2, [pc, #148]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a1e      	ldr	r2, [pc, #120]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_GPIO_Init+0xd0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2160      	movs	r1, #96	@ 0x60
 80010aa:	4812      	ldr	r0, [pc, #72]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 80010ac:	f000 fee2 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <MX_GPIO_Init+0xd8>)
 80010c8:	f000 fd50 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80010cc:	2360      	movs	r3, #96	@ 0x60
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_GPIO_Init+0xd4>)
 80010e4:	f000 fd42 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	@ 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020800 	.word	0x40020800

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_MspInit+0x4c>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_MspInit+0x4c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	@ 0x40
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001146:	2007      	movs	r0, #7
 8001148:	f000 fc3c 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001168:	d10e      	bne.n	8001188 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <HAL_TIM_Base_MspInit+0x8c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001186:	e026      	b.n	80011d6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a16      	ldr	r2, [pc, #88]	@ (80011e8 <HAL_TIM_Base_MspInit+0x90>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10e      	bne.n	80011b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <HAL_TIM_Base_MspInit+0x8c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <HAL_TIM_Base_MspInit+0x8c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
}
 80011ae:	e012      	b.n	80011d6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <HAL_TIM_Base_MspInit+0x94>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10d      	bne.n	80011d6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <HAL_TIM_Base_MspInit+0x8c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <HAL_TIM_Base_MspInit+0x8c>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_TIM_Base_MspInit+0x8c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
}
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40000800 	.word	0x40000800

080011f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	@ 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001210:	d13d      	bne.n	800128e <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	4b52      	ldr	r3, [pc, #328]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a51      	ldr	r2, [pc, #324]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b4f      	ldr	r3, [pc, #316]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4b4b      	ldr	r3, [pc, #300]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b48      	ldr	r3, [pc, #288]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124a:	2301      	movs	r3, #1
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800125a:	2301      	movs	r3, #1
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	483f      	ldr	r0, [pc, #252]	@ (8001364 <HAL_TIM_MspPostInit+0x174>)
 8001266:	f000 fc81 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800126a:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800127c:	2301      	movs	r3, #1
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4838      	ldr	r0, [pc, #224]	@ (8001368 <HAL_TIM_MspPostInit+0x178>)
 8001288:	f000 fc70 	bl	8001b6c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800128c:	e064      	b.n	8001358 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a36      	ldr	r2, [pc, #216]	@ (800136c <HAL_TIM_MspPostInit+0x17c>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d13c      	bne.n	8001312 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	4b30      	ldr	r3, [pc, #192]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c4:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e0:	2302      	movs	r3, #2
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4821      	ldr	r0, [pc, #132]	@ (8001370 <HAL_TIM_MspPostInit+0x180>)
 80012ec:	f000 fc3e 	bl	8001b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012f0:	2310      	movs	r3, #16
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001300:	2302      	movs	r3, #2
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4817      	ldr	r0, [pc, #92]	@ (8001368 <HAL_TIM_MspPostInit+0x178>)
 800130c:	f000 fc2e 	bl	8001b6c <HAL_GPIO_Init>
}
 8001310:	e022      	b.n	8001358 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a17      	ldr	r2, [pc, #92]	@ (8001374 <HAL_TIM_MspPostInit+0x184>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d11d      	bne.n	8001358 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	6313      	str	r3, [r2, #48]	@ 0x30
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_TIM_MspPostInit+0x170>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001338:	2340      	movs	r3, #64	@ 0x40
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001348:	2302      	movs	r3, #2
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	@ (8001368 <HAL_TIM_MspPostInit+0x178>)
 8001354:	f000 fc0a 	bl	8001b6c <HAL_GPIO_Init>
}
 8001358:	bf00      	nop
 800135a:	3730      	adds	r7, #48	@ 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40000400 	.word	0x40000400
 8001370:	40020800 	.word	0x40020800
 8001374:	40000800 	.word	0x40000800

08001378 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	@ 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a36      	ldr	r2, [pc, #216]	@ (8001470 <HAL_UART_MspInit+0xf8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d135      	bne.n	8001406 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	4b35      	ldr	r3, [pc, #212]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	4a34      	ldr	r2, [pc, #208]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013aa:	4b32      	ldr	r3, [pc, #200]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a2d      	ldr	r2, [pc, #180]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e4:	2307      	movs	r3, #7
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4822      	ldr	r0, [pc, #136]	@ (8001478 <HAL_UART_MspInit+0x100>)
 80013f0:	f000 fbbc 	bl	8001b6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2025      	movs	r0, #37	@ 0x25
 80013fa:	f000 faee 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013fe:	2025      	movs	r0, #37	@ 0x25
 8001400:	f000 fb07 	bl	8001a12 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001404:	e030      	b.n	8001468 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <HAL_UART_MspInit+0x104>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d12b      	bne.n	8001468 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a16      	ldr	r2, [pc, #88]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 800141a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001420:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001434:	4a0f      	ldr	r2, [pc, #60]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6313      	str	r3, [r2, #48]	@ 0x30
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <HAL_UART_MspInit+0xfc>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001448:	230c      	movs	r3, #12
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001458:	2307      	movs	r3, #7
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	@ (8001478 <HAL_UART_MspInit+0x100>)
 8001464:	f000 fb82 	bl	8001b6c <HAL_GPIO_Init>
}
 8001468:	bf00      	nop
 800146a:	3730      	adds	r7, #48	@ 0x30
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40011000 	.word	0x40011000
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	40004400 	.word	0x40004400

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <NMI_Handler+0x4>

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <MemManage_Handler+0x4>

08001498 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f000 f961 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <USART1_IRQHandler+0x10>)
 80014e6:	f002 f899 	bl	800361c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000164 	.word	0x20000164

080014f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return 1;
 80014f8:	2301      	movs	r3, #1
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_kill>:

int _kill(int pid, int sig)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150e:	f003 fa37 	bl	8004980 <__errno>
 8001512:	4603      	mov	r3, r0
 8001514:	2216      	movs	r2, #22
 8001516:	601a      	str	r2, [r3, #0]
  return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_exit>:

void _exit (int status)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ffe7 	bl	8001504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001536:	bf00      	nop
 8001538:	e7fd      	b.n	8001536 <_exit+0x12>

0800153a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e00a      	b.n	8001562 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800154c:	f3af 8000 	nop.w
 8001550:	4601      	mov	r1, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	b2ca      	uxtb	r2, r1
 800155a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3301      	adds	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	dbf0      	blt.n	800154c <_read+0x12>
  }

  return len;
 800156a:	687b      	ldr	r3, [r7, #4]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e009      	b.n	800159a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	60ba      	str	r2, [r7, #8]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbf1      	blt.n	8001586 <_write+0x12>
  }
  return len;
 80015a2:	687b      	ldr	r3, [r7, #4]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_close>:

int _close(int file)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d4:	605a      	str	r2, [r3, #4]
  return 0;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_isatty>:

int _isatty(int file)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800161c:	4a14      	ldr	r2, [pc, #80]	@ (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	@ (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d207      	bcs.n	8001654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001644:	f003 f99c 	bl	8004980 <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	e009      	b.n	8001668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165a:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a05      	ldr	r2, [pc, #20]	@ (8001678 <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20020000 	.word	0x20020000
 8001674:	00000400 	.word	0x00000400
 8001678:	200002bc 	.word	0x200002bc
 800167c:	20000410 	.word	0x20000410

08001680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <SystemInit+0x20>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <SystemInit+0x20>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016a8:	f7ff ffea 	bl	8001680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ac:	480c      	ldr	r0, [pc, #48]	@ (80016e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ae:	490d      	ldr	r1, [pc, #52]	@ (80016e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c4:	4c0a      	ldr	r4, [pc, #40]	@ (80016f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d2:	f003 f95b 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d6:	f7ff fa21 	bl	8000b1c <main>
  bx  lr    
 80016da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016e8:	0800586c 	.word	0x0800586c
  ldr r2, =_sbss
 80016ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016f0:	20000410 	.word	0x20000410

080016f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <HAL_Init+0x40>)
 8001702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_Init+0x40>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <HAL_Init+0x40>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f94f 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f808 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fcec 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_InitTick+0x54>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_InitTick+0x58>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f967 	bl	8001a2e <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00e      	b.n	8001788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d80a      	bhi.n	8001786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 f92f 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <HAL_InitTick+0x5c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000008 	.word	0x20000008
 8001794:	20000010 	.word	0x20000010
 8001798:	2000000c 	.word	0x2000000c

0800179c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_IncTick+0x20>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_IncTick+0x24>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <HAL_IncTick+0x24>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000010 	.word	0x20000010
 80017c0:	200002c0 	.word	0x200002c0

080017c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_GetTick+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200002c0 	.word	0x200002c0

080017dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff ffee 	bl	80017c4 <HAL_GetTick>
 80017e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f4:	d005      	beq.n	8001802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_Delay+0x44>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001802:	bf00      	nop
 8001804:	f7ff ffde 	bl	80017c4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	d8f7      	bhi.n	8001804 <HAL_Delay+0x28>
  {
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000010 	.word	0x20000010

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	@ (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	@ (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	@ (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	@ 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff29 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff3e 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff31 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff feb6 	bl	80017c4 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d008      	beq.n	8001a78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2280      	movs	r2, #128	@ 0x80
 8001a6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e052      	b.n	8001b1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0216 	bic.w	r2, r2, #22
 8001a86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <HAL_DMA_Abort+0x62>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d007      	beq.n	8001ab8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0208 	bic.w	r2, r2, #8
 8001ab6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac8:	e013      	b.n	8001af2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aca:	f7ff fe7b 	bl	80017c4 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	d90c      	bls.n	8001af2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e015      	b.n	8001b1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1e4      	bne.n	8001aca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b04:	223f      	movs	r2, #63	@ 0x3f
 8001b06:	409a      	lsls	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d004      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2280      	movs	r2, #128	@ 0x80
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e00c      	b.n	8001b5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2205      	movs	r2, #5
 8001b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	e159      	b.n	8001e3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f040 8148 	bne.w	8001e36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d005      	beq.n	8001bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d130      	bne.n	8001c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 0201 	and.w	r2, r3, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d017      	beq.n	8001c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d123      	bne.n	8001cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0203 	and.w	r2, r3, #3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a2 	beq.w	8001e36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b57      	ldr	r3, [pc, #348]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	4a56      	ldr	r2, [pc, #344]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d02:	4b54      	ldr	r3, [pc, #336]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0e:	4a52      	ldr	r2, [pc, #328]	@ (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a49      	ldr	r2, [pc, #292]	@ (8001e5c <HAL_GPIO_Init+0x2f0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d019      	beq.n	8001d6e <HAL_GPIO_Init+0x202>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a48      	ldr	r2, [pc, #288]	@ (8001e60 <HAL_GPIO_Init+0x2f4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0x1fe>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a47      	ldr	r2, [pc, #284]	@ (8001e64 <HAL_GPIO_Init+0x2f8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00d      	beq.n	8001d66 <HAL_GPIO_Init+0x1fa>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a46      	ldr	r2, [pc, #280]	@ (8001e68 <HAL_GPIO_Init+0x2fc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_Init+0x1f6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a45      	ldr	r2, [pc, #276]	@ (8001e6c <HAL_GPIO_Init+0x300>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_Init+0x1f2>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e008      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e004      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f002 0203 	and.w	r2, r2, #3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d80:	4935      	ldr	r1, [pc, #212]	@ (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	4b38      	ldr	r3, [pc, #224]	@ (8001e70 <HAL_GPIO_Init+0x304>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e70 <HAL_GPIO_Init+0x304>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_GPIO_Init+0x304>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ddc:	4a24      	ldr	r2, [pc, #144]	@ (8001e70 <HAL_GPIO_Init+0x304>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <HAL_GPIO_Init+0x304>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e06:	4a1a      	ldr	r2, [pc, #104]	@ (8001e70 <HAL_GPIO_Init+0x304>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <HAL_GPIO_Init+0x304>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e30:	4a0f      	ldr	r2, [pc, #60]	@ (8001e70 <HAL_GPIO_Init+0x304>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	f67f aea2 	bls.w	8001b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3724      	adds	r7, #36	@ 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e267      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d075      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ec6:	4b88      	ldr	r3, [pc, #544]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b85      	ldr	r3, [pc, #532]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d112      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4b82      	ldr	r3, [pc, #520]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4b7e      	ldr	r3, [pc, #504]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x108>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d157      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e242      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x74>
 8001f0e:	4b76      	ldr	r3, [pc, #472]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a75      	ldr	r2, [pc, #468]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4b70      	ldr	r3, [pc, #448]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6f      	ldr	r2, [pc, #444]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b6d      	ldr	r3, [pc, #436]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6c      	ldr	r2, [pc, #432]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f40:	4b69      	ldr	r3, [pc, #420]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a68      	ldr	r2, [pc, #416]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b66      	ldr	r3, [pc, #408]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a65      	ldr	r2, [pc, #404]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fc30 	bl	80017c4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fc2c 	bl	80017c4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e207      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xc0>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fc1c 	bl	80017c4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fc18 	bl	80017c4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	@ 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1f3      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b51      	ldr	r3, [pc, #324]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0xe8>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d063      	beq.n	8002086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd6:	4b44      	ldr	r3, [pc, #272]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1c7      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4937      	ldr	r1, [pc, #220]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b34      	ldr	r3, [pc, #208]	@ (80020ec <HAL_RCC_OscConfig+0x244>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff fbd1 	bl	80017c4 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff fbcd 	bl	80017c4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1a8      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4925      	ldr	r1, [pc, #148]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <HAL_RCC_OscConfig+0x244>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fbb0 	bl	80017c4 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff fbac 	bl	80017c4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e187      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d036      	beq.n	8002100 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <HAL_RCC_OscConfig+0x248>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff fb90 	bl	80017c4 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff fb8c 	bl	80017c4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e167      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_RCC_OscConfig+0x240>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x200>
 80020c6:	e01b      	b.n	8002100 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c8:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_RCC_OscConfig+0x248>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fb79 	bl	80017c4 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e00e      	b.n	80020f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff fb75 	bl	80017c4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d907      	bls.n	80020f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e150      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
 80020e8:	40023800 	.word	0x40023800
 80020ec:	42470000 	.word	0x42470000
 80020f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b88      	ldr	r3, [pc, #544]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80020f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ea      	bne.n	80020d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8097 	beq.w	800223c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b81      	ldr	r3, [pc, #516]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b7d      	ldr	r3, [pc, #500]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	4a7c      	ldr	r2, [pc, #496]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	@ 0x40
 800212e:	4b7a      	ldr	r3, [pc, #488]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b77      	ldr	r3, [pc, #476]	@ (800231c <HAL_RCC_OscConfig+0x474>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b74      	ldr	r3, [pc, #464]	@ (800231c <HAL_RCC_OscConfig+0x474>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a73      	ldr	r2, [pc, #460]	@ (800231c <HAL_RCC_OscConfig+0x474>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff fb35 	bl	80017c4 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff fb31 	bl	80017c4 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e10c      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b6a      	ldr	r3, [pc, #424]	@ (800231c <HAL_RCC_OscConfig+0x474>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x2ea>
 8002184:	4b64      	ldr	r3, [pc, #400]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002188:	4a63      	ldr	r2, [pc, #396]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x324>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x30c>
 800219a:	4b5f      	ldr	r3, [pc, #380]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219e:	4a5e      	ldr	r2, [pc, #376]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0x324>
 80021b4:	4b58      	ldr	r3, [pc, #352]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b8:	4a57      	ldr	r2, [pc, #348]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c0:	4b55      	ldr	r3, [pc, #340]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c4:	4a54      	ldr	r2, [pc, #336]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80021c6:	f023 0304 	bic.w	r3, r3, #4
 80021ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff faf6 	bl	80017c4 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7ff faf2 	bl	80017c4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0cb      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	4b49      	ldr	r3, [pc, #292]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ee      	beq.n	80021dc <HAL_RCC_OscConfig+0x334>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7ff fae0 	bl	80017c4 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff fadc 	bl	80017c4 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0b5      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	4b3e      	ldr	r3, [pc, #248]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ee      	bne.n	8002208 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002230:	4b39      	ldr	r3, [pc, #228]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	4a38      	ldr	r2, [pc, #224]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a1 	beq.w	8002388 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002246:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d05c      	beq.n	800230c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d141      	bne.n	80022de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b31      	ldr	r3, [pc, #196]	@ (8002320 <HAL_RCC_OscConfig+0x478>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fab0 	bl	80017c4 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff faac 	bl	80017c4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e087      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	019b      	lsls	r3, r3, #6
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	3b01      	subs	r3, #1
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	491b      	ldr	r1, [pc, #108]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <HAL_RCC_OscConfig+0x478>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff fa85 	bl	80017c4 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff fa81 	bl	80017c4 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e05c      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x416>
 80022dc:	e054      	b.n	8002388 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <HAL_RCC_OscConfig+0x478>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff fa6e 	bl	80017c4 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff fa6a 	bl	80017c4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e045      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_RCC_OscConfig+0x470>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x444>
 800230a:	e03d      	b.n	8002388 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e038      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
 8002318:	40023800 	.word	0x40023800
 800231c:	40007000 	.word	0x40007000
 8002320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_RCC_OscConfig+0x4ec>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d028      	beq.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d121      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d11a      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002354:	4013      	ands	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800235a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800235c:	4293      	cmp	r3, r2
 800235e:	d111      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	3b01      	subs	r3, #1
 800236e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0cc      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b68      	ldr	r3, [pc, #416]	@ (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d90c      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b65      	ldr	r3, [pc, #404]	@ (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b63      	ldr	r3, [pc, #396]	@ (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0b8      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ec:	4b59      	ldr	r3, [pc, #356]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a58      	ldr	r2, [pc, #352]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002404:	4b53      	ldr	r3, [pc, #332]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a52      	ldr	r2, [pc, #328]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800240e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b50      	ldr	r3, [pc, #320]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	494d      	ldr	r1, [pc, #308]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d044      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b47      	ldr	r3, [pc, #284]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d119      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e07f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d003      	beq.n	8002456 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b3f      	ldr	r3, [pc, #252]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b3b      	ldr	r3, [pc, #236]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e067      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b37      	ldr	r3, [pc, #220]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4934      	ldr	r1, [pc, #208]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7ff f99c 	bl	80017c4 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7ff f998 	bl	80017c4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e04f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d20c      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b22      	ldr	r3, [pc, #136]	@ (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b20      	ldr	r3, [pc, #128]	@ (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e032      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4916      	ldr	r1, [pc, #88]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	490e      	ldr	r1, [pc, #56]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800251e:	f000 f821 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490a      	ldr	r1, [pc, #40]	@ (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	4a09      	ldr	r2, [pc, #36]	@ (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff f8fc 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00
 8002554:	40023800 	.word	0x40023800
 8002558:	08005660 	.word	0x08005660
 800255c:	20000008 	.word	0x20000008
 8002560:	2000000c 	.word	0x2000000c

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002568:	b094      	sub	sp, #80	@ 0x50
 800256a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800257c:	4b79      	ldr	r3, [pc, #484]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d00d      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002588:	2b08      	cmp	r3, #8
 800258a:	f200 80e1 	bhi.w	8002750 <HAL_RCC_GetSysClockFreq+0x1ec>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x34>
 8002592:	2b04      	cmp	r3, #4
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x3a>
 8002596:	e0db      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b73      	ldr	r3, [pc, #460]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x204>)
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800259c:	e0db      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259e:	4b73      	ldr	r3, [pc, #460]	@ (800276c <HAL_RCC_GetSysClockFreq+0x208>)
 80025a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025a2:	e0d8      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	2200      	movs	r2, #0
 80025c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025d6:	4622      	mov	r2, r4
 80025d8:	462b      	mov	r3, r5
 80025da:	f04f 0000 	mov.w	r0, #0
 80025de:	f04f 0100 	mov.w	r1, #0
 80025e2:	0159      	lsls	r1, r3, #5
 80025e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e8:	0150      	lsls	r0, r2, #5
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4621      	mov	r1, r4
 80025f0:	1a51      	subs	r1, r2, r1
 80025f2:	6139      	str	r1, [r7, #16]
 80025f4:	4629      	mov	r1, r5
 80025f6:	eb63 0301 	sbc.w	r3, r3, r1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002608:	4659      	mov	r1, fp
 800260a:	018b      	lsls	r3, r1, #6
 800260c:	4651      	mov	r1, sl
 800260e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002612:	4651      	mov	r1, sl
 8002614:	018a      	lsls	r2, r1, #6
 8002616:	4651      	mov	r1, sl
 8002618:	ebb2 0801 	subs.w	r8, r2, r1
 800261c:	4659      	mov	r1, fp
 800261e:	eb63 0901 	sbc.w	r9, r3, r1
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800262e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002636:	4690      	mov	r8, r2
 8002638:	4699      	mov	r9, r3
 800263a:	4623      	mov	r3, r4
 800263c:	eb18 0303 	adds.w	r3, r8, r3
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	462b      	mov	r3, r5
 8002644:	eb49 0303 	adc.w	r3, r9, r3
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002656:	4629      	mov	r1, r5
 8002658:	024b      	lsls	r3, r1, #9
 800265a:	4621      	mov	r1, r4
 800265c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002660:	4621      	mov	r1, r4
 8002662:	024a      	lsls	r2, r1, #9
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800266a:	2200      	movs	r2, #0
 800266c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800266e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002674:	f7fd fe0c 	bl	8000290 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4613      	mov	r3, r2
 800267e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002680:	e058      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002682:	4b38      	ldr	r3, [pc, #224]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	2200      	movs	r2, #0
 800268a:	4618      	mov	r0, r3
 800268c:	4611      	mov	r1, r2
 800268e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
 8002698:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800269c:	4642      	mov	r2, r8
 800269e:	464b      	mov	r3, r9
 80026a0:	f04f 0000 	mov.w	r0, #0
 80026a4:	f04f 0100 	mov.w	r1, #0
 80026a8:	0159      	lsls	r1, r3, #5
 80026aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ae:	0150      	lsls	r0, r2, #5
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4641      	mov	r1, r8
 80026b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ba:	4649      	mov	r1, r9
 80026bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026d4:	ebb2 040a 	subs.w	r4, r2, sl
 80026d8:	eb63 050b 	sbc.w	r5, r3, fp
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	00eb      	lsls	r3, r5, #3
 80026e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ea:	00e2      	lsls	r2, r4, #3
 80026ec:	4614      	mov	r4, r2
 80026ee:	461d      	mov	r5, r3
 80026f0:	4643      	mov	r3, r8
 80026f2:	18e3      	adds	r3, r4, r3
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	464b      	mov	r3, r9
 80026f8:	eb45 0303 	adc.w	r3, r5, r3
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800270a:	4629      	mov	r1, r5
 800270c:	028b      	lsls	r3, r1, #10
 800270e:	4621      	mov	r1, r4
 8002710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002714:	4621      	mov	r1, r4
 8002716:	028a      	lsls	r2, r1, #10
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271e:	2200      	movs	r2, #0
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	61fa      	str	r2, [r7, #28]
 8002724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002728:	f7fd fdb2 	bl	8000290 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002744:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x204>)
 8002752:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002758:	4618      	mov	r0, r3
 800275a:	3750      	adds	r7, #80	@ 0x50
 800275c:	46bd      	mov	sp, r7
 800275e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	00f42400 	.word	0x00f42400
 800276c:	007a1200 	.word	0x007a1200

08002770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000008 	.word	0x20000008

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800278c:	f7ff fff0 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0a9b      	lsrs	r3, r3, #10
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	08005670 	.word	0x08005670

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b4:	f7ff ffdc 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0b5b      	lsrs	r3, r3, #13
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	08005670 	.word	0x08005670

080027d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e041      	b.n	800286e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fcaa 	bl	8001158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f000 fac0 	bl	8002d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e041      	b.n	800290c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d106      	bne.n	80028a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f839 	bl	8002914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f000 fa71 	bl	8002d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_TIM_PWM_Start+0x24>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e022      	b.n	8002992 <HAL_TIM_PWM_Start+0x6a>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b04      	cmp	r3, #4
 8002950:	d109      	bne.n	8002966 <HAL_TIM_PWM_Start+0x3e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	e015      	b.n	8002992 <HAL_TIM_PWM_Start+0x6a>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d109      	bne.n	8002980 <HAL_TIM_PWM_Start+0x58>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e008      	b.n	8002992 <HAL_TIM_PWM_Start+0x6a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e068      	b.n	8002a6c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d104      	bne.n	80029aa <HAL_TIM_PWM_Start+0x82>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a8:	e013      	b.n	80029d2 <HAL_TIM_PWM_Start+0xaa>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d104      	bne.n	80029ba <HAL_TIM_PWM_Start+0x92>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b8:	e00b      	b.n	80029d2 <HAL_TIM_PWM_Start+0xaa>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d104      	bne.n	80029ca <HAL_TIM_PWM_Start+0xa2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c8:	e003      	b.n	80029d2 <HAL_TIM_PWM_Start+0xaa>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2201      	movs	r2, #1
 80029d8:	6839      	ldr	r1, [r7, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fc8a 	bl	80032f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a23      	ldr	r2, [pc, #140]	@ (8002a74 <HAL_TIM_PWM_Start+0x14c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d107      	bne.n	80029fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002a74 <HAL_TIM_PWM_Start+0x14c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d018      	beq.n	8002a36 <HAL_TIM_PWM_Start+0x10e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a0c:	d013      	beq.n	8002a36 <HAL_TIM_PWM_Start+0x10e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a19      	ldr	r2, [pc, #100]	@ (8002a78 <HAL_TIM_PWM_Start+0x150>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_TIM_PWM_Start+0x10e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a17      	ldr	r2, [pc, #92]	@ (8002a7c <HAL_TIM_PWM_Start+0x154>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_TIM_PWM_Start+0x10e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <HAL_TIM_PWM_Start+0x158>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_TIM_PWM_Start+0x10e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a14      	ldr	r2, [pc, #80]	@ (8002a84 <HAL_TIM_PWM_Start+0x15c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d111      	bne.n	8002a5a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d010      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	e007      	b.n	8002a6a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	40000c00 	.word	0x40000c00
 8002a84:	40014000 	.word	0x40014000

08002a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0ae      	b.n	8002c04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	f200 809f 	bhi.w	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8002abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002af1 	.word	0x08002af1
 8002ac0:	08002bf5 	.word	0x08002bf5
 8002ac4:	08002bf5 	.word	0x08002bf5
 8002ac8:	08002bf5 	.word	0x08002bf5
 8002acc:	08002b31 	.word	0x08002b31
 8002ad0:	08002bf5 	.word	0x08002bf5
 8002ad4:	08002bf5 	.word	0x08002bf5
 8002ad8:	08002bf5 	.word	0x08002bf5
 8002adc:	08002b73 	.word	0x08002b73
 8002ae0:	08002bf5 	.word	0x08002bf5
 8002ae4:	08002bf5 	.word	0x08002bf5
 8002ae8:	08002bf5 	.word	0x08002bf5
 8002aec:	08002bb3 	.word	0x08002bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f9d6 	bl	8002ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0208 	orr.w	r2, r2, #8
 8002b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0204 	bic.w	r2, r2, #4
 8002b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6999      	ldr	r1, [r3, #24]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	619a      	str	r2, [r3, #24]
      break;
 8002b2e:	e064      	b.n	8002bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fa1c 	bl	8002f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6999      	ldr	r1, [r3, #24]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	021a      	lsls	r2, r3, #8
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	619a      	str	r2, [r3, #24]
      break;
 8002b70:	e043      	b.n	8002bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fa67 	bl	800304c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0208 	orr.w	r2, r2, #8
 8002b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0204 	bic.w	r2, r2, #4
 8002b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	61da      	str	r2, [r3, #28]
      break;
 8002bb0:	e023      	b.n	8002bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fab1 	bl	8003120 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69d9      	ldr	r1, [r3, #28]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	021a      	lsls	r2, r3, #8
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	61da      	str	r2, [r3, #28]
      break;
 8002bf2:	e002      	b.n	8002bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_TIM_ConfigClockSource+0x1c>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e0b4      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x186>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c60:	d03e      	beq.n	8002ce0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c66:	f200 8087 	bhi.w	8002d78 <HAL_TIM_ConfigClockSource+0x16c>
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c6e:	f000 8086 	beq.w	8002d7e <HAL_TIM_ConfigClockSource+0x172>
 8002c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c76:	d87f      	bhi.n	8002d78 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b70      	cmp	r3, #112	@ 0x70
 8002c7a:	d01a      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0xa6>
 8002c7c:	2b70      	cmp	r3, #112	@ 0x70
 8002c7e:	d87b      	bhi.n	8002d78 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b60      	cmp	r3, #96	@ 0x60
 8002c82:	d050      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x11a>
 8002c84:	2b60      	cmp	r3, #96	@ 0x60
 8002c86:	d877      	bhi.n	8002d78 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b50      	cmp	r3, #80	@ 0x50
 8002c8a:	d03c      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0xfa>
 8002c8c:	2b50      	cmp	r3, #80	@ 0x50
 8002c8e:	d873      	bhi.n	8002d78 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b40      	cmp	r3, #64	@ 0x40
 8002c92:	d058      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x13a>
 8002c94:	2b40      	cmp	r3, #64	@ 0x40
 8002c96:	d86f      	bhi.n	8002d78 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b30      	cmp	r3, #48	@ 0x30
 8002c9a:	d064      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x15a>
 8002c9c:	2b30      	cmp	r3, #48	@ 0x30
 8002c9e:	d86b      	bhi.n	8002d78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d060      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x15a>
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d867      	bhi.n	8002d78 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d05c      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d05a      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb0:	e062      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	f000 faf7 	bl	80032b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	609a      	str	r2, [r3, #8]
      break;
 8002cde:	e04f      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	f000 fae0 	bl	80032b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d02:	609a      	str	r2, [r3, #8]
      break;
 8002d04:	e03c      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d12:	461a      	mov	r2, r3
 8002d14:	f000 fa54 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2150      	movs	r1, #80	@ 0x50
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 faad 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8002d24:	e02c      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d32:	461a      	mov	r2, r3
 8002d34:	f000 fa73 	bl	800321e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2160      	movs	r1, #96	@ 0x60
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fa9d 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8002d44:	e01c      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d52:	461a      	mov	r2, r3
 8002d54:	f000 fa34 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2140      	movs	r1, #64	@ 0x40
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fa8d 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8002d64:	e00c      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f000 fa84 	bl	800327e <TIM_ITRx_SetConfig>
      break;
 8002d76:	e003      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7c:	e000      	b.n	8002d80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a37      	ldr	r2, [pc, #220]	@ (8002e8c <TIM_Base_SetConfig+0xf0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00f      	beq.n	8002dd4 <TIM_Base_SetConfig+0x38>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dba:	d00b      	beq.n	8002dd4 <TIM_Base_SetConfig+0x38>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a34      	ldr	r2, [pc, #208]	@ (8002e90 <TIM_Base_SetConfig+0xf4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_Base_SetConfig+0x38>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a33      	ldr	r2, [pc, #204]	@ (8002e94 <TIM_Base_SetConfig+0xf8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0x38>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a32      	ldr	r2, [pc, #200]	@ (8002e98 <TIM_Base_SetConfig+0xfc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d108      	bne.n	8002de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a28      	ldr	r2, [pc, #160]	@ (8002e8c <TIM_Base_SetConfig+0xf0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01b      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df4:	d017      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a25      	ldr	r2, [pc, #148]	@ (8002e90 <TIM_Base_SetConfig+0xf4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a24      	ldr	r2, [pc, #144]	@ (8002e94 <TIM_Base_SetConfig+0xf8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00f      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a23      	ldr	r2, [pc, #140]	@ (8002e98 <TIM_Base_SetConfig+0xfc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00b      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a22      	ldr	r2, [pc, #136]	@ (8002e9c <TIM_Base_SetConfig+0x100>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a21      	ldr	r2, [pc, #132]	@ (8002ea0 <TIM_Base_SetConfig+0x104>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d003      	beq.n	8002e26 <TIM_Base_SetConfig+0x8a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a20      	ldr	r2, [pc, #128]	@ (8002ea4 <TIM_Base_SetConfig+0x108>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d108      	bne.n	8002e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <TIM_Base_SetConfig+0xf0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d103      	bne.n	8002e66 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f043 0204 	orr.w	r2, r3, #4
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800

08002ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 0201 	bic.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f023 0302 	bic.w	r3, r3, #2
 8002ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f70 <TIM_OC1_SetConfig+0xc8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10c      	bne.n	8002f1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0308 	bic.w	r3, r3, #8
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a13      	ldr	r2, [pc, #76]	@ (8002f70 <TIM_OC1_SetConfig+0xc8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d111      	bne.n	8002f4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	621a      	str	r2, [r3, #32]
}
 8002f64:	bf00      	nop
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40010000 	.word	0x40010000

08002f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 0210 	bic.w	r2, r3, #16
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0320 	bic.w	r3, r3, #32
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a1e      	ldr	r2, [pc, #120]	@ (8003048 <TIM_OC2_SetConfig+0xd4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10d      	bne.n	8002ff0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a15      	ldr	r2, [pc, #84]	@ (8003048 <TIM_OC2_SetConfig+0xd4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d113      	bne.n	8003020 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010000 	.word	0x40010000

0800304c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800307a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1d      	ldr	r2, [pc, #116]	@ (800311c <TIM_OC3_SetConfig+0xd0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10d      	bne.n	80030c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a14      	ldr	r2, [pc, #80]	@ (800311c <TIM_OC3_SetConfig+0xd0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d113      	bne.n	80030f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	621a      	str	r2, [r3, #32]
}
 8003110:	bf00      	nop
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40010000 	.word	0x40010000

08003120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800314e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800316a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	031b      	lsls	r3, r3, #12
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a10      	ldr	r2, [pc, #64]	@ (80031bc <TIM_OC4_SetConfig+0x9c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d109      	bne.n	8003194 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40010000 	.word	0x40010000

080031c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 030a 	bic.w	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321e:	b480      	push	{r7}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f023 0210 	bic.w	r2, r3, #16
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800325a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	f043 0307 	orr.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	021a      	lsls	r2, r3, #8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2201      	movs	r2, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1a      	ldr	r2, [r3, #32]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	43db      	mvns	r3, r3
 8003316:	401a      	ands	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1a      	ldr	r2, [r3, #32]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003354:	2302      	movs	r3, #2
 8003356:	e050      	b.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a4:	d013      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a18      	ldr	r2, [pc, #96]	@ (800340c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a16      	ldr	r2, [pc, #88]	@ (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a13      	ldr	r2, [pc, #76]	@ (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10c      	bne.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40010000 	.word	0x40010000
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40000c00 	.word	0x40000c00
 8003418:	40014000 	.word	0x40014000

0800341c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e042      	b.n	80034b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd ff98 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	@ 0x24
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800345e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fdd3 	bl	800400c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	@ 0x28
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d175      	bne.n	80035c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_UART_Transmit+0x2c>
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e06e      	b.n	80035ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2221      	movs	r2, #33	@ 0x21
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034fa:	f7fe f963 	bl	80017c4 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003514:	d108      	bne.n	8003528 <HAL_UART_Transmit+0x6c>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e003      	b.n	8003530 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003530:	e02e      	b.n	8003590 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	@ 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fb37 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e03a      	b.n	80035ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3302      	adds	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e007      	b.n	8003582 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1cb      	bne.n	8003532 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	@ 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fb03 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e006      	b.n	80035ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	4613      	mov	r3, r2
 80035de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d112      	bne.n	8003612 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_UART_Receive_IT+0x26>
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e00b      	b.n	8003614 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	461a      	mov	r2, r3
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fb2a 	bl	8003c62 <UART_Start_Receive_IT>
 800360e:	4603      	mov	r3, r0
 8003610:	e000      	b.n	8003614 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b0ba      	sub	sp, #232	@ 0xe8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800364e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800365a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_UART_IRQHandler+0x66>
 800366e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fc07 	bl	8003e8e <UART_Receive_IT>
      return;
 8003680:	e273      	b.n	8003b6a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80de 	beq.w	8003848 <HAL_UART_IRQHandler+0x22c>
 800368c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80d1 	beq.w	8003848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_UART_IRQHandler+0xae>
 80036b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_UART_IRQHandler+0xd2>
 80036d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	f043 0202 	orr.w	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_UART_IRQHandler+0xf6>
 80036fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d011      	beq.n	8003742 <HAL_UART_IRQHandler+0x126>
 800371e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800372a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	f043 0208 	orr.w	r2, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 820a 	beq.w	8003b60 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800374c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_UART_IRQHandler+0x14e>
 8003758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fb92 	bl	8003e8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	2b40      	cmp	r3, #64	@ 0x40
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_UART_IRQHandler+0x17a>
 800378e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d04f      	beq.n	8003836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa9d 	bl	8003cd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a6:	2b40      	cmp	r3, #64	@ 0x40
 80037a8:	d141      	bne.n	800382e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3314      	adds	r3, #20
 80037b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3314      	adds	r3, #20
 80037d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1d9      	bne.n	80037aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d013      	beq.n	8003826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003802:	4a8a      	ldr	r2, [pc, #552]	@ (8003a2c <HAL_UART_IRQHandler+0x410>)
 8003804:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe f98b 	bl	8001b26 <HAL_DMA_Abort_IT>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003820:	4610      	mov	r0, r2
 8003822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	e00e      	b.n	8003844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f9ac 	bl	8003b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	e00a      	b.n	8003844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9a8 	bl	8003b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e006      	b.n	8003844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9a4 	bl	8003b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003842:	e18d      	b.n	8003b60 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	bf00      	nop
    return;
 8003846:	e18b      	b.n	8003b60 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384c:	2b01      	cmp	r3, #1
 800384e:	f040 8167 	bne.w	8003b20 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8160 	beq.w	8003b20 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8159 	beq.w	8003b20 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388e:	2b40      	cmp	r3, #64	@ 0x40
 8003890:	f040 80ce 	bne.w	8003a30 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80a9 	beq.w	80039fc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038b2:	429a      	cmp	r2, r3
 80038b4:	f080 80a2 	bcs.w	80039fc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ca:	f000 8088 	beq.w	80039de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1d9      	bne.n	80038ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3314      	adds	r3, #20
 8003920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800392a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800393e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e1      	bne.n	800391a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800396c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800397a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800397c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003980:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e3      	bne.n	8003956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ae:	f023 0310 	bic.w	r3, r3, #16
 80039b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e3      	bne.n	800399c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe f834 	bl	8001a46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f8cf 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039fa:	e0b3      	b.n	8003b64 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a04:	429a      	cmp	r2, r3
 8003a06:	f040 80ad 	bne.w	8003b64 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a14:	f040 80a6 	bne.w	8003b64 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f8b7 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
      return;
 8003a2a:	e09b      	b.n	8003b64 <HAL_UART_IRQHandler+0x548>
 8003a2c:	08003d9d 	.word	0x08003d9d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 808e 	beq.w	8003b68 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8089 	beq.w	8003b68 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e3      	bne.n	8003a56 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3314      	adds	r3, #20
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3314      	adds	r3, #20
 8003aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ab2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e3      	bne.n	8003a8e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0310 	bic.w	r3, r3, #16
 8003aea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	69b9      	ldr	r1, [r7, #24]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	617b      	str	r3, [r7, #20]
   return(result);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e3      	bne.n	8003ad4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f83d 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b1e:	e023      	b.n	8003b68 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d009      	beq.n	8003b40 <HAL_UART_IRQHandler+0x524>
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f940 	bl	8003dbe <UART_Transmit_IT>
    return;
 8003b3e:	e014      	b.n	8003b6a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00e      	beq.n	8003b6a <HAL_UART_IRQHandler+0x54e>
 8003b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f980 	bl	8003e5e <UART_EndTransmit_IT>
    return;
 8003b5e:	e004      	b.n	8003b6a <HAL_UART_IRQHandler+0x54e>
    return;
 8003b60:	bf00      	nop
 8003b62:	e002      	b.n	8003b6a <HAL_UART_IRQHandler+0x54e>
      return;
 8003b64:	bf00      	nop
 8003b66:	e000      	b.n	8003b6a <HAL_UART_IRQHandler+0x54e>
      return;
 8003b68:	bf00      	nop
  }
}
 8003b6a:	37e8      	adds	r7, #232	@ 0xe8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc0:	e03b      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d037      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fd fdfb 	bl	80017c4 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e03a      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d023      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b80      	cmp	r3, #128	@ 0x80
 8003bf6:	d020      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b40      	cmp	r3, #64	@ 0x40
 8003bfc:	d01d      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d116      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f857 	bl	8003cd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00f      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0b4      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2222      	movs	r2, #34	@ 0x22
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ca6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0220 	orr.w	r2, r2, #32
 8003cc6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b095      	sub	sp, #84	@ 0x54
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cfe:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e5      	bne.n	8003cde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d119      	bne.n	8003d82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f023 0310 	bic.w	r3, r3, #16
 8003d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d6e:	61ba      	str	r2, [r7, #24]
 8003d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6979      	ldr	r1, [r7, #20]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e5      	bne.n	8003d4e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d90:	bf00      	nop
 8003d92:	3754      	adds	r7, #84	@ 0x54
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff fee7 	bl	8003b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b21      	cmp	r3, #33	@ 0x21
 8003dd0:	d13e      	bne.n	8003e50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dda:	d114      	bne.n	8003e06 <UART_Transmit_IT+0x48>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d110      	bne.n	8003e06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	621a      	str	r2, [r3, #32]
 8003e04:	e008      	b.n	8003e18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	1c59      	adds	r1, r3, #1
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6211      	str	r1, [r2, #32]
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4619      	mov	r1, r3
 8003e26:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10f      	bne.n	8003e4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fe76 	bl	8003b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08c      	sub	sp, #48	@ 0x30
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b22      	cmp	r3, #34	@ 0x22
 8003ea8:	f040 80aa 	bne.w	8004000 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb4:	d115      	bne.n	8003ee2 <UART_Receive_IT+0x54>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d111      	bne.n	8003ee2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ee0:	e024      	b.n	8003f2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef0:	d007      	beq.n	8003f02 <UART_Receive_IT+0x74>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <UART_Receive_IT+0x82>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e008      	b.n	8003f22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d15d      	bne.n	8003ffc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0220 	bic.w	r2, r2, #32
 8003f4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d135      	bne.n	8003ff2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f023 0310 	bic.w	r3, r3, #16
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fac:	623a      	str	r2, [r7, #32]
 8003fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	69f9      	ldr	r1, [r7, #28]
 8003fb2:	6a3a      	ldr	r2, [r7, #32]
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e5      	bne.n	8003f8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d10a      	bne.n	8003fe4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fdd4 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
 8003ff0:	e002      	b.n	8003ff8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc fca8 	bl	8000948 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e002      	b.n	8004002 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3730      	adds	r7, #48	@ 0x30
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004010:	b0c0      	sub	sp, #256	@ 0x100
 8004012:	af00      	add	r7, sp, #0
 8004014:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	68d9      	ldr	r1, [r3, #12]
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	ea40 0301 	orr.w	r3, r0, r1
 8004034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004064:	f021 010c 	bic.w	r1, r1, #12
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004072:	430b      	orrs	r3, r1
 8004074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	6999      	ldr	r1, [r3, #24]
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	ea40 0301 	orr.w	r3, r0, r1
 8004092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b8f      	ldr	r3, [pc, #572]	@ (80042d8 <UART_SetConfig+0x2cc>)
 800409c:	429a      	cmp	r2, r3
 800409e:	d005      	beq.n	80040ac <UART_SetConfig+0xa0>
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b8d      	ldr	r3, [pc, #564]	@ (80042dc <UART_SetConfig+0x2d0>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d104      	bne.n	80040b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040ac:	f7fe fb80 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 80040b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040b4:	e003      	b.n	80040be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b6:	f7fe fb67 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80040ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c8:	f040 810c 	bne.w	80042e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040de:	4622      	mov	r2, r4
 80040e0:	462b      	mov	r3, r5
 80040e2:	1891      	adds	r1, r2, r2
 80040e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040e6:	415b      	adcs	r3, r3
 80040e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040ee:	4621      	mov	r1, r4
 80040f0:	eb12 0801 	adds.w	r8, r2, r1
 80040f4:	4629      	mov	r1, r5
 80040f6:	eb43 0901 	adc.w	r9, r3, r1
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410e:	4690      	mov	r8, r2
 8004110:	4699      	mov	r9, r3
 8004112:	4623      	mov	r3, r4
 8004114:	eb18 0303 	adds.w	r3, r8, r3
 8004118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800411c:	462b      	mov	r3, r5
 800411e:	eb49 0303 	adc.w	r3, r9, r3
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004132:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800413a:	460b      	mov	r3, r1
 800413c:	18db      	adds	r3, r3, r3
 800413e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004140:	4613      	mov	r3, r2
 8004142:	eb42 0303 	adc.w	r3, r2, r3
 8004146:	657b      	str	r3, [r7, #84]	@ 0x54
 8004148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800414c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004150:	f7fc f89e 	bl	8000290 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4b61      	ldr	r3, [pc, #388]	@ (80042e0 <UART_SetConfig+0x2d4>)
 800415a:	fba3 2302 	umull	r2, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	011c      	lsls	r4, r3, #4
 8004162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800416c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800417c:	415b      	adcs	r3, r3
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004184:	4641      	mov	r1, r8
 8004186:	eb12 0a01 	adds.w	sl, r2, r1
 800418a:	4649      	mov	r1, r9
 800418c:	eb43 0b01 	adc.w	fp, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800419c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a4:	4692      	mov	sl, r2
 80041a6:	469b      	mov	fp, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	eb1a 0303 	adds.w	r3, sl, r3
 80041ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041b2:	464b      	mov	r3, r9
 80041b4:	eb4b 0303 	adc.w	r3, fp, r3
 80041b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041d0:	460b      	mov	r3, r1
 80041d2:	18db      	adds	r3, r3, r3
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d6:	4613      	mov	r3, r2
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041e6:	f7fc f853 	bl	8000290 <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80041f2:	fba3 2301 	umull	r2, r3, r3, r1
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2264      	movs	r2, #100	@ 0x64
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	1acb      	subs	r3, r1, r3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004206:	4b36      	ldr	r3, [pc, #216]	@ (80042e0 <UART_SetConfig+0x2d4>)
 8004208:	fba3 2302 	umull	r2, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004214:	441c      	add	r4, r3
 8004216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004220:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	1891      	adds	r1, r2, r2
 800422e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004230:	415b      	adcs	r3, r3
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004238:	4641      	mov	r1, r8
 800423a:	1851      	adds	r1, r2, r1
 800423c:	6339      	str	r1, [r7, #48]	@ 0x30
 800423e:	4649      	mov	r1, r9
 8004240:	414b      	adcs	r3, r1
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004250:	4659      	mov	r1, fp
 8004252:	00cb      	lsls	r3, r1, #3
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425a:	4651      	mov	r1, sl
 800425c:	00ca      	lsls	r2, r1, #3
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	4603      	mov	r3, r0
 8004264:	4642      	mov	r2, r8
 8004266:	189b      	adds	r3, r3, r2
 8004268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800426c:	464b      	mov	r3, r9
 800426e:	460a      	mov	r2, r1
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004284:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800428c:	460b      	mov	r3, r1
 800428e:	18db      	adds	r3, r3, r3
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004292:	4613      	mov	r3, r2
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800429a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800429e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042a2:	f7fb fff5 	bl	8000290 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042ac:	fba3 1302 	umull	r1, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	2164      	movs	r1, #100	@ 0x64
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	3332      	adds	r3, #50	@ 0x32
 80042be:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	f003 0207 	and.w	r2, r3, #7
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4422      	add	r2, r4
 80042d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042d4:	e106      	b.n	80044e4 <UART_SetConfig+0x4d8>
 80042d6:	bf00      	nop
 80042d8:	40011000 	.word	0x40011000
 80042dc:	40011400 	.word	0x40011400
 80042e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042f6:	4642      	mov	r2, r8
 80042f8:	464b      	mov	r3, r9
 80042fa:	1891      	adds	r1, r2, r2
 80042fc:	6239      	str	r1, [r7, #32]
 80042fe:	415b      	adcs	r3, r3
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004306:	4641      	mov	r1, r8
 8004308:	1854      	adds	r4, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb43 0501 	adc.w	r5, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	00eb      	lsls	r3, r5, #3
 800431a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431e:	00e2      	lsls	r2, r4, #3
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	4643      	mov	r3, r8
 8004326:	18e3      	adds	r3, r4, r3
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800432c:	464b      	mov	r3, r9
 800432e:	eb45 0303 	adc.w	r3, r5, r3
 8004332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004342:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004352:	4629      	mov	r1, r5
 8004354:	008b      	lsls	r3, r1, #2
 8004356:	4621      	mov	r1, r4
 8004358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435c:	4621      	mov	r1, r4
 800435e:	008a      	lsls	r2, r1, #2
 8004360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004364:	f7fb ff94 	bl	8000290 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b60      	ldr	r3, [pc, #384]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800436e:	fba3 2302 	umull	r2, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	011c      	lsls	r4, r3, #4
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004380:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	61b9      	str	r1, [r7, #24]
 8004390:	415b      	adcs	r3, r3
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004398:	4641      	mov	r1, r8
 800439a:	1851      	adds	r1, r2, r1
 800439c:	6139      	str	r1, [r7, #16]
 800439e:	4649      	mov	r1, r9
 80043a0:	414b      	adcs	r3, r1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b0:	4659      	mov	r1, fp
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4651      	mov	r1, sl
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4642      	mov	r2, r8
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043f0:	4649      	mov	r1, r9
 80043f2:	008b      	lsls	r3, r1, #2
 80043f4:	4641      	mov	r1, r8
 80043f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fa:	4641      	mov	r1, r8
 80043fc:	008a      	lsls	r2, r1, #2
 80043fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004402:	f7fb ff45 	bl	8000290 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4611      	mov	r1, r2
 800440c:	4b38      	ldr	r3, [pc, #224]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800440e:	fba3 2301 	umull	r2, r3, r3, r1
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2264      	movs	r2, #100	@ 0x64
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	1acb      	subs	r3, r1, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	@ 0x32
 8004420:	4a33      	ldr	r2, [pc, #204]	@ (80044f0 <UART_SetConfig+0x4e4>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800442c:	441c      	add	r4, r3
 800442e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004432:	2200      	movs	r2, #0
 8004434:	673b      	str	r3, [r7, #112]	@ 0x70
 8004436:	677a      	str	r2, [r7, #116]	@ 0x74
 8004438:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	1891      	adds	r1, r2, r2
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	415b      	adcs	r3, r3
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444c:	4641      	mov	r1, r8
 800444e:	1851      	adds	r1, r2, r1
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	4649      	mov	r1, r9
 8004454:	414b      	adcs	r3, r1
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004464:	4659      	mov	r1, fp
 8004466:	00cb      	lsls	r3, r1, #3
 8004468:	4651      	mov	r1, sl
 800446a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446e:	4651      	mov	r1, sl
 8004470:	00ca      	lsls	r2, r1, #3
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	4603      	mov	r3, r0
 8004478:	4642      	mov	r2, r8
 800447a:	189b      	adds	r3, r3, r2
 800447c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800447e:	464b      	mov	r3, r9
 8004480:	460a      	mov	r2, r1
 8004482:	eb42 0303 	adc.w	r3, r2, r3
 8004486:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
 8004492:	667a      	str	r2, [r7, #100]	@ 0x64
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044a0:	4649      	mov	r1, r9
 80044a2:	008b      	lsls	r3, r1, #2
 80044a4:	4641      	mov	r1, r8
 80044a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044aa:	4641      	mov	r1, r8
 80044ac:	008a      	lsls	r2, r1, #2
 80044ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044b2:	f7fb feed 	bl	8000290 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044bc:	fba3 1302 	umull	r1, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	2164      	movs	r1, #100	@ 0x64
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	3332      	adds	r3, #50	@ 0x32
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f003 020f 	and.w	r2, r3, #15
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4422      	add	r2, r4
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044ea:	46bd      	mov	sp, r7
 80044ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f0:	51eb851f 	.word	0x51eb851f

080044f4 <atoi>:
 80044f4:	220a      	movs	r2, #10
 80044f6:	2100      	movs	r1, #0
 80044f8:	f000 b87a 	b.w	80045f0 <strtol>

080044fc <_strtol_l.isra.0>:
 80044fc:	2b24      	cmp	r3, #36	@ 0x24
 80044fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004502:	4686      	mov	lr, r0
 8004504:	4690      	mov	r8, r2
 8004506:	d801      	bhi.n	800450c <_strtol_l.isra.0+0x10>
 8004508:	2b01      	cmp	r3, #1
 800450a:	d106      	bne.n	800451a <_strtol_l.isra.0+0x1e>
 800450c:	f000 fa38 	bl	8004980 <__errno>
 8004510:	2316      	movs	r3, #22
 8004512:	6003      	str	r3, [r0, #0]
 8004514:	2000      	movs	r0, #0
 8004516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451a:	4834      	ldr	r0, [pc, #208]	@ (80045ec <_strtol_l.isra.0+0xf0>)
 800451c:	460d      	mov	r5, r1
 800451e:	462a      	mov	r2, r5
 8004520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004524:	5d06      	ldrb	r6, [r0, r4]
 8004526:	f016 0608 	ands.w	r6, r6, #8
 800452a:	d1f8      	bne.n	800451e <_strtol_l.isra.0+0x22>
 800452c:	2c2d      	cmp	r4, #45	@ 0x2d
 800452e:	d110      	bne.n	8004552 <_strtol_l.isra.0+0x56>
 8004530:	782c      	ldrb	r4, [r5, #0]
 8004532:	2601      	movs	r6, #1
 8004534:	1c95      	adds	r5, r2, #2
 8004536:	f033 0210 	bics.w	r2, r3, #16
 800453a:	d115      	bne.n	8004568 <_strtol_l.isra.0+0x6c>
 800453c:	2c30      	cmp	r4, #48	@ 0x30
 800453e:	d10d      	bne.n	800455c <_strtol_l.isra.0+0x60>
 8004540:	782a      	ldrb	r2, [r5, #0]
 8004542:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004546:	2a58      	cmp	r2, #88	@ 0x58
 8004548:	d108      	bne.n	800455c <_strtol_l.isra.0+0x60>
 800454a:	786c      	ldrb	r4, [r5, #1]
 800454c:	3502      	adds	r5, #2
 800454e:	2310      	movs	r3, #16
 8004550:	e00a      	b.n	8004568 <_strtol_l.isra.0+0x6c>
 8004552:	2c2b      	cmp	r4, #43	@ 0x2b
 8004554:	bf04      	itt	eq
 8004556:	782c      	ldrbeq	r4, [r5, #0]
 8004558:	1c95      	addeq	r5, r2, #2
 800455a:	e7ec      	b.n	8004536 <_strtol_l.isra.0+0x3a>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f6      	bne.n	800454e <_strtol_l.isra.0+0x52>
 8004560:	2c30      	cmp	r4, #48	@ 0x30
 8004562:	bf14      	ite	ne
 8004564:	230a      	movne	r3, #10
 8004566:	2308      	moveq	r3, #8
 8004568:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800456c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004570:	2200      	movs	r2, #0
 8004572:	fbbc f9f3 	udiv	r9, ip, r3
 8004576:	4610      	mov	r0, r2
 8004578:	fb03 ca19 	mls	sl, r3, r9, ip
 800457c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004580:	2f09      	cmp	r7, #9
 8004582:	d80f      	bhi.n	80045a4 <_strtol_l.isra.0+0xa8>
 8004584:	463c      	mov	r4, r7
 8004586:	42a3      	cmp	r3, r4
 8004588:	dd1b      	ble.n	80045c2 <_strtol_l.isra.0+0xc6>
 800458a:	1c57      	adds	r7, r2, #1
 800458c:	d007      	beq.n	800459e <_strtol_l.isra.0+0xa2>
 800458e:	4581      	cmp	r9, r0
 8004590:	d314      	bcc.n	80045bc <_strtol_l.isra.0+0xc0>
 8004592:	d101      	bne.n	8004598 <_strtol_l.isra.0+0x9c>
 8004594:	45a2      	cmp	sl, r4
 8004596:	db11      	blt.n	80045bc <_strtol_l.isra.0+0xc0>
 8004598:	fb00 4003 	mla	r0, r0, r3, r4
 800459c:	2201      	movs	r2, #1
 800459e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045a2:	e7eb      	b.n	800457c <_strtol_l.isra.0+0x80>
 80045a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80045a8:	2f19      	cmp	r7, #25
 80045aa:	d801      	bhi.n	80045b0 <_strtol_l.isra.0+0xb4>
 80045ac:	3c37      	subs	r4, #55	@ 0x37
 80045ae:	e7ea      	b.n	8004586 <_strtol_l.isra.0+0x8a>
 80045b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80045b4:	2f19      	cmp	r7, #25
 80045b6:	d804      	bhi.n	80045c2 <_strtol_l.isra.0+0xc6>
 80045b8:	3c57      	subs	r4, #87	@ 0x57
 80045ba:	e7e4      	b.n	8004586 <_strtol_l.isra.0+0x8a>
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295
 80045c0:	e7ed      	b.n	800459e <_strtol_l.isra.0+0xa2>
 80045c2:	1c53      	adds	r3, r2, #1
 80045c4:	d108      	bne.n	80045d8 <_strtol_l.isra.0+0xdc>
 80045c6:	2322      	movs	r3, #34	@ 0x22
 80045c8:	f8ce 3000 	str.w	r3, [lr]
 80045cc:	4660      	mov	r0, ip
 80045ce:	f1b8 0f00 	cmp.w	r8, #0
 80045d2:	d0a0      	beq.n	8004516 <_strtol_l.isra.0+0x1a>
 80045d4:	1e69      	subs	r1, r5, #1
 80045d6:	e006      	b.n	80045e6 <_strtol_l.isra.0+0xea>
 80045d8:	b106      	cbz	r6, 80045dc <_strtol_l.isra.0+0xe0>
 80045da:	4240      	negs	r0, r0
 80045dc:	f1b8 0f00 	cmp.w	r8, #0
 80045e0:	d099      	beq.n	8004516 <_strtol_l.isra.0+0x1a>
 80045e2:	2a00      	cmp	r2, #0
 80045e4:	d1f6      	bne.n	80045d4 <_strtol_l.isra.0+0xd8>
 80045e6:	f8c8 1000 	str.w	r1, [r8]
 80045ea:	e794      	b.n	8004516 <_strtol_l.isra.0+0x1a>
 80045ec:	08005679 	.word	0x08005679

080045f0 <strtol>:
 80045f0:	4613      	mov	r3, r2
 80045f2:	460a      	mov	r2, r1
 80045f4:	4601      	mov	r1, r0
 80045f6:	4802      	ldr	r0, [pc, #8]	@ (8004600 <strtol+0x10>)
 80045f8:	6800      	ldr	r0, [r0, #0]
 80045fa:	f7ff bf7f 	b.w	80044fc <_strtol_l.isra.0>
 80045fe:	bf00      	nop
 8004600:	20000020 	.word	0x20000020

08004604 <std>:
 8004604:	2300      	movs	r3, #0
 8004606:	b510      	push	{r4, lr}
 8004608:	4604      	mov	r4, r0
 800460a:	e9c0 3300 	strd	r3, r3, [r0]
 800460e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004612:	6083      	str	r3, [r0, #8]
 8004614:	8181      	strh	r1, [r0, #12]
 8004616:	6643      	str	r3, [r0, #100]	@ 0x64
 8004618:	81c2      	strh	r2, [r0, #14]
 800461a:	6183      	str	r3, [r0, #24]
 800461c:	4619      	mov	r1, r3
 800461e:	2208      	movs	r2, #8
 8004620:	305c      	adds	r0, #92	@ 0x5c
 8004622:	f000 f8f4 	bl	800480e <memset>
 8004626:	4b0d      	ldr	r3, [pc, #52]	@ (800465c <std+0x58>)
 8004628:	6263      	str	r3, [r4, #36]	@ 0x24
 800462a:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <std+0x5c>)
 800462c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800462e:	4b0d      	ldr	r3, [pc, #52]	@ (8004664 <std+0x60>)
 8004630:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004632:	4b0d      	ldr	r3, [pc, #52]	@ (8004668 <std+0x64>)
 8004634:	6323      	str	r3, [r4, #48]	@ 0x30
 8004636:	4b0d      	ldr	r3, [pc, #52]	@ (800466c <std+0x68>)
 8004638:	6224      	str	r4, [r4, #32]
 800463a:	429c      	cmp	r4, r3
 800463c:	d006      	beq.n	800464c <std+0x48>
 800463e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004642:	4294      	cmp	r4, r2
 8004644:	d002      	beq.n	800464c <std+0x48>
 8004646:	33d0      	adds	r3, #208	@ 0xd0
 8004648:	429c      	cmp	r4, r3
 800464a:	d105      	bne.n	8004658 <std+0x54>
 800464c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004654:	f000 b9be 	b.w	80049d4 <__retarget_lock_init_recursive>
 8004658:	bd10      	pop	{r4, pc}
 800465a:	bf00      	nop
 800465c:	08004789 	.word	0x08004789
 8004660:	080047ab 	.word	0x080047ab
 8004664:	080047e3 	.word	0x080047e3
 8004668:	08004807 	.word	0x08004807
 800466c:	200002c4 	.word	0x200002c4

08004670 <stdio_exit_handler>:
 8004670:	4a02      	ldr	r2, [pc, #8]	@ (800467c <stdio_exit_handler+0xc>)
 8004672:	4903      	ldr	r1, [pc, #12]	@ (8004680 <stdio_exit_handler+0x10>)
 8004674:	4803      	ldr	r0, [pc, #12]	@ (8004684 <stdio_exit_handler+0x14>)
 8004676:	f000 b869 	b.w	800474c <_fwalk_sglue>
 800467a:	bf00      	nop
 800467c:	20000014 	.word	0x20000014
 8004680:	08004d31 	.word	0x08004d31
 8004684:	20000024 	.word	0x20000024

08004688 <cleanup_stdio>:
 8004688:	6841      	ldr	r1, [r0, #4]
 800468a:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <cleanup_stdio+0x34>)
 800468c:	4299      	cmp	r1, r3
 800468e:	b510      	push	{r4, lr}
 8004690:	4604      	mov	r4, r0
 8004692:	d001      	beq.n	8004698 <cleanup_stdio+0x10>
 8004694:	f000 fb4c 	bl	8004d30 <_fflush_r>
 8004698:	68a1      	ldr	r1, [r4, #8]
 800469a:	4b09      	ldr	r3, [pc, #36]	@ (80046c0 <cleanup_stdio+0x38>)
 800469c:	4299      	cmp	r1, r3
 800469e:	d002      	beq.n	80046a6 <cleanup_stdio+0x1e>
 80046a0:	4620      	mov	r0, r4
 80046a2:	f000 fb45 	bl	8004d30 <_fflush_r>
 80046a6:	68e1      	ldr	r1, [r4, #12]
 80046a8:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <cleanup_stdio+0x3c>)
 80046aa:	4299      	cmp	r1, r3
 80046ac:	d004      	beq.n	80046b8 <cleanup_stdio+0x30>
 80046ae:	4620      	mov	r0, r4
 80046b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b4:	f000 bb3c 	b.w	8004d30 <_fflush_r>
 80046b8:	bd10      	pop	{r4, pc}
 80046ba:	bf00      	nop
 80046bc:	200002c4 	.word	0x200002c4
 80046c0:	2000032c 	.word	0x2000032c
 80046c4:	20000394 	.word	0x20000394

080046c8 <global_stdio_init.part.0>:
 80046c8:	b510      	push	{r4, lr}
 80046ca:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <global_stdio_init.part.0+0x30>)
 80046cc:	4c0b      	ldr	r4, [pc, #44]	@ (80046fc <global_stdio_init.part.0+0x34>)
 80046ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004700 <global_stdio_init.part.0+0x38>)
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	4620      	mov	r0, r4
 80046d4:	2200      	movs	r2, #0
 80046d6:	2104      	movs	r1, #4
 80046d8:	f7ff ff94 	bl	8004604 <std>
 80046dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046e0:	2201      	movs	r2, #1
 80046e2:	2109      	movs	r1, #9
 80046e4:	f7ff ff8e 	bl	8004604 <std>
 80046e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046ec:	2202      	movs	r2, #2
 80046ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f2:	2112      	movs	r1, #18
 80046f4:	f7ff bf86 	b.w	8004604 <std>
 80046f8:	200003fc 	.word	0x200003fc
 80046fc:	200002c4 	.word	0x200002c4
 8004700:	08004671 	.word	0x08004671

08004704 <__sfp_lock_acquire>:
 8004704:	4801      	ldr	r0, [pc, #4]	@ (800470c <__sfp_lock_acquire+0x8>)
 8004706:	f000 b966 	b.w	80049d6 <__retarget_lock_acquire_recursive>
 800470a:	bf00      	nop
 800470c:	20000405 	.word	0x20000405

08004710 <__sfp_lock_release>:
 8004710:	4801      	ldr	r0, [pc, #4]	@ (8004718 <__sfp_lock_release+0x8>)
 8004712:	f000 b961 	b.w	80049d8 <__retarget_lock_release_recursive>
 8004716:	bf00      	nop
 8004718:	20000405 	.word	0x20000405

0800471c <__sinit>:
 800471c:	b510      	push	{r4, lr}
 800471e:	4604      	mov	r4, r0
 8004720:	f7ff fff0 	bl	8004704 <__sfp_lock_acquire>
 8004724:	6a23      	ldr	r3, [r4, #32]
 8004726:	b11b      	cbz	r3, 8004730 <__sinit+0x14>
 8004728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472c:	f7ff bff0 	b.w	8004710 <__sfp_lock_release>
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <__sinit+0x28>)
 8004732:	6223      	str	r3, [r4, #32]
 8004734:	4b04      	ldr	r3, [pc, #16]	@ (8004748 <__sinit+0x2c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f5      	bne.n	8004728 <__sinit+0xc>
 800473c:	f7ff ffc4 	bl	80046c8 <global_stdio_init.part.0>
 8004740:	e7f2      	b.n	8004728 <__sinit+0xc>
 8004742:	bf00      	nop
 8004744:	08004689 	.word	0x08004689
 8004748:	200003fc 	.word	0x200003fc

0800474c <_fwalk_sglue>:
 800474c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004750:	4607      	mov	r7, r0
 8004752:	4688      	mov	r8, r1
 8004754:	4614      	mov	r4, r2
 8004756:	2600      	movs	r6, #0
 8004758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800475c:	f1b9 0901 	subs.w	r9, r9, #1
 8004760:	d505      	bpl.n	800476e <_fwalk_sglue+0x22>
 8004762:	6824      	ldr	r4, [r4, #0]
 8004764:	2c00      	cmp	r4, #0
 8004766:	d1f7      	bne.n	8004758 <_fwalk_sglue+0xc>
 8004768:	4630      	mov	r0, r6
 800476a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800476e:	89ab      	ldrh	r3, [r5, #12]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d907      	bls.n	8004784 <_fwalk_sglue+0x38>
 8004774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004778:	3301      	adds	r3, #1
 800477a:	d003      	beq.n	8004784 <_fwalk_sglue+0x38>
 800477c:	4629      	mov	r1, r5
 800477e:	4638      	mov	r0, r7
 8004780:	47c0      	blx	r8
 8004782:	4306      	orrs	r6, r0
 8004784:	3568      	adds	r5, #104	@ 0x68
 8004786:	e7e9      	b.n	800475c <_fwalk_sglue+0x10>

08004788 <__sread>:
 8004788:	b510      	push	{r4, lr}
 800478a:	460c      	mov	r4, r1
 800478c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004790:	f000 f8d2 	bl	8004938 <_read_r>
 8004794:	2800      	cmp	r0, #0
 8004796:	bfab      	itete	ge
 8004798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800479a:	89a3      	ldrhlt	r3, [r4, #12]
 800479c:	181b      	addge	r3, r3, r0
 800479e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047a2:	bfac      	ite	ge
 80047a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047a6:	81a3      	strhlt	r3, [r4, #12]
 80047a8:	bd10      	pop	{r4, pc}

080047aa <__swrite>:
 80047aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ae:	461f      	mov	r7, r3
 80047b0:	898b      	ldrh	r3, [r1, #12]
 80047b2:	05db      	lsls	r3, r3, #23
 80047b4:	4605      	mov	r5, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	4616      	mov	r6, r2
 80047ba:	d505      	bpl.n	80047c8 <__swrite+0x1e>
 80047bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c0:	2302      	movs	r3, #2
 80047c2:	2200      	movs	r2, #0
 80047c4:	f000 f8a6 	bl	8004914 <_lseek_r>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	4632      	mov	r2, r6
 80047d6:	463b      	mov	r3, r7
 80047d8:	4628      	mov	r0, r5
 80047da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047de:	f000 b8bd 	b.w	800495c <_write_r>

080047e2 <__sseek>:
 80047e2:	b510      	push	{r4, lr}
 80047e4:	460c      	mov	r4, r1
 80047e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ea:	f000 f893 	bl	8004914 <_lseek_r>
 80047ee:	1c43      	adds	r3, r0, #1
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	bf15      	itete	ne
 80047f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047fe:	81a3      	strheq	r3, [r4, #12]
 8004800:	bf18      	it	ne
 8004802:	81a3      	strhne	r3, [r4, #12]
 8004804:	bd10      	pop	{r4, pc}

08004806 <__sclose>:
 8004806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480a:	f000 b873 	b.w	80048f4 <_close_r>

0800480e <memset>:
 800480e:	4402      	add	r2, r0
 8004810:	4603      	mov	r3, r0
 8004812:	4293      	cmp	r3, r2
 8004814:	d100      	bne.n	8004818 <memset+0xa>
 8004816:	4770      	bx	lr
 8004818:	f803 1b01 	strb.w	r1, [r3], #1
 800481c:	e7f9      	b.n	8004812 <memset+0x4>

0800481e <strcat>:
 800481e:	b510      	push	{r4, lr}
 8004820:	4602      	mov	r2, r0
 8004822:	7814      	ldrb	r4, [r2, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	3201      	adds	r2, #1
 8004828:	2c00      	cmp	r4, #0
 800482a:	d1fa      	bne.n	8004822 <strcat+0x4>
 800482c:	3b01      	subs	r3, #1
 800482e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004836:	2a00      	cmp	r2, #0
 8004838:	d1f9      	bne.n	800482e <strcat+0x10>
 800483a:	bd10      	pop	{r4, pc}

0800483c <strtok>:
 800483c:	4b16      	ldr	r3, [pc, #88]	@ (8004898 <strtok+0x5c>)
 800483e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	681f      	ldr	r7, [r3, #0]
 8004844:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004846:	4605      	mov	r5, r0
 8004848:	460e      	mov	r6, r1
 800484a:	b9ec      	cbnz	r4, 8004888 <strtok+0x4c>
 800484c:	2050      	movs	r0, #80	@ 0x50
 800484e:	f000 f935 	bl	8004abc <malloc>
 8004852:	4602      	mov	r2, r0
 8004854:	6478      	str	r0, [r7, #68]	@ 0x44
 8004856:	b920      	cbnz	r0, 8004862 <strtok+0x26>
 8004858:	4b10      	ldr	r3, [pc, #64]	@ (800489c <strtok+0x60>)
 800485a:	4811      	ldr	r0, [pc, #68]	@ (80048a0 <strtok+0x64>)
 800485c:	215b      	movs	r1, #91	@ 0x5b
 800485e:	f000 f8c5 	bl	80049ec <__assert_func>
 8004862:	e9c0 4400 	strd	r4, r4, [r0]
 8004866:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800486a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800486e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004872:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004876:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800487a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800487e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004882:	6184      	str	r4, [r0, #24]
 8004884:	7704      	strb	r4, [r0, #28]
 8004886:	6244      	str	r4, [r0, #36]	@ 0x24
 8004888:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800488a:	4631      	mov	r1, r6
 800488c:	4628      	mov	r0, r5
 800488e:	2301      	movs	r3, #1
 8004890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004894:	f000 b806 	b.w	80048a4 <__strtok_r>
 8004898:	20000020 	.word	0x20000020
 800489c:	08005779 	.word	0x08005779
 80048a0:	08005790 	.word	0x08005790

080048a4 <__strtok_r>:
 80048a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a6:	4604      	mov	r4, r0
 80048a8:	b908      	cbnz	r0, 80048ae <__strtok_r+0xa>
 80048aa:	6814      	ldr	r4, [r2, #0]
 80048ac:	b144      	cbz	r4, 80048c0 <__strtok_r+0x1c>
 80048ae:	4620      	mov	r0, r4
 80048b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80048b4:	460f      	mov	r7, r1
 80048b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80048ba:	b91e      	cbnz	r6, 80048c4 <__strtok_r+0x20>
 80048bc:	b965      	cbnz	r5, 80048d8 <__strtok_r+0x34>
 80048be:	6015      	str	r5, [r2, #0]
 80048c0:	2000      	movs	r0, #0
 80048c2:	e005      	b.n	80048d0 <__strtok_r+0x2c>
 80048c4:	42b5      	cmp	r5, r6
 80048c6:	d1f6      	bne.n	80048b6 <__strtok_r+0x12>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <__strtok_r+0xa>
 80048cc:	6014      	str	r4, [r2, #0]
 80048ce:	7003      	strb	r3, [r0, #0]
 80048d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d2:	461c      	mov	r4, r3
 80048d4:	e00c      	b.n	80048f0 <__strtok_r+0x4c>
 80048d6:	b91d      	cbnz	r5, 80048e0 <__strtok_r+0x3c>
 80048d8:	4627      	mov	r7, r4
 80048da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80048de:	460e      	mov	r6, r1
 80048e0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80048e4:	42ab      	cmp	r3, r5
 80048e6:	d1f6      	bne.n	80048d6 <__strtok_r+0x32>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f2      	beq.n	80048d2 <__strtok_r+0x2e>
 80048ec:	2300      	movs	r3, #0
 80048ee:	703b      	strb	r3, [r7, #0]
 80048f0:	6014      	str	r4, [r2, #0]
 80048f2:	e7ed      	b.n	80048d0 <__strtok_r+0x2c>

080048f4 <_close_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4d06      	ldr	r5, [pc, #24]	@ (8004910 <_close_r+0x1c>)
 80048f8:	2300      	movs	r3, #0
 80048fa:	4604      	mov	r4, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	f7fc fe54 	bl	80015ac <_close>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_close_r+0x1a>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_close_r+0x1a>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	20000400 	.word	0x20000400

08004914 <_lseek_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d07      	ldr	r5, [pc, #28]	@ (8004934 <_lseek_r+0x20>)
 8004918:	4604      	mov	r4, r0
 800491a:	4608      	mov	r0, r1
 800491c:	4611      	mov	r1, r2
 800491e:	2200      	movs	r2, #0
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fc fe69 	bl	80015fa <_lseek>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_lseek_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_lseek_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000400 	.word	0x20000400

08004938 <_read_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4d07      	ldr	r5, [pc, #28]	@ (8004958 <_read_r+0x20>)
 800493c:	4604      	mov	r4, r0
 800493e:	4608      	mov	r0, r1
 8004940:	4611      	mov	r1, r2
 8004942:	2200      	movs	r2, #0
 8004944:	602a      	str	r2, [r5, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f7fc fdf7 	bl	800153a <_read>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_read_r+0x1e>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	b103      	cbz	r3, 8004956 <_read_r+0x1e>
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	20000400 	.word	0x20000400

0800495c <_write_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4d07      	ldr	r5, [pc, #28]	@ (800497c <_write_r+0x20>)
 8004960:	4604      	mov	r4, r0
 8004962:	4608      	mov	r0, r1
 8004964:	4611      	mov	r1, r2
 8004966:	2200      	movs	r2, #0
 8004968:	602a      	str	r2, [r5, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	f7fc fe02 	bl	8001574 <_write>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_write_r+0x1e>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b103      	cbz	r3, 800497a <_write_r+0x1e>
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	20000400 	.word	0x20000400

08004980 <__errno>:
 8004980:	4b01      	ldr	r3, [pc, #4]	@ (8004988 <__errno+0x8>)
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000020 	.word	0x20000020

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4d0d      	ldr	r5, [pc, #52]	@ (80049c4 <__libc_init_array+0x38>)
 8004990:	4c0d      	ldr	r4, [pc, #52]	@ (80049c8 <__libc_init_array+0x3c>)
 8004992:	1b64      	subs	r4, r4, r5
 8004994:	10a4      	asrs	r4, r4, #2
 8004996:	2600      	movs	r6, #0
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	4d0b      	ldr	r5, [pc, #44]	@ (80049cc <__libc_init_array+0x40>)
 800499e:	4c0c      	ldr	r4, [pc, #48]	@ (80049d0 <__libc_init_array+0x44>)
 80049a0:	f000 fe40 	bl	8005624 <_init>
 80049a4:	1b64      	subs	r4, r4, r5
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	2600      	movs	r6, #0
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08005864 	.word	0x08005864
 80049c8:	08005864 	.word	0x08005864
 80049cc:	08005864 	.word	0x08005864
 80049d0:	08005868 	.word	0x08005868

080049d4 <__retarget_lock_init_recursive>:
 80049d4:	4770      	bx	lr

080049d6 <__retarget_lock_acquire_recursive>:
 80049d6:	4770      	bx	lr

080049d8 <__retarget_lock_release_recursive>:
 80049d8:	4770      	bx	lr

080049da <strcpy>:
 80049da:	4603      	mov	r3, r0
 80049dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e0:	f803 2b01 	strb.w	r2, [r3], #1
 80049e4:	2a00      	cmp	r2, #0
 80049e6:	d1f9      	bne.n	80049dc <strcpy+0x2>
 80049e8:	4770      	bx	lr
	...

080049ec <__assert_func>:
 80049ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049ee:	4614      	mov	r4, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <__assert_func+0x2c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4605      	mov	r5, r0
 80049f8:	68d8      	ldr	r0, [r3, #12]
 80049fa:	b14c      	cbz	r4, 8004a10 <__assert_func+0x24>
 80049fc:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <__assert_func+0x30>)
 80049fe:	9100      	str	r1, [sp, #0]
 8004a00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a04:	4906      	ldr	r1, [pc, #24]	@ (8004a20 <__assert_func+0x34>)
 8004a06:	462b      	mov	r3, r5
 8004a08:	f000 f9ba 	bl	8004d80 <fiprintf>
 8004a0c:	f000 f9da 	bl	8004dc4 <abort>
 8004a10:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <__assert_func+0x38>)
 8004a12:	461c      	mov	r4, r3
 8004a14:	e7f3      	b.n	80049fe <__assert_func+0x12>
 8004a16:	bf00      	nop
 8004a18:	20000020 	.word	0x20000020
 8004a1c:	080057ea 	.word	0x080057ea
 8004a20:	080057f7 	.word	0x080057f7
 8004a24:	08005825 	.word	0x08005825

08004a28 <_free_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	2900      	cmp	r1, #0
 8004a2e:	d041      	beq.n	8004ab4 <_free_r+0x8c>
 8004a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a34:	1f0c      	subs	r4, r1, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bfb8      	it	lt
 8004a3a:	18e4      	addlt	r4, r4, r3
 8004a3c:	f000 f8e8 	bl	8004c10 <__malloc_lock>
 8004a40:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab8 <_free_r+0x90>)
 8004a42:	6813      	ldr	r3, [r2, #0]
 8004a44:	b933      	cbnz	r3, 8004a54 <_free_r+0x2c>
 8004a46:	6063      	str	r3, [r4, #4]
 8004a48:	6014      	str	r4, [r2, #0]
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a50:	f000 b8e4 	b.w	8004c1c <__malloc_unlock>
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d908      	bls.n	8004a6a <_free_r+0x42>
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	1821      	adds	r1, r4, r0
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	bf01      	itttt	eq
 8004a60:	6819      	ldreq	r1, [r3, #0]
 8004a62:	685b      	ldreq	r3, [r3, #4]
 8004a64:	1809      	addeq	r1, r1, r0
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	e7ed      	b.n	8004a46 <_free_r+0x1e>
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	b10b      	cbz	r3, 8004a74 <_free_r+0x4c>
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d9fa      	bls.n	8004a6a <_free_r+0x42>
 8004a74:	6811      	ldr	r1, [r2, #0]
 8004a76:	1850      	adds	r0, r2, r1
 8004a78:	42a0      	cmp	r0, r4
 8004a7a:	d10b      	bne.n	8004a94 <_free_r+0x6c>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	4401      	add	r1, r0
 8004a80:	1850      	adds	r0, r2, r1
 8004a82:	4283      	cmp	r3, r0
 8004a84:	6011      	str	r1, [r2, #0]
 8004a86:	d1e0      	bne.n	8004a4a <_free_r+0x22>
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	6053      	str	r3, [r2, #4]
 8004a8e:	4408      	add	r0, r1
 8004a90:	6010      	str	r0, [r2, #0]
 8004a92:	e7da      	b.n	8004a4a <_free_r+0x22>
 8004a94:	d902      	bls.n	8004a9c <_free_r+0x74>
 8004a96:	230c      	movs	r3, #12
 8004a98:	602b      	str	r3, [r5, #0]
 8004a9a:	e7d6      	b.n	8004a4a <_free_r+0x22>
 8004a9c:	6820      	ldr	r0, [r4, #0]
 8004a9e:	1821      	adds	r1, r4, r0
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	bf04      	itt	eq
 8004aa4:	6819      	ldreq	r1, [r3, #0]
 8004aa6:	685b      	ldreq	r3, [r3, #4]
 8004aa8:	6063      	str	r3, [r4, #4]
 8004aaa:	bf04      	itt	eq
 8004aac:	1809      	addeq	r1, r1, r0
 8004aae:	6021      	streq	r1, [r4, #0]
 8004ab0:	6054      	str	r4, [r2, #4]
 8004ab2:	e7ca      	b.n	8004a4a <_free_r+0x22>
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
 8004ab6:	bf00      	nop
 8004ab8:	2000040c 	.word	0x2000040c

08004abc <malloc>:
 8004abc:	4b02      	ldr	r3, [pc, #8]	@ (8004ac8 <malloc+0xc>)
 8004abe:	4601      	mov	r1, r0
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	f000 b825 	b.w	8004b10 <_malloc_r>
 8004ac6:	bf00      	nop
 8004ac8:	20000020 	.word	0x20000020

08004acc <sbrk_aligned>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4e0f      	ldr	r6, [pc, #60]	@ (8004b0c <sbrk_aligned+0x40>)
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	6831      	ldr	r1, [r6, #0]
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	b911      	cbnz	r1, 8004ade <sbrk_aligned+0x12>
 8004ad8:	f000 f964 	bl	8004da4 <_sbrk_r>
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 f95f 	bl	8004da4 <_sbrk_r>
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	d103      	bne.n	8004af2 <sbrk_aligned+0x26>
 8004aea:	f04f 34ff 	mov.w	r4, #4294967295
 8004aee:	4620      	mov	r0, r4
 8004af0:	bd70      	pop	{r4, r5, r6, pc}
 8004af2:	1cc4      	adds	r4, r0, #3
 8004af4:	f024 0403 	bic.w	r4, r4, #3
 8004af8:	42a0      	cmp	r0, r4
 8004afa:	d0f8      	beq.n	8004aee <sbrk_aligned+0x22>
 8004afc:	1a21      	subs	r1, r4, r0
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 f950 	bl	8004da4 <_sbrk_r>
 8004b04:	3001      	adds	r0, #1
 8004b06:	d1f2      	bne.n	8004aee <sbrk_aligned+0x22>
 8004b08:	e7ef      	b.n	8004aea <sbrk_aligned+0x1e>
 8004b0a:	bf00      	nop
 8004b0c:	20000408 	.word	0x20000408

08004b10 <_malloc_r>:
 8004b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b14:	1ccd      	adds	r5, r1, #3
 8004b16:	f025 0503 	bic.w	r5, r5, #3
 8004b1a:	3508      	adds	r5, #8
 8004b1c:	2d0c      	cmp	r5, #12
 8004b1e:	bf38      	it	cc
 8004b20:	250c      	movcc	r5, #12
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	4606      	mov	r6, r0
 8004b26:	db01      	blt.n	8004b2c <_malloc_r+0x1c>
 8004b28:	42a9      	cmp	r1, r5
 8004b2a:	d904      	bls.n	8004b36 <_malloc_r+0x26>
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	6033      	str	r3, [r6, #0]
 8004b30:	2000      	movs	r0, #0
 8004b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c0c <_malloc_r+0xfc>
 8004b3a:	f000 f869 	bl	8004c10 <__malloc_lock>
 8004b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b42:	461c      	mov	r4, r3
 8004b44:	bb44      	cbnz	r4, 8004b98 <_malloc_r+0x88>
 8004b46:	4629      	mov	r1, r5
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7ff ffbf 	bl	8004acc <sbrk_aligned>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	4604      	mov	r4, r0
 8004b52:	d158      	bne.n	8004c06 <_malloc_r+0xf6>
 8004b54:	f8d8 4000 	ldr.w	r4, [r8]
 8004b58:	4627      	mov	r7, r4
 8004b5a:	2f00      	cmp	r7, #0
 8004b5c:	d143      	bne.n	8004be6 <_malloc_r+0xd6>
 8004b5e:	2c00      	cmp	r4, #0
 8004b60:	d04b      	beq.n	8004bfa <_malloc_r+0xea>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	4639      	mov	r1, r7
 8004b66:	4630      	mov	r0, r6
 8004b68:	eb04 0903 	add.w	r9, r4, r3
 8004b6c:	f000 f91a 	bl	8004da4 <_sbrk_r>
 8004b70:	4581      	cmp	r9, r0
 8004b72:	d142      	bne.n	8004bfa <_malloc_r+0xea>
 8004b74:	6821      	ldr	r1, [r4, #0]
 8004b76:	1a6d      	subs	r5, r5, r1
 8004b78:	4629      	mov	r1, r5
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f7ff ffa6 	bl	8004acc <sbrk_aligned>
 8004b80:	3001      	adds	r0, #1
 8004b82:	d03a      	beq.n	8004bfa <_malloc_r+0xea>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	442b      	add	r3, r5
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	bb62      	cbnz	r2, 8004bec <_malloc_r+0xdc>
 8004b92:	f8c8 7000 	str.w	r7, [r8]
 8004b96:	e00f      	b.n	8004bb8 <_malloc_r+0xa8>
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	1b52      	subs	r2, r2, r5
 8004b9c:	d420      	bmi.n	8004be0 <_malloc_r+0xd0>
 8004b9e:	2a0b      	cmp	r2, #11
 8004ba0:	d917      	bls.n	8004bd2 <_malloc_r+0xc2>
 8004ba2:	1961      	adds	r1, r4, r5
 8004ba4:	42a3      	cmp	r3, r4
 8004ba6:	6025      	str	r5, [r4, #0]
 8004ba8:	bf18      	it	ne
 8004baa:	6059      	strne	r1, [r3, #4]
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	bf08      	it	eq
 8004bb0:	f8c8 1000 	streq.w	r1, [r8]
 8004bb4:	5162      	str	r2, [r4, r5]
 8004bb6:	604b      	str	r3, [r1, #4]
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f000 f82f 	bl	8004c1c <__malloc_unlock>
 8004bbe:	f104 000b 	add.w	r0, r4, #11
 8004bc2:	1d23      	adds	r3, r4, #4
 8004bc4:	f020 0007 	bic.w	r0, r0, #7
 8004bc8:	1ac2      	subs	r2, r0, r3
 8004bca:	bf1c      	itt	ne
 8004bcc:	1a1b      	subne	r3, r3, r0
 8004bce:	50a3      	strne	r3, [r4, r2]
 8004bd0:	e7af      	b.n	8004b32 <_malloc_r+0x22>
 8004bd2:	6862      	ldr	r2, [r4, #4]
 8004bd4:	42a3      	cmp	r3, r4
 8004bd6:	bf0c      	ite	eq
 8004bd8:	f8c8 2000 	streq.w	r2, [r8]
 8004bdc:	605a      	strne	r2, [r3, #4]
 8004bde:	e7eb      	b.n	8004bb8 <_malloc_r+0xa8>
 8004be0:	4623      	mov	r3, r4
 8004be2:	6864      	ldr	r4, [r4, #4]
 8004be4:	e7ae      	b.n	8004b44 <_malloc_r+0x34>
 8004be6:	463c      	mov	r4, r7
 8004be8:	687f      	ldr	r7, [r7, #4]
 8004bea:	e7b6      	b.n	8004b5a <_malloc_r+0x4a>
 8004bec:	461a      	mov	r2, r3
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	d1fb      	bne.n	8004bec <_malloc_r+0xdc>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6053      	str	r3, [r2, #4]
 8004bf8:	e7de      	b.n	8004bb8 <_malloc_r+0xa8>
 8004bfa:	230c      	movs	r3, #12
 8004bfc:	6033      	str	r3, [r6, #0]
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f000 f80c 	bl	8004c1c <__malloc_unlock>
 8004c04:	e794      	b.n	8004b30 <_malloc_r+0x20>
 8004c06:	6005      	str	r5, [r0, #0]
 8004c08:	e7d6      	b.n	8004bb8 <_malloc_r+0xa8>
 8004c0a:	bf00      	nop
 8004c0c:	2000040c 	.word	0x2000040c

08004c10 <__malloc_lock>:
 8004c10:	4801      	ldr	r0, [pc, #4]	@ (8004c18 <__malloc_lock+0x8>)
 8004c12:	f7ff bee0 	b.w	80049d6 <__retarget_lock_acquire_recursive>
 8004c16:	bf00      	nop
 8004c18:	20000404 	.word	0x20000404

08004c1c <__malloc_unlock>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__malloc_unlock+0x8>)
 8004c1e:	f7ff bedb 	b.w	80049d8 <__retarget_lock_release_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000404 	.word	0x20000404

08004c28 <__sflush_r>:
 8004c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c30:	0716      	lsls	r6, r2, #28
 8004c32:	4605      	mov	r5, r0
 8004c34:	460c      	mov	r4, r1
 8004c36:	d454      	bmi.n	8004ce2 <__sflush_r+0xba>
 8004c38:	684b      	ldr	r3, [r1, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dc02      	bgt.n	8004c44 <__sflush_r+0x1c>
 8004c3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	dd48      	ble.n	8004cd6 <__sflush_r+0xae>
 8004c44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c46:	2e00      	cmp	r6, #0
 8004c48:	d045      	beq.n	8004cd6 <__sflush_r+0xae>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c50:	682f      	ldr	r7, [r5, #0]
 8004c52:	6a21      	ldr	r1, [r4, #32]
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	d030      	beq.n	8004cba <__sflush_r+0x92>
 8004c58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	0759      	lsls	r1, r3, #29
 8004c5e:	d505      	bpl.n	8004c6c <__sflush_r+0x44>
 8004c60:	6863      	ldr	r3, [r4, #4]
 8004c62:	1ad2      	subs	r2, r2, r3
 8004c64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c66:	b10b      	cbz	r3, 8004c6c <__sflush_r+0x44>
 8004c68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c6a:	1ad2      	subs	r2, r2, r3
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c70:	6a21      	ldr	r1, [r4, #32]
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b0      	blx	r6
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	d106      	bne.n	8004c8a <__sflush_r+0x62>
 8004c7c:	6829      	ldr	r1, [r5, #0]
 8004c7e:	291d      	cmp	r1, #29
 8004c80:	d82b      	bhi.n	8004cda <__sflush_r+0xb2>
 8004c82:	4a2a      	ldr	r2, [pc, #168]	@ (8004d2c <__sflush_r+0x104>)
 8004c84:	40ca      	lsrs	r2, r1
 8004c86:	07d6      	lsls	r6, r2, #31
 8004c88:	d527      	bpl.n	8004cda <__sflush_r+0xb2>
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	6062      	str	r2, [r4, #4]
 8004c8e:	04d9      	lsls	r1, r3, #19
 8004c90:	6922      	ldr	r2, [r4, #16]
 8004c92:	6022      	str	r2, [r4, #0]
 8004c94:	d504      	bpl.n	8004ca0 <__sflush_r+0x78>
 8004c96:	1c42      	adds	r2, r0, #1
 8004c98:	d101      	bne.n	8004c9e <__sflush_r+0x76>
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	b903      	cbnz	r3, 8004ca0 <__sflush_r+0x78>
 8004c9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ca2:	602f      	str	r7, [r5, #0]
 8004ca4:	b1b9      	cbz	r1, 8004cd6 <__sflush_r+0xae>
 8004ca6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004caa:	4299      	cmp	r1, r3
 8004cac:	d002      	beq.n	8004cb4 <__sflush_r+0x8c>
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f7ff feba 	bl	8004a28 <_free_r>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cb8:	e00d      	b.n	8004cd6 <__sflush_r+0xae>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b0      	blx	r6
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	1c50      	adds	r0, r2, #1
 8004cc4:	d1c9      	bne.n	8004c5a <__sflush_r+0x32>
 8004cc6:	682b      	ldr	r3, [r5, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0c6      	beq.n	8004c5a <__sflush_r+0x32>
 8004ccc:	2b1d      	cmp	r3, #29
 8004cce:	d001      	beq.n	8004cd4 <__sflush_r+0xac>
 8004cd0:	2b16      	cmp	r3, #22
 8004cd2:	d11e      	bne.n	8004d12 <__sflush_r+0xea>
 8004cd4:	602f      	str	r7, [r5, #0]
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	e022      	b.n	8004d20 <__sflush_r+0xf8>
 8004cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cde:	b21b      	sxth	r3, r3
 8004ce0:	e01b      	b.n	8004d1a <__sflush_r+0xf2>
 8004ce2:	690f      	ldr	r7, [r1, #16]
 8004ce4:	2f00      	cmp	r7, #0
 8004ce6:	d0f6      	beq.n	8004cd6 <__sflush_r+0xae>
 8004ce8:	0793      	lsls	r3, r2, #30
 8004cea:	680e      	ldr	r6, [r1, #0]
 8004cec:	bf08      	it	eq
 8004cee:	694b      	ldreq	r3, [r1, #20]
 8004cf0:	600f      	str	r7, [r1, #0]
 8004cf2:	bf18      	it	ne
 8004cf4:	2300      	movne	r3, #0
 8004cf6:	eba6 0807 	sub.w	r8, r6, r7
 8004cfa:	608b      	str	r3, [r1, #8]
 8004cfc:	f1b8 0f00 	cmp.w	r8, #0
 8004d00:	dde9      	ble.n	8004cd6 <__sflush_r+0xae>
 8004d02:	6a21      	ldr	r1, [r4, #32]
 8004d04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d06:	4643      	mov	r3, r8
 8004d08:	463a      	mov	r2, r7
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b0      	blx	r6
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	dc08      	bgt.n	8004d24 <__sflush_r+0xfc>
 8004d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d24:	4407      	add	r7, r0
 8004d26:	eba8 0800 	sub.w	r8, r8, r0
 8004d2a:	e7e7      	b.n	8004cfc <__sflush_r+0xd4>
 8004d2c:	20400001 	.word	0x20400001

08004d30 <_fflush_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	690b      	ldr	r3, [r1, #16]
 8004d34:	4605      	mov	r5, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	b913      	cbnz	r3, 8004d40 <_fflush_r+0x10>
 8004d3a:	2500      	movs	r5, #0
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	b118      	cbz	r0, 8004d4a <_fflush_r+0x1a>
 8004d42:	6a03      	ldr	r3, [r0, #32]
 8004d44:	b90b      	cbnz	r3, 8004d4a <_fflush_r+0x1a>
 8004d46:	f7ff fce9 	bl	800471c <__sinit>
 8004d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f3      	beq.n	8004d3a <_fflush_r+0xa>
 8004d52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d54:	07d0      	lsls	r0, r2, #31
 8004d56:	d404      	bmi.n	8004d62 <_fflush_r+0x32>
 8004d58:	0599      	lsls	r1, r3, #22
 8004d5a:	d402      	bmi.n	8004d62 <_fflush_r+0x32>
 8004d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d5e:	f7ff fe3a 	bl	80049d6 <__retarget_lock_acquire_recursive>
 8004d62:	4628      	mov	r0, r5
 8004d64:	4621      	mov	r1, r4
 8004d66:	f7ff ff5f 	bl	8004c28 <__sflush_r>
 8004d6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d6c:	07da      	lsls	r2, r3, #31
 8004d6e:	4605      	mov	r5, r0
 8004d70:	d4e4      	bmi.n	8004d3c <_fflush_r+0xc>
 8004d72:	89a3      	ldrh	r3, [r4, #12]
 8004d74:	059b      	lsls	r3, r3, #22
 8004d76:	d4e1      	bmi.n	8004d3c <_fflush_r+0xc>
 8004d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d7a:	f7ff fe2d 	bl	80049d8 <__retarget_lock_release_recursive>
 8004d7e:	e7dd      	b.n	8004d3c <_fflush_r+0xc>

08004d80 <fiprintf>:
 8004d80:	b40e      	push	{r1, r2, r3}
 8004d82:	b503      	push	{r0, r1, lr}
 8004d84:	4601      	mov	r1, r0
 8004d86:	ab03      	add	r3, sp, #12
 8004d88:	4805      	ldr	r0, [pc, #20]	@ (8004da0 <fiprintf+0x20>)
 8004d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8e:	6800      	ldr	r0, [r0, #0]
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	f000 f847 	bl	8004e24 <_vfiprintf_r>
 8004d96:	b002      	add	sp, #8
 8004d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d9c:	b003      	add	sp, #12
 8004d9e:	4770      	bx	lr
 8004da0:	20000020 	.word	0x20000020

08004da4 <_sbrk_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4d06      	ldr	r5, [pc, #24]	@ (8004dc0 <_sbrk_r+0x1c>)
 8004da8:	2300      	movs	r3, #0
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	f7fc fc30 	bl	8001614 <_sbrk>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_sbrk_r+0x1a>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_sbrk_r+0x1a>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	20000400 	.word	0x20000400

08004dc4 <abort>:
 8004dc4:	b508      	push	{r3, lr}
 8004dc6:	2006      	movs	r0, #6
 8004dc8:	f000 fb8c 	bl	80054e4 <raise>
 8004dcc:	2001      	movs	r0, #1
 8004dce:	f7fc fba9 	bl	8001524 <_exit>

08004dd2 <__sfputc_r>:
 8004dd2:	6893      	ldr	r3, [r2, #8]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	b410      	push	{r4}
 8004dda:	6093      	str	r3, [r2, #8]
 8004ddc:	da08      	bge.n	8004df0 <__sfputc_r+0x1e>
 8004dde:	6994      	ldr	r4, [r2, #24]
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	db01      	blt.n	8004de8 <__sfputc_r+0x16>
 8004de4:	290a      	cmp	r1, #10
 8004de6:	d103      	bne.n	8004df0 <__sfputc_r+0x1e>
 8004de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dec:	f000 babe 	b.w	800536c <__swbuf_r>
 8004df0:	6813      	ldr	r3, [r2, #0]
 8004df2:	1c58      	adds	r0, r3, #1
 8004df4:	6010      	str	r0, [r2, #0]
 8004df6:	7019      	strb	r1, [r3, #0]
 8004df8:	4608      	mov	r0, r1
 8004dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <__sfputs_r>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	4606      	mov	r6, r0
 8004e04:	460f      	mov	r7, r1
 8004e06:	4614      	mov	r4, r2
 8004e08:	18d5      	adds	r5, r2, r3
 8004e0a:	42ac      	cmp	r4, r5
 8004e0c:	d101      	bne.n	8004e12 <__sfputs_r+0x12>
 8004e0e:	2000      	movs	r0, #0
 8004e10:	e007      	b.n	8004e22 <__sfputs_r+0x22>
 8004e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e16:	463a      	mov	r2, r7
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f7ff ffda 	bl	8004dd2 <__sfputc_r>
 8004e1e:	1c43      	adds	r3, r0, #1
 8004e20:	d1f3      	bne.n	8004e0a <__sfputs_r+0xa>
 8004e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e24 <_vfiprintf_r>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	460d      	mov	r5, r1
 8004e2a:	b09d      	sub	sp, #116	@ 0x74
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	4698      	mov	r8, r3
 8004e30:	4606      	mov	r6, r0
 8004e32:	b118      	cbz	r0, 8004e3c <_vfiprintf_r+0x18>
 8004e34:	6a03      	ldr	r3, [r0, #32]
 8004e36:	b90b      	cbnz	r3, 8004e3c <_vfiprintf_r+0x18>
 8004e38:	f7ff fc70 	bl	800471c <__sinit>
 8004e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e3e:	07d9      	lsls	r1, r3, #31
 8004e40:	d405      	bmi.n	8004e4e <_vfiprintf_r+0x2a>
 8004e42:	89ab      	ldrh	r3, [r5, #12]
 8004e44:	059a      	lsls	r2, r3, #22
 8004e46:	d402      	bmi.n	8004e4e <_vfiprintf_r+0x2a>
 8004e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e4a:	f7ff fdc4 	bl	80049d6 <__retarget_lock_acquire_recursive>
 8004e4e:	89ab      	ldrh	r3, [r5, #12]
 8004e50:	071b      	lsls	r3, r3, #28
 8004e52:	d501      	bpl.n	8004e58 <_vfiprintf_r+0x34>
 8004e54:	692b      	ldr	r3, [r5, #16]
 8004e56:	b99b      	cbnz	r3, 8004e80 <_vfiprintf_r+0x5c>
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f000 fac4 	bl	80053e8 <__swsetup_r>
 8004e60:	b170      	cbz	r0, 8004e80 <_vfiprintf_r+0x5c>
 8004e62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e64:	07dc      	lsls	r4, r3, #31
 8004e66:	d504      	bpl.n	8004e72 <_vfiprintf_r+0x4e>
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	b01d      	add	sp, #116	@ 0x74
 8004e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e72:	89ab      	ldrh	r3, [r5, #12]
 8004e74:	0598      	lsls	r0, r3, #22
 8004e76:	d4f7      	bmi.n	8004e68 <_vfiprintf_r+0x44>
 8004e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e7a:	f7ff fdad 	bl	80049d8 <__retarget_lock_release_recursive>
 8004e7e:	e7f3      	b.n	8004e68 <_vfiprintf_r+0x44>
 8004e80:	2300      	movs	r3, #0
 8004e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e84:	2320      	movs	r3, #32
 8004e86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e8e:	2330      	movs	r3, #48	@ 0x30
 8004e90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005040 <_vfiprintf_r+0x21c>
 8004e94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e98:	f04f 0901 	mov.w	r9, #1
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	469a      	mov	sl, r3
 8004ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea4:	b10a      	cbz	r2, 8004eaa <_vfiprintf_r+0x86>
 8004ea6:	2a25      	cmp	r2, #37	@ 0x25
 8004ea8:	d1f9      	bne.n	8004e9e <_vfiprintf_r+0x7a>
 8004eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8004eae:	d00b      	beq.n	8004ec8 <_vfiprintf_r+0xa4>
 8004eb0:	465b      	mov	r3, fp
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f7ff ffa2 	bl	8004e00 <__sfputs_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f000 80a7 	beq.w	8005010 <_vfiprintf_r+0x1ec>
 8004ec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ec4:	445a      	add	r2, fp
 8004ec6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 809f 	beq.w	8005010 <_vfiprintf_r+0x1ec>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004edc:	f10a 0a01 	add.w	sl, sl, #1
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	9307      	str	r3, [sp, #28]
 8004ee4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ee8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eea:	4654      	mov	r4, sl
 8004eec:	2205      	movs	r2, #5
 8004eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef2:	4853      	ldr	r0, [pc, #332]	@ (8005040 <_vfiprintf_r+0x21c>)
 8004ef4:	f7fb f97c 	bl	80001f0 <memchr>
 8004ef8:	9a04      	ldr	r2, [sp, #16]
 8004efa:	b9d8      	cbnz	r0, 8004f34 <_vfiprintf_r+0x110>
 8004efc:	06d1      	lsls	r1, r2, #27
 8004efe:	bf44      	itt	mi
 8004f00:	2320      	movmi	r3, #32
 8004f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f06:	0713      	lsls	r3, r2, #28
 8004f08:	bf44      	itt	mi
 8004f0a:	232b      	movmi	r3, #43	@ 0x2b
 8004f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f10:	f89a 3000 	ldrb.w	r3, [sl]
 8004f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f16:	d015      	beq.n	8004f44 <_vfiprintf_r+0x120>
 8004f18:	9a07      	ldr	r2, [sp, #28]
 8004f1a:	4654      	mov	r4, sl
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	f04f 0c0a 	mov.w	ip, #10
 8004f22:	4621      	mov	r1, r4
 8004f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f28:	3b30      	subs	r3, #48	@ 0x30
 8004f2a:	2b09      	cmp	r3, #9
 8004f2c:	d94b      	bls.n	8004fc6 <_vfiprintf_r+0x1a2>
 8004f2e:	b1b0      	cbz	r0, 8004f5e <_vfiprintf_r+0x13a>
 8004f30:	9207      	str	r2, [sp, #28]
 8004f32:	e014      	b.n	8004f5e <_vfiprintf_r+0x13a>
 8004f34:	eba0 0308 	sub.w	r3, r0, r8
 8004f38:	fa09 f303 	lsl.w	r3, r9, r3
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	9304      	str	r3, [sp, #16]
 8004f40:	46a2      	mov	sl, r4
 8004f42:	e7d2      	b.n	8004eea <_vfiprintf_r+0xc6>
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	1d19      	adds	r1, r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	9103      	str	r1, [sp, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bfbb      	ittet	lt
 8004f50:	425b      	neglt	r3, r3
 8004f52:	f042 0202 	orrlt.w	r2, r2, #2
 8004f56:	9307      	strge	r3, [sp, #28]
 8004f58:	9307      	strlt	r3, [sp, #28]
 8004f5a:	bfb8      	it	lt
 8004f5c:	9204      	strlt	r2, [sp, #16]
 8004f5e:	7823      	ldrb	r3, [r4, #0]
 8004f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f62:	d10a      	bne.n	8004f7a <_vfiprintf_r+0x156>
 8004f64:	7863      	ldrb	r3, [r4, #1]
 8004f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f68:	d132      	bne.n	8004fd0 <_vfiprintf_r+0x1ac>
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	1d1a      	adds	r2, r3, #4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	9203      	str	r2, [sp, #12]
 8004f72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f76:	3402      	adds	r4, #2
 8004f78:	9305      	str	r3, [sp, #20]
 8004f7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005050 <_vfiprintf_r+0x22c>
 8004f7e:	7821      	ldrb	r1, [r4, #0]
 8004f80:	2203      	movs	r2, #3
 8004f82:	4650      	mov	r0, sl
 8004f84:	f7fb f934 	bl	80001f0 <memchr>
 8004f88:	b138      	cbz	r0, 8004f9a <_vfiprintf_r+0x176>
 8004f8a:	9b04      	ldr	r3, [sp, #16]
 8004f8c:	eba0 000a 	sub.w	r0, r0, sl
 8004f90:	2240      	movs	r2, #64	@ 0x40
 8004f92:	4082      	lsls	r2, r0
 8004f94:	4313      	orrs	r3, r2
 8004f96:	3401      	adds	r4, #1
 8004f98:	9304      	str	r3, [sp, #16]
 8004f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f9e:	4829      	ldr	r0, [pc, #164]	@ (8005044 <_vfiprintf_r+0x220>)
 8004fa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fa4:	2206      	movs	r2, #6
 8004fa6:	f7fb f923 	bl	80001f0 <memchr>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d03f      	beq.n	800502e <_vfiprintf_r+0x20a>
 8004fae:	4b26      	ldr	r3, [pc, #152]	@ (8005048 <_vfiprintf_r+0x224>)
 8004fb0:	bb1b      	cbnz	r3, 8004ffa <_vfiprintf_r+0x1d6>
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	3307      	adds	r3, #7
 8004fb6:	f023 0307 	bic.w	r3, r3, #7
 8004fba:	3308      	adds	r3, #8
 8004fbc:	9303      	str	r3, [sp, #12]
 8004fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc0:	443b      	add	r3, r7
 8004fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc4:	e76a      	b.n	8004e9c <_vfiprintf_r+0x78>
 8004fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fca:	460c      	mov	r4, r1
 8004fcc:	2001      	movs	r0, #1
 8004fce:	e7a8      	b.n	8004f22 <_vfiprintf_r+0xfe>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	3401      	adds	r4, #1
 8004fd4:	9305      	str	r3, [sp, #20]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f04f 0c0a 	mov.w	ip, #10
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fe2:	3a30      	subs	r2, #48	@ 0x30
 8004fe4:	2a09      	cmp	r2, #9
 8004fe6:	d903      	bls.n	8004ff0 <_vfiprintf_r+0x1cc>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0c6      	beq.n	8004f7a <_vfiprintf_r+0x156>
 8004fec:	9105      	str	r1, [sp, #20]
 8004fee:	e7c4      	b.n	8004f7a <_vfiprintf_r+0x156>
 8004ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e7f0      	b.n	8004fdc <_vfiprintf_r+0x1b8>
 8004ffa:	ab03      	add	r3, sp, #12
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	462a      	mov	r2, r5
 8005000:	4b12      	ldr	r3, [pc, #72]	@ (800504c <_vfiprintf_r+0x228>)
 8005002:	a904      	add	r1, sp, #16
 8005004:	4630      	mov	r0, r6
 8005006:	f3af 8000 	nop.w
 800500a:	4607      	mov	r7, r0
 800500c:	1c78      	adds	r0, r7, #1
 800500e:	d1d6      	bne.n	8004fbe <_vfiprintf_r+0x19a>
 8005010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005012:	07d9      	lsls	r1, r3, #31
 8005014:	d405      	bmi.n	8005022 <_vfiprintf_r+0x1fe>
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	059a      	lsls	r2, r3, #22
 800501a:	d402      	bmi.n	8005022 <_vfiprintf_r+0x1fe>
 800501c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800501e:	f7ff fcdb 	bl	80049d8 <__retarget_lock_release_recursive>
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	065b      	lsls	r3, r3, #25
 8005026:	f53f af1f 	bmi.w	8004e68 <_vfiprintf_r+0x44>
 800502a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800502c:	e71e      	b.n	8004e6c <_vfiprintf_r+0x48>
 800502e:	ab03      	add	r3, sp, #12
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	462a      	mov	r2, r5
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <_vfiprintf_r+0x228>)
 8005036:	a904      	add	r1, sp, #16
 8005038:	4630      	mov	r0, r6
 800503a:	f000 f879 	bl	8005130 <_printf_i>
 800503e:	e7e4      	b.n	800500a <_vfiprintf_r+0x1e6>
 8005040:	08005826 	.word	0x08005826
 8005044:	08005830 	.word	0x08005830
 8005048:	00000000 	.word	0x00000000
 800504c:	08004e01 	.word	0x08004e01
 8005050:	0800582c 	.word	0x0800582c

08005054 <_printf_common>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	4616      	mov	r6, r2
 800505a:	4698      	mov	r8, r3
 800505c:	688a      	ldr	r2, [r1, #8]
 800505e:	690b      	ldr	r3, [r1, #16]
 8005060:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005064:	4293      	cmp	r3, r2
 8005066:	bfb8      	it	lt
 8005068:	4613      	movlt	r3, r2
 800506a:	6033      	str	r3, [r6, #0]
 800506c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005070:	4607      	mov	r7, r0
 8005072:	460c      	mov	r4, r1
 8005074:	b10a      	cbz	r2, 800507a <_printf_common+0x26>
 8005076:	3301      	adds	r3, #1
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	6833      	ldrmi	r3, [r6, #0]
 8005082:	3302      	addmi	r3, #2
 8005084:	6033      	strmi	r3, [r6, #0]
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	f015 0506 	ands.w	r5, r5, #6
 800508c:	d106      	bne.n	800509c <_printf_common+0x48>
 800508e:	f104 0a19 	add.w	sl, r4, #25
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	6832      	ldr	r2, [r6, #0]
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	42ab      	cmp	r3, r5
 800509a:	dc26      	bgt.n	80050ea <_printf_common+0x96>
 800509c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	3b00      	subs	r3, #0
 80050a4:	bf18      	it	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	0692      	lsls	r2, r2, #26
 80050aa:	d42b      	bmi.n	8005104 <_printf_common+0xb0>
 80050ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050b0:	4641      	mov	r1, r8
 80050b2:	4638      	mov	r0, r7
 80050b4:	47c8      	blx	r9
 80050b6:	3001      	adds	r0, #1
 80050b8:	d01e      	beq.n	80050f8 <_printf_common+0xa4>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	6922      	ldr	r2, [r4, #16]
 80050be:	f003 0306 	and.w	r3, r3, #6
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	bf02      	ittt	eq
 80050c6:	68e5      	ldreq	r5, [r4, #12]
 80050c8:	6833      	ldreq	r3, [r6, #0]
 80050ca:	1aed      	subeq	r5, r5, r3
 80050cc:	68a3      	ldr	r3, [r4, #8]
 80050ce:	bf0c      	ite	eq
 80050d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d4:	2500      	movne	r5, #0
 80050d6:	4293      	cmp	r3, r2
 80050d8:	bfc4      	itt	gt
 80050da:	1a9b      	subgt	r3, r3, r2
 80050dc:	18ed      	addgt	r5, r5, r3
 80050de:	2600      	movs	r6, #0
 80050e0:	341a      	adds	r4, #26
 80050e2:	42b5      	cmp	r5, r6
 80050e4:	d11a      	bne.n	800511c <_printf_common+0xc8>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e008      	b.n	80050fc <_printf_common+0xa8>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4652      	mov	r2, sl
 80050ee:	4641      	mov	r1, r8
 80050f0:	4638      	mov	r0, r7
 80050f2:	47c8      	blx	r9
 80050f4:	3001      	adds	r0, #1
 80050f6:	d103      	bne.n	8005100 <_printf_common+0xac>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005100:	3501      	adds	r5, #1
 8005102:	e7c6      	b.n	8005092 <_printf_common+0x3e>
 8005104:	18e1      	adds	r1, r4, r3
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	2030      	movs	r0, #48	@ 0x30
 800510a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800510e:	4422      	add	r2, r4
 8005110:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005114:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005118:	3302      	adds	r3, #2
 800511a:	e7c7      	b.n	80050ac <_printf_common+0x58>
 800511c:	2301      	movs	r3, #1
 800511e:	4622      	mov	r2, r4
 8005120:	4641      	mov	r1, r8
 8005122:	4638      	mov	r0, r7
 8005124:	47c8      	blx	r9
 8005126:	3001      	adds	r0, #1
 8005128:	d0e6      	beq.n	80050f8 <_printf_common+0xa4>
 800512a:	3601      	adds	r6, #1
 800512c:	e7d9      	b.n	80050e2 <_printf_common+0x8e>
	...

08005130 <_printf_i>:
 8005130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	7e0f      	ldrb	r7, [r1, #24]
 8005136:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005138:	2f78      	cmp	r7, #120	@ 0x78
 800513a:	4691      	mov	r9, r2
 800513c:	4680      	mov	r8, r0
 800513e:	460c      	mov	r4, r1
 8005140:	469a      	mov	sl, r3
 8005142:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005146:	d807      	bhi.n	8005158 <_printf_i+0x28>
 8005148:	2f62      	cmp	r7, #98	@ 0x62
 800514a:	d80a      	bhi.n	8005162 <_printf_i+0x32>
 800514c:	2f00      	cmp	r7, #0
 800514e:	f000 80d1 	beq.w	80052f4 <_printf_i+0x1c4>
 8005152:	2f58      	cmp	r7, #88	@ 0x58
 8005154:	f000 80b8 	beq.w	80052c8 <_printf_i+0x198>
 8005158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800515c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005160:	e03a      	b.n	80051d8 <_printf_i+0xa8>
 8005162:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005166:	2b15      	cmp	r3, #21
 8005168:	d8f6      	bhi.n	8005158 <_printf_i+0x28>
 800516a:	a101      	add	r1, pc, #4	@ (adr r1, 8005170 <_printf_i+0x40>)
 800516c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005170:	080051c9 	.word	0x080051c9
 8005174:	080051dd 	.word	0x080051dd
 8005178:	08005159 	.word	0x08005159
 800517c:	08005159 	.word	0x08005159
 8005180:	08005159 	.word	0x08005159
 8005184:	08005159 	.word	0x08005159
 8005188:	080051dd 	.word	0x080051dd
 800518c:	08005159 	.word	0x08005159
 8005190:	08005159 	.word	0x08005159
 8005194:	08005159 	.word	0x08005159
 8005198:	08005159 	.word	0x08005159
 800519c:	080052db 	.word	0x080052db
 80051a0:	08005207 	.word	0x08005207
 80051a4:	08005295 	.word	0x08005295
 80051a8:	08005159 	.word	0x08005159
 80051ac:	08005159 	.word	0x08005159
 80051b0:	080052fd 	.word	0x080052fd
 80051b4:	08005159 	.word	0x08005159
 80051b8:	08005207 	.word	0x08005207
 80051bc:	08005159 	.word	0x08005159
 80051c0:	08005159 	.word	0x08005159
 80051c4:	0800529d 	.word	0x0800529d
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6032      	str	r2, [r6, #0]
 80051d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051d8:	2301      	movs	r3, #1
 80051da:	e09c      	b.n	8005316 <_printf_i+0x1e6>
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	6820      	ldr	r0, [r4, #0]
 80051e0:	1d19      	adds	r1, r3, #4
 80051e2:	6031      	str	r1, [r6, #0]
 80051e4:	0606      	lsls	r6, r0, #24
 80051e6:	d501      	bpl.n	80051ec <_printf_i+0xbc>
 80051e8:	681d      	ldr	r5, [r3, #0]
 80051ea:	e003      	b.n	80051f4 <_printf_i+0xc4>
 80051ec:	0645      	lsls	r5, r0, #25
 80051ee:	d5fb      	bpl.n	80051e8 <_printf_i+0xb8>
 80051f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	da03      	bge.n	8005200 <_printf_i+0xd0>
 80051f8:	232d      	movs	r3, #45	@ 0x2d
 80051fa:	426d      	negs	r5, r5
 80051fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005200:	4858      	ldr	r0, [pc, #352]	@ (8005364 <_printf_i+0x234>)
 8005202:	230a      	movs	r3, #10
 8005204:	e011      	b.n	800522a <_printf_i+0xfa>
 8005206:	6821      	ldr	r1, [r4, #0]
 8005208:	6833      	ldr	r3, [r6, #0]
 800520a:	0608      	lsls	r0, r1, #24
 800520c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005210:	d402      	bmi.n	8005218 <_printf_i+0xe8>
 8005212:	0649      	lsls	r1, r1, #25
 8005214:	bf48      	it	mi
 8005216:	b2ad      	uxthmi	r5, r5
 8005218:	2f6f      	cmp	r7, #111	@ 0x6f
 800521a:	4852      	ldr	r0, [pc, #328]	@ (8005364 <_printf_i+0x234>)
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	bf14      	ite	ne
 8005220:	230a      	movne	r3, #10
 8005222:	2308      	moveq	r3, #8
 8005224:	2100      	movs	r1, #0
 8005226:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800522a:	6866      	ldr	r6, [r4, #4]
 800522c:	60a6      	str	r6, [r4, #8]
 800522e:	2e00      	cmp	r6, #0
 8005230:	db05      	blt.n	800523e <_printf_i+0x10e>
 8005232:	6821      	ldr	r1, [r4, #0]
 8005234:	432e      	orrs	r6, r5
 8005236:	f021 0104 	bic.w	r1, r1, #4
 800523a:	6021      	str	r1, [r4, #0]
 800523c:	d04b      	beq.n	80052d6 <_printf_i+0x1a6>
 800523e:	4616      	mov	r6, r2
 8005240:	fbb5 f1f3 	udiv	r1, r5, r3
 8005244:	fb03 5711 	mls	r7, r3, r1, r5
 8005248:	5dc7      	ldrb	r7, [r0, r7]
 800524a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800524e:	462f      	mov	r7, r5
 8005250:	42bb      	cmp	r3, r7
 8005252:	460d      	mov	r5, r1
 8005254:	d9f4      	bls.n	8005240 <_printf_i+0x110>
 8005256:	2b08      	cmp	r3, #8
 8005258:	d10b      	bne.n	8005272 <_printf_i+0x142>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	07df      	lsls	r7, r3, #31
 800525e:	d508      	bpl.n	8005272 <_printf_i+0x142>
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	6861      	ldr	r1, [r4, #4]
 8005264:	4299      	cmp	r1, r3
 8005266:	bfde      	ittt	le
 8005268:	2330      	movle	r3, #48	@ 0x30
 800526a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800526e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005272:	1b92      	subs	r2, r2, r6
 8005274:	6122      	str	r2, [r4, #16]
 8005276:	f8cd a000 	str.w	sl, [sp]
 800527a:	464b      	mov	r3, r9
 800527c:	aa03      	add	r2, sp, #12
 800527e:	4621      	mov	r1, r4
 8005280:	4640      	mov	r0, r8
 8005282:	f7ff fee7 	bl	8005054 <_printf_common>
 8005286:	3001      	adds	r0, #1
 8005288:	d14a      	bne.n	8005320 <_printf_i+0x1f0>
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	b004      	add	sp, #16
 8005290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	f043 0320 	orr.w	r3, r3, #32
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	4832      	ldr	r0, [pc, #200]	@ (8005368 <_printf_i+0x238>)
 800529e:	2778      	movs	r7, #120	@ 0x78
 80052a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	6831      	ldr	r1, [r6, #0]
 80052a8:	061f      	lsls	r7, r3, #24
 80052aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80052ae:	d402      	bmi.n	80052b6 <_printf_i+0x186>
 80052b0:	065f      	lsls	r7, r3, #25
 80052b2:	bf48      	it	mi
 80052b4:	b2ad      	uxthmi	r5, r5
 80052b6:	6031      	str	r1, [r6, #0]
 80052b8:	07d9      	lsls	r1, r3, #31
 80052ba:	bf44      	itt	mi
 80052bc:	f043 0320 	orrmi.w	r3, r3, #32
 80052c0:	6023      	strmi	r3, [r4, #0]
 80052c2:	b11d      	cbz	r5, 80052cc <_printf_i+0x19c>
 80052c4:	2310      	movs	r3, #16
 80052c6:	e7ad      	b.n	8005224 <_printf_i+0xf4>
 80052c8:	4826      	ldr	r0, [pc, #152]	@ (8005364 <_printf_i+0x234>)
 80052ca:	e7e9      	b.n	80052a0 <_printf_i+0x170>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	f023 0320 	bic.w	r3, r3, #32
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	e7f6      	b.n	80052c4 <_printf_i+0x194>
 80052d6:	4616      	mov	r6, r2
 80052d8:	e7bd      	b.n	8005256 <_printf_i+0x126>
 80052da:	6833      	ldr	r3, [r6, #0]
 80052dc:	6825      	ldr	r5, [r4, #0]
 80052de:	6961      	ldr	r1, [r4, #20]
 80052e0:	1d18      	adds	r0, r3, #4
 80052e2:	6030      	str	r0, [r6, #0]
 80052e4:	062e      	lsls	r6, r5, #24
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	d501      	bpl.n	80052ee <_printf_i+0x1be>
 80052ea:	6019      	str	r1, [r3, #0]
 80052ec:	e002      	b.n	80052f4 <_printf_i+0x1c4>
 80052ee:	0668      	lsls	r0, r5, #25
 80052f0:	d5fb      	bpl.n	80052ea <_printf_i+0x1ba>
 80052f2:	8019      	strh	r1, [r3, #0]
 80052f4:	2300      	movs	r3, #0
 80052f6:	6123      	str	r3, [r4, #16]
 80052f8:	4616      	mov	r6, r2
 80052fa:	e7bc      	b.n	8005276 <_printf_i+0x146>
 80052fc:	6833      	ldr	r3, [r6, #0]
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	6032      	str	r2, [r6, #0]
 8005302:	681e      	ldr	r6, [r3, #0]
 8005304:	6862      	ldr	r2, [r4, #4]
 8005306:	2100      	movs	r1, #0
 8005308:	4630      	mov	r0, r6
 800530a:	f7fa ff71 	bl	80001f0 <memchr>
 800530e:	b108      	cbz	r0, 8005314 <_printf_i+0x1e4>
 8005310:	1b80      	subs	r0, r0, r6
 8005312:	6060      	str	r0, [r4, #4]
 8005314:	6863      	ldr	r3, [r4, #4]
 8005316:	6123      	str	r3, [r4, #16]
 8005318:	2300      	movs	r3, #0
 800531a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800531e:	e7aa      	b.n	8005276 <_printf_i+0x146>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	4632      	mov	r2, r6
 8005324:	4649      	mov	r1, r9
 8005326:	4640      	mov	r0, r8
 8005328:	47d0      	blx	sl
 800532a:	3001      	adds	r0, #1
 800532c:	d0ad      	beq.n	800528a <_printf_i+0x15a>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	079b      	lsls	r3, r3, #30
 8005332:	d413      	bmi.n	800535c <_printf_i+0x22c>
 8005334:	68e0      	ldr	r0, [r4, #12]
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	4298      	cmp	r0, r3
 800533a:	bfb8      	it	lt
 800533c:	4618      	movlt	r0, r3
 800533e:	e7a6      	b.n	800528e <_printf_i+0x15e>
 8005340:	2301      	movs	r3, #1
 8005342:	4632      	mov	r2, r6
 8005344:	4649      	mov	r1, r9
 8005346:	4640      	mov	r0, r8
 8005348:	47d0      	blx	sl
 800534a:	3001      	adds	r0, #1
 800534c:	d09d      	beq.n	800528a <_printf_i+0x15a>
 800534e:	3501      	adds	r5, #1
 8005350:	68e3      	ldr	r3, [r4, #12]
 8005352:	9903      	ldr	r1, [sp, #12]
 8005354:	1a5b      	subs	r3, r3, r1
 8005356:	42ab      	cmp	r3, r5
 8005358:	dcf2      	bgt.n	8005340 <_printf_i+0x210>
 800535a:	e7eb      	b.n	8005334 <_printf_i+0x204>
 800535c:	2500      	movs	r5, #0
 800535e:	f104 0619 	add.w	r6, r4, #25
 8005362:	e7f5      	b.n	8005350 <_printf_i+0x220>
 8005364:	08005837 	.word	0x08005837
 8005368:	08005848 	.word	0x08005848

0800536c <__swbuf_r>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	460e      	mov	r6, r1
 8005370:	4614      	mov	r4, r2
 8005372:	4605      	mov	r5, r0
 8005374:	b118      	cbz	r0, 800537e <__swbuf_r+0x12>
 8005376:	6a03      	ldr	r3, [r0, #32]
 8005378:	b90b      	cbnz	r3, 800537e <__swbuf_r+0x12>
 800537a:	f7ff f9cf 	bl	800471c <__sinit>
 800537e:	69a3      	ldr	r3, [r4, #24]
 8005380:	60a3      	str	r3, [r4, #8]
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	071a      	lsls	r2, r3, #28
 8005386:	d501      	bpl.n	800538c <__swbuf_r+0x20>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	b943      	cbnz	r3, 800539e <__swbuf_r+0x32>
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f82a 	bl	80053e8 <__swsetup_r>
 8005394:	b118      	cbz	r0, 800539e <__swbuf_r+0x32>
 8005396:	f04f 37ff 	mov.w	r7, #4294967295
 800539a:	4638      	mov	r0, r7
 800539c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	6922      	ldr	r2, [r4, #16]
 80053a2:	1a98      	subs	r0, r3, r2
 80053a4:	6963      	ldr	r3, [r4, #20]
 80053a6:	b2f6      	uxtb	r6, r6
 80053a8:	4283      	cmp	r3, r0
 80053aa:	4637      	mov	r7, r6
 80053ac:	dc05      	bgt.n	80053ba <__swbuf_r+0x4e>
 80053ae:	4621      	mov	r1, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7ff fcbd 	bl	8004d30 <_fflush_r>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d1ed      	bne.n	8005396 <__swbuf_r+0x2a>
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	3b01      	subs	r3, #1
 80053be:	60a3      	str	r3, [r4, #8]
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	6022      	str	r2, [r4, #0]
 80053c6:	701e      	strb	r6, [r3, #0]
 80053c8:	6962      	ldr	r2, [r4, #20]
 80053ca:	1c43      	adds	r3, r0, #1
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d004      	beq.n	80053da <__swbuf_r+0x6e>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	07db      	lsls	r3, r3, #31
 80053d4:	d5e1      	bpl.n	800539a <__swbuf_r+0x2e>
 80053d6:	2e0a      	cmp	r6, #10
 80053d8:	d1df      	bne.n	800539a <__swbuf_r+0x2e>
 80053da:	4621      	mov	r1, r4
 80053dc:	4628      	mov	r0, r5
 80053de:	f7ff fca7 	bl	8004d30 <_fflush_r>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d0d9      	beq.n	800539a <__swbuf_r+0x2e>
 80053e6:	e7d6      	b.n	8005396 <__swbuf_r+0x2a>

080053e8 <__swsetup_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4b29      	ldr	r3, [pc, #164]	@ (8005490 <__swsetup_r+0xa8>)
 80053ec:	4605      	mov	r5, r0
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	460c      	mov	r4, r1
 80053f2:	b118      	cbz	r0, 80053fc <__swsetup_r+0x14>
 80053f4:	6a03      	ldr	r3, [r0, #32]
 80053f6:	b90b      	cbnz	r3, 80053fc <__swsetup_r+0x14>
 80053f8:	f7ff f990 	bl	800471c <__sinit>
 80053fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005400:	0719      	lsls	r1, r3, #28
 8005402:	d422      	bmi.n	800544a <__swsetup_r+0x62>
 8005404:	06da      	lsls	r2, r3, #27
 8005406:	d407      	bmi.n	8005418 <__swsetup_r+0x30>
 8005408:	2209      	movs	r2, #9
 800540a:	602a      	str	r2, [r5, #0]
 800540c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	f04f 30ff 	mov.w	r0, #4294967295
 8005416:	e033      	b.n	8005480 <__swsetup_r+0x98>
 8005418:	0758      	lsls	r0, r3, #29
 800541a:	d512      	bpl.n	8005442 <__swsetup_r+0x5a>
 800541c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800541e:	b141      	cbz	r1, 8005432 <__swsetup_r+0x4a>
 8005420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005424:	4299      	cmp	r1, r3
 8005426:	d002      	beq.n	800542e <__swsetup_r+0x46>
 8005428:	4628      	mov	r0, r5
 800542a:	f7ff fafd 	bl	8004a28 <_free_r>
 800542e:	2300      	movs	r3, #0
 8005430:	6363      	str	r3, [r4, #52]	@ 0x34
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005438:	81a3      	strh	r3, [r4, #12]
 800543a:	2300      	movs	r3, #0
 800543c:	6063      	str	r3, [r4, #4]
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f043 0308 	orr.w	r3, r3, #8
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	b94b      	cbnz	r3, 8005462 <__swsetup_r+0x7a>
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005458:	d003      	beq.n	8005462 <__swsetup_r+0x7a>
 800545a:	4621      	mov	r1, r4
 800545c:	4628      	mov	r0, r5
 800545e:	f000 f883 	bl	8005568 <__smakebuf_r>
 8005462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005466:	f013 0201 	ands.w	r2, r3, #1
 800546a:	d00a      	beq.n	8005482 <__swsetup_r+0x9a>
 800546c:	2200      	movs	r2, #0
 800546e:	60a2      	str	r2, [r4, #8]
 8005470:	6962      	ldr	r2, [r4, #20]
 8005472:	4252      	negs	r2, r2
 8005474:	61a2      	str	r2, [r4, #24]
 8005476:	6922      	ldr	r2, [r4, #16]
 8005478:	b942      	cbnz	r2, 800548c <__swsetup_r+0xa4>
 800547a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800547e:	d1c5      	bne.n	800540c <__swsetup_r+0x24>
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	0799      	lsls	r1, r3, #30
 8005484:	bf58      	it	pl
 8005486:	6962      	ldrpl	r2, [r4, #20]
 8005488:	60a2      	str	r2, [r4, #8]
 800548a:	e7f4      	b.n	8005476 <__swsetup_r+0x8e>
 800548c:	2000      	movs	r0, #0
 800548e:	e7f7      	b.n	8005480 <__swsetup_r+0x98>
 8005490:	20000020 	.word	0x20000020

08005494 <_raise_r>:
 8005494:	291f      	cmp	r1, #31
 8005496:	b538      	push	{r3, r4, r5, lr}
 8005498:	4605      	mov	r5, r0
 800549a:	460c      	mov	r4, r1
 800549c:	d904      	bls.n	80054a8 <_raise_r+0x14>
 800549e:	2316      	movs	r3, #22
 80054a0:	6003      	str	r3, [r0, #0]
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80054aa:	b112      	cbz	r2, 80054b2 <_raise_r+0x1e>
 80054ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80054b0:	b94b      	cbnz	r3, 80054c6 <_raise_r+0x32>
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 f830 	bl	8005518 <_getpid_r>
 80054b8:	4622      	mov	r2, r4
 80054ba:	4601      	mov	r1, r0
 80054bc:	4628      	mov	r0, r5
 80054be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054c2:	f000 b817 	b.w	80054f4 <_kill_r>
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d00a      	beq.n	80054e0 <_raise_r+0x4c>
 80054ca:	1c59      	adds	r1, r3, #1
 80054cc:	d103      	bne.n	80054d6 <_raise_r+0x42>
 80054ce:	2316      	movs	r3, #22
 80054d0:	6003      	str	r3, [r0, #0]
 80054d2:	2001      	movs	r0, #1
 80054d4:	e7e7      	b.n	80054a6 <_raise_r+0x12>
 80054d6:	2100      	movs	r1, #0
 80054d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80054dc:	4620      	mov	r0, r4
 80054de:	4798      	blx	r3
 80054e0:	2000      	movs	r0, #0
 80054e2:	e7e0      	b.n	80054a6 <_raise_r+0x12>

080054e4 <raise>:
 80054e4:	4b02      	ldr	r3, [pc, #8]	@ (80054f0 <raise+0xc>)
 80054e6:	4601      	mov	r1, r0
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	f7ff bfd3 	b.w	8005494 <_raise_r>
 80054ee:	bf00      	nop
 80054f0:	20000020 	.word	0x20000020

080054f4 <_kill_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4d07      	ldr	r5, [pc, #28]	@ (8005514 <_kill_r+0x20>)
 80054f8:	2300      	movs	r3, #0
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	f7fb ffff 	bl	8001504 <_kill>
 8005506:	1c43      	adds	r3, r0, #1
 8005508:	d102      	bne.n	8005510 <_kill_r+0x1c>
 800550a:	682b      	ldr	r3, [r5, #0]
 800550c:	b103      	cbz	r3, 8005510 <_kill_r+0x1c>
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	bd38      	pop	{r3, r4, r5, pc}
 8005512:	bf00      	nop
 8005514:	20000400 	.word	0x20000400

08005518 <_getpid_r>:
 8005518:	f7fb bfec 	b.w	80014f4 <_getpid>

0800551c <__swhatbuf_r>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	460c      	mov	r4, r1
 8005520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005524:	2900      	cmp	r1, #0
 8005526:	b096      	sub	sp, #88	@ 0x58
 8005528:	4615      	mov	r5, r2
 800552a:	461e      	mov	r6, r3
 800552c:	da0d      	bge.n	800554a <__swhatbuf_r+0x2e>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005534:	f04f 0100 	mov.w	r1, #0
 8005538:	bf14      	ite	ne
 800553a:	2340      	movne	r3, #64	@ 0x40
 800553c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005540:	2000      	movs	r0, #0
 8005542:	6031      	str	r1, [r6, #0]
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	b016      	add	sp, #88	@ 0x58
 8005548:	bd70      	pop	{r4, r5, r6, pc}
 800554a:	466a      	mov	r2, sp
 800554c:	f000 f848 	bl	80055e0 <_fstat_r>
 8005550:	2800      	cmp	r0, #0
 8005552:	dbec      	blt.n	800552e <__swhatbuf_r+0x12>
 8005554:	9901      	ldr	r1, [sp, #4]
 8005556:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800555a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800555e:	4259      	negs	r1, r3
 8005560:	4159      	adcs	r1, r3
 8005562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005566:	e7eb      	b.n	8005540 <__swhatbuf_r+0x24>

08005568 <__smakebuf_r>:
 8005568:	898b      	ldrh	r3, [r1, #12]
 800556a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800556c:	079d      	lsls	r5, r3, #30
 800556e:	4606      	mov	r6, r0
 8005570:	460c      	mov	r4, r1
 8005572:	d507      	bpl.n	8005584 <__smakebuf_r+0x1c>
 8005574:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	6123      	str	r3, [r4, #16]
 800557c:	2301      	movs	r3, #1
 800557e:	6163      	str	r3, [r4, #20]
 8005580:	b003      	add	sp, #12
 8005582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005584:	ab01      	add	r3, sp, #4
 8005586:	466a      	mov	r2, sp
 8005588:	f7ff ffc8 	bl	800551c <__swhatbuf_r>
 800558c:	9f00      	ldr	r7, [sp, #0]
 800558e:	4605      	mov	r5, r0
 8005590:	4639      	mov	r1, r7
 8005592:	4630      	mov	r0, r6
 8005594:	f7ff fabc 	bl	8004b10 <_malloc_r>
 8005598:	b948      	cbnz	r0, 80055ae <__smakebuf_r+0x46>
 800559a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800559e:	059a      	lsls	r2, r3, #22
 80055a0:	d4ee      	bmi.n	8005580 <__smakebuf_r+0x18>
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	f043 0302 	orr.w	r3, r3, #2
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	e7e2      	b.n	8005574 <__smakebuf_r+0xc>
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	6020      	str	r0, [r4, #0]
 80055b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	9b01      	ldr	r3, [sp, #4]
 80055ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055be:	b15b      	cbz	r3, 80055d8 <__smakebuf_r+0x70>
 80055c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 f81d 	bl	8005604 <_isatty_r>
 80055ca:	b128      	cbz	r0, 80055d8 <__smakebuf_r+0x70>
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	f043 0301 	orr.w	r3, r3, #1
 80055d6:	81a3      	strh	r3, [r4, #12]
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	431d      	orrs	r5, r3
 80055dc:	81a5      	strh	r5, [r4, #12]
 80055de:	e7cf      	b.n	8005580 <__smakebuf_r+0x18>

080055e0 <_fstat_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d07      	ldr	r5, [pc, #28]	@ (8005600 <_fstat_r+0x20>)
 80055e4:	2300      	movs	r3, #0
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	602b      	str	r3, [r5, #0]
 80055ee:	f7fb ffe9 	bl	80015c4 <_fstat>
 80055f2:	1c43      	adds	r3, r0, #1
 80055f4:	d102      	bne.n	80055fc <_fstat_r+0x1c>
 80055f6:	682b      	ldr	r3, [r5, #0]
 80055f8:	b103      	cbz	r3, 80055fc <_fstat_r+0x1c>
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
 80055fe:	bf00      	nop
 8005600:	20000400 	.word	0x20000400

08005604 <_isatty_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d06      	ldr	r5, [pc, #24]	@ (8005620 <_isatty_r+0x1c>)
 8005608:	2300      	movs	r3, #0
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	602b      	str	r3, [r5, #0]
 8005610:	f7fb ffe8 	bl	80015e4 <_isatty>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_isatty_r+0x1a>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_isatty_r+0x1a>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	20000400 	.word	0x20000400

08005624 <_init>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	bf00      	nop
 8005628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562a:	bc08      	pop	{r3}
 800562c:	469e      	mov	lr, r3
 800562e:	4770      	bx	lr

08005630 <_fini>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	bf00      	nop
 8005634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005636:	bc08      	pop	{r3}
 8005638:	469e      	mov	lr, r3
 800563a:	4770      	bx	lr
