
Movement_Bluetooth_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008678  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08008818  08008818  00009818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ae4  08008ae4  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ae4  08008ae4  00009ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aec  08008aec  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aec  08008aec  00009aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008af0  08008af0  00009af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008af4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de8  20000074  08008b68  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e5c  08008b68  0000ae5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d1f  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391c  00000000  00000000  00023dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  000276e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b5  00000000  00000000  00028c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018612  00000000  00000000  00029d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bb5  00000000  00000000  0004232f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aeba  00000000  00000000  00059ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4d9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e4  00000000  00000000  000f4de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000fb2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008800 	.word	0x08008800

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008800 	.word	0x08008800

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Set_Servo_Angle>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	4613      	mov	r3, r2
 80005c8:	71fb      	strb	r3, [r7, #7]
    uint32_t pulse_length = 210 + (angle * (1050 - 210) / 180);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	4a15      	ldr	r2, [pc, #84]	@ (800062c <Set_Servo_Angle+0x70>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	441a      	add	r2, r3
 80005dc:	11d2      	asrs	r2, r2, #7
 80005de:	17db      	asrs	r3, r3, #31
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	33d2      	adds	r3, #210	@ 0xd2
 80005e4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <Set_Servo_Angle+0x3a>
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005f4:	e013      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d104      	bne.n	8000606 <Set_Servo_Angle+0x4a>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000604:	e00b      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	2b08      	cmp	r3, #8
 800060a:	d104      	bne.n	8000616 <Set_Servo_Angle+0x5a>
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000614:	e003      	b.n	800061e <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800061e:	bf00      	nop
 8000620:	371c      	adds	r7, #28
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	b60b60b7 	.word	0xb60b60b7

08000630 <Init_arm>:

void Init_arm()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1); // Enable motors
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	@ 0x40
 8000638:	4830      	ldr	r0, [pc, #192]	@ (80006fc <Init_arm+0xcc>)
 800063a:	f001 fce9 	bl	8002010 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // A0  - M1
 800063e:	2100      	movs	r1, #0
 8000640:	482f      	ldr	r0, [pc, #188]	@ (8000700 <Init_arm+0xd0>)
 8000642:	f002 fad5 	bl	8002bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // D10 - M2
 8000646:	2100      	movs	r1, #0
 8000648:	482e      	ldr	r0, [pc, #184]	@ (8000704 <Init_arm+0xd4>)
 800064a:	f002 fad1 	bl	8002bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // D9  - M3
 800064e:	2104      	movs	r1, #4
 8000650:	482d      	ldr	r0, [pc, #180]	@ (8000708 <Init_arm+0xd8>)
 8000652:	f002 facd 	bl	8002bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // D6  - M4
 8000656:	2108      	movs	r1, #8
 8000658:	4829      	ldr	r0, [pc, #164]	@ (8000700 <Init_arm+0xd0>)
 800065a:	f002 fac9 	bl	8002bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // D5  - M5
 800065e:	2100      	movs	r1, #0
 8000660:	4829      	ldr	r0, [pc, #164]	@ (8000708 <Init_arm+0xd8>)
 8000662:	f002 fac5 	bl	8002bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // D3  - M6
 8000666:	2104      	movs	r1, #4
 8000668:	4825      	ldr	r0, [pc, #148]	@ (8000700 <Init_arm+0xd0>)
 800066a:	f002 fac1 	bl	8002bf0 <HAL_TIM_PWM_Start>

	// Set arm to initial position
    Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 800066e:	4b27      	ldr	r3, [pc, #156]	@ (800070c <Init_arm+0xdc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	4822      	ldr	r0, [pc, #136]	@ (8000700 <Init_arm+0xd0>)
 8000678:	f7ff ffa0 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 800067c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000680:	f001 f9aa 	bl	80019d8 <HAL_Delay>

    Set_Servo_Angle(&htim4, TIM_CHANNEL_1, current_value_shoulder+45);
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <Init_arm+0xe0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	332d      	adds	r3, #45	@ 0x2d
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	481c      	ldr	r0, [pc, #112]	@ (8000704 <Init_arm+0xd4>)
 8000692:	f7ff ff93 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 8000696:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800069a:	f001 f99d 	bl	80019d8 <HAL_Delay>

    Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <Init_arm+0xe4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	2104      	movs	r1, #4
 80006a6:	4818      	ldr	r0, [pc, #96]	@ (8000708 <Init_arm+0xd8>)
 80006a8:	f7ff ff88 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 80006ac:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006b0:	f001 f992 	bl	80019d8 <HAL_Delay>

    Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <Init_arm+0xe8>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	2108      	movs	r1, #8
 80006bc:	4810      	ldr	r0, [pc, #64]	@ (8000700 <Init_arm+0xd0>)
 80006be:	f7ff ff7d 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 80006c2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006c6:	f001 f987 	bl	80019d8 <HAL_Delay>

    Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <Init_arm+0xec>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <Init_arm+0xd8>)
 80006d4:	f7ff ff72 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 80006d8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006dc:	f001 f97c 	bl	80019d8 <HAL_Delay>

    Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <Init_arm+0xf0>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	2104      	movs	r1, #4
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <Init_arm+0xd0>)
 80006ea:	f7ff ff67 	bl	80005bc <Set_Servo_Angle>
    HAL_Delay(1500);
 80006ee:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80006f2:	f001 f971 	bl	80019d8 <HAL_Delay>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020000 	.word	0x40020000
 8000700:	20000090 	.word	0x20000090
 8000704:	20000120 	.word	0x20000120
 8000708:	200000d8 	.word	0x200000d8
 800070c:	20000000 	.word	0x20000000
 8000710:	20000001 	.word	0x20000001
 8000714:	20000002 	.word	0x20000002
 8000718:	20000003 	.word	0x20000003
 800071c:	20000004 	.word	0x20000004
 8000720:	20000005 	.word	0x20000005

08000724 <MoveArm>:


void MoveArm(uint8_t base_angle, uint8_t shoulder_angle, uint8_t elbow_angle, uint8_t wrist_ver_angle, uint8_t wrist_rot_angle, uint8_t gripper_angle)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4604      	mov	r4, r0
 800072c:	4608      	mov	r0, r1
 800072e:	4611      	mov	r1, r2
 8000730:	461a      	mov	r2, r3
 8000732:	4623      	mov	r3, r4
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	4603      	mov	r3, r0
 8000738:	71bb      	strb	r3, [r7, #6]
 800073a:	460b      	mov	r3, r1
 800073c:	717b      	strb	r3, [r7, #5]
 800073e:	4613      	mov	r3, r2
 8000740:	713b      	strb	r3, [r7, #4]
    int isMoving = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]

    while (isMoving)
 8000746:	e0de      	b.n	8000906 <MoveArm+0x1e2>
    {
        if (current_value_base != base_angle)
 8000748:	4b73      	ldr	r3, [pc, #460]	@ (8000918 <MoveArm+0x1f4>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	429a      	cmp	r2, r3
 8000750:	d018      	beq.n	8000784 <MoveArm+0x60>
        {
            if (current_value_base > base_angle)
 8000752:	4b71      	ldr	r3, [pc, #452]	@ (8000918 <MoveArm+0x1f4>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	429a      	cmp	r2, r3
 800075a:	d206      	bcs.n	800076a <MoveArm+0x46>
            {
            	current_value_base--;
 800075c:	4b6e      	ldr	r3, [pc, #440]	@ (8000918 <MoveArm+0x1f4>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b6c      	ldr	r3, [pc, #432]	@ (8000918 <MoveArm+0x1f4>)
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e005      	b.n	8000776 <MoveArm+0x52>
            }
            else
            {
            	current_value_base++;
 800076a:	4b6b      	ldr	r3, [pc, #428]	@ (8000918 <MoveArm+0x1f4>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b69      	ldr	r3, [pc, #420]	@ (8000918 <MoveArm+0x1f4>)
 8000774:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 8000776:	4b68      	ldr	r3, [pc, #416]	@ (8000918 <MoveArm+0x1f4>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	4867      	ldr	r0, [pc, #412]	@ (800091c <MoveArm+0x1f8>)
 8000780:	f7ff ff1c 	bl	80005bc <Set_Servo_Angle>
        }

        if ((current_value_shoulder + 45) != shoulder_angle + 45)
 8000784:	4b66      	ldr	r3, [pc, #408]	@ (8000920 <MoveArm+0x1fc>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	79ba      	ldrb	r2, [r7, #6]
 800078a:	429a      	cmp	r2, r3
 800078c:	d01a      	beq.n	80007c4 <MoveArm+0xa0>
        {
            if ((current_value_shoulder + 45) > shoulder_angle + 45)
 800078e:	4b64      	ldr	r3, [pc, #400]	@ (8000920 <MoveArm+0x1fc>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	79ba      	ldrb	r2, [r7, #6]
 8000794:	429a      	cmp	r2, r3
 8000796:	d206      	bcs.n	80007a6 <MoveArm+0x82>
            {
            	current_value_shoulder--;
 8000798:	4b61      	ldr	r3, [pc, #388]	@ (8000920 <MoveArm+0x1fc>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	3b01      	subs	r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b5f      	ldr	r3, [pc, #380]	@ (8000920 <MoveArm+0x1fc>)
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e005      	b.n	80007b2 <MoveArm+0x8e>
            }
            else
            {
            	current_value_shoulder++;
 80007a6:	4b5e      	ldr	r3, [pc, #376]	@ (8000920 <MoveArm+0x1fc>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b5c      	ldr	r3, [pc, #368]	@ (8000920 <MoveArm+0x1fc>)
 80007b0:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim4, TIM_CHANNEL_1, current_value_shoulder + 45);
 80007b2:	4b5b      	ldr	r3, [pc, #364]	@ (8000920 <MoveArm+0x1fc>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	332d      	adds	r3, #45	@ 0x2d
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	4859      	ldr	r0, [pc, #356]	@ (8000924 <MoveArm+0x200>)
 80007c0:	f7ff fefc 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_elbow != elbow_angle)
 80007c4:	4b58      	ldr	r3, [pc, #352]	@ (8000928 <MoveArm+0x204>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	797a      	ldrb	r2, [r7, #5]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d018      	beq.n	8000800 <MoveArm+0xdc>
        {
            if (current_value_elbow > elbow_angle)
 80007ce:	4b56      	ldr	r3, [pc, #344]	@ (8000928 <MoveArm+0x204>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	797a      	ldrb	r2, [r7, #5]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d206      	bcs.n	80007e6 <MoveArm+0xc2>
            {
            	current_value_elbow--;
 80007d8:	4b53      	ldr	r3, [pc, #332]	@ (8000928 <MoveArm+0x204>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	3b01      	subs	r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b51      	ldr	r3, [pc, #324]	@ (8000928 <MoveArm+0x204>)
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e005      	b.n	80007f2 <MoveArm+0xce>
            }
            else
            {
            	current_value_elbow++;
 80007e6:	4b50      	ldr	r3, [pc, #320]	@ (8000928 <MoveArm+0x204>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000928 <MoveArm+0x204>)
 80007f0:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 80007f2:	4b4d      	ldr	r3, [pc, #308]	@ (8000928 <MoveArm+0x204>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	2104      	movs	r1, #4
 80007fa:	484c      	ldr	r0, [pc, #304]	@ (800092c <MoveArm+0x208>)
 80007fc:	f7ff fede 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_wrist_ver != wrist_ver_angle)
 8000800:	4b4b      	ldr	r3, [pc, #300]	@ (8000930 <MoveArm+0x20c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	793a      	ldrb	r2, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d018      	beq.n	800083c <MoveArm+0x118>
        {
            if (current_value_wrist_ver > wrist_ver_angle)
 800080a:	4b49      	ldr	r3, [pc, #292]	@ (8000930 <MoveArm+0x20c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	793a      	ldrb	r2, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	d206      	bcs.n	8000822 <MoveArm+0xfe>
            {
            	current_value_wrist_ver--;
 8000814:	4b46      	ldr	r3, [pc, #280]	@ (8000930 <MoveArm+0x20c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	3b01      	subs	r3, #1
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b44      	ldr	r3, [pc, #272]	@ (8000930 <MoveArm+0x20c>)
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e005      	b.n	800082e <MoveArm+0x10a>
            }
            else
            {
            	current_value_wrist_ver++;
 8000822:	4b43      	ldr	r3, [pc, #268]	@ (8000930 <MoveArm+0x20c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b41      	ldr	r3, [pc, #260]	@ (8000930 <MoveArm+0x20c>)
 800082c:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 800082e:	4b40      	ldr	r3, [pc, #256]	@ (8000930 <MoveArm+0x20c>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	2108      	movs	r1, #8
 8000836:	4839      	ldr	r0, [pc, #228]	@ (800091c <MoveArm+0x1f8>)
 8000838:	f7ff fec0 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_wrist_rot != wrist_rot_angle)
 800083c:	4b3d      	ldr	r3, [pc, #244]	@ (8000934 <MoveArm+0x210>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000844:	429a      	cmp	r2, r3
 8000846:	d019      	beq.n	800087c <MoveArm+0x158>
        {
            if (current_value_wrist_rot > wrist_rot_angle)
 8000848:	4b3a      	ldr	r3, [pc, #232]	@ (8000934 <MoveArm+0x210>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000850:	429a      	cmp	r2, r3
 8000852:	d206      	bcs.n	8000862 <MoveArm+0x13e>
            {
            	current_value_wrist_rot--;
 8000854:	4b37      	ldr	r3, [pc, #220]	@ (8000934 <MoveArm+0x210>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	3b01      	subs	r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b35      	ldr	r3, [pc, #212]	@ (8000934 <MoveArm+0x210>)
 800085e:	701a      	strb	r2, [r3, #0]
 8000860:	e005      	b.n	800086e <MoveArm+0x14a>
            }
            else
                current_value_wrist_rot++;
 8000862:	4b34      	ldr	r3, [pc, #208]	@ (8000934 <MoveArm+0x210>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b32      	ldr	r3, [pc, #200]	@ (8000934 <MoveArm+0x210>)
 800086c:	701a      	strb	r2, [r3, #0]

            Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 800086e:	4b31      	ldr	r3, [pc, #196]	@ (8000934 <MoveArm+0x210>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	482d      	ldr	r0, [pc, #180]	@ (800092c <MoveArm+0x208>)
 8000878:	f7ff fea0 	bl	80005bc <Set_Servo_Angle>
        }

        if (current_value_gripper != gripper_angle)
 800087c:	4b2e      	ldr	r3, [pc, #184]	@ (8000938 <MoveArm+0x214>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000884:	429a      	cmp	r2, r3
 8000886:	d019      	beq.n	80008bc <MoveArm+0x198>
        {
            if (current_value_gripper > gripper_angle)
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <MoveArm+0x214>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000890:	429a      	cmp	r2, r3
 8000892:	d206      	bcs.n	80008a2 <MoveArm+0x17e>
            {
            	current_value_gripper--;
 8000894:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <MoveArm+0x214>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <MoveArm+0x214>)
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	e005      	b.n	80008ae <MoveArm+0x18a>
            }
            else
            {
            	current_value_gripper++;
 80008a2:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <MoveArm+0x214>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <MoveArm+0x214>)
 80008ac:	701a      	strb	r2, [r3, #0]
            }

            Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MoveArm+0x214>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	2104      	movs	r1, #4
 80008b6:	4819      	ldr	r0, [pc, #100]	@ (800091c <MoveArm+0x1f8>)
 80008b8:	f7ff fe80 	bl	80005bc <Set_Servo_Angle>
        }

        HAL_Delay(25);
 80008bc:	2019      	movs	r0, #25
 80008be:	f001 f88b 	bl	80019d8 <HAL_Delay>

        if ((current_value_base == base_angle) &&
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MoveArm+0x1f4>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	79fa      	ldrb	r2, [r7, #7]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d11c      	bne.n	8000906 <MoveArm+0x1e2>
            (current_value_shoulder + 45 == shoulder_angle + 45) &&
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MoveArm+0x1fc>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
        if ((current_value_base == base_angle) &&
 80008d0:	79ba      	ldrb	r2, [r7, #6]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d117      	bne.n	8000906 <MoveArm+0x1e2>
            (current_value_elbow == elbow_angle) &&
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MoveArm+0x204>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
            (current_value_shoulder + 45 == shoulder_angle + 45) &&
 80008da:	797a      	ldrb	r2, [r7, #5]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d112      	bne.n	8000906 <MoveArm+0x1e2>
            (current_value_wrist_ver == wrist_ver_angle) &&
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MoveArm+0x20c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
            (current_value_elbow == elbow_angle) &&
 80008e4:	793a      	ldrb	r2, [r7, #4]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d10d      	bne.n	8000906 <MoveArm+0x1e2>
            (current_value_wrist_rot == wrist_rot_angle) &&
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <MoveArm+0x210>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_ver == wrist_ver_angle) &&
 80008ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d107      	bne.n	8000906 <MoveArm+0x1e2>
            (current_value_gripper == gripper_angle))
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MoveArm+0x214>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
            (current_value_wrist_rot == wrist_rot_angle) &&
 80008fa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80008fe:	429a      	cmp	r2, r3
 8000900:	d101      	bne.n	8000906 <MoveArm+0x1e2>
        {
        	isMoving = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
    while (isMoving)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	f47f af1d 	bne.w	8000748 <MoveArm+0x24>
        }
    }
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000090 	.word	0x20000090
 8000920:	20000001 	.word	0x20000001
 8000924:	20000120 	.word	0x20000120
 8000928:	20000002 	.word	0x20000002
 800092c:	200000d8 	.word	0x200000d8
 8000930:	20000003 	.word	0x20000003
 8000934:	20000004 	.word	0x20000004
 8000938:	20000005 	.word	0x20000005

0800093c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b0a5      	sub	sp, #148	@ 0x94
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a80      	ldr	r2, [pc, #512]	@ (8000b4c <HAL_UART_RxCpltCallback+0x210>)
 800094a:	4293      	cmp	r3, r2
 800094c:	f040 80fa 	bne.w	8000b44 <HAL_UART_RxCpltCallback+0x208>
	        char response_msg[100];
	        char temp_buffer[21]; // Create a copy if you need to preserve the original
	        for(int i = 0; i < 21; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000956:	e01b      	b.n	8000990 <HAL_UART_RxCpltCallback+0x54>
	       	        	buffer_q[index_buffer_write.value][i] = buffer[i];
 8000958:	4b7d      	ldr	r3, [pc, #500]	@ (8000b50 <HAL_UART_RxCpltCallback+0x214>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4618      	mov	r0, r3
 8000964:	4a7b      	ldr	r2, [pc, #492]	@ (8000b54 <HAL_UART_RxCpltCallback+0x218>)
 8000966:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800096a:	4413      	add	r3, r2
 800096c:	781c      	ldrb	r4, [r3, #0]
 800096e:	497a      	ldr	r1, [pc, #488]	@ (8000b58 <HAL_UART_RxCpltCallback+0x21c>)
 8000970:	4603      	mov	r3, r0
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4403      	add	r3, r0
 8000976:	00da      	lsls	r2, r3, #3
 8000978:	1ad2      	subs	r2, r2, r3
 800097a:	440a      	add	r2, r1
 800097c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000980:	4413      	add	r3, r2
 8000982:	4622      	mov	r2, r4
 8000984:	701a      	strb	r2, [r3, #0]
	        for(int i = 0; i < 21; i++)
 8000986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800098a:	3301      	adds	r3, #1
 800098c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000994:	2b14      	cmp	r3, #20
 8000996:	dddf      	ble.n	8000958 <HAL_UART_RxCpltCallback+0x1c>

	        strcpy(temp_buffer, buffer_q[index_buffer_read.value]); // Copy the original string
 8000998:	4b70      	ldr	r3, [pc, #448]	@ (8000b5c <HAL_UART_RxCpltCallback+0x220>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00da      	lsls	r2, r3, #3
 80009ac:	1ad2      	subs	r2, r2, r3
 80009ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000b58 <HAL_UART_RxCpltCallback+0x21c>)
 80009b0:	441a      	add	r2, r3
 80009b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f007 f8ee 	bl	8007b9a <strcpy>



	        if(index_buffer_write.value == 7 && index_buffer_read.value == 0){
 80009be:	4b64      	ldr	r3, [pc, #400]	@ (8000b50 <HAL_UART_RxCpltCallback+0x214>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b07      	cmp	r3, #7
 80009ca:	d10a      	bne.n	80009e2 <HAL_UART_RxCpltCallback+0xa6>
 80009cc:	4b63      	ldr	r3, [pc, #396]	@ (8000b5c <HAL_UART_RxCpltCallback+0x220>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d103      	bne.n	80009e2 <HAL_UART_RxCpltCallback+0xa6>
	        	is_buffer_full = 1;
 80009da:	4b61      	ldr	r3, [pc, #388]	@ (8000b60 <HAL_UART_RxCpltCallback+0x224>)
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
	        	return;
 80009e0:	e0b0      	b.n	8000b44 <HAL_UART_RxCpltCallback+0x208>
	        }
	        	if(++index_buffer_write.value == index_buffer_read.value)
 80009e2:	4b5b      	ldr	r3, [pc, #364]	@ (8000b50 <HAL_UART_RxCpltCallback+0x214>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	3301      	adds	r3, #1
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	b2d9      	uxtb	r1, r3
 80009f4:	4a56      	ldr	r2, [pc, #344]	@ (8000b50 <HAL_UART_RxCpltCallback+0x214>)
 80009f6:	7813      	ldrb	r3, [r2, #0]
 80009f8:	f361 0302 	bfi	r3, r1, #0, #3
 80009fc:	7013      	strb	r3, [r2, #0]
 80009fe:	4b54      	ldr	r3, [pc, #336]	@ (8000b50 <HAL_UART_RxCpltCallback+0x214>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b54      	ldr	r3, [pc, #336]	@ (8000b5c <HAL_UART_RxCpltCallback+0x220>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d103      	bne.n	8000a1e <HAL_UART_RxCpltCallback+0xe2>
	        	{
	        		is_buffer_full = 1;
 8000a16:	4b52      	ldr	r3, [pc, #328]	@ (8000b60 <HAL_UART_RxCpltCallback+0x224>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
	        		return;
 8000a1c:	e092      	b.n	8000b44 <HAL_UART_RxCpltCallback+0x208>
	        	}

	        char *token;

	            token = strtok(temp_buffer, ",");
 8000a1e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a22:	4950      	ldr	r1, [pc, #320]	@ (8000b64 <HAL_UART_RxCpltCallback+0x228>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f006 ff8b 	bl	8007940 <strtok>
 8000a2a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d007      	beq.n	8000a46 <HAL_UART_RxCpltCallback+0x10a>
	                base_angle = atoi(token);
 8000a36:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a3a:	f006 fddd 	bl	80075f8 <atoi>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b49      	ldr	r3, [pc, #292]	@ (8000b68 <HAL_UART_RxCpltCallback+0x22c>)
 8000a44:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a46:	4947      	ldr	r1, [pc, #284]	@ (8000b64 <HAL_UART_RxCpltCallback+0x228>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f006 ff79 	bl	8007940 <strtok>
 8000a4e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d007      	beq.n	8000a6a <HAL_UART_RxCpltCallback+0x12e>
	                shoulder_angle = atoi(token);
 8000a5a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a5e:	f006 fdcb 	bl	80075f8 <atoi>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b41      	ldr	r3, [pc, #260]	@ (8000b6c <HAL_UART_RxCpltCallback+0x230>)
 8000a68:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a6a:	493e      	ldr	r1, [pc, #248]	@ (8000b64 <HAL_UART_RxCpltCallback+0x228>)
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f006 ff67 	bl	8007940 <strtok>
 8000a72:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <HAL_UART_RxCpltCallback+0x152>
	                elbow_angle = atoi(token);
 8000a7e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000a82:	f006 fdb9 	bl	80075f8 <atoi>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <HAL_UART_RxCpltCallback+0x234>)
 8000a8c:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000a8e:	4935      	ldr	r1, [pc, #212]	@ (8000b64 <HAL_UART_RxCpltCallback+0x228>)
 8000a90:	2000      	movs	r0, #0
 8000a92:	f006 ff55 	bl	8007940 <strtok>
 8000a96:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000a9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d007      	beq.n	8000ab2 <HAL_UART_RxCpltCallback+0x176>
	                wrist_ver_angle = atoi(token);
 8000aa2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000aa6:	f006 fda7 	bl	80075f8 <atoi>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <HAL_UART_RxCpltCallback+0x238>)
 8000ab0:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000ab2:	492c      	ldr	r1, [pc, #176]	@ (8000b64 <HAL_UART_RxCpltCallback+0x228>)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f006 ff43 	bl	8007940 <strtok>
 8000aba:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <HAL_UART_RxCpltCallback+0x19a>
	            	wrist_rot_angle = atoi(token);
 8000ac6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000aca:	f006 fd95 	bl	80075f8 <atoi>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <HAL_UART_RxCpltCallback+0x23c>)
 8000ad4:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000ad6:	4923      	ldr	r1, [pc, #140]	@ (8000b64 <HAL_UART_RxCpltCallback+0x228>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f006 ff31 	bl	8007940 <strtok>
 8000ade:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d007      	beq.n	8000afa <HAL_UART_RxCpltCallback+0x1be>
	                detected_class = atoi(token);
 8000aea:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000aee:	f006 fd83 	bl	80075f8 <atoi>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <HAL_UART_RxCpltCallback+0x240>)
 8000af8:	701a      	strb	r2, [r3, #0]
	            }
	            move_arm = 1;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <HAL_UART_RxCpltCallback+0x244>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
	        // Construct the response message
	        strcpy(response_msg, "Received: ");
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4a1f      	ldr	r2, [pc, #124]	@ (8000b84 <HAL_UART_RxCpltCallback+0x248>)
 8000b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b08:	c303      	stmia	r3!, {r0, r1}
 8000b0a:	801a      	strh	r2, [r3, #0]
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	0c12      	lsrs	r2, r2, #16
 8000b10:	701a      	strb	r2, [r3, #0]
	        strcat(response_msg, (char*)buffer); // Cast to char* is fine here as it's null-terminated
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	490f      	ldr	r1, [pc, #60]	@ (8000b54 <HAL_UART_RxCpltCallback+0x218>)
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 ff02 	bl	8007922 <strcat>

	        // Transmit the response
	        HAL_UART_Transmit(&huart1, (uint8_t*) response_msg, strlen(response_msg), HAL_MAX_DELAY);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fb5c 	bl	80001e0 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f107 010c 	add.w	r1, r7, #12
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	4814      	ldr	r0, [pc, #80]	@ (8000b88 <HAL_UART_RxCpltCallback+0x24c>)
 8000b36:	f002 ff51 	bl	80039dc <HAL_UART_Transmit>

	        // Re-enable the receive interrupt *after* processing the current data
	        HAL_UART_Receive_IT(&huart1, buffer, 21);
 8000b3a:	2215      	movs	r2, #21
 8000b3c:	4905      	ldr	r1, [pc, #20]	@ (8000b54 <HAL_UART_RxCpltCallback+0x218>)
 8000b3e:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <HAL_UART_RxCpltCallback+0x24c>)
 8000b40:	f002 ffd7 	bl	8003af2 <HAL_UART_Receive_IT>

	}
}
 8000b44:	3794      	adds	r7, #148	@ 0x94
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd90      	pop	{r4, r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	20000204 	.word	0x20000204
 8000b54:	200002b8 	.word	0x200002b8
 8000b58:	20000210 	.word	0x20000210
 8000b5c:	20000208 	.word	0x20000208
 8000b60:	2000020c 	.word	0x2000020c
 8000b64:	08008840 	.word	0x08008840
 8000b68:	200002cd 	.word	0x200002cd
 8000b6c:	200002ce 	.word	0x200002ce
 8000b70:	200002cf 	.word	0x200002cf
 8000b74:	200002d0 	.word	0x200002d0
 8000b78:	200002d1 	.word	0x200002d1
 8000b7c:	200002d2 	.word	0x200002d2
 8000b80:	200002d4 	.word	0x200002d4
 8000b84:	08008844 	.word	0x08008844
 8000b88:	20000168 	.word	0x20000168

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f000 fedf 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 f865 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f000 faa5 	bl	80010e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b9e:	f000 fa79 	bl	8001094 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ba2:	f000 f8c9 	bl	8000d38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ba6:	f000 f953 	bl	8000e50 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000baa:	f000 f9d3 	bl	8000f54 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000bae:	f000 fa47 	bl	8001040 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char temp_msg[32];
  strcpy(temp_msg, "HC-05 Initialised!\n");
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c30 <main+0xa4>)
 8000bb6:	461c      	mov	r4, r3
 8000bb8:	4615      	mov	r5, r2
 8000bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbe:	682b      	ldr	r3, [r5, #0]
 8000bc0:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fb0b 	bl	80001e0 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4639      	mov	r1, r7
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	4817      	ldr	r0, [pc, #92]	@ (8000c34 <main+0xa8>)
 8000bd6:	f002 ff01 	bl	80039dc <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, buffer, 21);
 8000bda:	2215      	movs	r2, #21
 8000bdc:	4916      	ldr	r1, [pc, #88]	@ (8000c38 <main+0xac>)
 8000bde:	4815      	ldr	r0, [pc, #84]	@ (8000c34 <main+0xa8>)
 8000be0:	f002 ff87 	bl	8003af2 <HAL_UART_Receive_IT>

  index_buffer_write.value =7;
 8000be4:	4a15      	ldr	r2, [pc, #84]	@ (8000c3c <main+0xb0>)
 8000be6:	7813      	ldrb	r3, [r2, #0]
 8000be8:	f043 0307 	orr.w	r3, r3, #7
 8000bec:	7013      	strb	r3, [r2, #0]
  Init_arm();
 8000bee:	f7ff fd1f 	bl	8000630 <Init_arm>
  move_gripper(30);*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bf2:	f003 ff53 	bl	8004a9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of bluetooth */
  bluetoothHandle = osThreadNew(BluetoothTask, NULL, &bluetooth_attributes);
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <main+0xb4>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4812      	ldr	r0, [pc, #72]	@ (8000c44 <main+0xb8>)
 8000bfc:	f003 ff98 	bl	8004b30 <osThreadNew>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a11      	ldr	r2, [pc, #68]	@ (8000c48 <main+0xbc>)
 8000c04:	6013      	str	r3, [r2, #0]

  /* creation of moveRobotArm */
  moveRobotArmHandle = osThreadNew(MoveRobotArmTask, NULL, &moveRobotArm_attributes);
 8000c06:	4a11      	ldr	r2, [pc, #68]	@ (8000c4c <main+0xc0>)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4811      	ldr	r0, [pc, #68]	@ (8000c50 <main+0xc4>)
 8000c0c:	f003 ff90 	bl	8004b30 <osThreadNew>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <main+0xc8>)
 8000c14:	6013      	str	r3, [r2, #0]

  /* creation of colorSensor */
  colorSensorHandle = osThreadNew(ColorSensorTask, NULL, &colorSensor_attributes);
 8000c16:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <main+0xcc>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4810      	ldr	r0, [pc, #64]	@ (8000c5c <main+0xd0>)
 8000c1c:	f003 ff88 	bl	8004b30 <osThreadNew>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <main+0xd4>)
 8000c24:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c26:	f003 ff5d 	bl	8004ae4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c2a:	bf00      	nop
 8000c2c:	e7fd      	b.n	8000c2a <main+0x9e>
 8000c2e:	bf00      	nop
 8000c30:	08008850 	.word	0x08008850
 8000c34:	20000168 	.word	0x20000168
 8000c38:	200002b8 	.word	0x200002b8
 8000c3c:	20000204 	.word	0x20000204
 8000c40:	0800887c 	.word	0x0800887c
 8000c44:	080011c5 	.word	0x080011c5
 8000c48:	200001f8 	.word	0x200001f8
 8000c4c:	080088a0 	.word	0x080088a0
 8000c50:	080011d5 	.word	0x080011d5
 8000c54:	200001fc 	.word	0x200001fc
 8000c58:	080088c4 	.word	0x080088c4
 8000c5c:	0800124d 	.word	0x0800124d
 8000c60:	20000200 	.word	0x20000200

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	@ 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	2230      	movs	r2, #48	@ 0x30
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f006 fe4d 	bl	8007912 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b28      	ldr	r3, [pc, #160]	@ (8000d30 <SystemClock_Config+0xcc>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	4a27      	ldr	r2, [pc, #156]	@ (8000d30 <SystemClock_Config+0xcc>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c98:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <SystemClock_Config+0xcc>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <SystemClock_Config+0xd0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a21      	ldr	r2, [pc, #132]	@ (8000d34 <SystemClock_Config+0xd0>)
 8000cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <SystemClock_Config+0xd0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cd8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cdc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f9aa 	bl	8002044 <HAL_RCC_OscConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cf6:	f000 fac3 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2102      	movs	r1, #2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fc0c 	bl	8002534 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d22:	f000 faad 	bl	8001280 <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	@ 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08e      	sub	sp, #56	@ 0x38
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d68:	4b38      	ldr	r3, [pc, #224]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000d70:	4b36      	ldr	r3, [pc, #216]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000d72:	22c7      	movs	r2, #199	@ 0xc7
 8000d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b35      	ldr	r3, [pc, #212]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8000d7c:	4b33      	ldr	r3, [pc, #204]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000d7e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d8a:	4b30      	ldr	r3, [pc, #192]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000d8c:	2280      	movs	r2, #128	@ 0x80
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d90:	482e      	ldr	r0, [pc, #184]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000d92:	f001 fe21 	bl	80029d8 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d9c:	f000 fa70 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4827      	ldr	r0, [pc, #156]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000dae:	f002 f981 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000db8:	f000 fa62 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dbc:	4823      	ldr	r0, [pc, #140]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000dbe:	f001 febd 	bl	8002b3c <HAL_TIM_PWM_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000dc8:	f000 fa5a 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481c      	ldr	r0, [pc, #112]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000ddc:	f002 fd2c 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000de6:	f000 fa4b 	bl	8001280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dea:	2360      	movs	r3, #96	@ 0x60
 8000dec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4812      	ldr	r0, [pc, #72]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000e02:	f002 f895 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e0c:	f000 fa38 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2204      	movs	r2, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000e18:	f002 f88a 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000e22:	f000 fa2d 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2208      	movs	r2, #8
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000e2e:	f002 f87f 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000e38:	f000 fa22 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e3c:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM2_Init+0x114>)
 8000e3e:	f000 fa9d 	bl	800137c <HAL_TIM_MspPostInit>

}
 8000e42:	bf00      	nop
 8000e44:	3738      	adds	r7, #56	@ 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000090 	.word	0x20000090

08000e50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e80:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000e82:	4a33      	ldr	r2, [pc, #204]	@ (8000f50 <MX_TIM3_Init+0x100>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8000e86:	4b31      	ldr	r3, [pc, #196]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000e88:	22c7      	movs	r2, #199	@ 0xc7
 8000e8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8000e92:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000e94:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000ea2:	2280      	movs	r2, #128	@ 0x80
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea6:	4829      	ldr	r0, [pc, #164]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000ea8:	f001 fd96 	bl	80029d8 <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000eb2:	f000 f9e5 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ebc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4822      	ldr	r0, [pc, #136]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000ec4:	f002 f8f6 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ece:	f000 f9d7 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ed2:	481e      	ldr	r0, [pc, #120]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000ed4:	f001 fe32 	bl	8002b3c <HAL_TIM_PWM_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ede:	f000 f9cf 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eea:	f107 0320 	add.w	r3, r7, #32
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4816      	ldr	r0, [pc, #88]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000ef2:	f002 fca1 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000efc:	f000 f9c0 	bl	8001280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f00:	2360      	movs	r3, #96	@ 0x60
 8000f02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000f18:	f002 f80a 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f22:	f000 f9ad 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2204      	movs	r2, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000f2e:	f001 ffff 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f38:	f000 f9a2 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <MX_TIM3_Init+0xfc>)
 8000f3e:	f000 fa1d 	bl	800137c <HAL_TIM_MspPostInit>

}
 8000f42:	bf00      	nop
 8000f44:	3738      	adds	r7, #56	@ 0x38
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000d8 	.word	0x200000d8
 8000f50:	40000400 	.word	0x40000400

08000f54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	@ 0x38
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f84:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000f86:	4a2d      	ldr	r2, [pc, #180]	@ (800103c <MX_TIM4_Init+0xe8>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000f8c:	22c7      	movs	r2, #199	@ 0xc7
 8000f8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000f98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000faa:	4823      	ldr	r0, [pc, #140]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000fac:	f001 fd14 	bl	80029d8 <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000fb6:	f000 f963 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481c      	ldr	r0, [pc, #112]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000fc8:	f002 f874 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000fd2:	f000 f955 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fd6:	4818      	ldr	r0, [pc, #96]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000fd8:	f001 fdb0 	bl	8002b3c <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000fe2:	f000 f94d 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4810      	ldr	r0, [pc, #64]	@ (8001038 <MX_TIM4_Init+0xe4>)
 8000ff6:	f002 fc1f 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001000:	f000 f93e 	bl	8001280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	@ 0x60
 8001006:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4807      	ldr	r0, [pc, #28]	@ (8001038 <MX_TIM4_Init+0xe4>)
 800101c:	f001 ff88 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001026:	f000 f92b 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800102a:	4803      	ldr	r0, [pc, #12]	@ (8001038 <MX_TIM4_Init+0xe4>)
 800102c:	f000 f9a6 	bl	800137c <HAL_TIM_MspPostInit>

}
 8001030:	bf00      	nop
 8001032:	3738      	adds	r7, #56	@ 0x38
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000120 	.word	0x20000120
 800103c:	40000800 	.word	0x40000800

08001040 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_USART1_UART_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 800104c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001078:	f002 fc60 	bl	800393c <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001082:	f000 f8fd 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000168 	.word	0x20000168
 8001090:	40011000 	.word	0x40011000

08001094 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <MX_USART2_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010cc:	f002 fc36 	bl	800393c <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f000 f8d3 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001b0 	.word	0x200001b0
 80010e4:	40004400 	.word	0x40004400

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a2c      	ldr	r2, [pc, #176]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a25      	ldr	r2, [pc, #148]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a1e      	ldr	r2, [pc, #120]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_GPIO_Init+0xd0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2160      	movs	r1, #96	@ 0x60
 8001172:	4812      	ldr	r0, [pc, #72]	@ (80011bc <MX_GPIO_Init+0xd4>)
 8001174:	f000 ff4c 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800117e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <MX_GPIO_Init+0xd8>)
 8001190:	f000 fdba 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001194:	2360      	movs	r3, #96	@ 0x60
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_GPIO_Init+0xd4>)
 80011ac:	f000 fdac 	bl	8001d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	@ 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020800 	.word	0x40020800

080011c4 <BluetoothTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BluetoothTask */
void BluetoothTask(void *argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f003 fd41 	bl	8004c54 <osDelay>
 80011d2:	e7fb      	b.n	80011cc <BluetoothTask+0x8>

080011d4 <MoveRobotArmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MoveRobotArmTask */
void MoveRobotArmTask(void *argument)
{
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MoveRobotArmTask */
  /* Infinite loop */
  for(;;)
  {
	  if(move_arm){
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MoveRobotArmTask+0x5c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <MoveRobotArmTask+0x52>
	  		  MoveArm(base_angle, shoulder_angle, elbow_angle, wrist_ver_angle, wrist_rot_angle, 30);
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MoveRobotArmTask+0x60>)
 80011e6:	7818      	ldrb	r0, [r3, #0]
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <MoveRobotArmTask+0x64>)
 80011ea:	7819      	ldrb	r1, [r3, #0]
 80011ec:	4b13      	ldr	r3, [pc, #76]	@ (800123c <MoveRobotArmTask+0x68>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <MoveRobotArmTask+0x6c>)
 80011f2:	781c      	ldrb	r4, [r3, #0]
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <MoveRobotArmTask+0x70>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	251e      	movs	r5, #30
 80011fa:	9501      	str	r5, [sp, #4]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	4623      	mov	r3, r4
 8001200:	f7ff fa90 	bl	8000724 <MoveArm>
	  		  move_arm = 0;
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <MoveRobotArmTask+0x5c>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
	  		  index_buffer_read.value++;
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MoveRobotArmTask+0x74>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	3301      	adds	r3, #1
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	b2d9      	uxtb	r1, r3
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <MoveRobotArmTask+0x74>)
 800121e:	7813      	ldrb	r3, [r2, #0]
 8001220:	f361 0302 	bfi	r3, r1, #0, #3
 8001224:	7013      	strb	r3, [r2, #0]
	  	  }
    osDelay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f003 fd14 	bl	8004c54 <osDelay>
	  if(move_arm){
 800122c:	e7d6      	b.n	80011dc <MoveRobotArmTask+0x8>
 800122e:	bf00      	nop
 8001230:	200002d4 	.word	0x200002d4
 8001234:	200002cd 	.word	0x200002cd
 8001238:	200002ce 	.word	0x200002ce
 800123c:	200002cf 	.word	0x200002cf
 8001240:	200002d0 	.word	0x200002d0
 8001244:	200002d1 	.word	0x200002d1
 8001248:	20000208 	.word	0x20000208

0800124c <ColorSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ColorSensorTask */
void ColorSensorTask(void *argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ColorSensorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f003 fcfd 	bl	8004c54 <osDelay>
 800125a:	e7fb      	b.n	8001254 <ColorSensorTask+0x8>

0800125c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800126e:	f000 fb93 	bl	8001998 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40010000 	.word	0x40010000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>

0800128c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_MspInit+0x54>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <HAL_MspInit+0x54>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_MspInit+0x54>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_MspInit+0x54>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_MspInit+0x54>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_MspInit+0x54>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	210f      	movs	r1, #15
 80012ce:	f06f 0001 	mvn.w	r0, #1
 80012d2:	f000 fc5d 	bl	8001b90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f4:	d10e      	bne.n	8001314 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <HAL_TIM_Base_MspInit+0x8c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <HAL_TIM_Base_MspInit+0x8c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <HAL_TIM_Base_MspInit+0x8c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001312:	e026      	b.n	8001362 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a16      	ldr	r2, [pc, #88]	@ (8001374 <HAL_TIM_Base_MspInit+0x90>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10e      	bne.n	800133c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_TIM_Base_MspInit+0x8c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <HAL_TIM_Base_MspInit+0x8c>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6413      	str	r3, [r2, #64]	@ 0x40
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <HAL_TIM_Base_MspInit+0x8c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
}
 800133a:	e012      	b.n	8001362 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <HAL_TIM_Base_MspInit+0x94>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10d      	bne.n	8001362 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <HAL_TIM_Base_MspInit+0x8c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <HAL_TIM_Base_MspInit+0x8c>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6413      	str	r3, [r2, #64]	@ 0x40
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_TIM_Base_MspInit+0x8c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40000400 	.word	0x40000400
 8001378:	40000800 	.word	0x40000800

0800137c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	@ 0x30
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800139c:	d13d      	bne.n	800141a <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	4b52      	ldr	r3, [pc, #328]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a51      	ldr	r2, [pc, #324]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b4f      	ldr	r3, [pc, #316]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4b4b      	ldr	r3, [pc, #300]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a4a      	ldr	r2, [pc, #296]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b48      	ldr	r3, [pc, #288]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	483f      	ldr	r0, [pc, #252]	@ (80014f0 <HAL_TIM_MspPostInit+0x174>)
 80013f2:	f000 fc89 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80013f6:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001408:	2301      	movs	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4838      	ldr	r0, [pc, #224]	@ (80014f4 <HAL_TIM_MspPostInit+0x178>)
 8001414:	f000 fc78 	bl	8001d08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001418:	e064      	b.n	80014e4 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a36      	ldr	r2, [pc, #216]	@ (80014f8 <HAL_TIM_MspPostInit+0x17c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d13c      	bne.n	800149e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	4b30      	ldr	r3, [pc, #192]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	4a2f      	ldr	r2, [pc, #188]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6313      	str	r3, [r2, #48]	@ 0x30
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	4a28      	ldr	r2, [pc, #160]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001450:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800146c:	2302      	movs	r3, #2
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	4821      	ldr	r0, [pc, #132]	@ (80014fc <HAL_TIM_MspPostInit+0x180>)
 8001478:	f000 fc46 	bl	8001d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800147c:	2310      	movs	r3, #16
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800148c:	2302      	movs	r3, #2
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4817      	ldr	r0, [pc, #92]	@ (80014f4 <HAL_TIM_MspPostInit+0x178>)
 8001498:	f000 fc36 	bl	8001d08 <HAL_GPIO_Init>
}
 800149c:	e022      	b.n	80014e4 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <HAL_TIM_MspPostInit+0x184>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d11d      	bne.n	80014e4 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	4a0e      	ldr	r2, [pc, #56]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_TIM_MspPostInit+0x170>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c4:	2340      	movs	r3, #64	@ 0x40
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014d4:	2302      	movs	r3, #2
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <HAL_TIM_MspPostInit+0x178>)
 80014e0:	f000 fc12 	bl	8001d08 <HAL_GPIO_Init>
}
 80014e4:	bf00      	nop
 80014e6:	3730      	adds	r7, #48	@ 0x30
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40000400 	.word	0x40000400
 80014fc:	40020800 	.word	0x40020800
 8001500:	40000800 	.word	0x40000800

08001504 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	@ 0x30
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a36      	ldr	r2, [pc, #216]	@ (80015fc <HAL_UART_MspInit+0xf8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d135      	bne.n	8001592 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a34      	ldr	r2, [pc, #208]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
 8001536:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a2d      	ldr	r2, [pc, #180]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800155e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001570:	2307      	movs	r3, #7
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4822      	ldr	r0, [pc, #136]	@ (8001604 <HAL_UART_MspInit+0x100>)
 800157c:	f000 fbc4 	bl	8001d08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2105      	movs	r1, #5
 8001584:	2025      	movs	r0, #37	@ 0x25
 8001586:	f000 fb03 	bl	8001b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800158a:	2025      	movs	r0, #37	@ 0x25
 800158c:	f000 fb1c 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001590:	e030      	b.n	80015f4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <HAL_UART_MspInit+0x104>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d12b      	bne.n	80015f4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 80015a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_UART_MspInit+0xfc>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015d4:	230c      	movs	r3, #12
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e4:	2307      	movs	r3, #7
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <HAL_UART_MspInit+0x100>)
 80015f0:	f000 fb8a 	bl	8001d08 <HAL_GPIO_Init>
}
 80015f4:	bf00      	nop
 80015f6:	3730      	adds	r7, #48	@ 0x30
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40011000 	.word	0x40011000
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	40004400 	.word	0x40004400

0800160c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	@ 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <HAL_InitTick+0xd0>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001624:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <HAL_InitTick+0xd0>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6453      	str	r3, [r2, #68]	@ 0x44
 800162c:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <HAL_InitTick+0xd0>)
 800162e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f001 f996 	bl	8002974 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001648:	f001 f980 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 800164c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800164e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001650:	4a23      	ldr	r2, [pc, #140]	@ (80016e0 <HAL_InitTick+0xd4>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	3b01      	subs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800165c:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <HAL_InitTick+0xd8>)
 800165e:	4a22      	ldr	r2, [pc, #136]	@ (80016e8 <HAL_InitTick+0xdc>)
 8001660:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001664:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001668:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800166a:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <HAL_InitTick+0xd8>)
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001670:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <HAL_InitTick+0xd8>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001682:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001684:	f001 f9a8 	bl	80029d8 <HAL_TIM_Base_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800168e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001692:	2b00      	cmp	r3, #0
 8001694:	d11b      	bne.n	80016ce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001696:	4813      	ldr	r0, [pc, #76]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001698:	f001 f9ee 	bl	8002a78 <HAL_TIM_Base_Start_IT>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d111      	bne.n	80016ce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016aa:	2019      	movs	r0, #25
 80016ac:	f000 fa8c 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	d808      	bhi.n	80016c8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016b6:	2200      	movs	r2, #0
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	2019      	movs	r0, #25
 80016bc:	f000 fa68 	bl	8001b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c0:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <HAL_InitTick+0xe0>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e002      	b.n	80016ce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3730      	adds	r7, #48	@ 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	200002d8 	.word	0x200002d8
 80016e8:	40010000 	.word	0x40010000
 80016ec:	2000000c 	.word	0x2000000c

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <NMI_Handler+0x4>

080016f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <MemManage_Handler+0x4>

08001708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <UsageFault_Handler+0x4>

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800172e:	f001 fb0f 	bl	8002d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002d8 	.word	0x200002d8

0800173c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <USART1_IRQHandler+0x10>)
 8001742:	f002 f9fb 	bl	8003b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000168 	.word	0x20000168

08001750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_kill>:

int _kill(int pid, int sig)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176a:	f006 f9e9 	bl	8007b40 <__errno>
 800176e:	4603      	mov	r3, r0
 8001770:	2216      	movs	r2, #22
 8001772:	601a      	str	r2, [r3, #0]
  return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_exit>:

void _exit (int status)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe7 	bl	8001760 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001792:	bf00      	nop
 8001794:	e7fd      	b.n	8001792 <_exit+0x12>

08001796 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e00a      	b.n	80017be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a8:	f3af 8000 	nop.w
 80017ac:	4601      	mov	r1, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	60ba      	str	r2, [r7, #8]
 80017b4:	b2ca      	uxtb	r2, r1
 80017b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dbf0      	blt.n	80017a8 <_read+0x12>
  }

  return len;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e009      	b.n	80017f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	60ba      	str	r2, [r7, #8]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dbf1      	blt.n	80017e2 <_write+0x12>
  }
  return len;
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_close>:

int _close(int file)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001830:	605a      	str	r2, [r3, #4]
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_isatty>:

int _isatty(int file)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001848:	2301      	movs	r3, #1
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f006 f94e 	bl	8007b40 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20020000 	.word	0x20020000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20000320 	.word	0x20000320
 80018d8:	20004e60 	.word	0x20004e60

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001938 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001904:	f7ff ffea 	bl	80018dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001908:	480c      	ldr	r0, [pc, #48]	@ (800193c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190a:	490d      	ldr	r1, [pc, #52]	@ (8001940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001920:	4c0a      	ldr	r4, [pc, #40]	@ (800194c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192e:	f006 f90d 	bl	8007b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff f92b 	bl	8000b8c <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001944:	08008af4 	.word	0x08008af4
  ldr r2, =_sbss
 8001948:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800194c:	20004e5c 	.word	0x20004e5c

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001958:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <HAL_Init+0x40>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <HAL_Init+0x40>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800196e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <HAL_Init+0x40>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f8fc 	bl	8001b7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	200f      	movs	r0, #15
 8001984:	f7ff fe42 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fc80 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000010 	.word	0x20000010
 80019bc:	20000324 	.word	0x20000324

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000324 	.word	0x20000324

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000010 	.word	0x20000010

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	@ (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	@ (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	@ 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff4c 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba2:	f7ff ff61 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001ba6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	6978      	ldr	r0, [r7, #20]
 8001bae:	f7ff ffb1 	bl	8001b14 <NVIC_EncodePriority>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff80 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff54 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bf2:	f7ff fee5 	bl	80019c0 <HAL_GetTick>
 8001bf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d008      	beq.n	8001c16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2280      	movs	r2, #128	@ 0x80
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e052      	b.n	8001cbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0216 	bic.w	r2, r2, #22
 8001c24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <HAL_DMA_Abort+0x62>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0208 	bic.w	r2, r2, #8
 8001c54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c66:	e013      	b.n	8001c90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c68:	f7ff feaa 	bl	80019c0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d90c      	bls.n	8001c90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2203      	movs	r2, #3
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e015      	b.n	8001cbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1e4      	bne.n	8001c68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca2:	223f      	movs	r2, #63	@ 0x3f
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d004      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00c      	b.n	8001cfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e159      	b.n	8001fd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8148 	bne.w	8001fd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d005      	beq.n	8001d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d130      	bne.n	8001dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0201 	and.w	r2, r3, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d017      	beq.n	8001df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d123      	bne.n	8001e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a2 	beq.w	8001fd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b57      	ldr	r3, [pc, #348]	@ (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	4a56      	ldr	r2, [pc, #344]	@ (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9e:	4b54      	ldr	r3, [pc, #336]	@ (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eaa:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <HAL_GPIO_Init+0x2ec>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a49      	ldr	r2, [pc, #292]	@ (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d019      	beq.n	8001f0a <HAL_GPIO_Init+0x202>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a48      	ldr	r2, [pc, #288]	@ (8001ffc <HAL_GPIO_Init+0x2f4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0x1fe>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a47      	ldr	r2, [pc, #284]	@ (8002000 <HAL_GPIO_Init+0x2f8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_GPIO_Init+0x1fa>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a46      	ldr	r2, [pc, #280]	@ (8002004 <HAL_GPIO_Init+0x2fc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0x1f6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a45      	ldr	r2, [pc, #276]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x1f2>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e008      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001efa:	2307      	movs	r3, #7
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001efe:	2303      	movs	r3, #3
 8001f00:	e004      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	f002 0203 	and.w	r2, r2, #3
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	4093      	lsls	r3, r2
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f1c:	4935      	ldr	r1, [pc, #212]	@ (8001ff4 <HAL_GPIO_Init+0x2ec>)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2a:	4b38      	ldr	r3, [pc, #224]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f54:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f78:	4a24      	ldr	r2, [pc, #144]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7e:	4b23      	ldr	r3, [pc, #140]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa8:	4b18      	ldr	r3, [pc, #96]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	2b0f      	cmp	r3, #15
 8001fdc:	f67f aea2 	bls.w	8001d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020800 	.word	0x40020800
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40021000 	.word	0x40021000
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800202c:	e003      	b.n	8002036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	619a      	str	r2, [r3, #24]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e267      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d075      	beq.n	800214e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002062:	4b88      	ldr	r3, [pc, #544]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d00c      	beq.n	8002088 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b85      	ldr	r3, [pc, #532]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002076:	2b08      	cmp	r3, #8
 8002078:	d112      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207a:	4b82      	ldr	r3, [pc, #520]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002082:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002086:	d10b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	4b7e      	ldr	r3, [pc, #504]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d05b      	beq.n	800214c <HAL_RCC_OscConfig+0x108>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d157      	bne.n	800214c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e242      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x74>
 80020aa:	4b76      	ldr	r3, [pc, #472]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a75      	ldr	r2, [pc, #468]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e01d      	b.n	80020f4 <HAL_RCC_OscConfig+0xb0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x98>
 80020c2:	4b70      	ldr	r3, [pc, #448]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6f      	ldr	r2, [pc, #444]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6c      	ldr	r2, [pc, #432]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0xb0>
 80020dc:	4b69      	ldr	r3, [pc, #420]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a68      	ldr	r2, [pc, #416]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b66      	ldr	r3, [pc, #408]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a65      	ldr	r2, [pc, #404]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fc60 	bl	80019c0 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fc5c 	bl	80019c0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	@ 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e207      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b5b      	ldr	r3, [pc, #364]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0xc0>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff fc4c 	bl	80019c0 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff fc48 	bl	80019c0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	@ 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1f3      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	4b51      	ldr	r3, [pc, #324]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0xe8>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d063      	beq.n	8002222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800215a:	4b4a      	ldr	r3, [pc, #296]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b47      	ldr	r3, [pc, #284]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800216e:	2b08      	cmp	r3, #8
 8002170:	d11c      	bne.n	80021ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002172:	4b44      	ldr	r3, [pc, #272]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d116      	bne.n	80021ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	4b41      	ldr	r3, [pc, #260]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x152>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e1c7      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4937      	ldr	r1, [pc, #220]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	e03a      	b.n	8002222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d020      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <HAL_RCC_OscConfig+0x244>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7ff fc01 	bl	80019c0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c2:	f7ff fbfd 	bl	80019c0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e1a8      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	4b28      	ldr	r3, [pc, #160]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4925      	ldr	r1, [pc, #148]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
 80021f4:	e015      	b.n	8002222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f6:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <HAL_RCC_OscConfig+0x244>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff fbe0 	bl	80019c0 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7ff fbdc 	bl	80019c0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e187      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d036      	beq.n	800229c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <HAL_RCC_OscConfig+0x248>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7ff fbc0 	bl	80019c0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002244:	f7ff fbbc 	bl	80019c0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e167      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_RCC_OscConfig+0x240>)
 8002258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x200>
 8002262:	e01b      	b.n	800229c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_RCC_OscConfig+0x248>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7ff fba9 	bl	80019c0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002270:	e00e      	b.n	8002290 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002272:	f7ff fba5 	bl	80019c0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d907      	bls.n	8002290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e150      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
 8002284:	40023800 	.word	0x40023800
 8002288:	42470000 	.word	0x42470000
 800228c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	4b88      	ldr	r3, [pc, #544]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ea      	bne.n	8002272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8097 	beq.w	80023d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ae:	4b81      	ldr	r3, [pc, #516]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10f      	bne.n	80022da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b7d      	ldr	r3, [pc, #500]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	4a7c      	ldr	r2, [pc, #496]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ca:	4b7a      	ldr	r3, [pc, #488]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b77      	ldr	r3, [pc, #476]	@ (80024b8 <HAL_RCC_OscConfig+0x474>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e6:	4b74      	ldr	r3, [pc, #464]	@ (80024b8 <HAL_RCC_OscConfig+0x474>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a73      	ldr	r2, [pc, #460]	@ (80024b8 <HAL_RCC_OscConfig+0x474>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fb65 	bl	80019c0 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7ff fb61 	bl	80019c0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e10c      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	4b6a      	ldr	r3, [pc, #424]	@ (80024b8 <HAL_RCC_OscConfig+0x474>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x2ea>
 8002320:	4b64      	ldr	r3, [pc, #400]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	4a63      	ldr	r2, [pc, #396]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	@ 0x70
 800232c:	e01c      	b.n	8002368 <HAL_RCC_OscConfig+0x324>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b05      	cmp	r3, #5
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x30c>
 8002336:	4b5f      	ldr	r3, [pc, #380]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233a:	4a5e      	ldr	r2, [pc, #376]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6713      	str	r3, [r2, #112]	@ 0x70
 8002342:	4b5c      	ldr	r3, [pc, #368]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002346:	4a5b      	ldr	r2, [pc, #364]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6713      	str	r3, [r2, #112]	@ 0x70
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0x324>
 8002350:	4b58      	ldr	r3, [pc, #352]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002354:	4a57      	ldr	r2, [pc, #348]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	6713      	str	r3, [r2, #112]	@ 0x70
 800235c:	4b55      	ldr	r3, [pc, #340]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002360:	4a54      	ldr	r2, [pc, #336]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002362:	f023 0304 	bic.w	r3, r3, #4
 8002366:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d015      	beq.n	800239c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7ff fb26 	bl	80019c0 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7ff fb22 	bl	80019c0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0cb      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238e:	4b49      	ldr	r3, [pc, #292]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0ee      	beq.n	8002378 <HAL_RCC_OscConfig+0x334>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239c:	f7ff fb10 	bl	80019c0 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7ff fb0c 	bl	80019c0 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0b5      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ba:	4b3e      	ldr	r3, [pc, #248]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1ee      	bne.n	80023a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023cc:	4b39      	ldr	r3, [pc, #228]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	4a38      	ldr	r2, [pc, #224]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 80023d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80a1 	beq.w	8002524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e2:	4b34      	ldr	r3, [pc, #208]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d05c      	beq.n	80024a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d141      	bne.n	800247a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b31      	ldr	r3, [pc, #196]	@ (80024bc <HAL_RCC_OscConfig+0x478>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7ff fae0 	bl	80019c0 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7ff fadc 	bl	80019c0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e087      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	4b27      	ldr	r3, [pc, #156]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002430:	019b      	lsls	r3, r3, #6
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	3b01      	subs	r3, #1
 800243c:	041b      	lsls	r3, r3, #16
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	491b      	ldr	r1, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800244c:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_RCC_OscConfig+0x478>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7ff fab5 	bl	80019c0 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7ff fab1 	bl	80019c0 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e05c      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x416>
 8002478:	e054      	b.n	8002524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <HAL_RCC_OscConfig+0x478>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff fa9e 	bl	80019c0 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7ff fa9a 	bl	80019c0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e045      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_RCC_OscConfig+0x470>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x444>
 80024a6:	e03d      	b.n	8002524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e038      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40007000 	.word	0x40007000
 80024bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <HAL_RCC_OscConfig+0x4ec>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d028      	beq.n	8002520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d121      	bne.n	8002520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d11a      	bne.n	8002520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024f0:	4013      	ands	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d111      	bne.n	8002520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002506:	085b      	lsrs	r3, r3, #1
 8002508:	3b01      	subs	r3, #1
 800250a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d107      	bne.n	8002520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800

08002534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0cc      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b68      	ldr	r3, [pc, #416]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d90c      	bls.n	8002570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b65      	ldr	r3, [pc, #404]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a58      	ldr	r2, [pc, #352]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002592:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d044      	beq.n	8002654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d119      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002602:	4b3b      	ldr	r3, [pc, #236]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e067      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002612:	4b37      	ldr	r3, [pc, #220]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 0203 	bic.w	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4934      	ldr	r1, [pc, #208]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	4313      	orrs	r3, r2
 8002622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002624:	f7ff f9cc 	bl	80019c0 <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	e00a      	b.n	8002642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262c:	f7ff f9c8 	bl	80019c0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e04f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 020c 	and.w	r2, r3, #12
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	429a      	cmp	r2, r3
 8002652:	d1eb      	bne.n	800262c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d20c      	bcs.n	800267c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a6:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f821 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490a      	ldr	r1, [pc, #40]	@ (80026f4 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe ff96 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023c00 	.word	0x40023c00
 80026f0:	40023800 	.word	0x40023800
 80026f4:	080088e8 	.word	0x080088e8
 80026f8:	20000008 	.word	0x20000008
 80026fc:	2000000c 	.word	0x2000000c

08002700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002704:	b094      	sub	sp, #80	@ 0x50
 8002706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002718:	4b79      	ldr	r3, [pc, #484]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d00d      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x40>
 8002724:	2b08      	cmp	r3, #8
 8002726:	f200 80e1 	bhi.w	80028ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x34>
 800272e:	2b04      	cmp	r3, #4
 8002730:	d003      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x3a>
 8002732:	e0db      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b73      	ldr	r3, [pc, #460]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x204>)
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002738:	e0db      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800273a:	4b73      	ldr	r3, [pc, #460]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x208>)
 800273c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800273e:	e0d8      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002740:	4b6f      	ldr	r3, [pc, #444]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002748:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800274a:	4b6d      	ldr	r3, [pc, #436]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d063      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002756:	4b6a      	ldr	r3, [pc, #424]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	2200      	movs	r2, #0
 800275e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002760:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002768:	633b      	str	r3, [r7, #48]	@ 0x30
 800276a:	2300      	movs	r3, #0
 800276c:	637b      	str	r3, [r7, #52]	@ 0x34
 800276e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002772:	4622      	mov	r2, r4
 8002774:	462b      	mov	r3, r5
 8002776:	f04f 0000 	mov.w	r0, #0
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	0159      	lsls	r1, r3, #5
 8002780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002784:	0150      	lsls	r0, r2, #5
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4621      	mov	r1, r4
 800278c:	1a51      	subs	r1, r2, r1
 800278e:	6139      	str	r1, [r7, #16]
 8002790:	4629      	mov	r1, r5
 8002792:	eb63 0301 	sbc.w	r3, r3, r1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027a4:	4659      	mov	r1, fp
 80027a6:	018b      	lsls	r3, r1, #6
 80027a8:	4651      	mov	r1, sl
 80027aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ae:	4651      	mov	r1, sl
 80027b0:	018a      	lsls	r2, r1, #6
 80027b2:	4651      	mov	r1, sl
 80027b4:	ebb2 0801 	subs.w	r8, r2, r1
 80027b8:	4659      	mov	r1, fp
 80027ba:	eb63 0901 	sbc.w	r9, r3, r1
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027d2:	4690      	mov	r8, r2
 80027d4:	4699      	mov	r9, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	eb18 0303 	adds.w	r3, r8, r3
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	462b      	mov	r3, r5
 80027e0:	eb49 0303 	adc.w	r3, r9, r3
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027f2:	4629      	mov	r1, r5
 80027f4:	024b      	lsls	r3, r1, #9
 80027f6:	4621      	mov	r1, r4
 80027f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027fc:	4621      	mov	r1, r4
 80027fe:	024a      	lsls	r2, r1, #9
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002806:	2200      	movs	r2, #0
 8002808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800280a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800280c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002810:	f7fd fd3e 	bl	8000290 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4613      	mov	r3, r2
 800281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281c:	e058      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281e:	4b38      	ldr	r3, [pc, #224]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	2200      	movs	r2, #0
 8002826:	4618      	mov	r0, r3
 8002828:	4611      	mov	r1, r2
 800282a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800282e:	623b      	str	r3, [r7, #32]
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
 8002834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002838:	4642      	mov	r2, r8
 800283a:	464b      	mov	r3, r9
 800283c:	f04f 0000 	mov.w	r0, #0
 8002840:	f04f 0100 	mov.w	r1, #0
 8002844:	0159      	lsls	r1, r3, #5
 8002846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800284a:	0150      	lsls	r0, r2, #5
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4641      	mov	r1, r8
 8002852:	ebb2 0a01 	subs.w	sl, r2, r1
 8002856:	4649      	mov	r1, r9
 8002858:	eb63 0b01 	sbc.w	fp, r3, r1
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800286c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002870:	ebb2 040a 	subs.w	r4, r2, sl
 8002874:	eb63 050b 	sbc.w	r5, r3, fp
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	00eb      	lsls	r3, r5, #3
 8002882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002886:	00e2      	lsls	r2, r4, #3
 8002888:	4614      	mov	r4, r2
 800288a:	461d      	mov	r5, r3
 800288c:	4643      	mov	r3, r8
 800288e:	18e3      	adds	r3, r4, r3
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	464b      	mov	r3, r9
 8002894:	eb45 0303 	adc.w	r3, r5, r3
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028a6:	4629      	mov	r1, r5
 80028a8:	028b      	lsls	r3, r1, #10
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b0:	4621      	mov	r1, r4
 80028b2:	028a      	lsls	r2, r1, #10
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ba:	2200      	movs	r2, #0
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	61fa      	str	r2, [r7, #28]
 80028c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c4:	f7fd fce4 	bl	8000290 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4613      	mov	r3, r2
 80028ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x204>)
 80028ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3750      	adds	r7, #80	@ 0x50
 80028f8:	46bd      	mov	sp, r7
 80028fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	00f42400 	.word	0x00f42400
 8002908:	007a1200 	.word	0x007a1200

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <HAL_RCC_GetHCLKFreq+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000008 	.word	0x20000008

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002928:	f7ff fff0 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0a9b      	lsrs	r3, r3, #10
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	080088f8 	.word	0x080088f8

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002950:	f7ff ffdc 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0b5b      	lsrs	r3, r3, #13
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	@ (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	080088f8 	.word	0x080088f8

08002974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	220f      	movs	r2, #15
 8002982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002984:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002990:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <HAL_RCC_GetClockConfig+0x60>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0207 	and.w	r2, r3, #7
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40023c00 	.word	0x40023c00

080029d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e041      	b.n	8002a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fc70 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4610      	mov	r0, r2
 8002a18:	f000 fc3c 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d001      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e044      	b.n	8002b1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1e      	ldr	r2, [pc, #120]	@ (8002b28 <HAL_TIM_Base_Start_IT+0xb0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d018      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aba:	d013      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b2c <HAL_TIM_Base_Start_IT+0xb4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a19      	ldr	r2, [pc, #100]	@ (8002b30 <HAL_TIM_Base_Start_IT+0xb8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a17      	ldr	r2, [pc, #92]	@ (8002b34 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a16      	ldr	r2, [pc, #88]	@ (8002b38 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d111      	bne.n	8002b08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d010      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	e007      	b.n	8002b18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40010000 	.word	0x40010000
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40000c00 	.word	0x40000c00
 8002b38:	40014000 	.word	0x40014000

08002b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e041      	b.n	8002bd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f839 	bl	8002bda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 fb8a 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_TIM_PWM_Start+0x24>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e022      	b.n	8002c5a <HAL_TIM_PWM_Start+0x6a>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d109      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x3e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e015      	b.n	8002c5a <HAL_TIM_PWM_Start+0x6a>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d109      	bne.n	8002c48 <HAL_TIM_PWM_Start+0x58>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e008      	b.n	8002c5a <HAL_TIM_PWM_Start+0x6a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e068      	b.n	8002d34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x82>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c70:	e013      	b.n	8002c9a <HAL_TIM_PWM_Start+0xaa>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x92>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c80:	e00b      	b.n	8002c9a <HAL_TIM_PWM_Start+0xaa>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start+0xa2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c90:	e003      	b.n	8002c9a <HAL_TIM_PWM_Start+0xaa>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fda2 	bl	80037ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a23      	ldr	r2, [pc, #140]	@ (8002d3c <HAL_TIM_PWM_Start+0x14c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d107      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d3c <HAL_TIM_PWM_Start+0x14c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d018      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd4:	d013      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a19      	ldr	r2, [pc, #100]	@ (8002d40 <HAL_TIM_PWM_Start+0x150>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00e      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a17      	ldr	r2, [pc, #92]	@ (8002d44 <HAL_TIM_PWM_Start+0x154>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d009      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <HAL_TIM_PWM_Start+0x158>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a14      	ldr	r2, [pc, #80]	@ (8002d4c <HAL_TIM_PWM_Start+0x15c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d111      	bne.n	8002d22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d010      	beq.n	8002d32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d20:	e007      	b.n	8002d32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800
 8002d48:	40000c00 	.word	0x40000c00
 8002d4c:	40014000 	.word	0x40014000

08002d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d020      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01b      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0202 	mvn.w	r2, #2
 8002d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa5b 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002da0:	e005      	b.n	8002dae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa4d 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fa5e 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d020      	beq.n	8002e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01b      	beq.n	8002e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0204 	mvn.w	r2, #4
 8002dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa35 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002dec:	e005      	b.n	8002dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa27 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fa38 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d020      	beq.n	8002e4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01b      	beq.n	8002e4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0208 	mvn.w	r2, #8
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2204      	movs	r2, #4
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa0f 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa01 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fa12 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d020      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0210 	mvn.w	r2, #16
 8002e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9e9 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002e84:	e005      	b.n	8002e92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f9db 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f9ec 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00c      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d007      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0201 	mvn.w	r2, #1
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe f9d0 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fd24 	bl	8003928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00c      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f9bd 	bl	800327e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0220 	mvn.w	r2, #32
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fcf6 	bl	8003914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0ae      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	f200 809f 	bhi.w	800309c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	0800309d 	.word	0x0800309d
 8002f6c:	0800309d 	.word	0x0800309d
 8002f70:	0800309d 	.word	0x0800309d
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	0800309d 	.word	0x0800309d
 8002f7c:	0800309d 	.word	0x0800309d
 8002f80:	0800309d 	.word	0x0800309d
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800309d 	.word	0x0800309d
 8002f8c:	0800309d 	.word	0x0800309d
 8002f90:	0800309d 	.word	0x0800309d
 8002f94:	0800305b 	.word	0x0800305b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f9fe 	bl	80033a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0208 	orr.w	r2, r2, #8
 8002fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6999      	ldr	r1, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	619a      	str	r2, [r3, #24]
      break;
 8002fd6:	e064      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fa44 	bl	800346c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	021a      	lsls	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
      break;
 8003018:	e043      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa8f 	bl	8003544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0208 	orr.w	r2, r2, #8
 8003034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0204 	bic.w	r2, r2, #4
 8003044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69d9      	ldr	r1, [r3, #28]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
      break;
 8003058:	e023      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fad9 	bl	8003618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
      break;
 80030a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIM_ConfigClockSource+0x1c>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e0b4      	b.n	800323a <HAL_TIM_ConfigClockSource+0x186>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003108:	d03e      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0xd4>
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310e:	f200 8087 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003116:	f000 8086 	beq.w	8003226 <HAL_TIM_ConfigClockSource+0x172>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311e:	d87f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b70      	cmp	r3, #112	@ 0x70
 8003122:	d01a      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xa6>
 8003124:	2b70      	cmp	r3, #112	@ 0x70
 8003126:	d87b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b60      	cmp	r3, #96	@ 0x60
 800312a:	d050      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x11a>
 800312c:	2b60      	cmp	r3, #96	@ 0x60
 800312e:	d877      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b50      	cmp	r3, #80	@ 0x50
 8003132:	d03c      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0xfa>
 8003134:	2b50      	cmp	r3, #80	@ 0x50
 8003136:	d873      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b40      	cmp	r3, #64	@ 0x40
 800313a:	d058      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x13a>
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d86f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b30      	cmp	r3, #48	@ 0x30
 8003142:	d064      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b30      	cmp	r3, #48	@ 0x30
 8003146:	d86b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d060      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d867      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05c      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	2b10      	cmp	r3, #16
 8003156:	d05a      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	e062      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800316a:	f000 fb1f 	bl	80037ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800317c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	609a      	str	r2, [r3, #8]
      break;
 8003186:	e04f      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003198:	f000 fb08 	bl	80037ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031aa:	609a      	str	r2, [r3, #8]
      break;
 80031ac:	e03c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 fa7c 	bl	80036b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2150      	movs	r1, #80	@ 0x50
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fad5 	bl	8003776 <TIM_ITRx_SetConfig>
      break;
 80031cc:	e02c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 fa9b 	bl	8003716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2160      	movs	r1, #96	@ 0x60
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fac5 	bl	8003776 <TIM_ITRx_SetConfig>
      break;
 80031ec:	e01c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	461a      	mov	r2, r3
 80031fc:	f000 fa5c 	bl	80036b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2140      	movs	r1, #64	@ 0x40
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fab5 	bl	8003776 <TIM_ITRx_SetConfig>
      break;
 800320c:	e00c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f000 faac 	bl	8003776 <TIM_ITRx_SetConfig>
      break;
 800321e:	e003      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e000      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a37      	ldr	r2, [pc, #220]	@ (8003384 <TIM_Base_SetConfig+0xf0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00f      	beq.n	80032cc <TIM_Base_SetConfig+0x38>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b2:	d00b      	beq.n	80032cc <TIM_Base_SetConfig+0x38>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a34      	ldr	r2, [pc, #208]	@ (8003388 <TIM_Base_SetConfig+0xf4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <TIM_Base_SetConfig+0x38>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a33      	ldr	r2, [pc, #204]	@ (800338c <TIM_Base_SetConfig+0xf8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d003      	beq.n	80032cc <TIM_Base_SetConfig+0x38>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a32      	ldr	r2, [pc, #200]	@ (8003390 <TIM_Base_SetConfig+0xfc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d108      	bne.n	80032de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a28      	ldr	r2, [pc, #160]	@ (8003384 <TIM_Base_SetConfig+0xf0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01b      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ec:	d017      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a25      	ldr	r2, [pc, #148]	@ (8003388 <TIM_Base_SetConfig+0xf4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a24      	ldr	r2, [pc, #144]	@ (800338c <TIM_Base_SetConfig+0xf8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00f      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a23      	ldr	r2, [pc, #140]	@ (8003390 <TIM_Base_SetConfig+0xfc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a22      	ldr	r2, [pc, #136]	@ (8003394 <TIM_Base_SetConfig+0x100>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a21      	ldr	r2, [pc, #132]	@ (8003398 <TIM_Base_SetConfig+0x104>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a20      	ldr	r2, [pc, #128]	@ (800339c <TIM_Base_SetConfig+0x108>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a0c      	ldr	r2, [pc, #48]	@ (8003384 <TIM_Base_SetConfig+0xf0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d103      	bne.n	800335e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f043 0204 	orr.w	r2, r3, #4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	601a      	str	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800

080033a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f023 0201 	bic.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 0302 	bic.w	r3, r3, #2
 80033e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003468 <TIM_OC1_SetConfig+0xc8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d10c      	bne.n	8003416 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0308 	bic.w	r3, r3, #8
 8003402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a13      	ldr	r2, [pc, #76]	@ (8003468 <TIM_OC1_SetConfig+0xc8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d111      	bne.n	8003442 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800342c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40010000 	.word	0x40010000

0800346c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 0210 	bic.w	r2, r3, #16
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0320 	bic.w	r3, r3, #32
 80034b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003540 <TIM_OC2_SetConfig+0xd4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10d      	bne.n	80034e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a15      	ldr	r2, [pc, #84]	@ (8003540 <TIM_OC2_SetConfig+0xd4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d113      	bne.n	8003518 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40010000 	.word	0x40010000

08003544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800358c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1d      	ldr	r2, [pc, #116]	@ (8003614 <TIM_OC3_SetConfig+0xd0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10d      	bne.n	80035be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a14      	ldr	r2, [pc, #80]	@ (8003614 <TIM_OC3_SetConfig+0xd0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d113      	bne.n	80035ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	621a      	str	r2, [r3, #32]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40010000 	.word	0x40010000

08003618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	031b      	lsls	r3, r3, #12
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a10      	ldr	r2, [pc, #64]	@ (80036b4 <TIM_OC4_SetConfig+0x9c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d109      	bne.n	800368c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800367e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40010000 	.word	0x40010000

080036b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f023 0201 	bic.w	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f023 030a 	bic.w	r3, r3, #10
 80036f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b087      	sub	sp, #28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 0210 	bic.w	r2, r3, #16
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	031b      	lsls	r3, r3, #12
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003752:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	f043 0307 	orr.w	r3, r3, #7
 8003798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	609a      	str	r2, [r3, #8]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	021a      	lsls	r2, r3, #8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	609a      	str	r2, [r3, #8]
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2201      	movs	r2, #1
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a1a      	ldr	r2, [r3, #32]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	43db      	mvns	r3, r3
 800380e:	401a      	ands	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	431a      	orrs	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800384c:	2302      	movs	r3, #2
 800384e:	e050      	b.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1c      	ldr	r2, [pc, #112]	@ (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d018      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389c:	d013      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a16      	ldr	r2, [pc, #88]	@ (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d009      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a15      	ldr	r2, [pc, #84]	@ (800390c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a13      	ldr	r2, [pc, #76]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10c      	bne.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40014000 	.word	0x40014000

08003914 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e042      	b.n	80039d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fdce 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	@ 0x24
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800397e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fdd3 	bl	800452c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	@ 0x28
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d175      	bne.n	8003ae8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_UART_Transmit+0x2c>
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e06e      	b.n	8003aea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2221      	movs	r2, #33	@ 0x21
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a1a:	f7fd ffd1 	bl	80019c0 <HAL_GetTick>
 8003a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a34:	d108      	bne.n	8003a48 <HAL_UART_Transmit+0x6c>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a50:	e02e      	b.n	8003ab0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2180      	movs	r1, #128	@ 0x80
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fb37 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e03a      	b.n	8003aea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e007      	b.n	8003aa2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1cb      	bne.n	8003a52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2140      	movs	r1, #64	@ 0x40
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fb03 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e006      	b.n	8003aea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	4613      	mov	r3, r2
 8003afe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d112      	bne.n	8003b32 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_UART_Receive_IT+0x26>
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e00b      	b.n	8003b34 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	461a      	mov	r2, r3
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fb2a 	bl	8004182 <UART_Start_Receive_IT>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	e000      	b.n	8003b34 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b0ba      	sub	sp, #232	@ 0xe8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x66>
 8003b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fc07 	bl	80043ae <UART_Receive_IT>
      return;
 8003ba0:	e273      	b.n	800408a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80de 	beq.w	8003d68 <HAL_UART_IRQHandler+0x22c>
 8003bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bbc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80d1 	beq.w	8003d68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_UART_IRQHandler+0xae>
 8003bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	f043 0201 	orr.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_UART_IRQHandler+0xd2>
 8003bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	f043 0202 	orr.w	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <HAL_UART_IRQHandler+0xf6>
 8003c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f043 0204 	orr.w	r2, r3, #4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <HAL_UART_IRQHandler+0x126>
 8003c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	f043 0208 	orr.w	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 820a 	beq.w	8004080 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_UART_IRQHandler+0x14e>
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fb92 	bl	80043ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c94:	2b40      	cmp	r3, #64	@ 0x40
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x17a>
 8003cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04f      	beq.n	8003d56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fa9d 	bl	80041f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	d141      	bne.n	8003d4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3314      	adds	r3, #20
 8003cd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ce4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3314      	adds	r3, #20
 8003cf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cf6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1d9      	bne.n	8003cca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d013      	beq.n	8003d46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	4a8a      	ldr	r2, [pc, #552]	@ (8003f4c <HAL_UART_IRQHandler+0x410>)
 8003d24:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd ffca 	bl	8001cc4 <HAL_DMA_Abort_IT>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d40:	4610      	mov	r0, r2
 8003d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	e00e      	b.n	8003d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f9ac 	bl	80040a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e00a      	b.n	8003d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f9a8 	bl	80040a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d54:	e006      	b.n	8003d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f9a4 	bl	80040a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d62:	e18d      	b.n	8004080 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	bf00      	nop
    return;
 8003d66:	e18b      	b.n	8004080 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	f040 8167 	bne.w	8004040 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8160 	beq.w	8004040 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8159 	beq.w	8004040 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dae:	2b40      	cmp	r3, #64	@ 0x40
 8003db0:	f040 80ce 	bne.w	8003f50 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a9 	beq.w	8003f1c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	f080 80a2 	bcs.w	8003f1c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dde:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dea:	f000 8088 	beq.w	8003efe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	330c      	adds	r3, #12
 8003e16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1d9      	bne.n	8003dee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e1      	bne.n	8003e3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3314      	adds	r3, #20
 8003e7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3314      	adds	r3, #20
 8003e96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ea0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e3      	bne.n	8003e76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ece:	f023 0310 	bic.w	r3, r3, #16
 8003ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ee0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ee2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ee6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e3      	bne.n	8003ebc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fd fe73 	bl	8001be4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8cf 	bl	80040b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f1a:	e0b3      	b.n	8004084 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f24:	429a      	cmp	r2, r3
 8003f26:	f040 80ad 	bne.w	8004084 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f34:	f040 80a6 	bne.w	8004084 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8b7 	bl	80040b8 <HAL_UARTEx_RxEventCallback>
      return;
 8003f4a:	e09b      	b.n	8004084 <HAL_UART_IRQHandler+0x548>
 8003f4c:	080042bd 	.word	0x080042bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 808e 	beq.w	8004088 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003f6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8089 	beq.w	8004088 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e3      	bne.n	8003f76 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e3      	bne.n	8003fae <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	60fb      	str	r3, [r7, #12]
   return(result);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004018:	61fa      	str	r2, [r7, #28]
 800401a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	617b      	str	r3, [r7, #20]
   return(result);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e3      	bne.n	8003ff4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004032:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f83d 	bl	80040b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800403e:	e023      	b.n	8004088 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_UART_IRQHandler+0x524>
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f940 	bl	80042de <UART_Transmit_IT>
    return;
 800405e:	e014      	b.n	800408a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00e      	beq.n	800408a <HAL_UART_IRQHandler+0x54e>
 800406c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f980 	bl	800437e <UART_EndTransmit_IT>
    return;
 800407e:	e004      	b.n	800408a <HAL_UART_IRQHandler+0x54e>
    return;
 8004080:	bf00      	nop
 8004082:	e002      	b.n	800408a <HAL_UART_IRQHandler+0x54e>
      return;
 8004084:	bf00      	nop
 8004086:	e000      	b.n	800408a <HAL_UART_IRQHandler+0x54e>
      return;
 8004088:	bf00      	nop
  }
}
 800408a:	37e8      	adds	r7, #232	@ 0xe8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e0:	e03b      	b.n	800415a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d037      	beq.n	800415a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7fd fc69 	bl	80019c0 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <UART_WaitOnFlagUntilTimeout+0x30>
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e03a      	b.n	800417a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d023      	beq.n	800415a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d020      	beq.n	800415a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b40      	cmp	r3, #64	@ 0x40
 800411c:	d01d      	beq.n	800415a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b08      	cmp	r3, #8
 800412a:	d116      	bne.n	800415a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f857 	bl	80041f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2208      	movs	r2, #8
 800414c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e00f      	b.n	800417a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	bf0c      	ite	eq
 800416a:	2301      	moveq	r3, #1
 800416c:	2300      	movne	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	429a      	cmp	r2, r3
 8004176:	d0b4      	beq.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	4613      	mov	r3, r2
 800418e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2222      	movs	r2, #34	@ 0x22
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d007      	beq.n	80041c8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0220 	orr.w	r2, r2, #32
 80041e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b095      	sub	sp, #84	@ 0x54
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800421e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e5      	bne.n	80041fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	61fb      	str	r3, [r7, #28]
   return(result);
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3314      	adds	r3, #20
 8004250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004254:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e5      	bne.n	8004232 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	2b01      	cmp	r3, #1
 800426c:	d119      	bne.n	80042a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	60bb      	str	r3, [r7, #8]
   return(result);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f023 0310 	bic.w	r3, r3, #16
 8004284:	647b      	str	r3, [r7, #68]	@ 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800428e:	61ba      	str	r2, [r7, #24]
 8004290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	613b      	str	r3, [r7, #16]
   return(result);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e5      	bne.n	800426e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042b0:	bf00      	nop
 80042b2:	3754      	adds	r7, #84	@ 0x54
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff fee7 	bl	80040a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b21      	cmp	r3, #33	@ 0x21
 80042f0:	d13e      	bne.n	8004370 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	d114      	bne.n	8004326 <UART_Transmit_IT+0x48>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d110      	bne.n	8004326 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004318:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	1c9a      	adds	r2, r3, #2
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	621a      	str	r2, [r3, #32]
 8004324:	e008      	b.n	8004338 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6211      	str	r1, [r2, #32]
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29b      	uxth	r3, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4619      	mov	r1, r3
 8004346:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10f      	bne.n	800436c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800435a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800436a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004394:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fe76 	bl	8004090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b08c      	sub	sp, #48	@ 0x30
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b22      	cmp	r3, #34	@ 0x22
 80043c8:	f040 80aa 	bne.w	8004520 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d4:	d115      	bne.n	8004402 <UART_Receive_IT+0x54>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d111      	bne.n	8004402 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004400:	e024      	b.n	800444c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004406:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004410:	d007      	beq.n	8004422 <UART_Receive_IT+0x74>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <UART_Receive_IT+0x82>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e008      	b.n	8004442 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800443c:	b2da      	uxtb	r2, r3
 800443e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004440:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4619      	mov	r1, r3
 800445a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800445c:	2b00      	cmp	r3, #0
 800445e:	d15d      	bne.n	800451c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0220 	bic.w	r2, r2, #32
 800446e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800447e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d135      	bne.n	8004512 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	613b      	str	r3, [r7, #16]
   return(result);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f023 0310 	bic.w	r3, r3, #16
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044cc:	623a      	str	r2, [r7, #32]
 80044ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	69f9      	ldr	r1, [r7, #28]
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d10a      	bne.n	8004504 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff fdd4 	bl	80040b8 <HAL_UARTEx_RxEventCallback>
 8004510:	e002      	b.n	8004518 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fa12 	bl	800093c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e002      	b.n	8004522 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	e000      	b.n	8004522 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004520:	2302      	movs	r3, #2
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	3730      	adds	r7, #48	@ 0x30
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800452c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004530:	b0c0      	sub	sp, #256	@ 0x100
 8004532:	af00      	add	r7, sp, #0
 8004534:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004548:	68d9      	ldr	r1, [r3, #12]
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	ea40 0301 	orr.w	r3, r0, r1
 8004554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	431a      	orrs	r2, r3
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	431a      	orrs	r2, r3
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004584:	f021 010c 	bic.w	r1, r1, #12
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004592:	430b      	orrs	r3, r1
 8004594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a6:	6999      	ldr	r1, [r3, #24]
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	ea40 0301 	orr.w	r3, r0, r1
 80045b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b8f      	ldr	r3, [pc, #572]	@ (80047f8 <UART_SetConfig+0x2cc>)
 80045bc:	429a      	cmp	r2, r3
 80045be:	d005      	beq.n	80045cc <UART_SetConfig+0xa0>
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b8d      	ldr	r3, [pc, #564]	@ (80047fc <UART_SetConfig+0x2d0>)
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d104      	bne.n	80045d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045cc:	f7fe f9be 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 80045d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045d4:	e003      	b.n	80045de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045d6:	f7fe f9a5 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 80045da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e8:	f040 810c 	bne.w	8004804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045fe:	4622      	mov	r2, r4
 8004600:	462b      	mov	r3, r5
 8004602:	1891      	adds	r1, r2, r2
 8004604:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004606:	415b      	adcs	r3, r3
 8004608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800460e:	4621      	mov	r1, r4
 8004610:	eb12 0801 	adds.w	r8, r2, r1
 8004614:	4629      	mov	r1, r5
 8004616:	eb43 0901 	adc.w	r9, r3, r1
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800462e:	4690      	mov	r8, r2
 8004630:	4699      	mov	r9, r3
 8004632:	4623      	mov	r3, r4
 8004634:	eb18 0303 	adds.w	r3, r8, r3
 8004638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800463c:	462b      	mov	r3, r5
 800463e:	eb49 0303 	adc.w	r3, r9, r3
 8004642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004652:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800465a:	460b      	mov	r3, r1
 800465c:	18db      	adds	r3, r3, r3
 800465e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004660:	4613      	mov	r3, r2
 8004662:	eb42 0303 	adc.w	r3, r2, r3
 8004666:	657b      	str	r3, [r7, #84]	@ 0x54
 8004668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800466c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004670:	f7fb fe0e 	bl	8000290 <__aeabi_uldivmod>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4b61      	ldr	r3, [pc, #388]	@ (8004800 <UART_SetConfig+0x2d4>)
 800467a:	fba3 2302 	umull	r2, r3, r3, r2
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	011c      	lsls	r4, r3, #4
 8004682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004686:	2200      	movs	r2, #0
 8004688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800468c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004694:	4642      	mov	r2, r8
 8004696:	464b      	mov	r3, r9
 8004698:	1891      	adds	r1, r2, r2
 800469a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800469c:	415b      	adcs	r3, r3
 800469e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046a4:	4641      	mov	r1, r8
 80046a6:	eb12 0a01 	adds.w	sl, r2, r1
 80046aa:	4649      	mov	r1, r9
 80046ac:	eb43 0b01 	adc.w	fp, r3, r1
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c4:	4692      	mov	sl, r2
 80046c6:	469b      	mov	fp, r3
 80046c8:	4643      	mov	r3, r8
 80046ca:	eb1a 0303 	adds.w	r3, sl, r3
 80046ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046d2:	464b      	mov	r3, r9
 80046d4:	eb4b 0303 	adc.w	r3, fp, r3
 80046d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046f0:	460b      	mov	r3, r1
 80046f2:	18db      	adds	r3, r3, r3
 80046f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046f6:	4613      	mov	r3, r2
 80046f8:	eb42 0303 	adc.w	r3, r2, r3
 80046fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004706:	f7fb fdc3 	bl	8000290 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4611      	mov	r1, r2
 8004710:	4b3b      	ldr	r3, [pc, #236]	@ (8004800 <UART_SetConfig+0x2d4>)
 8004712:	fba3 2301 	umull	r2, r3, r3, r1
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2264      	movs	r2, #100	@ 0x64
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	1acb      	subs	r3, r1, r3
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004726:	4b36      	ldr	r3, [pc, #216]	@ (8004800 <UART_SetConfig+0x2d4>)
 8004728:	fba3 2302 	umull	r2, r3, r3, r2
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004734:	441c      	add	r4, r3
 8004736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473a:	2200      	movs	r2, #0
 800473c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004740:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004748:	4642      	mov	r2, r8
 800474a:	464b      	mov	r3, r9
 800474c:	1891      	adds	r1, r2, r2
 800474e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004750:	415b      	adcs	r3, r3
 8004752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004758:	4641      	mov	r1, r8
 800475a:	1851      	adds	r1, r2, r1
 800475c:	6339      	str	r1, [r7, #48]	@ 0x30
 800475e:	4649      	mov	r1, r9
 8004760:	414b      	adcs	r3, r1
 8004762:	637b      	str	r3, [r7, #52]	@ 0x34
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004770:	4659      	mov	r1, fp
 8004772:	00cb      	lsls	r3, r1, #3
 8004774:	4651      	mov	r1, sl
 8004776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477a:	4651      	mov	r1, sl
 800477c:	00ca      	lsls	r2, r1, #3
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	4603      	mov	r3, r0
 8004784:	4642      	mov	r2, r8
 8004786:	189b      	adds	r3, r3, r2
 8004788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800478c:	464b      	mov	r3, r9
 800478e:	460a      	mov	r2, r1
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047ac:	460b      	mov	r3, r1
 80047ae:	18db      	adds	r3, r3, r3
 80047b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b2:	4613      	mov	r3, r2
 80047b4:	eb42 0303 	adc.w	r3, r2, r3
 80047b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047c2:	f7fb fd65 	bl	8000290 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <UART_SetConfig+0x2d4>)
 80047cc:	fba3 1302 	umull	r1, r3, r3, r2
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	2164      	movs	r1, #100	@ 0x64
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	3332      	adds	r3, #50	@ 0x32
 80047de:	4a08      	ldr	r2, [pc, #32]	@ (8004800 <UART_SetConfig+0x2d4>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 0207 	and.w	r2, r3, #7
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4422      	add	r2, r4
 80047f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047f4:	e106      	b.n	8004a04 <UART_SetConfig+0x4d8>
 80047f6:	bf00      	nop
 80047f8:	40011000 	.word	0x40011000
 80047fc:	40011400 	.word	0x40011400
 8004800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004808:	2200      	movs	r2, #0
 800480a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800480e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004816:	4642      	mov	r2, r8
 8004818:	464b      	mov	r3, r9
 800481a:	1891      	adds	r1, r2, r2
 800481c:	6239      	str	r1, [r7, #32]
 800481e:	415b      	adcs	r3, r3
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
 8004822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004826:	4641      	mov	r1, r8
 8004828:	1854      	adds	r4, r2, r1
 800482a:	4649      	mov	r1, r9
 800482c:	eb43 0501 	adc.w	r5, r3, r1
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	00eb      	lsls	r3, r5, #3
 800483a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800483e:	00e2      	lsls	r2, r4, #3
 8004840:	4614      	mov	r4, r2
 8004842:	461d      	mov	r5, r3
 8004844:	4643      	mov	r3, r8
 8004846:	18e3      	adds	r3, r4, r3
 8004848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800484c:	464b      	mov	r3, r9
 800484e:	eb45 0303 	adc.w	r3, r5, r3
 8004852:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004862:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004872:	4629      	mov	r1, r5
 8004874:	008b      	lsls	r3, r1, #2
 8004876:	4621      	mov	r1, r4
 8004878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800487c:	4621      	mov	r1, r4
 800487e:	008a      	lsls	r2, r1, #2
 8004880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004884:	f7fb fd04 	bl	8000290 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4b60      	ldr	r3, [pc, #384]	@ (8004a10 <UART_SetConfig+0x4e4>)
 800488e:	fba3 2302 	umull	r2, r3, r3, r2
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	011c      	lsls	r4, r3, #4
 8004896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800489a:	2200      	movs	r2, #0
 800489c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048a8:	4642      	mov	r2, r8
 80048aa:	464b      	mov	r3, r9
 80048ac:	1891      	adds	r1, r2, r2
 80048ae:	61b9      	str	r1, [r7, #24]
 80048b0:	415b      	adcs	r3, r3
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b8:	4641      	mov	r1, r8
 80048ba:	1851      	adds	r1, r2, r1
 80048bc:	6139      	str	r1, [r7, #16]
 80048be:	4649      	mov	r1, r9
 80048c0:	414b      	adcs	r3, r1
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d0:	4659      	mov	r1, fp
 80048d2:	00cb      	lsls	r3, r1, #3
 80048d4:	4651      	mov	r1, sl
 80048d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048da:	4651      	mov	r1, sl
 80048dc:	00ca      	lsls	r2, r1, #3
 80048de:	4610      	mov	r0, r2
 80048e0:	4619      	mov	r1, r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	4642      	mov	r2, r8
 80048e6:	189b      	adds	r3, r3, r2
 80048e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048ec:	464b      	mov	r3, r9
 80048ee:	460a      	mov	r2, r1
 80048f0:	eb42 0303 	adc.w	r3, r2, r3
 80048f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004902:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004910:	4649      	mov	r1, r9
 8004912:	008b      	lsls	r3, r1, #2
 8004914:	4641      	mov	r1, r8
 8004916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491a:	4641      	mov	r1, r8
 800491c:	008a      	lsls	r2, r1, #2
 800491e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004922:	f7fb fcb5 	bl	8000290 <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4611      	mov	r1, r2
 800492c:	4b38      	ldr	r3, [pc, #224]	@ (8004a10 <UART_SetConfig+0x4e4>)
 800492e:	fba3 2301 	umull	r2, r3, r3, r1
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2264      	movs	r2, #100	@ 0x64
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	1acb      	subs	r3, r1, r3
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	3332      	adds	r3, #50	@ 0x32
 8004940:	4a33      	ldr	r2, [pc, #204]	@ (8004a10 <UART_SetConfig+0x4e4>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800494c:	441c      	add	r4, r3
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	673b      	str	r3, [r7, #112]	@ 0x70
 8004956:	677a      	str	r2, [r7, #116]	@ 0x74
 8004958:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800495c:	4642      	mov	r2, r8
 800495e:	464b      	mov	r3, r9
 8004960:	1891      	adds	r1, r2, r2
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	415b      	adcs	r3, r3
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800496c:	4641      	mov	r1, r8
 800496e:	1851      	adds	r1, r2, r1
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	4649      	mov	r1, r9
 8004974:	414b      	adcs	r3, r1
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004984:	4659      	mov	r1, fp
 8004986:	00cb      	lsls	r3, r1, #3
 8004988:	4651      	mov	r1, sl
 800498a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800498e:	4651      	mov	r1, sl
 8004990:	00ca      	lsls	r2, r1, #3
 8004992:	4610      	mov	r0, r2
 8004994:	4619      	mov	r1, r3
 8004996:	4603      	mov	r3, r0
 8004998:	4642      	mov	r2, r8
 800499a:	189b      	adds	r3, r3, r2
 800499c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800499e:	464b      	mov	r3, r9
 80049a0:	460a      	mov	r2, r1
 80049a2:	eb42 0303 	adc.w	r3, r2, r3
 80049a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049c0:	4649      	mov	r1, r9
 80049c2:	008b      	lsls	r3, r1, #2
 80049c4:	4641      	mov	r1, r8
 80049c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ca:	4641      	mov	r1, r8
 80049cc:	008a      	lsls	r2, r1, #2
 80049ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049d2:	f7fb fc5d 	bl	8000290 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4b0d      	ldr	r3, [pc, #52]	@ (8004a10 <UART_SetConfig+0x4e4>)
 80049dc:	fba3 1302 	umull	r1, r3, r3, r2
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	2164      	movs	r1, #100	@ 0x64
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	3332      	adds	r3, #50	@ 0x32
 80049ee:	4a08      	ldr	r2, [pc, #32]	@ (8004a10 <UART_SetConfig+0x4e4>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	f003 020f 	and.w	r2, r3, #15
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4422      	add	r2, r4
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a10:	51eb851f 	.word	0x51eb851f

08004a14 <__NVIC_SetPriority>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	6039      	str	r1, [r7, #0]
 8004a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	db0a      	blt.n	8004a3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	490c      	ldr	r1, [pc, #48]	@ (8004a60 <__NVIC_SetPriority+0x4c>)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	0112      	lsls	r2, r2, #4
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	440b      	add	r3, r1
 8004a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a3c:	e00a      	b.n	8004a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	4908      	ldr	r1, [pc, #32]	@ (8004a64 <__NVIC_SetPriority+0x50>)
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	3b04      	subs	r3, #4
 8004a4c:	0112      	lsls	r2, r2, #4
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	440b      	add	r3, r1
 8004a52:	761a      	strb	r2, [r3, #24]
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	e000e100 	.word	0xe000e100
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <SysTick_Handler+0x1c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a70:	f001 fd46 	bl	8006500 <xTaskGetSchedulerState>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d001      	beq.n	8004a7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a7a:	f002 fb3d 	bl	80070f8 <xPortSysTickHandler>
  }
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	e000e010 	.word	0xe000e010

08004a88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	f06f 0004 	mvn.w	r0, #4
 8004a92:	f7ff ffbf 	bl	8004a14 <__NVIC_SetPriority>
#endif
}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa2:	f3ef 8305 	mrs	r3, IPSR
 8004aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8004aa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004aae:	f06f 0305 	mvn.w	r3, #5
 8004ab2:	607b      	str	r3, [r7, #4]
 8004ab4:	e00c      	b.n	8004ad0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <osKernelInitialize+0x44>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004abe:	4b08      	ldr	r3, [pc, #32]	@ (8004ae0 <osKernelInitialize+0x44>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	e002      	b.n	8004ad0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ad0:	687b      	ldr	r3, [r7, #4]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000328 	.word	0x20000328

08004ae4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aea:	f3ef 8305 	mrs	r3, IPSR
 8004aee:	603b      	str	r3, [r7, #0]
  return(result);
 8004af0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <osKernelStart+0x1a>
    stat = osErrorISR;
 8004af6:	f06f 0305 	mvn.w	r3, #5
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	e010      	b.n	8004b20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004afe:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <osKernelStart+0x48>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d109      	bne.n	8004b1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b06:	f7ff ffbf 	bl	8004a88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b0a:	4b08      	ldr	r3, [pc, #32]	@ (8004b2c <osKernelStart+0x48>)
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b10:	f001 f892 	bl	8005c38 <vTaskStartScheduler>
      stat = osOK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	607b      	str	r3, [r7, #4]
 8004b18:	e002      	b.n	8004b20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b20:	687b      	ldr	r3, [r7, #4]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000328 	.word	0x20000328

08004b30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08e      	sub	sp, #56	@ 0x38
 8004b34:	af04      	add	r7, sp, #16
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b40:	f3ef 8305 	mrs	r3, IPSR
 8004b44:	617b      	str	r3, [r7, #20]
  return(result);
 8004b46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d17e      	bne.n	8004c4a <osThreadNew+0x11a>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d07b      	beq.n	8004c4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b56:	2318      	movs	r3, #24
 8004b58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d045      	beq.n	8004bf6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <osThreadNew+0x48>
        name = attr->name;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <osThreadNew+0x6e>
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	2b38      	cmp	r3, #56	@ 0x38
 8004b90:	d805      	bhi.n	8004b9e <osThreadNew+0x6e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <osThreadNew+0x72>
        return (NULL);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e054      	b.n	8004c4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00e      	beq.n	8004bd8 <osThreadNew+0xa8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2ba7      	cmp	r3, #167	@ 0xa7
 8004bc0:	d90a      	bls.n	8004bd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d006      	beq.n	8004bd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <osThreadNew+0xa8>
        mem = 1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e010      	b.n	8004bfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10c      	bne.n	8004bfa <osThreadNew+0xca>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <osThreadNew+0xca>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d104      	bne.n	8004bfa <osThreadNew+0xca>
          mem = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61bb      	str	r3, [r7, #24]
 8004bf4:	e001      	b.n	8004bfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d110      	bne.n	8004c22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c08:	9202      	str	r2, [sp, #8]
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fe1a 	bl	8005850 <xTaskCreateStatic>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	e013      	b.n	8004c4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d110      	bne.n	8004c4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fe68 	bl	8005910 <xTaskCreate>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d001      	beq.n	8004c4a <osThreadNew+0x11a>
            hTask = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c4a:	693b      	ldr	r3, [r7, #16]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3728      	adds	r7, #40	@ 0x28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5c:	f3ef 8305 	mrs	r3, IPSR
 8004c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <osDelay+0x1c>
    stat = osErrorISR;
 8004c68:	f06f 0305 	mvn.w	r3, #5
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e007      	b.n	8004c80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 ffa6 	bl	8005bcc <vTaskDelay>
    }
  }

  return (stat);
 8004c80:	68fb      	ldr	r3, [r7, #12]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a07      	ldr	r2, [pc, #28]	@ (8004cb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4a06      	ldr	r2, [pc, #24]	@ (8004cbc <vApplicationGetIdleTaskMemory+0x30>)
 8004ca2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2280      	movs	r2, #128	@ 0x80
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	2000032c 	.word	0x2000032c
 8004cbc:	200003d4 	.word	0x200003d4

08004cc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a07      	ldr	r2, [pc, #28]	@ (8004cec <vApplicationGetTimerTaskMemory+0x2c>)
 8004cd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4a06      	ldr	r2, [pc, #24]	@ (8004cf0 <vApplicationGetTimerTaskMemory+0x30>)
 8004cd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cde:	601a      	str	r2, [r3, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	200005d4 	.word	0x200005d4
 8004cf0:	2000067c 	.word	0x2000067c

08004cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f103 0208 	add.w	r2, r3, #8
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f103 0208 	add.w	r2, r3, #8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f103 0208 	add.w	r2, r3, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d103      	bne.n	8004db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e00c      	b.n	8004dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3308      	adds	r3, #8
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e002      	b.n	8004dc4 <vListInsert+0x2e>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d2f6      	bcs.n	8004dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6892      	ldr	r2, [r2, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6852      	ldr	r2, [r2, #4]
 8004e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d103      	bne.n	8004e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	1e5a      	subs	r2, r3, #1
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e88:	f002 f8a6 	bl	8006fd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	441a      	add	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	68f9      	ldr	r1, [r7, #12]
 8004ebc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	22ff      	movs	r2, #255	@ 0xff
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	22ff      	movs	r2, #255	@ 0xff
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d114      	bne.n	8004f08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01a      	beq.n	8004f1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3310      	adds	r3, #16
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 f942 	bl	8006174 <xTaskRemoveFromEventList>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d012      	beq.n	8004f1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f2c <xQueueGenericReset+0xd0>)
 8004ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	e009      	b.n	8004f1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3310      	adds	r3, #16
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fef1 	bl	8004cf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3324      	adds	r3, #36	@ 0x24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff feec 	bl	8004cf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f1c:	f002 f88e 	bl	800703c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f20:	2301      	movs	r3, #1
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08e      	sub	sp, #56	@ 0x38
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <xQueueGenericCreateStatic+0x56>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <xQueueGenericCreateStatic+0x5a>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <xQueueGenericCreateStatic+0x5c>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	623b      	str	r3, [r7, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <xQueueGenericCreateStatic+0x84>
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <xQueueGenericCreateStatic+0x88>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <xQueueGenericCreateStatic+0x8a>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10b      	bne.n	8004fd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	61fb      	str	r3, [r7, #28]
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	e7fd      	b.n	8004fd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fd6:	2350      	movs	r3, #80	@ 0x50
 8004fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b50      	cmp	r3, #80	@ 0x50
 8004fde:	d00b      	beq.n	8004ff8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	61bb      	str	r3, [r7, #24]
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ff8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800500c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f805 	bl	800502a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005022:	4618      	mov	r0, r3
 8005024:	3730      	adds	r7, #48	@ 0x30
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e002      	b.n	800504c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005058:	2101      	movs	r1, #1
 800505a:	69b8      	ldr	r0, [r7, #24]
 800505c:	f7ff fefe 	bl	8004e5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	78fa      	ldrb	r2, [r7, #3]
 8005064:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08e      	sub	sp, #56	@ 0x38
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800507e:	2300      	movs	r3, #0
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xQueueGenericSend+0x34>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <xQueueGenericSend+0x42>
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <xQueueGenericSend+0x46>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <xQueueGenericSend+0x48>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xQueueGenericSend+0x64>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d103      	bne.n	80050e2 <xQueueGenericSend+0x72>
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <xQueueGenericSend+0x76>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xQueueGenericSend+0x78>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <xQueueGenericSend+0x94>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	623b      	str	r3, [r7, #32]
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005104:	f001 f9fc 	bl	8006500 <xTaskGetSchedulerState>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <xQueueGenericSend+0xa4>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <xQueueGenericSend+0xa8>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <xQueueGenericSend+0xaa>
 8005118:	2300      	movs	r3, #0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <xQueueGenericSend+0xc6>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	61fb      	str	r3, [r7, #28]
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	e7fd      	b.n	8005132 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005136:	f001 ff4f 	bl	8006fd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <xQueueGenericSend+0xdc>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d129      	bne.n	80051a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005152:	f000 fa0f 	bl	8005574 <prvCopyDataToQueue>
 8005156:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d010      	beq.n	8005182 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	3324      	adds	r3, #36	@ 0x24
 8005164:	4618      	mov	r0, r3
 8005166:	f001 f805 	bl	8006174 <xTaskRemoveFromEventList>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d013      	beq.n	8005198 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005170:	4b3f      	ldr	r3, [pc, #252]	@ (8005270 <xQueueGenericSend+0x200>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	e00a      	b.n	8005198 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005188:	4b39      	ldr	r3, [pc, #228]	@ (8005270 <xQueueGenericSend+0x200>)
 800518a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005198:	f001 ff50 	bl	800703c <vPortExitCritical>
				return pdPASS;
 800519c:	2301      	movs	r3, #1
 800519e:	e063      	b.n	8005268 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051a6:	f001 ff49 	bl	800703c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e05c      	b.n	8005268 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 f83f 	bl	800623c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051be:	2301      	movs	r3, #1
 80051c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051c2:	f001 ff3b 	bl	800703c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051c6:	f000 fda7 	bl	8005d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ca:	f001 ff05 	bl	8006fd8 <vPortEnterCritical>
 80051ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051d4:	b25b      	sxtb	r3, r3
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d103      	bne.n	80051e4 <xQueueGenericSend+0x174>
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d103      	bne.n	80051fa <xQueueGenericSend+0x18a>
 80051f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051fa:	f001 ff1f 	bl	800703c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051fe:	1d3a      	adds	r2, r7, #4
 8005200:	f107 0314 	add.w	r3, r7, #20
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f001 f82e 	bl	8006268 <xTaskCheckForTimeOut>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d124      	bne.n	800525c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005214:	f000 faa6 	bl	8005764 <prvIsQueueFull>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d018      	beq.n	8005250 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	3310      	adds	r3, #16
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f000 ff52 	bl	80060d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800522c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800522e:	f000 fa31 	bl	8005694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005232:	f000 fd7f 	bl	8005d34 <xTaskResumeAll>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f47f af7c 	bne.w	8005136 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800523e:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <xQueueGenericSend+0x200>)
 8005240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	e772      	b.n	8005136 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005252:	f000 fa1f 	bl	8005694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005256:	f000 fd6d 	bl	8005d34 <xTaskResumeAll>
 800525a:	e76c      	b.n	8005136 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800525c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800525e:	f000 fa19 	bl	8005694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005262:	f000 fd67 	bl	8005d34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005268:	4618      	mov	r0, r3
 800526a:	3738      	adds	r7, #56	@ 0x38
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b090      	sub	sp, #64	@ 0x40
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10b      	bne.n	80052a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <xQueueGenericSendFromISR+0x3e>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <xQueueGenericSendFromISR+0x42>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <xQueueGenericSendFromISR+0x44>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d103      	bne.n	80052e2 <xQueueGenericSendFromISR+0x6e>
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <xQueueGenericSendFromISR+0x72>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <xQueueGenericSendFromISR+0x74>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10b      	bne.n	8005304 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	623b      	str	r3, [r7, #32]
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	e7fd      	b.n	8005300 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005304:	f001 ff48 	bl	8007198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005308:	f3ef 8211 	mrs	r2, BASEPRI
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	61fa      	str	r2, [r7, #28]
 800531e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005320:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005322:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532c:	429a      	cmp	r2, r3
 800532e:	d302      	bcc.n	8005336 <xQueueGenericSendFromISR+0xc2>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d12f      	bne.n	8005396 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005338:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800533c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800534c:	f000 f912 	bl	8005574 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005350:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d112      	bne.n	8005380 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	d016      	beq.n	8005390 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005364:	3324      	adds	r3, #36	@ 0x24
 8005366:	4618      	mov	r0, r3
 8005368:	f000 ff04 	bl	8006174 <xTaskRemoveFromEventList>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00e      	beq.n	8005390 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e007      	b.n	8005390 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005380:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005384:	3301      	adds	r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	b25a      	sxtb	r2, r3
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005390:	2301      	movs	r3, #1
 8005392:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005394:	e001      	b.n	800539a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005396:	2300      	movs	r3, #0
 8005398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3740      	adds	r7, #64	@ 0x40
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	@ 0x30
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <xQueueReceive+0x32>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	623b      	str	r3, [r7, #32]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d103      	bne.n	80053f0 <xQueueReceive+0x40>
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <xQueueReceive+0x44>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <xQueueReceive+0x46>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <xQueueReceive+0x62>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	61fb      	str	r3, [r7, #28]
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005412:	f001 f875 	bl	8006500 <xTaskGetSchedulerState>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <xQueueReceive+0x72>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <xQueueReceive+0x76>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <xQueueReceive+0x78>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <xQueueReceive+0x94>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	61bb      	str	r3, [r7, #24]
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005444:	f001 fdc8 	bl	8006fd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01f      	beq.n	8005494 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005458:	f000 f8f6 	bl	8005648 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00f      	beq.n	800548c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800546c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546e:	3310      	adds	r3, #16
 8005470:	4618      	mov	r0, r3
 8005472:	f000 fe7f 	bl	8006174 <xTaskRemoveFromEventList>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800547c:	4b3c      	ldr	r3, [pc, #240]	@ (8005570 <xQueueReceive+0x1c0>)
 800547e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800548c:	f001 fdd6 	bl	800703c <vPortExitCritical>
				return pdPASS;
 8005490:	2301      	movs	r3, #1
 8005492:	e069      	b.n	8005568 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800549a:	f001 fdcf 	bl	800703c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800549e:	2300      	movs	r3, #0
 80054a0:	e062      	b.n	8005568 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d106      	bne.n	80054b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054a8:	f107 0310 	add.w	r3, r7, #16
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fec5 	bl	800623c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054b2:	2301      	movs	r3, #1
 80054b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054b6:	f001 fdc1 	bl	800703c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ba:	f000 fc2d 	bl	8005d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054be:	f001 fd8b 	bl	8006fd8 <vPortEnterCritical>
 80054c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054c8:	b25b      	sxtb	r3, r3
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ce:	d103      	bne.n	80054d8 <xQueueReceive+0x128>
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054de:	b25b      	sxtb	r3, r3
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d103      	bne.n	80054ee <xQueueReceive+0x13e>
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054ee:	f001 fda5 	bl	800703c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f2:	1d3a      	adds	r2, r7, #4
 80054f4:	f107 0310 	add.w	r3, r7, #16
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 feb4 	bl	8006268 <xTaskCheckForTimeOut>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d123      	bne.n	800554e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005508:	f000 f916 	bl	8005738 <prvIsQueueEmpty>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d017      	beq.n	8005542 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005514:	3324      	adds	r3, #36	@ 0x24
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4611      	mov	r1, r2
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fdd8 	bl	80060d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005520:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005522:	f000 f8b7 	bl	8005694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005526:	f000 fc05 	bl	8005d34 <xTaskResumeAll>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d189      	bne.n	8005444 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005530:	4b0f      	ldr	r3, [pc, #60]	@ (8005570 <xQueueReceive+0x1c0>)
 8005532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	e780      	b.n	8005444 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005544:	f000 f8a6 	bl	8005694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005548:	f000 fbf4 	bl	8005d34 <xTaskResumeAll>
 800554c:	e77a      	b.n	8005444 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800554e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005550:	f000 f8a0 	bl	8005694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005554:	f000 fbee 	bl	8005d34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800555a:	f000 f8ed 	bl	8005738 <prvIsQueueEmpty>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	f43f af6f 	beq.w	8005444 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005566:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005568:	4618      	mov	r0, r3
 800556a:	3730      	adds	r7, #48	@ 0x30
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10d      	bne.n	80055ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d14d      	bne.n	8005636 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 ffcc 	bl	800653c <xTaskPriorityDisinherit>
 80055a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	e043      	b.n	8005636 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d119      	bne.n	80055e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6858      	ldr	r0, [r3, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	461a      	mov	r2, r3
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	f002 faf3 	bl	8007baa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	441a      	add	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d32b      	bcc.n	8005636 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	e026      	b.n	8005636 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68d8      	ldr	r0, [r3, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	461a      	mov	r2, r3
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	f002 fad9 	bl	8007baa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	425b      	negs	r3, r3
 8005602:	441a      	add	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d207      	bcs.n	8005624 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	425b      	negs	r3, r3
 800561e:	441a      	add	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d105      	bne.n	8005636 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	3b01      	subs	r3, #1
 8005634:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800563e:	697b      	ldr	r3, [r7, #20]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d018      	beq.n	800568c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	441a      	add	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d303      	bcc.n	800567c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68d9      	ldr	r1, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005684:	461a      	mov	r2, r3
 8005686:	6838      	ldr	r0, [r7, #0]
 8005688:	f002 fa8f 	bl	8007baa <memcpy>
	}
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800569c:	f001 fc9c 	bl	8006fd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056a8:	e011      	b.n	80056ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d012      	beq.n	80056d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3324      	adds	r3, #36	@ 0x24
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fd5c 	bl	8006174 <xTaskRemoveFromEventList>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056c2:	f000 fe35 	bl	8006330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	dce9      	bgt.n	80056aa <prvUnlockQueue+0x16>
 80056d6:	e000      	b.n	80056da <prvUnlockQueue+0x46>
					break;
 80056d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	22ff      	movs	r2, #255	@ 0xff
 80056de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056e2:	f001 fcab 	bl	800703c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056e6:	f001 fc77 	bl	8006fd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056f2:	e011      	b.n	8005718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d012      	beq.n	8005722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3310      	adds	r3, #16
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fd37 	bl	8006174 <xTaskRemoveFromEventList>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800570c:	f000 fe10 	bl	8006330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005710:	7bbb      	ldrb	r3, [r7, #14]
 8005712:	3b01      	subs	r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800571c:	2b00      	cmp	r3, #0
 800571e:	dce9      	bgt.n	80056f4 <prvUnlockQueue+0x60>
 8005720:	e000      	b.n	8005724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	22ff      	movs	r2, #255	@ 0xff
 8005728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800572c:	f001 fc86 	bl	800703c <vPortExitCritical>
}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005740:	f001 fc4a 	bl	8006fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800574c:	2301      	movs	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	e001      	b.n	8005756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005756:	f001 fc71 	bl	800703c <vPortExitCritical>

	return xReturn;
 800575a:	68fb      	ldr	r3, [r7, #12]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800576c:	f001 fc34 	bl	8006fd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005778:	429a      	cmp	r2, r3
 800577a:	d102      	bne.n	8005782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e001      	b.n	8005786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005786:	f001 fc59 	bl	800703c <vPortExitCritical>

	return xReturn;
 800578a:	68fb      	ldr	r3, [r7, #12]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e014      	b.n	80057ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057a4:	4a0f      	ldr	r2, [pc, #60]	@ (80057e4 <vQueueAddToRegistry+0x50>)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057b0:	490c      	ldr	r1, [pc, #48]	@ (80057e4 <vQueueAddToRegistry+0x50>)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057ba:	4a0a      	ldr	r2, [pc, #40]	@ (80057e4 <vQueueAddToRegistry+0x50>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057c6:	e006      	b.n	80057d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b07      	cmp	r3, #7
 80057d2:	d9e7      	bls.n	80057a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000a7c 	.word	0x20000a7c

080057e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057f8:	f001 fbee 	bl	8006fd8 <vPortEnterCritical>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005802:	b25b      	sxtb	r3, r3
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d103      	bne.n	8005812 <vQueueWaitForMessageRestricted+0x2a>
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005818:	b25b      	sxtb	r3, r3
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d103      	bne.n	8005828 <vQueueWaitForMessageRestricted+0x40>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005828:	f001 fc08 	bl	800703c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	3324      	adds	r3, #36	@ 0x24
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fc6d 	bl	800611c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005842:	6978      	ldr	r0, [r7, #20]
 8005844:	f7ff ff26 	bl	8005694 <prvUnlockQueue>
	}
 8005848:	bf00      	nop
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08e      	sub	sp, #56	@ 0x38
 8005854:	af04      	add	r7, sp, #16
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800585e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	623b      	str	r3, [r7, #32]
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800587c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10b      	bne.n	800589a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	61fb      	str	r3, [r7, #28]
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	e7fd      	b.n	8005896 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800589a:	23a8      	movs	r3, #168	@ 0xa8
 800589c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80058a2:	d00b      	beq.n	80058bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	61bb      	str	r3, [r7, #24]
}
 80058b6:	bf00      	nop
 80058b8:	bf00      	nop
 80058ba:	e7fd      	b.n	80058b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01e      	beq.n	8005902 <xTaskCreateStatic+0xb2>
 80058c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01b      	beq.n	8005902 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058dc:	2300      	movs	r3, #0
 80058de:	9303      	str	r3, [sp, #12]
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	9302      	str	r3, [sp, #8]
 80058e4:	f107 0314 	add.w	r3, r7, #20
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f851 	bl	800599c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058fc:	f000 f8f6 	bl	8005aec <prvAddNewTaskToReadyList>
 8005900:	e001      	b.n	8005906 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005906:	697b      	ldr	r3, [r7, #20]
	}
 8005908:	4618      	mov	r0, r3
 800590a:	3728      	adds	r7, #40	@ 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08c      	sub	sp, #48	@ 0x30
 8005914:	af04      	add	r7, sp, #16
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4618      	mov	r0, r3
 8005926:	f001 fc79 	bl	800721c <pvPortMalloc>
 800592a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00e      	beq.n	8005950 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005932:	20a8      	movs	r0, #168	@ 0xa8
 8005934:	f001 fc72 	bl	800721c <pvPortMalloc>
 8005938:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	631a      	str	r2, [r3, #48]	@ 0x30
 8005946:	e005      	b.n	8005954 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005948:	6978      	ldr	r0, [r7, #20]
 800594a:	f001 fd35 	bl	80073b8 <vPortFree>
 800594e:	e001      	b.n	8005954 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005950:	2300      	movs	r3, #0
 8005952:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d017      	beq.n	800598a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005962:	88fa      	ldrh	r2, [r7, #6]
 8005964:	2300      	movs	r3, #0
 8005966:	9303      	str	r3, [sp, #12]
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	9302      	str	r3, [sp, #8]
 800596c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f80f 	bl	800599c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800597e:	69f8      	ldr	r0, [r7, #28]
 8005980:	f000 f8b4 	bl	8005aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005984:	2301      	movs	r3, #1
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	e002      	b.n	8005990 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800598a:	f04f 33ff 	mov.w	r3, #4294967295
 800598e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005990:	69bb      	ldr	r3, [r7, #24]
	}
 8005992:	4618      	mov	r0, r3
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	461a      	mov	r2, r3
 80059b4:	21a5      	movs	r1, #165	@ 0xa5
 80059b6:	f001 ffac 	bl	8007912 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059c4:	3b01      	subs	r3, #1
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f023 0307 	bic.w	r3, r3, #7
 80059d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	617b      	str	r3, [r7, #20]
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	e7fd      	b.n	80059f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01f      	beq.n	8005a3c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	e012      	b.n	8005a28 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	7819      	ldrb	r1, [r3, #0]
 8005a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	3334      	adds	r3, #52	@ 0x34
 8005a12:	460a      	mov	r2, r1
 8005a14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d006      	beq.n	8005a30 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	3301      	adds	r3, #1
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2b0f      	cmp	r3, #15
 8005a2c:	d9e9      	bls.n	8005a02 <prvInitialiseNewTask+0x66>
 8005a2e:	e000      	b.n	8005a32 <prvInitialiseNewTask+0x96>
			{
				break;
 8005a30:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a3a:	e003      	b.n	8005a44 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	2b37      	cmp	r3, #55	@ 0x37
 8005a48:	d901      	bls.n	8005a4e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a4a:	2337      	movs	r3, #55	@ 0x37
 8005a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a62:	3304      	adds	r3, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff f965 	bl	8004d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	3318      	adds	r3, #24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff f960 	bl	8004d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a88:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	3354      	adds	r3, #84	@ 0x54
 8005a9e:	224c      	movs	r2, #76	@ 0x4c
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 ff35 	bl	8007912 <memset>
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae0 <prvInitialiseNewTask+0x144>)
 8005aac:	659a      	str	r2, [r3, #88]	@ 0x58
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae4 <prvInitialiseNewTask+0x148>)
 8005ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae8 <prvInitialiseNewTask+0x14c>)
 8005ab8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	69b8      	ldr	r0, [r7, #24]
 8005ac0:	f001 f95a 	bl	8006d78 <pxPortInitialiseStack>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20004d10 	.word	0x20004d10
 8005ae4:	20004d78 	.word	0x20004d78
 8005ae8:	20004de0 	.word	0x20004de0

08005aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005af4:	f001 fa70 	bl	8006fd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005af8:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb0 <prvAddNewTaskToReadyList+0xc4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb0 <prvAddNewTaskToReadyList+0xc4>)
 8005b00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b02:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b10:	4b27      	ldr	r3, [pc, #156]	@ (8005bb0 <prvAddNewTaskToReadyList+0xc4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d110      	bne.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b18:	f000 fc2e 	bl	8006378 <prvInitialiseTaskLists>
 8005b1c:	e00d      	b.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b1e:	4b26      	ldr	r3, [pc, #152]	@ (8005bb8 <prvAddNewTaskToReadyList+0xcc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b26:	4b23      	ldr	r3, [pc, #140]	@ (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d802      	bhi.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b34:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b3a:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <prvAddNewTaskToReadyList+0xd0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	4a1e      	ldr	r2, [pc, #120]	@ (8005bbc <prvAddNewTaskToReadyList+0xd0>)
 8005b42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b44:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <prvAddNewTaskToReadyList+0xd0>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b50:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc0 <prvAddNewTaskToReadyList+0xd4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d903      	bls.n	8005b60 <prvAddNewTaskToReadyList+0x74>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5c:	4a18      	ldr	r2, [pc, #96]	@ (8005bc0 <prvAddNewTaskToReadyList+0xd4>)
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <prvAddNewTaskToReadyList+0xd8>)
 8005b6e:	441a      	add	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f7ff f8e9 	bl	8004d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b7c:	f001 fa5e 	bl	800703c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b80:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <prvAddNewTaskToReadyList+0xcc>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00e      	beq.n	8005ba6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b88:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d207      	bcs.n	8005ba6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b96:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc8 <prvAddNewTaskToReadyList+0xdc>)
 8005b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000f90 	.word	0x20000f90
 8005bb4:	20000abc 	.word	0x20000abc
 8005bb8:	20000f9c 	.word	0x20000f9c
 8005bbc:	20000fac 	.word	0x20000fac
 8005bc0:	20000f98 	.word	0x20000f98
 8005bc4:	20000ac0 	.word	0x20000ac0
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d018      	beq.n	8005c10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bde:	4b14      	ldr	r3, [pc, #80]	@ (8005c30 <vTaskDelay+0x64>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <vTaskDelay+0x32>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60bb      	str	r3, [r7, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bfe:	f000 f88b 	bl	8005d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c02:	2100      	movs	r1, #0
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fd09 	bl	800661c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c0a:	f000 f893 	bl	8005d34 <xTaskResumeAll>
 8005c0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d107      	bne.n	8005c26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c16:	4b07      	ldr	r3, [pc, #28]	@ (8005c34 <vTaskDelay+0x68>)
 8005c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000fb8 	.word	0x20000fb8
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	@ 0x28
 8005c3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c46:	463a      	mov	r2, r7
 8005c48:	1d39      	adds	r1, r7, #4
 8005c4a:	f107 0308 	add.w	r3, r7, #8
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff f81c 	bl	8004c8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	9202      	str	r2, [sp, #8]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	2300      	movs	r3, #0
 8005c64:	460a      	mov	r2, r1
 8005c66:	4924      	ldr	r1, [pc, #144]	@ (8005cf8 <vTaskStartScheduler+0xc0>)
 8005c68:	4824      	ldr	r0, [pc, #144]	@ (8005cfc <vTaskStartScheduler+0xc4>)
 8005c6a:	f7ff fdf1 	bl	8005850 <xTaskCreateStatic>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4a23      	ldr	r2, [pc, #140]	@ (8005d00 <vTaskStartScheduler+0xc8>)
 8005c72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c74:	4b22      	ldr	r3, [pc, #136]	@ (8005d00 <vTaskStartScheduler+0xc8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e001      	b.n	8005c86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d102      	bne.n	8005c92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c8c:	f000 fd1a 	bl	80066c4 <xTimerCreateTimerTask>
 8005c90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d11b      	bne.n	8005cd0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	613b      	str	r3, [r7, #16]
}
 8005caa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cac:	4b15      	ldr	r3, [pc, #84]	@ (8005d04 <vTaskStartScheduler+0xcc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3354      	adds	r3, #84	@ 0x54
 8005cb2:	4a15      	ldr	r2, [pc, #84]	@ (8005d08 <vTaskStartScheduler+0xd0>)
 8005cb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cb6:	4b15      	ldr	r3, [pc, #84]	@ (8005d0c <vTaskStartScheduler+0xd4>)
 8005cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cbe:	4b14      	ldr	r3, [pc, #80]	@ (8005d10 <vTaskStartScheduler+0xd8>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cc4:	4b13      	ldr	r3, [pc, #76]	@ (8005d14 <vTaskStartScheduler+0xdc>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cca:	f001 f8e1 	bl	8006e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cce:	e00f      	b.n	8005cf0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d10b      	bne.n	8005cf0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60fb      	str	r3, [r7, #12]
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <vTaskStartScheduler+0xb4>
}
 8005cf0:	bf00      	nop
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	08008864 	.word	0x08008864
 8005cfc:	08006349 	.word	0x08006349
 8005d00:	20000fb4 	.word	0x20000fb4
 8005d04:	20000abc 	.word	0x20000abc
 8005d08:	20000024 	.word	0x20000024
 8005d0c:	20000fb0 	.word	0x20000fb0
 8005d10:	20000f9c 	.word	0x20000f9c
 8005d14:	20000f94 	.word	0x20000f94

08005d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d1c:	4b04      	ldr	r3, [pc, #16]	@ (8005d30 <vTaskSuspendAll+0x18>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3301      	adds	r3, #1
 8005d22:	4a03      	ldr	r2, [pc, #12]	@ (8005d30 <vTaskSuspendAll+0x18>)
 8005d24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d26:	bf00      	nop
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000fb8 	.word	0x20000fb8

08005d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d42:	4b42      	ldr	r3, [pc, #264]	@ (8005e4c <xTaskResumeAll+0x118>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10b      	bne.n	8005d62 <xTaskResumeAll+0x2e>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	603b      	str	r3, [r7, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	e7fd      	b.n	8005d5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d62:	f001 f939 	bl	8006fd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d66:	4b39      	ldr	r3, [pc, #228]	@ (8005e4c <xTaskResumeAll+0x118>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	4a37      	ldr	r2, [pc, #220]	@ (8005e4c <xTaskResumeAll+0x118>)
 8005d6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d70:	4b36      	ldr	r3, [pc, #216]	@ (8005e4c <xTaskResumeAll+0x118>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d162      	bne.n	8005e3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d78:	4b35      	ldr	r3, [pc, #212]	@ (8005e50 <xTaskResumeAll+0x11c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d05e      	beq.n	8005e3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d80:	e02f      	b.n	8005de2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d82:	4b34      	ldr	r3, [pc, #208]	@ (8005e54 <xTaskResumeAll+0x120>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3318      	adds	r3, #24
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff f83a 	bl	8004e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff f835 	bl	8004e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e58 <xTaskResumeAll+0x124>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d903      	bls.n	8005db2 <xTaskResumeAll+0x7e>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	4a2a      	ldr	r2, [pc, #168]	@ (8005e58 <xTaskResumeAll+0x124>)
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4a27      	ldr	r2, [pc, #156]	@ (8005e5c <xTaskResumeAll+0x128>)
 8005dc0:	441a      	add	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f7fe ffc0 	bl	8004d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd2:	4b23      	ldr	r3, [pc, #140]	@ (8005e60 <xTaskResumeAll+0x12c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d302      	bcc.n	8005de2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005ddc:	4b21      	ldr	r3, [pc, #132]	@ (8005e64 <xTaskResumeAll+0x130>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005de2:	4b1c      	ldr	r3, [pc, #112]	@ (8005e54 <xTaskResumeAll+0x120>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1cb      	bne.n	8005d82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005df0:	f000 fb66 	bl	80064c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005df4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e68 <xTaskResumeAll+0x134>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d010      	beq.n	8005e22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e00:	f000 f846 	bl	8005e90 <xTaskIncrementTick>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e0a:	4b16      	ldr	r3, [pc, #88]	@ (8005e64 <xTaskResumeAll+0x130>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f1      	bne.n	8005e00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005e1c:	4b12      	ldr	r3, [pc, #72]	@ (8005e68 <xTaskResumeAll+0x134>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e22:	4b10      	ldr	r3, [pc, #64]	@ (8005e64 <xTaskResumeAll+0x130>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e6c <xTaskResumeAll+0x138>)
 8005e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e3e:	f001 f8fd 	bl	800703c <vPortExitCritical>

	return xAlreadyYielded;
 8005e42:	68bb      	ldr	r3, [r7, #8]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000fb8 	.word	0x20000fb8
 8005e50:	20000f90 	.word	0x20000f90
 8005e54:	20000f50 	.word	0x20000f50
 8005e58:	20000f98 	.word	0x20000f98
 8005e5c:	20000ac0 	.word	0x20000ac0
 8005e60:	20000abc 	.word	0x20000abc
 8005e64:	20000fa4 	.word	0x20000fa4
 8005e68:	20000fa0 	.word	0x20000fa0
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e76:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <xTaskGetTickCount+0x1c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e7c:	687b      	ldr	r3, [r7, #4]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20000f94 	.word	0x20000f94

08005e90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8005fd8 <xTaskIncrementTick+0x148>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f040 8090 	bne.w	8005fc4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8005fdc <xTaskIncrementTick+0x14c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005eac:	4a4b      	ldr	r2, [pc, #300]	@ (8005fdc <xTaskIncrementTick+0x14c>)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d121      	bne.n	8005efc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005eb8:	4b49      	ldr	r3, [pc, #292]	@ (8005fe0 <xTaskIncrementTick+0x150>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	603b      	str	r3, [r7, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	e7fd      	b.n	8005ed6 <xTaskIncrementTick+0x46>
 8005eda:	4b41      	ldr	r3, [pc, #260]	@ (8005fe0 <xTaskIncrementTick+0x150>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	4b40      	ldr	r3, [pc, #256]	@ (8005fe4 <xTaskIncrementTick+0x154>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a3e      	ldr	r2, [pc, #248]	@ (8005fe0 <xTaskIncrementTick+0x150>)
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	4a3e      	ldr	r2, [pc, #248]	@ (8005fe4 <xTaskIncrementTick+0x154>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe8 <xTaskIncrementTick+0x158>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	4a3c      	ldr	r2, [pc, #240]	@ (8005fe8 <xTaskIncrementTick+0x158>)
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	f000 fae2 	bl	80064c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005efc:	4b3b      	ldr	r3, [pc, #236]	@ (8005fec <xTaskIncrementTick+0x15c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d349      	bcc.n	8005f9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f06:	4b36      	ldr	r3, [pc, #216]	@ (8005fe0 <xTaskIncrementTick+0x150>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f10:	4b36      	ldr	r3, [pc, #216]	@ (8005fec <xTaskIncrementTick+0x15c>)
 8005f12:	f04f 32ff 	mov.w	r2, #4294967295
 8005f16:	601a      	str	r2, [r3, #0]
					break;
 8005f18:	e03f      	b.n	8005f9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1a:	4b31      	ldr	r3, [pc, #196]	@ (8005fe0 <xTaskIncrementTick+0x150>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d203      	bcs.n	8005f3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f32:	4a2e      	ldr	r2, [pc, #184]	@ (8005fec <xTaskIncrementTick+0x15c>)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f38:	e02f      	b.n	8005f9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe ff62 	bl	8004e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	3318      	adds	r3, #24
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe ff59 	bl	8004e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5a:	4b25      	ldr	r3, [pc, #148]	@ (8005ff0 <xTaskIncrementTick+0x160>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d903      	bls.n	8005f6a <xTaskIncrementTick+0xda>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f66:	4a22      	ldr	r2, [pc, #136]	@ (8005ff0 <xTaskIncrementTick+0x160>)
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff4 <xTaskIncrementTick+0x164>)
 8005f78:	441a      	add	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f7fe fee4 	bl	8004d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff8 <xTaskIncrementTick+0x168>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d3b8      	bcc.n	8005f06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f94:	2301      	movs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f98:	e7b5      	b.n	8005f06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f9a:	4b17      	ldr	r3, [pc, #92]	@ (8005ff8 <xTaskIncrementTick+0x168>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa0:	4914      	ldr	r1, [pc, #80]	@ (8005ff4 <xTaskIncrementTick+0x164>)
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d901      	bls.n	8005fb6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005fb6:	4b11      	ldr	r3, [pc, #68]	@ (8005ffc <xTaskIncrementTick+0x16c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e004      	b.n	8005fce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006000 <xTaskIncrementTick+0x170>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	4a0d      	ldr	r2, [pc, #52]	@ (8006000 <xTaskIncrementTick+0x170>)
 8005fcc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005fce:	697b      	ldr	r3, [r7, #20]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20000fb8 	.word	0x20000fb8
 8005fdc:	20000f94 	.word	0x20000f94
 8005fe0:	20000f48 	.word	0x20000f48
 8005fe4:	20000f4c 	.word	0x20000f4c
 8005fe8:	20000fa8 	.word	0x20000fa8
 8005fec:	20000fb0 	.word	0x20000fb0
 8005ff0:	20000f98 	.word	0x20000f98
 8005ff4:	20000ac0 	.word	0x20000ac0
 8005ff8:	20000abc 	.word	0x20000abc
 8005ffc:	20000fa4 	.word	0x20000fa4
 8006000:	20000fa0 	.word	0x20000fa0

08006004 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800600a:	4b2b      	ldr	r3, [pc, #172]	@ (80060b8 <vTaskSwitchContext+0xb4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006012:	4b2a      	ldr	r3, [pc, #168]	@ (80060bc <vTaskSwitchContext+0xb8>)
 8006014:	2201      	movs	r2, #1
 8006016:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006018:	e047      	b.n	80060aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800601a:	4b28      	ldr	r3, [pc, #160]	@ (80060bc <vTaskSwitchContext+0xb8>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006020:	4b27      	ldr	r3, [pc, #156]	@ (80060c0 <vTaskSwitchContext+0xbc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	e011      	b.n	800604c <vTaskSwitchContext+0x48>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <vTaskSwitchContext+0x42>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	607b      	str	r3, [r7, #4]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <vTaskSwitchContext+0x3e>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3b01      	subs	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	491d      	ldr	r1, [pc, #116]	@ (80060c4 <vTaskSwitchContext+0xc0>)
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0e3      	beq.n	8006028 <vTaskSwitchContext+0x24>
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4a16      	ldr	r2, [pc, #88]	@ (80060c4 <vTaskSwitchContext+0xc0>)
 800606c:	4413      	add	r3, r2
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	3308      	adds	r3, #8
 8006082:	429a      	cmp	r2, r3
 8006084:	d104      	bne.n	8006090 <vTaskSwitchContext+0x8c>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	605a      	str	r2, [r3, #4]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	4a0c      	ldr	r2, [pc, #48]	@ (80060c8 <vTaskSwitchContext+0xc4>)
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	4a09      	ldr	r2, [pc, #36]	@ (80060c0 <vTaskSwitchContext+0xbc>)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060a0:	4b09      	ldr	r3, [pc, #36]	@ (80060c8 <vTaskSwitchContext+0xc4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3354      	adds	r3, #84	@ 0x54
 80060a6:	4a09      	ldr	r2, [pc, #36]	@ (80060cc <vTaskSwitchContext+0xc8>)
 80060a8:	6013      	str	r3, [r2, #0]
}
 80060aa:	bf00      	nop
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20000fb8 	.word	0x20000fb8
 80060bc:	20000fa4 	.word	0x20000fa4
 80060c0:	20000f98 	.word	0x20000f98
 80060c4:	20000ac0 	.word	0x20000ac0
 80060c8:	20000abc 	.word	0x20000abc
 80060cc:	20000024 	.word	0x20000024

080060d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060f8:	4b07      	ldr	r3, [pc, #28]	@ (8006118 <vTaskPlaceOnEventList+0x48>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3318      	adds	r3, #24
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7fe fe48 	bl	8004d96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006106:	2101      	movs	r1, #1
 8006108:	6838      	ldr	r0, [r7, #0]
 800610a:	f000 fa87 	bl	800661c <prvAddCurrentTaskToDelayedList>
}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000abc 	.word	0x20000abc

0800611c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10b      	bne.n	8006146 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	617b      	str	r3, [r7, #20]
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	e7fd      	b.n	8006142 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006146:	4b0a      	ldr	r3, [pc, #40]	@ (8006170 <vTaskPlaceOnEventListRestricted+0x54>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3318      	adds	r3, #24
 800614c:	4619      	mov	r1, r3
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7fe fdfd 	bl	8004d4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800615a:	f04f 33ff 	mov.w	r3, #4294967295
 800615e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	68b8      	ldr	r0, [r7, #8]
 8006164:	f000 fa5a 	bl	800661c <prvAddCurrentTaskToDelayedList>
	}
 8006168:	bf00      	nop
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20000abc 	.word	0x20000abc

08006174 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	60fb      	str	r3, [r7, #12]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	3318      	adds	r3, #24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fe2e 	bl	8004e08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006224 <xTaskRemoveFromEventList+0xb0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d11d      	bne.n	80061f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fe25 	bl	8004e08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c2:	4b19      	ldr	r3, [pc, #100]	@ (8006228 <xTaskRemoveFromEventList+0xb4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d903      	bls.n	80061d2 <xTaskRemoveFromEventList+0x5e>
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ce:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <xTaskRemoveFromEventList+0xb4>)
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4a13      	ldr	r2, [pc, #76]	@ (800622c <xTaskRemoveFromEventList+0xb8>)
 80061e0:	441a      	add	r2, r3
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4619      	mov	r1, r3
 80061e8:	4610      	mov	r0, r2
 80061ea:	f7fe fdb0 	bl	8004d4e <vListInsertEnd>
 80061ee:	e005      	b.n	80061fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3318      	adds	r3, #24
 80061f4:	4619      	mov	r1, r3
 80061f6:	480e      	ldr	r0, [pc, #56]	@ (8006230 <xTaskRemoveFromEventList+0xbc>)
 80061f8:	f7fe fda9 	bl	8004d4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006200:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <xTaskRemoveFromEventList+0xc0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006206:	429a      	cmp	r2, r3
 8006208:	d905      	bls.n	8006216 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800620a:	2301      	movs	r3, #1
 800620c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800620e:	4b0a      	ldr	r3, [pc, #40]	@ (8006238 <xTaskRemoveFromEventList+0xc4>)
 8006210:	2201      	movs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e001      	b.n	800621a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800621a:	697b      	ldr	r3, [r7, #20]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20000fb8 	.word	0x20000fb8
 8006228:	20000f98 	.word	0x20000f98
 800622c:	20000ac0 	.word	0x20000ac0
 8006230:	20000f50 	.word	0x20000f50
 8006234:	20000abc 	.word	0x20000abc
 8006238:	20000fa4 	.word	0x20000fa4

0800623c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006244:	4b06      	ldr	r3, [pc, #24]	@ (8006260 <vTaskInternalSetTimeOutState+0x24>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800624c:	4b05      	ldr	r3, [pc, #20]	@ (8006264 <vTaskInternalSetTimeOutState+0x28>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	605a      	str	r2, [r3, #4]
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	20000fa8 	.word	0x20000fa8
 8006264:	20000f94 	.word	0x20000f94

08006268 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10b      	bne.n	8006290 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	613b      	str	r3, [r7, #16]
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	e7fd      	b.n	800628c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60fb      	str	r3, [r7, #12]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80062ae:	f000 fe93 	bl	8006fd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006328 <xTaskCheckForTimeOut+0xc0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d102      	bne.n	80062d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	e023      	b.n	800631a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b15      	ldr	r3, [pc, #84]	@ (800632c <xTaskCheckForTimeOut+0xc4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d007      	beq.n	80062ee <xTaskCheckForTimeOut+0x86>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e015      	b.n	800631a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d20b      	bcs.n	8006310 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1ad2      	subs	r2, r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff99 	bl	800623c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800630a:	2300      	movs	r3, #0
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	e004      	b.n	800631a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800631a:	f000 fe8f 	bl	800703c <vPortExitCritical>

	return xReturn;
 800631e:	69fb      	ldr	r3, [r7, #28]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000f94 	.word	0x20000f94
 800632c:	20000fa8 	.word	0x20000fa8

08006330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006334:	4b03      	ldr	r3, [pc, #12]	@ (8006344 <vTaskMissedYield+0x14>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	20000fa4 	.word	0x20000fa4

08006348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006350:	f000 f852 	bl	80063f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006354:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <prvIdleTask+0x28>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d9f9      	bls.n	8006350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800635c:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <prvIdleTask+0x2c>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800636c:	e7f0      	b.n	8006350 <prvIdleTask+0x8>
 800636e:	bf00      	nop
 8006370:	20000ac0 	.word	0x20000ac0
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800637e:	2300      	movs	r3, #0
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	e00c      	b.n	800639e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4a12      	ldr	r2, [pc, #72]	@ (80063d8 <prvInitialiseTaskLists+0x60>)
 8006390:	4413      	add	r3, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fcae 	bl	8004cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3301      	adds	r3, #1
 800639c:	607b      	str	r3, [r7, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b37      	cmp	r3, #55	@ 0x37
 80063a2:	d9ef      	bls.n	8006384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063a4:	480d      	ldr	r0, [pc, #52]	@ (80063dc <prvInitialiseTaskLists+0x64>)
 80063a6:	f7fe fca5 	bl	8004cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063aa:	480d      	ldr	r0, [pc, #52]	@ (80063e0 <prvInitialiseTaskLists+0x68>)
 80063ac:	f7fe fca2 	bl	8004cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063b0:	480c      	ldr	r0, [pc, #48]	@ (80063e4 <prvInitialiseTaskLists+0x6c>)
 80063b2:	f7fe fc9f 	bl	8004cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063b6:	480c      	ldr	r0, [pc, #48]	@ (80063e8 <prvInitialiseTaskLists+0x70>)
 80063b8:	f7fe fc9c 	bl	8004cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063bc:	480b      	ldr	r0, [pc, #44]	@ (80063ec <prvInitialiseTaskLists+0x74>)
 80063be:	f7fe fc99 	bl	8004cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063c2:	4b0b      	ldr	r3, [pc, #44]	@ (80063f0 <prvInitialiseTaskLists+0x78>)
 80063c4:	4a05      	ldr	r2, [pc, #20]	@ (80063dc <prvInitialiseTaskLists+0x64>)
 80063c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063c8:	4b0a      	ldr	r3, [pc, #40]	@ (80063f4 <prvInitialiseTaskLists+0x7c>)
 80063ca:	4a05      	ldr	r2, [pc, #20]	@ (80063e0 <prvInitialiseTaskLists+0x68>)
 80063cc:	601a      	str	r2, [r3, #0]
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000ac0 	.word	0x20000ac0
 80063dc:	20000f20 	.word	0x20000f20
 80063e0:	20000f34 	.word	0x20000f34
 80063e4:	20000f50 	.word	0x20000f50
 80063e8:	20000f64 	.word	0x20000f64
 80063ec:	20000f7c 	.word	0x20000f7c
 80063f0:	20000f48 	.word	0x20000f48
 80063f4:	20000f4c 	.word	0x20000f4c

080063f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063fe:	e019      	b.n	8006434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006400:	f000 fdea 	bl	8006fd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006404:	4b10      	ldr	r3, [pc, #64]	@ (8006448 <prvCheckTasksWaitingTermination+0x50>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fcf9 	bl	8004e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006416:	4b0d      	ldr	r3, [pc, #52]	@ (800644c <prvCheckTasksWaitingTermination+0x54>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3b01      	subs	r3, #1
 800641c:	4a0b      	ldr	r2, [pc, #44]	@ (800644c <prvCheckTasksWaitingTermination+0x54>)
 800641e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006420:	4b0b      	ldr	r3, [pc, #44]	@ (8006450 <prvCheckTasksWaitingTermination+0x58>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3b01      	subs	r3, #1
 8006426:	4a0a      	ldr	r2, [pc, #40]	@ (8006450 <prvCheckTasksWaitingTermination+0x58>)
 8006428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800642a:	f000 fe07 	bl	800703c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f810 	bl	8006454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006434:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <prvCheckTasksWaitingTermination+0x58>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e1      	bne.n	8006400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000f64 	.word	0x20000f64
 800644c:	20000f90 	.word	0x20000f90
 8006450:	20000f78 	.word	0x20000f78

08006454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3354      	adds	r3, #84	@ 0x54
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fad9 	bl	8007a18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800646c:	2b00      	cmp	r3, #0
 800646e:	d108      	bne.n	8006482 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006474:	4618      	mov	r0, r3
 8006476:	f000 ff9f 	bl	80073b8 <vPortFree>
				vPortFree( pxTCB );
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 ff9c 	bl	80073b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006480:	e019      	b.n	80064b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006488:	2b01      	cmp	r3, #1
 800648a:	d103      	bne.n	8006494 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 ff93 	bl	80073b8 <vPortFree>
	}
 8006492:	e010      	b.n	80064b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800649a:	2b02      	cmp	r3, #2
 800649c:	d00b      	beq.n	80064b6 <prvDeleteTCB+0x62>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60fb      	str	r3, [r7, #12]
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <prvDeleteTCB+0x5e>
	}
 80064b6:	bf00      	nop
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c6:	4b0c      	ldr	r3, [pc, #48]	@ (80064f8 <prvResetNextTaskUnblockTime+0x38>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <prvResetNextTaskUnblockTime+0x3c>)
 80064d2:	f04f 32ff 	mov.w	r2, #4294967295
 80064d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064d8:	e008      	b.n	80064ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064da:	4b07      	ldr	r3, [pc, #28]	@ (80064f8 <prvResetNextTaskUnblockTime+0x38>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	4a04      	ldr	r2, [pc, #16]	@ (80064fc <prvResetNextTaskUnblockTime+0x3c>)
 80064ea:	6013      	str	r3, [r2, #0]
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	20000f48 	.word	0x20000f48
 80064fc:	20000fb0 	.word	0x20000fb0

08006500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006506:	4b0b      	ldr	r3, [pc, #44]	@ (8006534 <xTaskGetSchedulerState+0x34>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800650e:	2301      	movs	r3, #1
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	e008      	b.n	8006526 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006514:	4b08      	ldr	r3, [pc, #32]	@ (8006538 <xTaskGetSchedulerState+0x38>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d102      	bne.n	8006522 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800651c:	2302      	movs	r3, #2
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	e001      	b.n	8006526 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006522:	2300      	movs	r3, #0
 8006524:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006526:	687b      	ldr	r3, [r7, #4]
	}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	20000f9c 	.word	0x20000f9c
 8006538:	20000fb8 	.word	0x20000fb8

0800653c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d058      	beq.n	8006604 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006552:	4b2f      	ldr	r3, [pc, #188]	@ (8006610 <xTaskPriorityDisinherit+0xd4>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	429a      	cmp	r2, r3
 800655a:	d00b      	beq.n	8006574 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	60fb      	str	r3, [r7, #12]
}
 800656e:	bf00      	nop
 8006570:	bf00      	nop
 8006572:	e7fd      	b.n	8006570 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	60bb      	str	r3, [r7, #8]
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	e7fd      	b.n	8006590 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006598:	1e5a      	subs	r2, r3, #1
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d02c      	beq.n	8006604 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d128      	bne.n	8006604 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe fc26 	bl	8004e08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006614 <xTaskPriorityDisinherit+0xd8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d903      	bls.n	80065e4 <xTaskPriorityDisinherit+0xa8>
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006614 <xTaskPriorityDisinherit+0xd8>)
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4a09      	ldr	r2, [pc, #36]	@ (8006618 <xTaskPriorityDisinherit+0xdc>)
 80065f2:	441a      	add	r2, r3
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4619      	mov	r1, r3
 80065fa:	4610      	mov	r0, r2
 80065fc:	f7fe fba7 	bl	8004d4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006604:	697b      	ldr	r3, [r7, #20]
	}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000abc 	.word	0x20000abc
 8006614:	20000f98 	.word	0x20000f98
 8006618:	20000ac0 	.word	0x20000ac0

0800661c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006626:	4b21      	ldr	r3, [pc, #132]	@ (80066ac <prvAddCurrentTaskToDelayedList+0x90>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800662c:	4b20      	ldr	r3, [pc, #128]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3304      	adds	r3, #4
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe fbe8 	bl	8004e08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d10a      	bne.n	8006656 <prvAddCurrentTaskToDelayedList+0x3a>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d007      	beq.n	8006656 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006646:	4b1a      	ldr	r3, [pc, #104]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3304      	adds	r3, #4
 800664c:	4619      	mov	r1, r3
 800664e:	4819      	ldr	r0, [pc, #100]	@ (80066b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006650:	f7fe fb7d 	bl	8004d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006654:	e026      	b.n	80066a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800665e:	4b14      	ldr	r3, [pc, #80]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	429a      	cmp	r2, r3
 800666c:	d209      	bcs.n	8006682 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800666e:	4b12      	ldr	r3, [pc, #72]	@ (80066b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b0f      	ldr	r3, [pc, #60]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3304      	adds	r3, #4
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f7fe fb8b 	bl	8004d96 <vListInsert>
}
 8006680:	e010      	b.n	80066a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006682:	4b0e      	ldr	r3, [pc, #56]	@ (80066bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b0a      	ldr	r3, [pc, #40]	@ (80066b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3304      	adds	r3, #4
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fe fb81 	bl	8004d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006694:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	429a      	cmp	r2, r3
 800669c:	d202      	bcs.n	80066a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800669e:	4a08      	ldr	r2, [pc, #32]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	6013      	str	r3, [r2, #0]
}
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000f94 	.word	0x20000f94
 80066b0:	20000abc 	.word	0x20000abc
 80066b4:	20000f7c 	.word	0x20000f7c
 80066b8:	20000f4c 	.word	0x20000f4c
 80066bc:	20000f48 	.word	0x20000f48
 80066c0:	20000fb0 	.word	0x20000fb0

080066c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	@ 0x28
 80066c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066ce:	f000 fb13 	bl	8006cf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <xTimerCreateTimerTask+0x84>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d021      	beq.n	800671e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066e2:	1d3a      	adds	r2, r7, #4
 80066e4:	f107 0108 	add.w	r1, r7, #8
 80066e8:	f107 030c 	add.w	r3, r7, #12
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fe fae7 	bl	8004cc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	9202      	str	r2, [sp, #8]
 80066fa:	9301      	str	r3, [sp, #4]
 80066fc:	2302      	movs	r3, #2
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	2300      	movs	r3, #0
 8006702:	460a      	mov	r2, r1
 8006704:	4911      	ldr	r1, [pc, #68]	@ (800674c <xTimerCreateTimerTask+0x88>)
 8006706:	4812      	ldr	r0, [pc, #72]	@ (8006750 <xTimerCreateTimerTask+0x8c>)
 8006708:	f7ff f8a2 	bl	8005850 <xTaskCreateStatic>
 800670c:	4603      	mov	r3, r0
 800670e:	4a11      	ldr	r2, [pc, #68]	@ (8006754 <xTimerCreateTimerTask+0x90>)
 8006710:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006712:	4b10      	ldr	r3, [pc, #64]	@ (8006754 <xTimerCreateTimerTask+0x90>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800671a:	2301      	movs	r3, #1
 800671c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10b      	bne.n	800673c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	613b      	str	r3, [r7, #16]
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	e7fd      	b.n	8006738 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800673c:	697b      	ldr	r3, [r7, #20]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000fec 	.word	0x20000fec
 800674c:	0800886c 	.word	0x0800886c
 8006750:	08006891 	.word	0x08006891
 8006754:	20000ff0 	.word	0x20000ff0

08006758 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	@ 0x28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006766:	2300      	movs	r3, #0
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <xTimerGenericCommand+0x30>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	623b      	str	r3, [r7, #32]
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006788:	4b19      	ldr	r3, [pc, #100]	@ (80067f0 <xTimerGenericCommand+0x98>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02a      	beq.n	80067e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b05      	cmp	r3, #5
 80067a0:	dc18      	bgt.n	80067d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067a2:	f7ff fead 	bl	8006500 <xTaskGetSchedulerState>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d109      	bne.n	80067c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067ac:	4b10      	ldr	r3, [pc, #64]	@ (80067f0 <xTimerGenericCommand+0x98>)
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	f107 0110 	add.w	r1, r7, #16
 80067b4:	2300      	movs	r3, #0
 80067b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b8:	f7fe fc5a 	bl	8005070 <xQueueGenericSend>
 80067bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80067be:	e012      	b.n	80067e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067c0:	4b0b      	ldr	r3, [pc, #44]	@ (80067f0 <xTimerGenericCommand+0x98>)
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	f107 0110 	add.w	r1, r7, #16
 80067c8:	2300      	movs	r3, #0
 80067ca:	2200      	movs	r2, #0
 80067cc:	f7fe fc50 	bl	8005070 <xQueueGenericSend>
 80067d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80067d2:	e008      	b.n	80067e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067d4:	4b06      	ldr	r3, [pc, #24]	@ (80067f0 <xTimerGenericCommand+0x98>)
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	f107 0110 	add.w	r1, r7, #16
 80067dc:	2300      	movs	r3, #0
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	f7fe fd48 	bl	8005274 <xQueueGenericSendFromISR>
 80067e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3728      	adds	r7, #40	@ 0x28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000fec 	.word	0x20000fec

080067f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fe:	4b23      	ldr	r3, [pc, #140]	@ (800688c <prvProcessExpiredTimer+0x98>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	3304      	adds	r3, #4
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe fafb 	bl	8004e08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d023      	beq.n	8006868 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	699a      	ldr	r2, [r3, #24]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	18d1      	adds	r1, r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	6978      	ldr	r0, [r7, #20]
 800682e:	f000 f8d5 	bl	80069dc <prvInsertTimerInActiveList>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d020      	beq.n	800687a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006838:	2300      	movs	r3, #0
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2300      	movs	r3, #0
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	2100      	movs	r1, #0
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f7ff ff88 	bl	8006758 <xTimerGenericCommand>
 8006848:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d114      	bne.n	800687a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60fb      	str	r3, [r7, #12]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	b2da      	uxtb	r2, r3
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	6978      	ldr	r0, [r7, #20]
 8006880:	4798      	blx	r3
}
 8006882:	bf00      	nop
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000fe4 	.word	0x20000fe4

08006890 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006898:	f107 0308 	add.w	r3, r7, #8
 800689c:	4618      	mov	r0, r3
 800689e:	f000 f859 	bl	8006954 <prvGetNextExpireTime>
 80068a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4619      	mov	r1, r3
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f805 	bl	80068b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068ae:	f000 f8d7 	bl	8006a60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068b2:	bf00      	nop
 80068b4:	e7f0      	b.n	8006898 <prvTimerTask+0x8>
	...

080068b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068c2:	f7ff fa29 	bl	8005d18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068c6:	f107 0308 	add.w	r3, r7, #8
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 f866 	bl	800699c <prvSampleTimeNow>
 80068d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d130      	bne.n	800693a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <prvProcessTimerOrBlockTask+0x3c>
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d806      	bhi.n	80068f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068e6:	f7ff fa25 	bl	8005d34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff ff81 	bl	80067f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068f2:	e024      	b.n	800693e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068fa:	4b13      	ldr	r3, [pc, #76]	@ (8006948 <prvProcessTimerOrBlockTask+0x90>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <prvProcessTimerOrBlockTask+0x50>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <prvProcessTimerOrBlockTask+0x52>
 8006908:	2300      	movs	r3, #0
 800690a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800690c:	4b0f      	ldr	r3, [pc, #60]	@ (800694c <prvProcessTimerOrBlockTask+0x94>)
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	4619      	mov	r1, r3
 800691a:	f7fe ff65 	bl	80057e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800691e:	f7ff fa09 	bl	8005d34 <xTaskResumeAll>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006928:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <prvProcessTimerOrBlockTask+0x98>)
 800692a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	f3bf 8f6f 	isb	sy
}
 8006938:	e001      	b.n	800693e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800693a:	f7ff f9fb 	bl	8005d34 <xTaskResumeAll>
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000fe8 	.word	0x20000fe8
 800694c:	20000fec 	.word	0x20000fec
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800695c:	4b0e      	ldr	r3, [pc, #56]	@ (8006998 <prvGetNextExpireTime+0x44>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <prvGetNextExpireTime+0x16>
 8006966:	2201      	movs	r2, #1
 8006968:	e000      	b.n	800696c <prvGetNextExpireTime+0x18>
 800696a:	2200      	movs	r2, #0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d105      	bne.n	8006984 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006978:	4b07      	ldr	r3, [pc, #28]	@ (8006998 <prvGetNextExpireTime+0x44>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	e001      	b.n	8006988 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006988:	68fb      	ldr	r3, [r7, #12]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20000fe4 	.word	0x20000fe4

0800699c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069a4:	f7ff fa64 	bl	8005e70 <xTaskGetTickCount>
 80069a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069aa:	4b0b      	ldr	r3, [pc, #44]	@ (80069d8 <prvSampleTimeNow+0x3c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d205      	bcs.n	80069c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069b4:	f000 f93a 	bl	8006c2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e002      	b.n	80069c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069c6:	4a04      	ldr	r2, [pc, #16]	@ (80069d8 <prvSampleTimeNow+0x3c>)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069cc:	68fb      	ldr	r3, [r7, #12]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000ff4 	.word	0x20000ff4

080069dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d812      	bhi.n	8006a28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	1ad2      	subs	r2, r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	e01b      	b.n	8006a4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a16:	4b10      	ldr	r3, [pc, #64]	@ (8006a58 <prvInsertTimerInActiveList+0x7c>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f7fe f9b8 	bl	8004d96 <vListInsert>
 8006a26:	e012      	b.n	8006a4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d206      	bcs.n	8006a3e <prvInsertTimerInActiveList+0x62>
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d302      	bcc.n	8006a3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e007      	b.n	8006a4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a3e:	4b07      	ldr	r3, [pc, #28]	@ (8006a5c <prvInsertTimerInActiveList+0x80>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3304      	adds	r3, #4
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f7fe f9a4 	bl	8004d96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a4e:	697b      	ldr	r3, [r7, #20]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000fe8 	.word	0x20000fe8
 8006a5c:	20000fe4 	.word	0x20000fe4

08006a60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08e      	sub	sp, #56	@ 0x38
 8006a64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a66:	e0ce      	b.n	8006c06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	da19      	bge.n	8006aa2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a6e:	1d3b      	adds	r3, r7, #4
 8006a70:	3304      	adds	r3, #4
 8006a72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	61fb      	str	r3, [r7, #28]
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	e7fd      	b.n	8006a8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a98:	6850      	ldr	r0, [r2, #4]
 8006a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a9c:	6892      	ldr	r2, [r2, #8]
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f2c0 80ae 	blt.w	8006c06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe f9a4 	bl	8004e08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff ff6a 	bl	800699c <prvSampleTimeNow>
 8006ac8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	f200 8097 	bhi.w	8006c00 <prvProcessReceivedCommands+0x1a0>
 8006ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <prvProcessReceivedCommands+0x78>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006b01 	.word	0x08006b01
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006b01 	.word	0x08006b01
 8006ae4:	08006b77 	.word	0x08006b77
 8006ae8:	08006b8b 	.word	0x08006b8b
 8006aec:	08006bd7 	.word	0x08006bd7
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b01 	.word	0x08006b01
 8006af8:	08006b77 	.word	0x08006b77
 8006afc:	08006b8b 	.word	0x08006b8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	18d1      	adds	r1, r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b20:	f7ff ff5c 	bl	80069dc <prvInsertTimerInActiveList>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d06c      	beq.n	8006c04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d061      	beq.n	8006c04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	441a      	add	r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2100      	movs	r1, #0
 8006b50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b52:	f7ff fe01 	bl	8006758 <xTimerGenericCommand>
 8006b56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d152      	bne.n	8006c04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	61bb      	str	r3, [r7, #24]
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	e7fd      	b.n	8006b72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b88:	e03d      	b.n	8006c06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b90:	f043 0301 	orr.w	r3, r3, #1
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	617b      	str	r3, [r7, #20]
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	18d1      	adds	r1, r2, r3
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bd0:	f7ff ff04 	bl	80069dc <prvInsertTimerInActiveList>
					break;
 8006bd4:	e017      	b.n	8006c06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d103      	bne.n	8006bec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006be4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006be6:	f000 fbe7 	bl	80073b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bea:	e00c      	b.n	8006c06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006bfe:	e002      	b.n	8006c06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <prvProcessReceivedCommands+0x1a6>
					break;
 8006c04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c06:	4b08      	ldr	r3, [pc, #32]	@ (8006c28 <prvProcessReceivedCommands+0x1c8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	1d39      	adds	r1, r7, #4
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fe fbce 	bl	80053b0 <xQueueReceive>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f47f af26 	bne.w	8006a68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	3730      	adds	r7, #48	@ 0x30
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000fec 	.word	0x20000fec

08006c2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c32:	e049      	b.n	8006cc8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c34:	4b2e      	ldr	r3, [pc, #184]	@ (8006cf0 <prvSwitchTimerLists+0xc4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006cf0 <prvSwitchTimerLists+0xc4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fe f8db 	bl	8004e08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d02f      	beq.n	8006cc8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d90e      	bls.n	8006c98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c86:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf0 <prvSwitchTimerLists+0xc4>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4610      	mov	r0, r2
 8006c92:	f7fe f880 	bl	8004d96 <vListInsert>
 8006c96:	e017      	b.n	8006cc8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f7ff fd58 	bl	8006758 <xTimerGenericCommand>
 8006ca8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10b      	bne.n	8006cc8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	603b      	str	r3, [r7, #0]
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	e7fd      	b.n	8006cc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cc8:	4b09      	ldr	r3, [pc, #36]	@ (8006cf0 <prvSwitchTimerLists+0xc4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1b0      	bne.n	8006c34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006cd2:	4b07      	ldr	r3, [pc, #28]	@ (8006cf0 <prvSwitchTimerLists+0xc4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006cd8:	4b06      	ldr	r3, [pc, #24]	@ (8006cf4 <prvSwitchTimerLists+0xc8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a04      	ldr	r2, [pc, #16]	@ (8006cf0 <prvSwitchTimerLists+0xc4>)
 8006cde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ce0:	4a04      	ldr	r2, [pc, #16]	@ (8006cf4 <prvSwitchTimerLists+0xc8>)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	6013      	str	r3, [r2, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000fe4 	.word	0x20000fe4
 8006cf4:	20000fe8 	.word	0x20000fe8

08006cf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006cfe:	f000 f96b 	bl	8006fd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d02:	4b15      	ldr	r3, [pc, #84]	@ (8006d58 <prvCheckForValidListAndQueue+0x60>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d120      	bne.n	8006d4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d0a:	4814      	ldr	r0, [pc, #80]	@ (8006d5c <prvCheckForValidListAndQueue+0x64>)
 8006d0c:	f7fd fff2 	bl	8004cf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d10:	4813      	ldr	r0, [pc, #76]	@ (8006d60 <prvCheckForValidListAndQueue+0x68>)
 8006d12:	f7fd ffef 	bl	8004cf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d16:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <prvCheckForValidListAndQueue+0x6c>)
 8006d18:	4a10      	ldr	r2, [pc, #64]	@ (8006d5c <prvCheckForValidListAndQueue+0x64>)
 8006d1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d1c:	4b12      	ldr	r3, [pc, #72]	@ (8006d68 <prvCheckForValidListAndQueue+0x70>)
 8006d1e:	4a10      	ldr	r2, [pc, #64]	@ (8006d60 <prvCheckForValidListAndQueue+0x68>)
 8006d20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d22:	2300      	movs	r3, #0
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	4b11      	ldr	r3, [pc, #68]	@ (8006d6c <prvCheckForValidListAndQueue+0x74>)
 8006d28:	4a11      	ldr	r2, [pc, #68]	@ (8006d70 <prvCheckForValidListAndQueue+0x78>)
 8006d2a:	2110      	movs	r1, #16
 8006d2c:	200a      	movs	r0, #10
 8006d2e:	f7fe f8ff 	bl	8004f30 <xQueueGenericCreateStatic>
 8006d32:	4603      	mov	r3, r0
 8006d34:	4a08      	ldr	r2, [pc, #32]	@ (8006d58 <prvCheckForValidListAndQueue+0x60>)
 8006d36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <prvCheckForValidListAndQueue+0x60>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <prvCheckForValidListAndQueue+0x60>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	490b      	ldr	r1, [pc, #44]	@ (8006d74 <prvCheckForValidListAndQueue+0x7c>)
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fd24 	bl	8005794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d4c:	f000 f976 	bl	800703c <vPortExitCritical>
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000fec 	.word	0x20000fec
 8006d5c:	20000fbc 	.word	0x20000fbc
 8006d60:	20000fd0 	.word	0x20000fd0
 8006d64:	20000fe4 	.word	0x20000fe4
 8006d68:	20000fe8 	.word	0x20000fe8
 8006d6c:	20001098 	.word	0x20001098
 8006d70:	20000ff8 	.word	0x20000ff8
 8006d74:	08008874 	.word	0x08008874

08006d78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3b04      	subs	r3, #4
 8006d88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3b04      	subs	r3, #4
 8006d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f023 0201 	bic.w	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3b04      	subs	r3, #4
 8006da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006da8:	4a0c      	ldr	r2, [pc, #48]	@ (8006ddc <pxPortInitialiseStack+0x64>)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3b14      	subs	r3, #20
 8006db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3b04      	subs	r3, #4
 8006dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f06f 0202 	mvn.w	r2, #2
 8006dc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3b20      	subs	r3, #32
 8006dcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dce:	68fb      	ldr	r3, [r7, #12]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	08006de1 	.word	0x08006de1

08006de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dea:	4b13      	ldr	r3, [pc, #76]	@ (8006e38 <prvTaskExitError+0x58>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d00b      	beq.n	8006e0c <prvTaskExitError+0x2c>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	60fb      	str	r3, [r7, #12]
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	e7fd      	b.n	8006e08 <prvTaskExitError+0x28>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	60bb      	str	r3, [r7, #8]
}
 8006e1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e20:	bf00      	nop
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0fc      	beq.n	8006e22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000014 	.word	0x20000014
 8006e3c:	00000000 	.word	0x00000000

08006e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e40:	4b07      	ldr	r3, [pc, #28]	@ (8006e60 <pxCurrentTCBConst2>)
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	6808      	ldr	r0, [r1, #0]
 8006e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	f380 8809 	msr	PSP, r0
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f04f 0000 	mov.w	r0, #0
 8006e56:	f380 8811 	msr	BASEPRI, r0
 8006e5a:	4770      	bx	lr
 8006e5c:	f3af 8000 	nop.w

08006e60 <pxCurrentTCBConst2>:
 8006e60:	20000abc 	.word	0x20000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop

08006e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e68:	4808      	ldr	r0, [pc, #32]	@ (8006e8c <prvPortStartFirstTask+0x24>)
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	6800      	ldr	r0, [r0, #0]
 8006e6e:	f380 8808 	msr	MSP, r0
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8814 	msr	CONTROL, r0
 8006e7a:	b662      	cpsie	i
 8006e7c:	b661      	cpsie	f
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	df00      	svc	0
 8006e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e8a:	bf00      	nop
 8006e8c:	e000ed08 	.word	0xe000ed08

08006e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e96:	4b47      	ldr	r3, [pc, #284]	@ (8006fb4 <xPortStartScheduler+0x124>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a47      	ldr	r2, [pc, #284]	@ (8006fb8 <xPortStartScheduler+0x128>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d10b      	bne.n	8006eb8 <xPortStartScheduler+0x28>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8006fb4 <xPortStartScheduler+0x124>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8006fbc <xPortStartScheduler+0x12c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10b      	bne.n	8006eda <xPortStartScheduler+0x4a>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	613b      	str	r3, [r7, #16]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006eda:	4b39      	ldr	r3, [pc, #228]	@ (8006fc0 <xPortStartScheduler+0x130>)
 8006edc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	22ff      	movs	r2, #255	@ 0xff
 8006eea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4b31      	ldr	r3, [pc, #196]	@ (8006fc4 <xPortStartScheduler+0x134>)
 8006f00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f02:	4b31      	ldr	r3, [pc, #196]	@ (8006fc8 <xPortStartScheduler+0x138>)
 8006f04:	2207      	movs	r2, #7
 8006f06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f08:	e009      	b.n	8006f1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006fc8 <xPortStartScheduler+0x138>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	4a2d      	ldr	r2, [pc, #180]	@ (8006fc8 <xPortStartScheduler+0x138>)
 8006f12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f26:	2b80      	cmp	r3, #128	@ 0x80
 8006f28:	d0ef      	beq.n	8006f0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f2a:	4b27      	ldr	r3, [pc, #156]	@ (8006fc8 <xPortStartScheduler+0x138>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f1c3 0307 	rsb	r3, r3, #7
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d00b      	beq.n	8006f4e <xPortStartScheduler+0xbe>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	60bb      	str	r3, [r7, #8]
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	e7fd      	b.n	8006f4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc8 <xPortStartScheduler+0x138>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc8 <xPortStartScheduler+0x138>)
 8006f56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f58:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc8 <xPortStartScheduler+0x138>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f60:	4a19      	ldr	r2, [pc, #100]	@ (8006fc8 <xPortStartScheduler+0x138>)
 8006f62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f6c:	4b17      	ldr	r3, [pc, #92]	@ (8006fcc <xPortStartScheduler+0x13c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a16      	ldr	r2, [pc, #88]	@ (8006fcc <xPortStartScheduler+0x13c>)
 8006f72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f78:	4b14      	ldr	r3, [pc, #80]	@ (8006fcc <xPortStartScheduler+0x13c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a13      	ldr	r2, [pc, #76]	@ (8006fcc <xPortStartScheduler+0x13c>)
 8006f7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006f82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f84:	f000 f8da 	bl	800713c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f88:	4b11      	ldr	r3, [pc, #68]	@ (8006fd0 <xPortStartScheduler+0x140>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f8e:	f000 f8f9 	bl	8007184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f92:	4b10      	ldr	r3, [pc, #64]	@ (8006fd4 <xPortStartScheduler+0x144>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a0f      	ldr	r2, [pc, #60]	@ (8006fd4 <xPortStartScheduler+0x144>)
 8006f98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006f9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f9e:	f7ff ff63 	bl	8006e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fa2:	f7ff f82f 	bl	8006004 <vTaskSwitchContext>
	prvTaskExitError();
 8006fa6:	f7ff ff1b 	bl	8006de0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	e000ed00 	.word	0xe000ed00
 8006fb8:	410fc271 	.word	0x410fc271
 8006fbc:	410fc270 	.word	0x410fc270
 8006fc0:	e000e400 	.word	0xe000e400
 8006fc4:	200010e8 	.word	0x200010e8
 8006fc8:	200010ec 	.word	0x200010ec
 8006fcc:	e000ed20 	.word	0xe000ed20
 8006fd0:	20000014 	.word	0x20000014
 8006fd4:	e000ef34 	.word	0xe000ef34

08006fd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	607b      	str	r3, [r7, #4]
}
 8006ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ff2:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <vPortEnterCritical+0x5c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8007034 <vPortEnterCritical+0x5c>)
 8006ffa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <vPortEnterCritical+0x5c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d110      	bne.n	8007026 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007004:	4b0c      	ldr	r3, [pc, #48]	@ (8007038 <vPortEnterCritical+0x60>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00b      	beq.n	8007026 <vPortEnterCritical+0x4e>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	603b      	str	r3, [r7, #0]
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	e7fd      	b.n	8007022 <vPortEnterCritical+0x4a>
	}
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000014 	.word	0x20000014
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007042:	4b12      	ldr	r3, [pc, #72]	@ (800708c <vPortExitCritical+0x50>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10b      	bne.n	8007062 <vPortExitCritical+0x26>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	607b      	str	r3, [r7, #4]
}
 800705c:	bf00      	nop
 800705e:	bf00      	nop
 8007060:	e7fd      	b.n	800705e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007062:	4b0a      	ldr	r3, [pc, #40]	@ (800708c <vPortExitCritical+0x50>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3b01      	subs	r3, #1
 8007068:	4a08      	ldr	r2, [pc, #32]	@ (800708c <vPortExitCritical+0x50>)
 800706a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800706c:	4b07      	ldr	r3, [pc, #28]	@ (800708c <vPortExitCritical+0x50>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d105      	bne.n	8007080 <vPortExitCritical+0x44>
 8007074:	2300      	movs	r3, #0
 8007076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f383 8811 	msr	BASEPRI, r3
}
 800707e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	20000014 	.word	0x20000014

08007090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007090:	f3ef 8009 	mrs	r0, PSP
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	4b15      	ldr	r3, [pc, #84]	@ (80070f0 <pxCurrentTCBConst>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	f01e 0f10 	tst.w	lr, #16
 80070a0:	bf08      	it	eq
 80070a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070aa:	6010      	str	r0, [r2, #0]
 80070ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80070b4:	f380 8811 	msr	BASEPRI, r0
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f7fe ffa0 	bl	8006004 <vTaskSwitchContext>
 80070c4:	f04f 0000 	mov.w	r0, #0
 80070c8:	f380 8811 	msr	BASEPRI, r0
 80070cc:	bc09      	pop	{r0, r3}
 80070ce:	6819      	ldr	r1, [r3, #0]
 80070d0:	6808      	ldr	r0, [r1, #0]
 80070d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d6:	f01e 0f10 	tst.w	lr, #16
 80070da:	bf08      	it	eq
 80070dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070e0:	f380 8809 	msr	PSP, r0
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	f3af 8000 	nop.w

080070f0 <pxCurrentTCBConst>:
 80070f0:	20000abc 	.word	0x20000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop

080070f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	607b      	str	r3, [r7, #4]
}
 8007110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007112:	f7fe febd 	bl	8005e90 <xTaskIncrementTick>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800711c:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <xPortSysTickHandler+0x40>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	2300      	movs	r3, #0
 8007126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	f383 8811 	msr	BASEPRI, r3
}
 800712e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007140:	4b0b      	ldr	r3, [pc, #44]	@ (8007170 <vPortSetupTimerInterrupt+0x34>)
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007146:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <vPortSetupTimerInterrupt+0x38>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800714c:	4b0a      	ldr	r3, [pc, #40]	@ (8007178 <vPortSetupTimerInterrupt+0x3c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0a      	ldr	r2, [pc, #40]	@ (800717c <vPortSetupTimerInterrupt+0x40>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	099b      	lsrs	r3, r3, #6
 8007158:	4a09      	ldr	r2, [pc, #36]	@ (8007180 <vPortSetupTimerInterrupt+0x44>)
 800715a:	3b01      	subs	r3, #1
 800715c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800715e:	4b04      	ldr	r3, [pc, #16]	@ (8007170 <vPortSetupTimerInterrupt+0x34>)
 8007160:	2207      	movs	r2, #7
 8007162:	601a      	str	r2, [r3, #0]
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	e000e010 	.word	0xe000e010
 8007174:	e000e018 	.word	0xe000e018
 8007178:	20000008 	.word	0x20000008
 800717c:	10624dd3 	.word	0x10624dd3
 8007180:	e000e014 	.word	0xe000e014

08007184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007184:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007194 <vPortEnableVFP+0x10>
 8007188:	6801      	ldr	r1, [r0, #0]
 800718a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800718e:	6001      	str	r1, [r0, #0]
 8007190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007192:	bf00      	nop
 8007194:	e000ed88 	.word	0xe000ed88

08007198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800719e:	f3ef 8305 	mrs	r3, IPSR
 80071a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	d915      	bls.n	80071d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071aa:	4a18      	ldr	r2, [pc, #96]	@ (800720c <vPortValidateInterruptPriority+0x74>)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071b4:	4b16      	ldr	r3, [pc, #88]	@ (8007210 <vPortValidateInterruptPriority+0x78>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	7afa      	ldrb	r2, [r7, #11]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d20b      	bcs.n	80071d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
}
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	e7fd      	b.n	80071d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007214 <vPortValidateInterruptPriority+0x7c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80071de:	4b0e      	ldr	r3, [pc, #56]	@ (8007218 <vPortValidateInterruptPriority+0x80>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d90b      	bls.n	80071fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	603b      	str	r3, [r7, #0]
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	e7fd      	b.n	80071fa <vPortValidateInterruptPriority+0x62>
	}
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	e000e3f0 	.word	0xe000e3f0
 8007210:	200010e8 	.word	0x200010e8
 8007214:	e000ed0c 	.word	0xe000ed0c
 8007218:	200010ec 	.word	0x200010ec

0800721c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	@ 0x28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007228:	f7fe fd76 	bl	8005d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800722c:	4b5c      	ldr	r3, [pc, #368]	@ (80073a0 <pvPortMalloc+0x184>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007234:	f000 f924 	bl	8007480 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007238:	4b5a      	ldr	r3, [pc, #360]	@ (80073a4 <pvPortMalloc+0x188>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4013      	ands	r3, r2
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 8095 	bne.w	8007370 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01e      	beq.n	800728a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800724c:	2208      	movs	r2, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4413      	add	r3, r2
 8007252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	2b00      	cmp	r3, #0
 800725c:	d015      	beq.n	800728a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	3308      	adds	r3, #8
 8007266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <pvPortMalloc+0x6e>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	617b      	str	r3, [r7, #20]
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	e7fd      	b.n	8007286 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d06f      	beq.n	8007370 <pvPortMalloc+0x154>
 8007290:	4b45      	ldr	r3, [pc, #276]	@ (80073a8 <pvPortMalloc+0x18c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	429a      	cmp	r2, r3
 8007298:	d86a      	bhi.n	8007370 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800729a:	4b44      	ldr	r3, [pc, #272]	@ (80073ac <pvPortMalloc+0x190>)
 800729c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800729e:	4b43      	ldr	r3, [pc, #268]	@ (80073ac <pvPortMalloc+0x190>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072a4:	e004      	b.n	80072b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d903      	bls.n	80072c2 <pvPortMalloc+0xa6>
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f1      	bne.n	80072a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072c2:	4b37      	ldr	r3, [pc, #220]	@ (80073a0 <pvPortMalloc+0x184>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d051      	beq.n	8007370 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2208      	movs	r2, #8
 80072d2:	4413      	add	r3, r2
 80072d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	1ad2      	subs	r2, r2, r3
 80072e6:	2308      	movs	r3, #8
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d920      	bls.n	8007330 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4413      	add	r3, r2
 80072f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00b      	beq.n	8007318 <pvPortMalloc+0xfc>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	613b      	str	r3, [r7, #16]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	1ad2      	subs	r2, r2, r3
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800732a:	69b8      	ldr	r0, [r7, #24]
 800732c:	f000 f90a 	bl	8007544 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007330:	4b1d      	ldr	r3, [pc, #116]	@ (80073a8 <pvPortMalloc+0x18c>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	4a1b      	ldr	r2, [pc, #108]	@ (80073a8 <pvPortMalloc+0x18c>)
 800733c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800733e:	4b1a      	ldr	r3, [pc, #104]	@ (80073a8 <pvPortMalloc+0x18c>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	4b1b      	ldr	r3, [pc, #108]	@ (80073b0 <pvPortMalloc+0x194>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d203      	bcs.n	8007352 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800734a:	4b17      	ldr	r3, [pc, #92]	@ (80073a8 <pvPortMalloc+0x18c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a18      	ldr	r2, [pc, #96]	@ (80073b0 <pvPortMalloc+0x194>)
 8007350:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	4b13      	ldr	r3, [pc, #76]	@ (80073a4 <pvPortMalloc+0x188>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	431a      	orrs	r2, r3
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007366:	4b13      	ldr	r3, [pc, #76]	@ (80073b4 <pvPortMalloc+0x198>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	4a11      	ldr	r2, [pc, #68]	@ (80073b4 <pvPortMalloc+0x198>)
 800736e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007370:	f7fe fce0 	bl	8005d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <pvPortMalloc+0x17a>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60fb      	str	r3, [r7, #12]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <pvPortMalloc+0x176>
	return pvReturn;
 8007396:	69fb      	ldr	r3, [r7, #28]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3728      	adds	r7, #40	@ 0x28
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20004cf8 	.word	0x20004cf8
 80073a4:	20004d0c 	.word	0x20004d0c
 80073a8:	20004cfc 	.word	0x20004cfc
 80073ac:	20004cf0 	.word	0x20004cf0
 80073b0:	20004d00 	.word	0x20004d00
 80073b4:	20004d04 	.word	0x20004d04

080073b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d04f      	beq.n	800746a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073ca:	2308      	movs	r3, #8
 80073cc:	425b      	negs	r3, r3
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4413      	add	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	4b25      	ldr	r3, [pc, #148]	@ (8007474 <vPortFree+0xbc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10b      	bne.n	80073fe <vPortFree+0x46>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	60fb      	str	r3, [r7, #12]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00b      	beq.n	800741e <vPortFree+0x66>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60bb      	str	r3, [r7, #8]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	4b14      	ldr	r3, [pc, #80]	@ (8007474 <vPortFree+0xbc>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4013      	ands	r3, r2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01e      	beq.n	800746a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d11a      	bne.n	800746a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	4b0e      	ldr	r3, [pc, #56]	@ (8007474 <vPortFree+0xbc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	43db      	mvns	r3, r3
 800743e:	401a      	ands	r2, r3
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007444:	f7fe fc68 	bl	8005d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	4b0a      	ldr	r3, [pc, #40]	@ (8007478 <vPortFree+0xc0>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4413      	add	r3, r2
 8007452:	4a09      	ldr	r2, [pc, #36]	@ (8007478 <vPortFree+0xc0>)
 8007454:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007456:	6938      	ldr	r0, [r7, #16]
 8007458:	f000 f874 	bl	8007544 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800745c:	4b07      	ldr	r3, [pc, #28]	@ (800747c <vPortFree+0xc4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3301      	adds	r3, #1
 8007462:	4a06      	ldr	r2, [pc, #24]	@ (800747c <vPortFree+0xc4>)
 8007464:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007466:	f7fe fc65 	bl	8005d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800746a:	bf00      	nop
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20004d0c 	.word	0x20004d0c
 8007478:	20004cfc 	.word	0x20004cfc
 800747c:	20004d08 	.word	0x20004d08

08007480 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007486:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800748a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800748c:	4b27      	ldr	r3, [pc, #156]	@ (800752c <prvHeapInit+0xac>)
 800748e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00c      	beq.n	80074b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3307      	adds	r3, #7
 800749e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0307 	bic.w	r3, r3, #7
 80074a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	4a1f      	ldr	r2, [pc, #124]	@ (800752c <prvHeapInit+0xac>)
 80074b0:	4413      	add	r3, r2
 80074b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007530 <prvHeapInit+0xb0>)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074be:	4b1c      	ldr	r3, [pc, #112]	@ (8007530 <prvHeapInit+0xb0>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4413      	add	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074cc:	2208      	movs	r2, #8
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0307 	bic.w	r3, r3, #7
 80074da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4a15      	ldr	r2, [pc, #84]	@ (8007534 <prvHeapInit+0xb4>)
 80074e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074e2:	4b14      	ldr	r3, [pc, #80]	@ (8007534 <prvHeapInit+0xb4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2200      	movs	r2, #0
 80074e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074ea:	4b12      	ldr	r3, [pc, #72]	@ (8007534 <prvHeapInit+0xb4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007500:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <prvHeapInit+0xb4>)
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	4a0a      	ldr	r2, [pc, #40]	@ (8007538 <prvHeapInit+0xb8>)
 800750e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4a09      	ldr	r2, [pc, #36]	@ (800753c <prvHeapInit+0xbc>)
 8007516:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007518:	4b09      	ldr	r3, [pc, #36]	@ (8007540 <prvHeapInit+0xc0>)
 800751a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800751e:	601a      	str	r2, [r3, #0]
}
 8007520:	bf00      	nop
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	200010f0 	.word	0x200010f0
 8007530:	20004cf0 	.word	0x20004cf0
 8007534:	20004cf8 	.word	0x20004cf8
 8007538:	20004d00 	.word	0x20004d00
 800753c:	20004cfc 	.word	0x20004cfc
 8007540:	20004d0c 	.word	0x20004d0c

08007544 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800754c:	4b28      	ldr	r3, [pc, #160]	@ (80075f0 <prvInsertBlockIntoFreeList+0xac>)
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e002      	b.n	8007558 <prvInsertBlockIntoFreeList+0x14>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	429a      	cmp	r2, r3
 8007560:	d8f7      	bhi.n	8007552 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4413      	add	r3, r2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	429a      	cmp	r2, r3
 8007572:	d108      	bne.n	8007586 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	441a      	add	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	441a      	add	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d118      	bne.n	80075cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	4b15      	ldr	r3, [pc, #84]	@ (80075f4 <prvInsertBlockIntoFreeList+0xb0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d00d      	beq.n	80075c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	441a      	add	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	e008      	b.n	80075d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075c2:	4b0c      	ldr	r3, [pc, #48]	@ (80075f4 <prvInsertBlockIntoFreeList+0xb0>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	e003      	b.n	80075d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d002      	beq.n	80075e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075e2:	bf00      	nop
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20004cf0 	.word	0x20004cf0
 80075f4:	20004cf8 	.word	0x20004cf8

080075f8 <atoi>:
 80075f8:	220a      	movs	r2, #10
 80075fa:	2100      	movs	r1, #0
 80075fc:	f000 b87a 	b.w	80076f4 <strtol>

08007600 <_strtol_l.isra.0>:
 8007600:	2b24      	cmp	r3, #36	@ 0x24
 8007602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007606:	4686      	mov	lr, r0
 8007608:	4690      	mov	r8, r2
 800760a:	d801      	bhi.n	8007610 <_strtol_l.isra.0+0x10>
 800760c:	2b01      	cmp	r3, #1
 800760e:	d106      	bne.n	800761e <_strtol_l.isra.0+0x1e>
 8007610:	f000 fa96 	bl	8007b40 <__errno>
 8007614:	2316      	movs	r3, #22
 8007616:	6003      	str	r3, [r0, #0]
 8007618:	2000      	movs	r0, #0
 800761a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761e:	4834      	ldr	r0, [pc, #208]	@ (80076f0 <_strtol_l.isra.0+0xf0>)
 8007620:	460d      	mov	r5, r1
 8007622:	462a      	mov	r2, r5
 8007624:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007628:	5d06      	ldrb	r6, [r0, r4]
 800762a:	f016 0608 	ands.w	r6, r6, #8
 800762e:	d1f8      	bne.n	8007622 <_strtol_l.isra.0+0x22>
 8007630:	2c2d      	cmp	r4, #45	@ 0x2d
 8007632:	d110      	bne.n	8007656 <_strtol_l.isra.0+0x56>
 8007634:	782c      	ldrb	r4, [r5, #0]
 8007636:	2601      	movs	r6, #1
 8007638:	1c95      	adds	r5, r2, #2
 800763a:	f033 0210 	bics.w	r2, r3, #16
 800763e:	d115      	bne.n	800766c <_strtol_l.isra.0+0x6c>
 8007640:	2c30      	cmp	r4, #48	@ 0x30
 8007642:	d10d      	bne.n	8007660 <_strtol_l.isra.0+0x60>
 8007644:	782a      	ldrb	r2, [r5, #0]
 8007646:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800764a:	2a58      	cmp	r2, #88	@ 0x58
 800764c:	d108      	bne.n	8007660 <_strtol_l.isra.0+0x60>
 800764e:	786c      	ldrb	r4, [r5, #1]
 8007650:	3502      	adds	r5, #2
 8007652:	2310      	movs	r3, #16
 8007654:	e00a      	b.n	800766c <_strtol_l.isra.0+0x6c>
 8007656:	2c2b      	cmp	r4, #43	@ 0x2b
 8007658:	bf04      	itt	eq
 800765a:	782c      	ldrbeq	r4, [r5, #0]
 800765c:	1c95      	addeq	r5, r2, #2
 800765e:	e7ec      	b.n	800763a <_strtol_l.isra.0+0x3a>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1f6      	bne.n	8007652 <_strtol_l.isra.0+0x52>
 8007664:	2c30      	cmp	r4, #48	@ 0x30
 8007666:	bf14      	ite	ne
 8007668:	230a      	movne	r3, #10
 800766a:	2308      	moveq	r3, #8
 800766c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007670:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007674:	2200      	movs	r2, #0
 8007676:	fbbc f9f3 	udiv	r9, ip, r3
 800767a:	4610      	mov	r0, r2
 800767c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007680:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007684:	2f09      	cmp	r7, #9
 8007686:	d80f      	bhi.n	80076a8 <_strtol_l.isra.0+0xa8>
 8007688:	463c      	mov	r4, r7
 800768a:	42a3      	cmp	r3, r4
 800768c:	dd1b      	ble.n	80076c6 <_strtol_l.isra.0+0xc6>
 800768e:	1c57      	adds	r7, r2, #1
 8007690:	d007      	beq.n	80076a2 <_strtol_l.isra.0+0xa2>
 8007692:	4581      	cmp	r9, r0
 8007694:	d314      	bcc.n	80076c0 <_strtol_l.isra.0+0xc0>
 8007696:	d101      	bne.n	800769c <_strtol_l.isra.0+0x9c>
 8007698:	45a2      	cmp	sl, r4
 800769a:	db11      	blt.n	80076c0 <_strtol_l.isra.0+0xc0>
 800769c:	fb00 4003 	mla	r0, r0, r3, r4
 80076a0:	2201      	movs	r2, #1
 80076a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076a6:	e7eb      	b.n	8007680 <_strtol_l.isra.0+0x80>
 80076a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80076ac:	2f19      	cmp	r7, #25
 80076ae:	d801      	bhi.n	80076b4 <_strtol_l.isra.0+0xb4>
 80076b0:	3c37      	subs	r4, #55	@ 0x37
 80076b2:	e7ea      	b.n	800768a <_strtol_l.isra.0+0x8a>
 80076b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80076b8:	2f19      	cmp	r7, #25
 80076ba:	d804      	bhi.n	80076c6 <_strtol_l.isra.0+0xc6>
 80076bc:	3c57      	subs	r4, #87	@ 0x57
 80076be:	e7e4      	b.n	800768a <_strtol_l.isra.0+0x8a>
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	e7ed      	b.n	80076a2 <_strtol_l.isra.0+0xa2>
 80076c6:	1c53      	adds	r3, r2, #1
 80076c8:	d108      	bne.n	80076dc <_strtol_l.isra.0+0xdc>
 80076ca:	2322      	movs	r3, #34	@ 0x22
 80076cc:	f8ce 3000 	str.w	r3, [lr]
 80076d0:	4660      	mov	r0, ip
 80076d2:	f1b8 0f00 	cmp.w	r8, #0
 80076d6:	d0a0      	beq.n	800761a <_strtol_l.isra.0+0x1a>
 80076d8:	1e69      	subs	r1, r5, #1
 80076da:	e006      	b.n	80076ea <_strtol_l.isra.0+0xea>
 80076dc:	b106      	cbz	r6, 80076e0 <_strtol_l.isra.0+0xe0>
 80076de:	4240      	negs	r0, r0
 80076e0:	f1b8 0f00 	cmp.w	r8, #0
 80076e4:	d099      	beq.n	800761a <_strtol_l.isra.0+0x1a>
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	d1f6      	bne.n	80076d8 <_strtol_l.isra.0+0xd8>
 80076ea:	f8c8 1000 	str.w	r1, [r8]
 80076ee:	e794      	b.n	800761a <_strtol_l.isra.0+0x1a>
 80076f0:	08008901 	.word	0x08008901

080076f4 <strtol>:
 80076f4:	4613      	mov	r3, r2
 80076f6:	460a      	mov	r2, r1
 80076f8:	4601      	mov	r1, r0
 80076fa:	4802      	ldr	r0, [pc, #8]	@ (8007704 <strtol+0x10>)
 80076fc:	6800      	ldr	r0, [r0, #0]
 80076fe:	f7ff bf7f 	b.w	8007600 <_strtol_l.isra.0>
 8007702:	bf00      	nop
 8007704:	20000024 	.word	0x20000024

08007708 <std>:
 8007708:	2300      	movs	r3, #0
 800770a:	b510      	push	{r4, lr}
 800770c:	4604      	mov	r4, r0
 800770e:	e9c0 3300 	strd	r3, r3, [r0]
 8007712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007716:	6083      	str	r3, [r0, #8]
 8007718:	8181      	strh	r1, [r0, #12]
 800771a:	6643      	str	r3, [r0, #100]	@ 0x64
 800771c:	81c2      	strh	r2, [r0, #14]
 800771e:	6183      	str	r3, [r0, #24]
 8007720:	4619      	mov	r1, r3
 8007722:	2208      	movs	r2, #8
 8007724:	305c      	adds	r0, #92	@ 0x5c
 8007726:	f000 f8f4 	bl	8007912 <memset>
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <std+0x58>)
 800772c:	6263      	str	r3, [r4, #36]	@ 0x24
 800772e:	4b0d      	ldr	r3, [pc, #52]	@ (8007764 <std+0x5c>)
 8007730:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007732:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <std+0x60>)
 8007734:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007736:	4b0d      	ldr	r3, [pc, #52]	@ (800776c <std+0x64>)
 8007738:	6323      	str	r3, [r4, #48]	@ 0x30
 800773a:	4b0d      	ldr	r3, [pc, #52]	@ (8007770 <std+0x68>)
 800773c:	6224      	str	r4, [r4, #32]
 800773e:	429c      	cmp	r4, r3
 8007740:	d006      	beq.n	8007750 <std+0x48>
 8007742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007746:	4294      	cmp	r4, r2
 8007748:	d002      	beq.n	8007750 <std+0x48>
 800774a:	33d0      	adds	r3, #208	@ 0xd0
 800774c:	429c      	cmp	r4, r3
 800774e:	d105      	bne.n	800775c <std+0x54>
 8007750:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007758:	f000 ba1c 	b.w	8007b94 <__retarget_lock_init_recursive>
 800775c:	bd10      	pop	{r4, pc}
 800775e:	bf00      	nop
 8007760:	0800788d 	.word	0x0800788d
 8007764:	080078af 	.word	0x080078af
 8007768:	080078e7 	.word	0x080078e7
 800776c:	0800790b 	.word	0x0800790b
 8007770:	20004d10 	.word	0x20004d10

08007774 <stdio_exit_handler>:
 8007774:	4a02      	ldr	r2, [pc, #8]	@ (8007780 <stdio_exit_handler+0xc>)
 8007776:	4903      	ldr	r1, [pc, #12]	@ (8007784 <stdio_exit_handler+0x10>)
 8007778:	4803      	ldr	r0, [pc, #12]	@ (8007788 <stdio_exit_handler+0x14>)
 800777a:	f000 b869 	b.w	8007850 <_fwalk_sglue>
 800777e:	bf00      	nop
 8007780:	20000018 	.word	0x20000018
 8007784:	08007f0d 	.word	0x08007f0d
 8007788:	20000028 	.word	0x20000028

0800778c <cleanup_stdio>:
 800778c:	6841      	ldr	r1, [r0, #4]
 800778e:	4b0c      	ldr	r3, [pc, #48]	@ (80077c0 <cleanup_stdio+0x34>)
 8007790:	4299      	cmp	r1, r3
 8007792:	b510      	push	{r4, lr}
 8007794:	4604      	mov	r4, r0
 8007796:	d001      	beq.n	800779c <cleanup_stdio+0x10>
 8007798:	f000 fbb8 	bl	8007f0c <_fflush_r>
 800779c:	68a1      	ldr	r1, [r4, #8]
 800779e:	4b09      	ldr	r3, [pc, #36]	@ (80077c4 <cleanup_stdio+0x38>)
 80077a0:	4299      	cmp	r1, r3
 80077a2:	d002      	beq.n	80077aa <cleanup_stdio+0x1e>
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fbb1 	bl	8007f0c <_fflush_r>
 80077aa:	68e1      	ldr	r1, [r4, #12]
 80077ac:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <cleanup_stdio+0x3c>)
 80077ae:	4299      	cmp	r1, r3
 80077b0:	d004      	beq.n	80077bc <cleanup_stdio+0x30>
 80077b2:	4620      	mov	r0, r4
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f000 bba8 	b.w	8007f0c <_fflush_r>
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	20004d10 	.word	0x20004d10
 80077c4:	20004d78 	.word	0x20004d78
 80077c8:	20004de0 	.word	0x20004de0

080077cc <global_stdio_init.part.0>:
 80077cc:	b510      	push	{r4, lr}
 80077ce:	4b0b      	ldr	r3, [pc, #44]	@ (80077fc <global_stdio_init.part.0+0x30>)
 80077d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007800 <global_stdio_init.part.0+0x34>)
 80077d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007804 <global_stdio_init.part.0+0x38>)
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	4620      	mov	r0, r4
 80077d8:	2200      	movs	r2, #0
 80077da:	2104      	movs	r1, #4
 80077dc:	f7ff ff94 	bl	8007708 <std>
 80077e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077e4:	2201      	movs	r2, #1
 80077e6:	2109      	movs	r1, #9
 80077e8:	f7ff ff8e 	bl	8007708 <std>
 80077ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077f0:	2202      	movs	r2, #2
 80077f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f6:	2112      	movs	r1, #18
 80077f8:	f7ff bf86 	b.w	8007708 <std>
 80077fc:	20004e48 	.word	0x20004e48
 8007800:	20004d10 	.word	0x20004d10
 8007804:	08007775 	.word	0x08007775

08007808 <__sfp_lock_acquire>:
 8007808:	4801      	ldr	r0, [pc, #4]	@ (8007810 <__sfp_lock_acquire+0x8>)
 800780a:	f000 b9c4 	b.w	8007b96 <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	20004e51 	.word	0x20004e51

08007814 <__sfp_lock_release>:
 8007814:	4801      	ldr	r0, [pc, #4]	@ (800781c <__sfp_lock_release+0x8>)
 8007816:	f000 b9bf 	b.w	8007b98 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	20004e51 	.word	0x20004e51

08007820 <__sinit>:
 8007820:	b510      	push	{r4, lr}
 8007822:	4604      	mov	r4, r0
 8007824:	f7ff fff0 	bl	8007808 <__sfp_lock_acquire>
 8007828:	6a23      	ldr	r3, [r4, #32]
 800782a:	b11b      	cbz	r3, 8007834 <__sinit+0x14>
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007830:	f7ff bff0 	b.w	8007814 <__sfp_lock_release>
 8007834:	4b04      	ldr	r3, [pc, #16]	@ (8007848 <__sinit+0x28>)
 8007836:	6223      	str	r3, [r4, #32]
 8007838:	4b04      	ldr	r3, [pc, #16]	@ (800784c <__sinit+0x2c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f5      	bne.n	800782c <__sinit+0xc>
 8007840:	f7ff ffc4 	bl	80077cc <global_stdio_init.part.0>
 8007844:	e7f2      	b.n	800782c <__sinit+0xc>
 8007846:	bf00      	nop
 8007848:	0800778d 	.word	0x0800778d
 800784c:	20004e48 	.word	0x20004e48

08007850 <_fwalk_sglue>:
 8007850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007854:	4607      	mov	r7, r0
 8007856:	4688      	mov	r8, r1
 8007858:	4614      	mov	r4, r2
 800785a:	2600      	movs	r6, #0
 800785c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007860:	f1b9 0901 	subs.w	r9, r9, #1
 8007864:	d505      	bpl.n	8007872 <_fwalk_sglue+0x22>
 8007866:	6824      	ldr	r4, [r4, #0]
 8007868:	2c00      	cmp	r4, #0
 800786a:	d1f7      	bne.n	800785c <_fwalk_sglue+0xc>
 800786c:	4630      	mov	r0, r6
 800786e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d907      	bls.n	8007888 <_fwalk_sglue+0x38>
 8007878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800787c:	3301      	adds	r3, #1
 800787e:	d003      	beq.n	8007888 <_fwalk_sglue+0x38>
 8007880:	4629      	mov	r1, r5
 8007882:	4638      	mov	r0, r7
 8007884:	47c0      	blx	r8
 8007886:	4306      	orrs	r6, r0
 8007888:	3568      	adds	r5, #104	@ 0x68
 800788a:	e7e9      	b.n	8007860 <_fwalk_sglue+0x10>

0800788c <__sread>:
 800788c:	b510      	push	{r4, lr}
 800788e:	460c      	mov	r4, r1
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	f000 f930 	bl	8007af8 <_read_r>
 8007898:	2800      	cmp	r0, #0
 800789a:	bfab      	itete	ge
 800789c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800789e:	89a3      	ldrhlt	r3, [r4, #12]
 80078a0:	181b      	addge	r3, r3, r0
 80078a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078a6:	bfac      	ite	ge
 80078a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078aa:	81a3      	strhlt	r3, [r4, #12]
 80078ac:	bd10      	pop	{r4, pc}

080078ae <__swrite>:
 80078ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b2:	461f      	mov	r7, r3
 80078b4:	898b      	ldrh	r3, [r1, #12]
 80078b6:	05db      	lsls	r3, r3, #23
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	4616      	mov	r6, r2
 80078be:	d505      	bpl.n	80078cc <__swrite+0x1e>
 80078c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c4:	2302      	movs	r3, #2
 80078c6:	2200      	movs	r2, #0
 80078c8:	f000 f904 	bl	8007ad4 <_lseek_r>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078d6:	81a3      	strh	r3, [r4, #12]
 80078d8:	4632      	mov	r2, r6
 80078da:	463b      	mov	r3, r7
 80078dc:	4628      	mov	r0, r5
 80078de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078e2:	f000 b91b 	b.w	8007b1c <_write_r>

080078e6 <__sseek>:
 80078e6:	b510      	push	{r4, lr}
 80078e8:	460c      	mov	r4, r1
 80078ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ee:	f000 f8f1 	bl	8007ad4 <_lseek_r>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	bf15      	itete	ne
 80078f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007902:	81a3      	strheq	r3, [r4, #12]
 8007904:	bf18      	it	ne
 8007906:	81a3      	strhne	r3, [r4, #12]
 8007908:	bd10      	pop	{r4, pc}

0800790a <__sclose>:
 800790a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790e:	f000 b873 	b.w	80079f8 <_close_r>

08007912 <memset>:
 8007912:	4402      	add	r2, r0
 8007914:	4603      	mov	r3, r0
 8007916:	4293      	cmp	r3, r2
 8007918:	d100      	bne.n	800791c <memset+0xa>
 800791a:	4770      	bx	lr
 800791c:	f803 1b01 	strb.w	r1, [r3], #1
 8007920:	e7f9      	b.n	8007916 <memset+0x4>

08007922 <strcat>:
 8007922:	b510      	push	{r4, lr}
 8007924:	4602      	mov	r2, r0
 8007926:	7814      	ldrb	r4, [r2, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	3201      	adds	r2, #1
 800792c:	2c00      	cmp	r4, #0
 800792e:	d1fa      	bne.n	8007926 <strcat+0x4>
 8007930:	3b01      	subs	r3, #1
 8007932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800793a:	2a00      	cmp	r2, #0
 800793c:	d1f9      	bne.n	8007932 <strcat+0x10>
 800793e:	bd10      	pop	{r4, pc}

08007940 <strtok>:
 8007940:	4b16      	ldr	r3, [pc, #88]	@ (800799c <strtok+0x5c>)
 8007942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007946:	681f      	ldr	r7, [r3, #0]
 8007948:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800794a:	4605      	mov	r5, r0
 800794c:	460e      	mov	r6, r1
 800794e:	b9ec      	cbnz	r4, 800798c <strtok+0x4c>
 8007950:	2050      	movs	r0, #80	@ 0x50
 8007952:	f000 f9a1 	bl	8007c98 <malloc>
 8007956:	4602      	mov	r2, r0
 8007958:	6478      	str	r0, [r7, #68]	@ 0x44
 800795a:	b920      	cbnz	r0, 8007966 <strtok+0x26>
 800795c:	4b10      	ldr	r3, [pc, #64]	@ (80079a0 <strtok+0x60>)
 800795e:	4811      	ldr	r0, [pc, #68]	@ (80079a4 <strtok+0x64>)
 8007960:	215b      	movs	r1, #91	@ 0x5b
 8007962:	f000 f931 	bl	8007bc8 <__assert_func>
 8007966:	e9c0 4400 	strd	r4, r4, [r0]
 800796a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800796e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007972:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007976:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800797a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800797e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007982:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007986:	6184      	str	r4, [r0, #24]
 8007988:	7704      	strb	r4, [r0, #28]
 800798a:	6244      	str	r4, [r0, #36]	@ 0x24
 800798c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	2301      	movs	r3, #1
 8007994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007998:	f000 b806 	b.w	80079a8 <__strtok_r>
 800799c:	20000024 	.word	0x20000024
 80079a0:	08008a01 	.word	0x08008a01
 80079a4:	08008a18 	.word	0x08008a18

080079a8 <__strtok_r>:
 80079a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079aa:	4604      	mov	r4, r0
 80079ac:	b908      	cbnz	r0, 80079b2 <__strtok_r+0xa>
 80079ae:	6814      	ldr	r4, [r2, #0]
 80079b0:	b144      	cbz	r4, 80079c4 <__strtok_r+0x1c>
 80079b2:	4620      	mov	r0, r4
 80079b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079b8:	460f      	mov	r7, r1
 80079ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80079be:	b91e      	cbnz	r6, 80079c8 <__strtok_r+0x20>
 80079c0:	b965      	cbnz	r5, 80079dc <__strtok_r+0x34>
 80079c2:	6015      	str	r5, [r2, #0]
 80079c4:	2000      	movs	r0, #0
 80079c6:	e005      	b.n	80079d4 <__strtok_r+0x2c>
 80079c8:	42b5      	cmp	r5, r6
 80079ca:	d1f6      	bne.n	80079ba <__strtok_r+0x12>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f0      	bne.n	80079b2 <__strtok_r+0xa>
 80079d0:	6014      	str	r4, [r2, #0]
 80079d2:	7003      	strb	r3, [r0, #0]
 80079d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d6:	461c      	mov	r4, r3
 80079d8:	e00c      	b.n	80079f4 <__strtok_r+0x4c>
 80079da:	b91d      	cbnz	r5, 80079e4 <__strtok_r+0x3c>
 80079dc:	4627      	mov	r7, r4
 80079de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079e2:	460e      	mov	r6, r1
 80079e4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079e8:	42ab      	cmp	r3, r5
 80079ea:	d1f6      	bne.n	80079da <__strtok_r+0x32>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0f2      	beq.n	80079d6 <__strtok_r+0x2e>
 80079f0:	2300      	movs	r3, #0
 80079f2:	703b      	strb	r3, [r7, #0]
 80079f4:	6014      	str	r4, [r2, #0]
 80079f6:	e7ed      	b.n	80079d4 <__strtok_r+0x2c>

080079f8 <_close_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d06      	ldr	r5, [pc, #24]	@ (8007a14 <_close_r+0x1c>)
 80079fc:	2300      	movs	r3, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	602b      	str	r3, [r5, #0]
 8007a04:	f7f9 ff00 	bl	8001808 <_close>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_close_r+0x1a>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_close_r+0x1a>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	20004e4c 	.word	0x20004e4c

08007a18 <_reclaim_reent>:
 8007a18:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad0 <_reclaim_reent+0xb8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4283      	cmp	r3, r0
 8007a1e:	b570      	push	{r4, r5, r6, lr}
 8007a20:	4604      	mov	r4, r0
 8007a22:	d053      	beq.n	8007acc <_reclaim_reent+0xb4>
 8007a24:	69c3      	ldr	r3, [r0, #28]
 8007a26:	b31b      	cbz	r3, 8007a70 <_reclaim_reent+0x58>
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	b163      	cbz	r3, 8007a46 <_reclaim_reent+0x2e>
 8007a2c:	2500      	movs	r5, #0
 8007a2e:	69e3      	ldr	r3, [r4, #28]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	5959      	ldr	r1, [r3, r5]
 8007a34:	b9b1      	cbnz	r1, 8007a64 <_reclaim_reent+0x4c>
 8007a36:	3504      	adds	r5, #4
 8007a38:	2d80      	cmp	r5, #128	@ 0x80
 8007a3a:	d1f8      	bne.n	8007a2e <_reclaim_reent+0x16>
 8007a3c:	69e3      	ldr	r3, [r4, #28]
 8007a3e:	4620      	mov	r0, r4
 8007a40:	68d9      	ldr	r1, [r3, #12]
 8007a42:	f000 f8df 	bl	8007c04 <_free_r>
 8007a46:	69e3      	ldr	r3, [r4, #28]
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	b111      	cbz	r1, 8007a52 <_reclaim_reent+0x3a>
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 f8d9 	bl	8007c04 <_free_r>
 8007a52:	69e3      	ldr	r3, [r4, #28]
 8007a54:	689d      	ldr	r5, [r3, #8]
 8007a56:	b15d      	cbz	r5, 8007a70 <_reclaim_reent+0x58>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	682d      	ldr	r5, [r5, #0]
 8007a5e:	f000 f8d1 	bl	8007c04 <_free_r>
 8007a62:	e7f8      	b.n	8007a56 <_reclaim_reent+0x3e>
 8007a64:	680e      	ldr	r6, [r1, #0]
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 f8cc 	bl	8007c04 <_free_r>
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	e7e1      	b.n	8007a34 <_reclaim_reent+0x1c>
 8007a70:	6961      	ldr	r1, [r4, #20]
 8007a72:	b111      	cbz	r1, 8007a7a <_reclaim_reent+0x62>
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 f8c5 	bl	8007c04 <_free_r>
 8007a7a:	69e1      	ldr	r1, [r4, #28]
 8007a7c:	b111      	cbz	r1, 8007a84 <_reclaim_reent+0x6c>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 f8c0 	bl	8007c04 <_free_r>
 8007a84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a86:	b111      	cbz	r1, 8007a8e <_reclaim_reent+0x76>
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 f8bb 	bl	8007c04 <_free_r>
 8007a8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a90:	b111      	cbz	r1, 8007a98 <_reclaim_reent+0x80>
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 f8b6 	bl	8007c04 <_free_r>
 8007a98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a9a:	b111      	cbz	r1, 8007aa2 <_reclaim_reent+0x8a>
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f000 f8b1 	bl	8007c04 <_free_r>
 8007aa2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007aa4:	b111      	cbz	r1, 8007aac <_reclaim_reent+0x94>
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 f8ac 	bl	8007c04 <_free_r>
 8007aac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007aae:	b111      	cbz	r1, 8007ab6 <_reclaim_reent+0x9e>
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 f8a7 	bl	8007c04 <_free_r>
 8007ab6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007ab8:	b111      	cbz	r1, 8007ac0 <_reclaim_reent+0xa8>
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 f8a2 	bl	8007c04 <_free_r>
 8007ac0:	6a23      	ldr	r3, [r4, #32]
 8007ac2:	b11b      	cbz	r3, 8007acc <_reclaim_reent+0xb4>
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007aca:	4718      	bx	r3
 8007acc:	bd70      	pop	{r4, r5, r6, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000024 	.word	0x20000024

08007ad4 <_lseek_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d07      	ldr	r5, [pc, #28]	@ (8007af4 <_lseek_r+0x20>)
 8007ad8:	4604      	mov	r4, r0
 8007ada:	4608      	mov	r0, r1
 8007adc:	4611      	mov	r1, r2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	602a      	str	r2, [r5, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f7f9 feb7 	bl	8001856 <_lseek>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_lseek_r+0x1e>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_lseek_r+0x1e>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	20004e4c 	.word	0x20004e4c

08007af8 <_read_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d07      	ldr	r5, [pc, #28]	@ (8007b18 <_read_r+0x20>)
 8007afc:	4604      	mov	r4, r0
 8007afe:	4608      	mov	r0, r1
 8007b00:	4611      	mov	r1, r2
 8007b02:	2200      	movs	r2, #0
 8007b04:	602a      	str	r2, [r5, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f7f9 fe45 	bl	8001796 <_read>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d102      	bne.n	8007b16 <_read_r+0x1e>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	b103      	cbz	r3, 8007b16 <_read_r+0x1e>
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	20004e4c 	.word	0x20004e4c

08007b1c <_write_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d07      	ldr	r5, [pc, #28]	@ (8007b3c <_write_r+0x20>)
 8007b20:	4604      	mov	r4, r0
 8007b22:	4608      	mov	r0, r1
 8007b24:	4611      	mov	r1, r2
 8007b26:	2200      	movs	r2, #0
 8007b28:	602a      	str	r2, [r5, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	f7f9 fe50 	bl	80017d0 <_write>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d102      	bne.n	8007b3a <_write_r+0x1e>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b103      	cbz	r3, 8007b3a <_write_r+0x1e>
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	20004e4c 	.word	0x20004e4c

08007b40 <__errno>:
 8007b40:	4b01      	ldr	r3, [pc, #4]	@ (8007b48 <__errno+0x8>)
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000024 	.word	0x20000024

08007b4c <__libc_init_array>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8007b84 <__libc_init_array+0x38>)
 8007b50:	4c0d      	ldr	r4, [pc, #52]	@ (8007b88 <__libc_init_array+0x3c>)
 8007b52:	1b64      	subs	r4, r4, r5
 8007b54:	10a4      	asrs	r4, r4, #2
 8007b56:	2600      	movs	r6, #0
 8007b58:	42a6      	cmp	r6, r4
 8007b5a:	d109      	bne.n	8007b70 <__libc_init_array+0x24>
 8007b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b8c <__libc_init_array+0x40>)
 8007b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8007b90 <__libc_init_array+0x44>)
 8007b60:	f000 fe4e 	bl	8008800 <_init>
 8007b64:	1b64      	subs	r4, r4, r5
 8007b66:	10a4      	asrs	r4, r4, #2
 8007b68:	2600      	movs	r6, #0
 8007b6a:	42a6      	cmp	r6, r4
 8007b6c:	d105      	bne.n	8007b7a <__libc_init_array+0x2e>
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b74:	4798      	blx	r3
 8007b76:	3601      	adds	r6, #1
 8007b78:	e7ee      	b.n	8007b58 <__libc_init_array+0xc>
 8007b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7e:	4798      	blx	r3
 8007b80:	3601      	adds	r6, #1
 8007b82:	e7f2      	b.n	8007b6a <__libc_init_array+0x1e>
 8007b84:	08008aec 	.word	0x08008aec
 8007b88:	08008aec 	.word	0x08008aec
 8007b8c:	08008aec 	.word	0x08008aec
 8007b90:	08008af0 	.word	0x08008af0

08007b94 <__retarget_lock_init_recursive>:
 8007b94:	4770      	bx	lr

08007b96 <__retarget_lock_acquire_recursive>:
 8007b96:	4770      	bx	lr

08007b98 <__retarget_lock_release_recursive>:
 8007b98:	4770      	bx	lr

08007b9a <strcpy>:
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ba0:	f803 2b01 	strb.w	r2, [r3], #1
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	d1f9      	bne.n	8007b9c <strcpy+0x2>
 8007ba8:	4770      	bx	lr

08007baa <memcpy>:
 8007baa:	440a      	add	r2, r1
 8007bac:	4291      	cmp	r1, r2
 8007bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bb2:	d100      	bne.n	8007bb6 <memcpy+0xc>
 8007bb4:	4770      	bx	lr
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bc0:	4291      	cmp	r1, r2
 8007bc2:	d1f9      	bne.n	8007bb8 <memcpy+0xe>
 8007bc4:	bd10      	pop	{r4, pc}
	...

08007bc8 <__assert_func>:
 8007bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bca:	4614      	mov	r4, r2
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4b09      	ldr	r3, [pc, #36]	@ (8007bf4 <__assert_func+0x2c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	68d8      	ldr	r0, [r3, #12]
 8007bd6:	b14c      	cbz	r4, 8007bec <__assert_func+0x24>
 8007bd8:	4b07      	ldr	r3, [pc, #28]	@ (8007bf8 <__assert_func+0x30>)
 8007bda:	9100      	str	r1, [sp, #0]
 8007bdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007be0:	4906      	ldr	r1, [pc, #24]	@ (8007bfc <__assert_func+0x34>)
 8007be2:	462b      	mov	r3, r5
 8007be4:	f000 f9ba 	bl	8007f5c <fiprintf>
 8007be8:	f000 f9da 	bl	8007fa0 <abort>
 8007bec:	4b04      	ldr	r3, [pc, #16]	@ (8007c00 <__assert_func+0x38>)
 8007bee:	461c      	mov	r4, r3
 8007bf0:	e7f3      	b.n	8007bda <__assert_func+0x12>
 8007bf2:	bf00      	nop
 8007bf4:	20000024 	.word	0x20000024
 8007bf8:	08008a72 	.word	0x08008a72
 8007bfc:	08008a7f 	.word	0x08008a7f
 8007c00:	08008aad 	.word	0x08008aad

08007c04 <_free_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4605      	mov	r5, r0
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	d041      	beq.n	8007c90 <_free_r+0x8c>
 8007c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c10:	1f0c      	subs	r4, r1, #4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bfb8      	it	lt
 8007c16:	18e4      	addlt	r4, r4, r3
 8007c18:	f000 f8e8 	bl	8007dec <__malloc_lock>
 8007c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c94 <_free_r+0x90>)
 8007c1e:	6813      	ldr	r3, [r2, #0]
 8007c20:	b933      	cbnz	r3, 8007c30 <_free_r+0x2c>
 8007c22:	6063      	str	r3, [r4, #4]
 8007c24:	6014      	str	r4, [r2, #0]
 8007c26:	4628      	mov	r0, r5
 8007c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c2c:	f000 b8e4 	b.w	8007df8 <__malloc_unlock>
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d908      	bls.n	8007c46 <_free_r+0x42>
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	1821      	adds	r1, r4, r0
 8007c38:	428b      	cmp	r3, r1
 8007c3a:	bf01      	itttt	eq
 8007c3c:	6819      	ldreq	r1, [r3, #0]
 8007c3e:	685b      	ldreq	r3, [r3, #4]
 8007c40:	1809      	addeq	r1, r1, r0
 8007c42:	6021      	streq	r1, [r4, #0]
 8007c44:	e7ed      	b.n	8007c22 <_free_r+0x1e>
 8007c46:	461a      	mov	r2, r3
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	b10b      	cbz	r3, 8007c50 <_free_r+0x4c>
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	d9fa      	bls.n	8007c46 <_free_r+0x42>
 8007c50:	6811      	ldr	r1, [r2, #0]
 8007c52:	1850      	adds	r0, r2, r1
 8007c54:	42a0      	cmp	r0, r4
 8007c56:	d10b      	bne.n	8007c70 <_free_r+0x6c>
 8007c58:	6820      	ldr	r0, [r4, #0]
 8007c5a:	4401      	add	r1, r0
 8007c5c:	1850      	adds	r0, r2, r1
 8007c5e:	4283      	cmp	r3, r0
 8007c60:	6011      	str	r1, [r2, #0]
 8007c62:	d1e0      	bne.n	8007c26 <_free_r+0x22>
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	6053      	str	r3, [r2, #4]
 8007c6a:	4408      	add	r0, r1
 8007c6c:	6010      	str	r0, [r2, #0]
 8007c6e:	e7da      	b.n	8007c26 <_free_r+0x22>
 8007c70:	d902      	bls.n	8007c78 <_free_r+0x74>
 8007c72:	230c      	movs	r3, #12
 8007c74:	602b      	str	r3, [r5, #0]
 8007c76:	e7d6      	b.n	8007c26 <_free_r+0x22>
 8007c78:	6820      	ldr	r0, [r4, #0]
 8007c7a:	1821      	adds	r1, r4, r0
 8007c7c:	428b      	cmp	r3, r1
 8007c7e:	bf04      	itt	eq
 8007c80:	6819      	ldreq	r1, [r3, #0]
 8007c82:	685b      	ldreq	r3, [r3, #4]
 8007c84:	6063      	str	r3, [r4, #4]
 8007c86:	bf04      	itt	eq
 8007c88:	1809      	addeq	r1, r1, r0
 8007c8a:	6021      	streq	r1, [r4, #0]
 8007c8c:	6054      	str	r4, [r2, #4]
 8007c8e:	e7ca      	b.n	8007c26 <_free_r+0x22>
 8007c90:	bd38      	pop	{r3, r4, r5, pc}
 8007c92:	bf00      	nop
 8007c94:	20004e58 	.word	0x20004e58

08007c98 <malloc>:
 8007c98:	4b02      	ldr	r3, [pc, #8]	@ (8007ca4 <malloc+0xc>)
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	6818      	ldr	r0, [r3, #0]
 8007c9e:	f000 b825 	b.w	8007cec <_malloc_r>
 8007ca2:	bf00      	nop
 8007ca4:	20000024 	.word	0x20000024

08007ca8 <sbrk_aligned>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	4e0f      	ldr	r6, [pc, #60]	@ (8007ce8 <sbrk_aligned+0x40>)
 8007cac:	460c      	mov	r4, r1
 8007cae:	6831      	ldr	r1, [r6, #0]
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	b911      	cbnz	r1, 8007cba <sbrk_aligned+0x12>
 8007cb4:	f000 f964 	bl	8007f80 <_sbrk_r>
 8007cb8:	6030      	str	r0, [r6, #0]
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f000 f95f 	bl	8007f80 <_sbrk_r>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d103      	bne.n	8007cce <sbrk_aligned+0x26>
 8007cc6:	f04f 34ff 	mov.w	r4, #4294967295
 8007cca:	4620      	mov	r0, r4
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
 8007cce:	1cc4      	adds	r4, r0, #3
 8007cd0:	f024 0403 	bic.w	r4, r4, #3
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d0f8      	beq.n	8007cca <sbrk_aligned+0x22>
 8007cd8:	1a21      	subs	r1, r4, r0
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f950 	bl	8007f80 <_sbrk_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d1f2      	bne.n	8007cca <sbrk_aligned+0x22>
 8007ce4:	e7ef      	b.n	8007cc6 <sbrk_aligned+0x1e>
 8007ce6:	bf00      	nop
 8007ce8:	20004e54 	.word	0x20004e54

08007cec <_malloc_r>:
 8007cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf0:	1ccd      	adds	r5, r1, #3
 8007cf2:	f025 0503 	bic.w	r5, r5, #3
 8007cf6:	3508      	adds	r5, #8
 8007cf8:	2d0c      	cmp	r5, #12
 8007cfa:	bf38      	it	cc
 8007cfc:	250c      	movcc	r5, #12
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	4606      	mov	r6, r0
 8007d02:	db01      	blt.n	8007d08 <_malloc_r+0x1c>
 8007d04:	42a9      	cmp	r1, r5
 8007d06:	d904      	bls.n	8007d12 <_malloc_r+0x26>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	6033      	str	r3, [r6, #0]
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007de8 <_malloc_r+0xfc>
 8007d16:	f000 f869 	bl	8007dec <__malloc_lock>
 8007d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d1e:	461c      	mov	r4, r3
 8007d20:	bb44      	cbnz	r4, 8007d74 <_malloc_r+0x88>
 8007d22:	4629      	mov	r1, r5
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7ff ffbf 	bl	8007ca8 <sbrk_aligned>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	d158      	bne.n	8007de2 <_malloc_r+0xf6>
 8007d30:	f8d8 4000 	ldr.w	r4, [r8]
 8007d34:	4627      	mov	r7, r4
 8007d36:	2f00      	cmp	r7, #0
 8007d38:	d143      	bne.n	8007dc2 <_malloc_r+0xd6>
 8007d3a:	2c00      	cmp	r4, #0
 8007d3c:	d04b      	beq.n	8007dd6 <_malloc_r+0xea>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	4639      	mov	r1, r7
 8007d42:	4630      	mov	r0, r6
 8007d44:	eb04 0903 	add.w	r9, r4, r3
 8007d48:	f000 f91a 	bl	8007f80 <_sbrk_r>
 8007d4c:	4581      	cmp	r9, r0
 8007d4e:	d142      	bne.n	8007dd6 <_malloc_r+0xea>
 8007d50:	6821      	ldr	r1, [r4, #0]
 8007d52:	1a6d      	subs	r5, r5, r1
 8007d54:	4629      	mov	r1, r5
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7ff ffa6 	bl	8007ca8 <sbrk_aligned>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d03a      	beq.n	8007dd6 <_malloc_r+0xea>
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	442b      	add	r3, r5
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	f8d8 3000 	ldr.w	r3, [r8]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	bb62      	cbnz	r2, 8007dc8 <_malloc_r+0xdc>
 8007d6e:	f8c8 7000 	str.w	r7, [r8]
 8007d72:	e00f      	b.n	8007d94 <_malloc_r+0xa8>
 8007d74:	6822      	ldr	r2, [r4, #0]
 8007d76:	1b52      	subs	r2, r2, r5
 8007d78:	d420      	bmi.n	8007dbc <_malloc_r+0xd0>
 8007d7a:	2a0b      	cmp	r2, #11
 8007d7c:	d917      	bls.n	8007dae <_malloc_r+0xc2>
 8007d7e:	1961      	adds	r1, r4, r5
 8007d80:	42a3      	cmp	r3, r4
 8007d82:	6025      	str	r5, [r4, #0]
 8007d84:	bf18      	it	ne
 8007d86:	6059      	strne	r1, [r3, #4]
 8007d88:	6863      	ldr	r3, [r4, #4]
 8007d8a:	bf08      	it	eq
 8007d8c:	f8c8 1000 	streq.w	r1, [r8]
 8007d90:	5162      	str	r2, [r4, r5]
 8007d92:	604b      	str	r3, [r1, #4]
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 f82f 	bl	8007df8 <__malloc_unlock>
 8007d9a:	f104 000b 	add.w	r0, r4, #11
 8007d9e:	1d23      	adds	r3, r4, #4
 8007da0:	f020 0007 	bic.w	r0, r0, #7
 8007da4:	1ac2      	subs	r2, r0, r3
 8007da6:	bf1c      	itt	ne
 8007da8:	1a1b      	subne	r3, r3, r0
 8007daa:	50a3      	strne	r3, [r4, r2]
 8007dac:	e7af      	b.n	8007d0e <_malloc_r+0x22>
 8007dae:	6862      	ldr	r2, [r4, #4]
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	bf0c      	ite	eq
 8007db4:	f8c8 2000 	streq.w	r2, [r8]
 8007db8:	605a      	strne	r2, [r3, #4]
 8007dba:	e7eb      	b.n	8007d94 <_malloc_r+0xa8>
 8007dbc:	4623      	mov	r3, r4
 8007dbe:	6864      	ldr	r4, [r4, #4]
 8007dc0:	e7ae      	b.n	8007d20 <_malloc_r+0x34>
 8007dc2:	463c      	mov	r4, r7
 8007dc4:	687f      	ldr	r7, [r7, #4]
 8007dc6:	e7b6      	b.n	8007d36 <_malloc_r+0x4a>
 8007dc8:	461a      	mov	r2, r3
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d1fb      	bne.n	8007dc8 <_malloc_r+0xdc>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	6053      	str	r3, [r2, #4]
 8007dd4:	e7de      	b.n	8007d94 <_malloc_r+0xa8>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	6033      	str	r3, [r6, #0]
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f000 f80c 	bl	8007df8 <__malloc_unlock>
 8007de0:	e794      	b.n	8007d0c <_malloc_r+0x20>
 8007de2:	6005      	str	r5, [r0, #0]
 8007de4:	e7d6      	b.n	8007d94 <_malloc_r+0xa8>
 8007de6:	bf00      	nop
 8007de8:	20004e58 	.word	0x20004e58

08007dec <__malloc_lock>:
 8007dec:	4801      	ldr	r0, [pc, #4]	@ (8007df4 <__malloc_lock+0x8>)
 8007dee:	f7ff bed2 	b.w	8007b96 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	20004e50 	.word	0x20004e50

08007df8 <__malloc_unlock>:
 8007df8:	4801      	ldr	r0, [pc, #4]	@ (8007e00 <__malloc_unlock+0x8>)
 8007dfa:	f7ff becd 	b.w	8007b98 <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	20004e50 	.word	0x20004e50

08007e04 <__sflush_r>:
 8007e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0c:	0716      	lsls	r6, r2, #28
 8007e0e:	4605      	mov	r5, r0
 8007e10:	460c      	mov	r4, r1
 8007e12:	d454      	bmi.n	8007ebe <__sflush_r+0xba>
 8007e14:	684b      	ldr	r3, [r1, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	dc02      	bgt.n	8007e20 <__sflush_r+0x1c>
 8007e1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dd48      	ble.n	8007eb2 <__sflush_r+0xae>
 8007e20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	d045      	beq.n	8007eb2 <__sflush_r+0xae>
 8007e26:	2300      	movs	r3, #0
 8007e28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e2c:	682f      	ldr	r7, [r5, #0]
 8007e2e:	6a21      	ldr	r1, [r4, #32]
 8007e30:	602b      	str	r3, [r5, #0]
 8007e32:	d030      	beq.n	8007e96 <__sflush_r+0x92>
 8007e34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	0759      	lsls	r1, r3, #29
 8007e3a:	d505      	bpl.n	8007e48 <__sflush_r+0x44>
 8007e3c:	6863      	ldr	r3, [r4, #4]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e42:	b10b      	cbz	r3, 8007e48 <__sflush_r+0x44>
 8007e44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e46:	1ad2      	subs	r2, r2, r3
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e4c:	6a21      	ldr	r1, [r4, #32]
 8007e4e:	4628      	mov	r0, r5
 8007e50:	47b0      	blx	r6
 8007e52:	1c43      	adds	r3, r0, #1
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	d106      	bne.n	8007e66 <__sflush_r+0x62>
 8007e58:	6829      	ldr	r1, [r5, #0]
 8007e5a:	291d      	cmp	r1, #29
 8007e5c:	d82b      	bhi.n	8007eb6 <__sflush_r+0xb2>
 8007e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007f08 <__sflush_r+0x104>)
 8007e60:	40ca      	lsrs	r2, r1
 8007e62:	07d6      	lsls	r6, r2, #31
 8007e64:	d527      	bpl.n	8007eb6 <__sflush_r+0xb2>
 8007e66:	2200      	movs	r2, #0
 8007e68:	6062      	str	r2, [r4, #4]
 8007e6a:	04d9      	lsls	r1, r3, #19
 8007e6c:	6922      	ldr	r2, [r4, #16]
 8007e6e:	6022      	str	r2, [r4, #0]
 8007e70:	d504      	bpl.n	8007e7c <__sflush_r+0x78>
 8007e72:	1c42      	adds	r2, r0, #1
 8007e74:	d101      	bne.n	8007e7a <__sflush_r+0x76>
 8007e76:	682b      	ldr	r3, [r5, #0]
 8007e78:	b903      	cbnz	r3, 8007e7c <__sflush_r+0x78>
 8007e7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e7e:	602f      	str	r7, [r5, #0]
 8007e80:	b1b9      	cbz	r1, 8007eb2 <__sflush_r+0xae>
 8007e82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e86:	4299      	cmp	r1, r3
 8007e88:	d002      	beq.n	8007e90 <__sflush_r+0x8c>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f7ff feba 	bl	8007c04 <_free_r>
 8007e90:	2300      	movs	r3, #0
 8007e92:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e94:	e00d      	b.n	8007eb2 <__sflush_r+0xae>
 8007e96:	2301      	movs	r3, #1
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b0      	blx	r6
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	1c50      	adds	r0, r2, #1
 8007ea0:	d1c9      	bne.n	8007e36 <__sflush_r+0x32>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0c6      	beq.n	8007e36 <__sflush_r+0x32>
 8007ea8:	2b1d      	cmp	r3, #29
 8007eaa:	d001      	beq.n	8007eb0 <__sflush_r+0xac>
 8007eac:	2b16      	cmp	r3, #22
 8007eae:	d11e      	bne.n	8007eee <__sflush_r+0xea>
 8007eb0:	602f      	str	r7, [r5, #0]
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e022      	b.n	8007efc <__sflush_r+0xf8>
 8007eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eba:	b21b      	sxth	r3, r3
 8007ebc:	e01b      	b.n	8007ef6 <__sflush_r+0xf2>
 8007ebe:	690f      	ldr	r7, [r1, #16]
 8007ec0:	2f00      	cmp	r7, #0
 8007ec2:	d0f6      	beq.n	8007eb2 <__sflush_r+0xae>
 8007ec4:	0793      	lsls	r3, r2, #30
 8007ec6:	680e      	ldr	r6, [r1, #0]
 8007ec8:	bf08      	it	eq
 8007eca:	694b      	ldreq	r3, [r1, #20]
 8007ecc:	600f      	str	r7, [r1, #0]
 8007ece:	bf18      	it	ne
 8007ed0:	2300      	movne	r3, #0
 8007ed2:	eba6 0807 	sub.w	r8, r6, r7
 8007ed6:	608b      	str	r3, [r1, #8]
 8007ed8:	f1b8 0f00 	cmp.w	r8, #0
 8007edc:	dde9      	ble.n	8007eb2 <__sflush_r+0xae>
 8007ede:	6a21      	ldr	r1, [r4, #32]
 8007ee0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ee2:	4643      	mov	r3, r8
 8007ee4:	463a      	mov	r2, r7
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	47b0      	blx	r6
 8007eea:	2800      	cmp	r0, #0
 8007eec:	dc08      	bgt.n	8007f00 <__sflush_r+0xfc>
 8007eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ef6:	81a3      	strh	r3, [r4, #12]
 8007ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8007efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f00:	4407      	add	r7, r0
 8007f02:	eba8 0800 	sub.w	r8, r8, r0
 8007f06:	e7e7      	b.n	8007ed8 <__sflush_r+0xd4>
 8007f08:	20400001 	.word	0x20400001

08007f0c <_fflush_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	690b      	ldr	r3, [r1, #16]
 8007f10:	4605      	mov	r5, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	b913      	cbnz	r3, 8007f1c <_fflush_r+0x10>
 8007f16:	2500      	movs	r5, #0
 8007f18:	4628      	mov	r0, r5
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	b118      	cbz	r0, 8007f26 <_fflush_r+0x1a>
 8007f1e:	6a03      	ldr	r3, [r0, #32]
 8007f20:	b90b      	cbnz	r3, 8007f26 <_fflush_r+0x1a>
 8007f22:	f7ff fc7d 	bl	8007820 <__sinit>
 8007f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0f3      	beq.n	8007f16 <_fflush_r+0xa>
 8007f2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f30:	07d0      	lsls	r0, r2, #31
 8007f32:	d404      	bmi.n	8007f3e <_fflush_r+0x32>
 8007f34:	0599      	lsls	r1, r3, #22
 8007f36:	d402      	bmi.n	8007f3e <_fflush_r+0x32>
 8007f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f3a:	f7ff fe2c 	bl	8007b96 <__retarget_lock_acquire_recursive>
 8007f3e:	4628      	mov	r0, r5
 8007f40:	4621      	mov	r1, r4
 8007f42:	f7ff ff5f 	bl	8007e04 <__sflush_r>
 8007f46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f48:	07da      	lsls	r2, r3, #31
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	d4e4      	bmi.n	8007f18 <_fflush_r+0xc>
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	059b      	lsls	r3, r3, #22
 8007f52:	d4e1      	bmi.n	8007f18 <_fflush_r+0xc>
 8007f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f56:	f7ff fe1f 	bl	8007b98 <__retarget_lock_release_recursive>
 8007f5a:	e7dd      	b.n	8007f18 <_fflush_r+0xc>

08007f5c <fiprintf>:
 8007f5c:	b40e      	push	{r1, r2, r3}
 8007f5e:	b503      	push	{r0, r1, lr}
 8007f60:	4601      	mov	r1, r0
 8007f62:	ab03      	add	r3, sp, #12
 8007f64:	4805      	ldr	r0, [pc, #20]	@ (8007f7c <fiprintf+0x20>)
 8007f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	f000 f847 	bl	8008000 <_vfiprintf_r>
 8007f72:	b002      	add	sp, #8
 8007f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f78:	b003      	add	sp, #12
 8007f7a:	4770      	bx	lr
 8007f7c:	20000024 	.word	0x20000024

08007f80 <_sbrk_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d06      	ldr	r5, [pc, #24]	@ (8007f9c <_sbrk_r+0x1c>)
 8007f84:	2300      	movs	r3, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	4608      	mov	r0, r1
 8007f8a:	602b      	str	r3, [r5, #0]
 8007f8c:	f7f9 fc70 	bl	8001870 <_sbrk>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_sbrk_r+0x1a>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_sbrk_r+0x1a>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	20004e4c 	.word	0x20004e4c

08007fa0 <abort>:
 8007fa0:	b508      	push	{r3, lr}
 8007fa2:	2006      	movs	r0, #6
 8007fa4:	f000 fb8c 	bl	80086c0 <raise>
 8007fa8:	2001      	movs	r0, #1
 8007faa:	f7f9 fbe9 	bl	8001780 <_exit>

08007fae <__sfputc_r>:
 8007fae:	6893      	ldr	r3, [r2, #8]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	b410      	push	{r4}
 8007fb6:	6093      	str	r3, [r2, #8]
 8007fb8:	da08      	bge.n	8007fcc <__sfputc_r+0x1e>
 8007fba:	6994      	ldr	r4, [r2, #24]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	db01      	blt.n	8007fc4 <__sfputc_r+0x16>
 8007fc0:	290a      	cmp	r1, #10
 8007fc2:	d103      	bne.n	8007fcc <__sfputc_r+0x1e>
 8007fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc8:	f000 babe 	b.w	8008548 <__swbuf_r>
 8007fcc:	6813      	ldr	r3, [r2, #0]
 8007fce:	1c58      	adds	r0, r3, #1
 8007fd0:	6010      	str	r0, [r2, #0]
 8007fd2:	7019      	strb	r1, [r3, #0]
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <__sfputs_r>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460f      	mov	r7, r1
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	18d5      	adds	r5, r2, r3
 8007fe6:	42ac      	cmp	r4, r5
 8007fe8:	d101      	bne.n	8007fee <__sfputs_r+0x12>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e007      	b.n	8007ffe <__sfputs_r+0x22>
 8007fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff ffda 	bl	8007fae <__sfputc_r>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	d1f3      	bne.n	8007fe6 <__sfputs_r+0xa>
 8007ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008000 <_vfiprintf_r>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	460d      	mov	r5, r1
 8008006:	b09d      	sub	sp, #116	@ 0x74
 8008008:	4614      	mov	r4, r2
 800800a:	4698      	mov	r8, r3
 800800c:	4606      	mov	r6, r0
 800800e:	b118      	cbz	r0, 8008018 <_vfiprintf_r+0x18>
 8008010:	6a03      	ldr	r3, [r0, #32]
 8008012:	b90b      	cbnz	r3, 8008018 <_vfiprintf_r+0x18>
 8008014:	f7ff fc04 	bl	8007820 <__sinit>
 8008018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800801a:	07d9      	lsls	r1, r3, #31
 800801c:	d405      	bmi.n	800802a <_vfiprintf_r+0x2a>
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	059a      	lsls	r2, r3, #22
 8008022:	d402      	bmi.n	800802a <_vfiprintf_r+0x2a>
 8008024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008026:	f7ff fdb6 	bl	8007b96 <__retarget_lock_acquire_recursive>
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	071b      	lsls	r3, r3, #28
 800802e:	d501      	bpl.n	8008034 <_vfiprintf_r+0x34>
 8008030:	692b      	ldr	r3, [r5, #16]
 8008032:	b99b      	cbnz	r3, 800805c <_vfiprintf_r+0x5c>
 8008034:	4629      	mov	r1, r5
 8008036:	4630      	mov	r0, r6
 8008038:	f000 fac4 	bl	80085c4 <__swsetup_r>
 800803c:	b170      	cbz	r0, 800805c <_vfiprintf_r+0x5c>
 800803e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008040:	07dc      	lsls	r4, r3, #31
 8008042:	d504      	bpl.n	800804e <_vfiprintf_r+0x4e>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	b01d      	add	sp, #116	@ 0x74
 800804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	0598      	lsls	r0, r3, #22
 8008052:	d4f7      	bmi.n	8008044 <_vfiprintf_r+0x44>
 8008054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008056:	f7ff fd9f 	bl	8007b98 <__retarget_lock_release_recursive>
 800805a:	e7f3      	b.n	8008044 <_vfiprintf_r+0x44>
 800805c:	2300      	movs	r3, #0
 800805e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008060:	2320      	movs	r3, #32
 8008062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008066:	f8cd 800c 	str.w	r8, [sp, #12]
 800806a:	2330      	movs	r3, #48	@ 0x30
 800806c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800821c <_vfiprintf_r+0x21c>
 8008070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008074:	f04f 0901 	mov.w	r9, #1
 8008078:	4623      	mov	r3, r4
 800807a:	469a      	mov	sl, r3
 800807c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008080:	b10a      	cbz	r2, 8008086 <_vfiprintf_r+0x86>
 8008082:	2a25      	cmp	r2, #37	@ 0x25
 8008084:	d1f9      	bne.n	800807a <_vfiprintf_r+0x7a>
 8008086:	ebba 0b04 	subs.w	fp, sl, r4
 800808a:	d00b      	beq.n	80080a4 <_vfiprintf_r+0xa4>
 800808c:	465b      	mov	r3, fp
 800808e:	4622      	mov	r2, r4
 8008090:	4629      	mov	r1, r5
 8008092:	4630      	mov	r0, r6
 8008094:	f7ff ffa2 	bl	8007fdc <__sfputs_r>
 8008098:	3001      	adds	r0, #1
 800809a:	f000 80a7 	beq.w	80081ec <_vfiprintf_r+0x1ec>
 800809e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080a0:	445a      	add	r2, fp
 80080a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 809f 	beq.w	80081ec <_vfiprintf_r+0x1ec>
 80080ae:	2300      	movs	r3, #0
 80080b0:	f04f 32ff 	mov.w	r2, #4294967295
 80080b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b8:	f10a 0a01 	add.w	sl, sl, #1
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	9307      	str	r3, [sp, #28]
 80080c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80080c6:	4654      	mov	r4, sl
 80080c8:	2205      	movs	r2, #5
 80080ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ce:	4853      	ldr	r0, [pc, #332]	@ (800821c <_vfiprintf_r+0x21c>)
 80080d0:	f7f8 f88e 	bl	80001f0 <memchr>
 80080d4:	9a04      	ldr	r2, [sp, #16]
 80080d6:	b9d8      	cbnz	r0, 8008110 <_vfiprintf_r+0x110>
 80080d8:	06d1      	lsls	r1, r2, #27
 80080da:	bf44      	itt	mi
 80080dc:	2320      	movmi	r3, #32
 80080de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080e2:	0713      	lsls	r3, r2, #28
 80080e4:	bf44      	itt	mi
 80080e6:	232b      	movmi	r3, #43	@ 0x2b
 80080e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ec:	f89a 3000 	ldrb.w	r3, [sl]
 80080f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f2:	d015      	beq.n	8008120 <_vfiprintf_r+0x120>
 80080f4:	9a07      	ldr	r2, [sp, #28]
 80080f6:	4654      	mov	r4, sl
 80080f8:	2000      	movs	r0, #0
 80080fa:	f04f 0c0a 	mov.w	ip, #10
 80080fe:	4621      	mov	r1, r4
 8008100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008104:	3b30      	subs	r3, #48	@ 0x30
 8008106:	2b09      	cmp	r3, #9
 8008108:	d94b      	bls.n	80081a2 <_vfiprintf_r+0x1a2>
 800810a:	b1b0      	cbz	r0, 800813a <_vfiprintf_r+0x13a>
 800810c:	9207      	str	r2, [sp, #28]
 800810e:	e014      	b.n	800813a <_vfiprintf_r+0x13a>
 8008110:	eba0 0308 	sub.w	r3, r0, r8
 8008114:	fa09 f303 	lsl.w	r3, r9, r3
 8008118:	4313      	orrs	r3, r2
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	46a2      	mov	sl, r4
 800811e:	e7d2      	b.n	80080c6 <_vfiprintf_r+0xc6>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	1d19      	adds	r1, r3, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	9103      	str	r1, [sp, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfbb      	ittet	lt
 800812c:	425b      	neglt	r3, r3
 800812e:	f042 0202 	orrlt.w	r2, r2, #2
 8008132:	9307      	strge	r3, [sp, #28]
 8008134:	9307      	strlt	r3, [sp, #28]
 8008136:	bfb8      	it	lt
 8008138:	9204      	strlt	r2, [sp, #16]
 800813a:	7823      	ldrb	r3, [r4, #0]
 800813c:	2b2e      	cmp	r3, #46	@ 0x2e
 800813e:	d10a      	bne.n	8008156 <_vfiprintf_r+0x156>
 8008140:	7863      	ldrb	r3, [r4, #1]
 8008142:	2b2a      	cmp	r3, #42	@ 0x2a
 8008144:	d132      	bne.n	80081ac <_vfiprintf_r+0x1ac>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	1d1a      	adds	r2, r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9203      	str	r2, [sp, #12]
 800814e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008152:	3402      	adds	r4, #2
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800822c <_vfiprintf_r+0x22c>
 800815a:	7821      	ldrb	r1, [r4, #0]
 800815c:	2203      	movs	r2, #3
 800815e:	4650      	mov	r0, sl
 8008160:	f7f8 f846 	bl	80001f0 <memchr>
 8008164:	b138      	cbz	r0, 8008176 <_vfiprintf_r+0x176>
 8008166:	9b04      	ldr	r3, [sp, #16]
 8008168:	eba0 000a 	sub.w	r0, r0, sl
 800816c:	2240      	movs	r2, #64	@ 0x40
 800816e:	4082      	lsls	r2, r0
 8008170:	4313      	orrs	r3, r2
 8008172:	3401      	adds	r4, #1
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817a:	4829      	ldr	r0, [pc, #164]	@ (8008220 <_vfiprintf_r+0x220>)
 800817c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008180:	2206      	movs	r2, #6
 8008182:	f7f8 f835 	bl	80001f0 <memchr>
 8008186:	2800      	cmp	r0, #0
 8008188:	d03f      	beq.n	800820a <_vfiprintf_r+0x20a>
 800818a:	4b26      	ldr	r3, [pc, #152]	@ (8008224 <_vfiprintf_r+0x224>)
 800818c:	bb1b      	cbnz	r3, 80081d6 <_vfiprintf_r+0x1d6>
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	3307      	adds	r3, #7
 8008192:	f023 0307 	bic.w	r3, r3, #7
 8008196:	3308      	adds	r3, #8
 8008198:	9303      	str	r3, [sp, #12]
 800819a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819c:	443b      	add	r3, r7
 800819e:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a0:	e76a      	b.n	8008078 <_vfiprintf_r+0x78>
 80081a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a6:	460c      	mov	r4, r1
 80081a8:	2001      	movs	r0, #1
 80081aa:	e7a8      	b.n	80080fe <_vfiprintf_r+0xfe>
 80081ac:	2300      	movs	r3, #0
 80081ae:	3401      	adds	r4, #1
 80081b0:	9305      	str	r3, [sp, #20]
 80081b2:	4619      	mov	r1, r3
 80081b4:	f04f 0c0a 	mov.w	ip, #10
 80081b8:	4620      	mov	r0, r4
 80081ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081be:	3a30      	subs	r2, #48	@ 0x30
 80081c0:	2a09      	cmp	r2, #9
 80081c2:	d903      	bls.n	80081cc <_vfiprintf_r+0x1cc>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0c6      	beq.n	8008156 <_vfiprintf_r+0x156>
 80081c8:	9105      	str	r1, [sp, #20]
 80081ca:	e7c4      	b.n	8008156 <_vfiprintf_r+0x156>
 80081cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d0:	4604      	mov	r4, r0
 80081d2:	2301      	movs	r3, #1
 80081d4:	e7f0      	b.n	80081b8 <_vfiprintf_r+0x1b8>
 80081d6:	ab03      	add	r3, sp, #12
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	462a      	mov	r2, r5
 80081dc:	4b12      	ldr	r3, [pc, #72]	@ (8008228 <_vfiprintf_r+0x228>)
 80081de:	a904      	add	r1, sp, #16
 80081e0:	4630      	mov	r0, r6
 80081e2:	f3af 8000 	nop.w
 80081e6:	4607      	mov	r7, r0
 80081e8:	1c78      	adds	r0, r7, #1
 80081ea:	d1d6      	bne.n	800819a <_vfiprintf_r+0x19a>
 80081ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ee:	07d9      	lsls	r1, r3, #31
 80081f0:	d405      	bmi.n	80081fe <_vfiprintf_r+0x1fe>
 80081f2:	89ab      	ldrh	r3, [r5, #12]
 80081f4:	059a      	lsls	r2, r3, #22
 80081f6:	d402      	bmi.n	80081fe <_vfiprintf_r+0x1fe>
 80081f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081fa:	f7ff fccd 	bl	8007b98 <__retarget_lock_release_recursive>
 80081fe:	89ab      	ldrh	r3, [r5, #12]
 8008200:	065b      	lsls	r3, r3, #25
 8008202:	f53f af1f 	bmi.w	8008044 <_vfiprintf_r+0x44>
 8008206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008208:	e71e      	b.n	8008048 <_vfiprintf_r+0x48>
 800820a:	ab03      	add	r3, sp, #12
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	462a      	mov	r2, r5
 8008210:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <_vfiprintf_r+0x228>)
 8008212:	a904      	add	r1, sp, #16
 8008214:	4630      	mov	r0, r6
 8008216:	f000 f879 	bl	800830c <_printf_i>
 800821a:	e7e4      	b.n	80081e6 <_vfiprintf_r+0x1e6>
 800821c:	08008aae 	.word	0x08008aae
 8008220:	08008ab8 	.word	0x08008ab8
 8008224:	00000000 	.word	0x00000000
 8008228:	08007fdd 	.word	0x08007fdd
 800822c:	08008ab4 	.word	0x08008ab4

08008230 <_printf_common>:
 8008230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008234:	4616      	mov	r6, r2
 8008236:	4698      	mov	r8, r3
 8008238:	688a      	ldr	r2, [r1, #8]
 800823a:	690b      	ldr	r3, [r1, #16]
 800823c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008240:	4293      	cmp	r3, r2
 8008242:	bfb8      	it	lt
 8008244:	4613      	movlt	r3, r2
 8008246:	6033      	str	r3, [r6, #0]
 8008248:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800824c:	4607      	mov	r7, r0
 800824e:	460c      	mov	r4, r1
 8008250:	b10a      	cbz	r2, 8008256 <_printf_common+0x26>
 8008252:	3301      	adds	r3, #1
 8008254:	6033      	str	r3, [r6, #0]
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	0699      	lsls	r1, r3, #26
 800825a:	bf42      	ittt	mi
 800825c:	6833      	ldrmi	r3, [r6, #0]
 800825e:	3302      	addmi	r3, #2
 8008260:	6033      	strmi	r3, [r6, #0]
 8008262:	6825      	ldr	r5, [r4, #0]
 8008264:	f015 0506 	ands.w	r5, r5, #6
 8008268:	d106      	bne.n	8008278 <_printf_common+0x48>
 800826a:	f104 0a19 	add.w	sl, r4, #25
 800826e:	68e3      	ldr	r3, [r4, #12]
 8008270:	6832      	ldr	r2, [r6, #0]
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	42ab      	cmp	r3, r5
 8008276:	dc26      	bgt.n	80082c6 <_printf_common+0x96>
 8008278:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800827c:	6822      	ldr	r2, [r4, #0]
 800827e:	3b00      	subs	r3, #0
 8008280:	bf18      	it	ne
 8008282:	2301      	movne	r3, #1
 8008284:	0692      	lsls	r2, r2, #26
 8008286:	d42b      	bmi.n	80082e0 <_printf_common+0xb0>
 8008288:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800828c:	4641      	mov	r1, r8
 800828e:	4638      	mov	r0, r7
 8008290:	47c8      	blx	r9
 8008292:	3001      	adds	r0, #1
 8008294:	d01e      	beq.n	80082d4 <_printf_common+0xa4>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	6922      	ldr	r2, [r4, #16]
 800829a:	f003 0306 	and.w	r3, r3, #6
 800829e:	2b04      	cmp	r3, #4
 80082a0:	bf02      	ittt	eq
 80082a2:	68e5      	ldreq	r5, [r4, #12]
 80082a4:	6833      	ldreq	r3, [r6, #0]
 80082a6:	1aed      	subeq	r5, r5, r3
 80082a8:	68a3      	ldr	r3, [r4, #8]
 80082aa:	bf0c      	ite	eq
 80082ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082b0:	2500      	movne	r5, #0
 80082b2:	4293      	cmp	r3, r2
 80082b4:	bfc4      	itt	gt
 80082b6:	1a9b      	subgt	r3, r3, r2
 80082b8:	18ed      	addgt	r5, r5, r3
 80082ba:	2600      	movs	r6, #0
 80082bc:	341a      	adds	r4, #26
 80082be:	42b5      	cmp	r5, r6
 80082c0:	d11a      	bne.n	80082f8 <_printf_common+0xc8>
 80082c2:	2000      	movs	r0, #0
 80082c4:	e008      	b.n	80082d8 <_printf_common+0xa8>
 80082c6:	2301      	movs	r3, #1
 80082c8:	4652      	mov	r2, sl
 80082ca:	4641      	mov	r1, r8
 80082cc:	4638      	mov	r0, r7
 80082ce:	47c8      	blx	r9
 80082d0:	3001      	adds	r0, #1
 80082d2:	d103      	bne.n	80082dc <_printf_common+0xac>
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082dc:	3501      	adds	r5, #1
 80082de:	e7c6      	b.n	800826e <_printf_common+0x3e>
 80082e0:	18e1      	adds	r1, r4, r3
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	2030      	movs	r0, #48	@ 0x30
 80082e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082ea:	4422      	add	r2, r4
 80082ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082f4:	3302      	adds	r3, #2
 80082f6:	e7c7      	b.n	8008288 <_printf_common+0x58>
 80082f8:	2301      	movs	r3, #1
 80082fa:	4622      	mov	r2, r4
 80082fc:	4641      	mov	r1, r8
 80082fe:	4638      	mov	r0, r7
 8008300:	47c8      	blx	r9
 8008302:	3001      	adds	r0, #1
 8008304:	d0e6      	beq.n	80082d4 <_printf_common+0xa4>
 8008306:	3601      	adds	r6, #1
 8008308:	e7d9      	b.n	80082be <_printf_common+0x8e>
	...

0800830c <_printf_i>:
 800830c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	7e0f      	ldrb	r7, [r1, #24]
 8008312:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008314:	2f78      	cmp	r7, #120	@ 0x78
 8008316:	4691      	mov	r9, r2
 8008318:	4680      	mov	r8, r0
 800831a:	460c      	mov	r4, r1
 800831c:	469a      	mov	sl, r3
 800831e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008322:	d807      	bhi.n	8008334 <_printf_i+0x28>
 8008324:	2f62      	cmp	r7, #98	@ 0x62
 8008326:	d80a      	bhi.n	800833e <_printf_i+0x32>
 8008328:	2f00      	cmp	r7, #0
 800832a:	f000 80d1 	beq.w	80084d0 <_printf_i+0x1c4>
 800832e:	2f58      	cmp	r7, #88	@ 0x58
 8008330:	f000 80b8 	beq.w	80084a4 <_printf_i+0x198>
 8008334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008338:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800833c:	e03a      	b.n	80083b4 <_printf_i+0xa8>
 800833e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008342:	2b15      	cmp	r3, #21
 8008344:	d8f6      	bhi.n	8008334 <_printf_i+0x28>
 8008346:	a101      	add	r1, pc, #4	@ (adr r1, 800834c <_printf_i+0x40>)
 8008348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800834c:	080083a5 	.word	0x080083a5
 8008350:	080083b9 	.word	0x080083b9
 8008354:	08008335 	.word	0x08008335
 8008358:	08008335 	.word	0x08008335
 800835c:	08008335 	.word	0x08008335
 8008360:	08008335 	.word	0x08008335
 8008364:	080083b9 	.word	0x080083b9
 8008368:	08008335 	.word	0x08008335
 800836c:	08008335 	.word	0x08008335
 8008370:	08008335 	.word	0x08008335
 8008374:	08008335 	.word	0x08008335
 8008378:	080084b7 	.word	0x080084b7
 800837c:	080083e3 	.word	0x080083e3
 8008380:	08008471 	.word	0x08008471
 8008384:	08008335 	.word	0x08008335
 8008388:	08008335 	.word	0x08008335
 800838c:	080084d9 	.word	0x080084d9
 8008390:	08008335 	.word	0x08008335
 8008394:	080083e3 	.word	0x080083e3
 8008398:	08008335 	.word	0x08008335
 800839c:	08008335 	.word	0x08008335
 80083a0:	08008479 	.word	0x08008479
 80083a4:	6833      	ldr	r3, [r6, #0]
 80083a6:	1d1a      	adds	r2, r3, #4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6032      	str	r2, [r6, #0]
 80083ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083b4:	2301      	movs	r3, #1
 80083b6:	e09c      	b.n	80084f2 <_printf_i+0x1e6>
 80083b8:	6833      	ldr	r3, [r6, #0]
 80083ba:	6820      	ldr	r0, [r4, #0]
 80083bc:	1d19      	adds	r1, r3, #4
 80083be:	6031      	str	r1, [r6, #0]
 80083c0:	0606      	lsls	r6, r0, #24
 80083c2:	d501      	bpl.n	80083c8 <_printf_i+0xbc>
 80083c4:	681d      	ldr	r5, [r3, #0]
 80083c6:	e003      	b.n	80083d0 <_printf_i+0xc4>
 80083c8:	0645      	lsls	r5, r0, #25
 80083ca:	d5fb      	bpl.n	80083c4 <_printf_i+0xb8>
 80083cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	da03      	bge.n	80083dc <_printf_i+0xd0>
 80083d4:	232d      	movs	r3, #45	@ 0x2d
 80083d6:	426d      	negs	r5, r5
 80083d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083dc:	4858      	ldr	r0, [pc, #352]	@ (8008540 <_printf_i+0x234>)
 80083de:	230a      	movs	r3, #10
 80083e0:	e011      	b.n	8008406 <_printf_i+0xfa>
 80083e2:	6821      	ldr	r1, [r4, #0]
 80083e4:	6833      	ldr	r3, [r6, #0]
 80083e6:	0608      	lsls	r0, r1, #24
 80083e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80083ec:	d402      	bmi.n	80083f4 <_printf_i+0xe8>
 80083ee:	0649      	lsls	r1, r1, #25
 80083f0:	bf48      	it	mi
 80083f2:	b2ad      	uxthmi	r5, r5
 80083f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80083f6:	4852      	ldr	r0, [pc, #328]	@ (8008540 <_printf_i+0x234>)
 80083f8:	6033      	str	r3, [r6, #0]
 80083fa:	bf14      	ite	ne
 80083fc:	230a      	movne	r3, #10
 80083fe:	2308      	moveq	r3, #8
 8008400:	2100      	movs	r1, #0
 8008402:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008406:	6866      	ldr	r6, [r4, #4]
 8008408:	60a6      	str	r6, [r4, #8]
 800840a:	2e00      	cmp	r6, #0
 800840c:	db05      	blt.n	800841a <_printf_i+0x10e>
 800840e:	6821      	ldr	r1, [r4, #0]
 8008410:	432e      	orrs	r6, r5
 8008412:	f021 0104 	bic.w	r1, r1, #4
 8008416:	6021      	str	r1, [r4, #0]
 8008418:	d04b      	beq.n	80084b2 <_printf_i+0x1a6>
 800841a:	4616      	mov	r6, r2
 800841c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008420:	fb03 5711 	mls	r7, r3, r1, r5
 8008424:	5dc7      	ldrb	r7, [r0, r7]
 8008426:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800842a:	462f      	mov	r7, r5
 800842c:	42bb      	cmp	r3, r7
 800842e:	460d      	mov	r5, r1
 8008430:	d9f4      	bls.n	800841c <_printf_i+0x110>
 8008432:	2b08      	cmp	r3, #8
 8008434:	d10b      	bne.n	800844e <_printf_i+0x142>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	07df      	lsls	r7, r3, #31
 800843a:	d508      	bpl.n	800844e <_printf_i+0x142>
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	6861      	ldr	r1, [r4, #4]
 8008440:	4299      	cmp	r1, r3
 8008442:	bfde      	ittt	le
 8008444:	2330      	movle	r3, #48	@ 0x30
 8008446:	f806 3c01 	strble.w	r3, [r6, #-1]
 800844a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800844e:	1b92      	subs	r2, r2, r6
 8008450:	6122      	str	r2, [r4, #16]
 8008452:	f8cd a000 	str.w	sl, [sp]
 8008456:	464b      	mov	r3, r9
 8008458:	aa03      	add	r2, sp, #12
 800845a:	4621      	mov	r1, r4
 800845c:	4640      	mov	r0, r8
 800845e:	f7ff fee7 	bl	8008230 <_printf_common>
 8008462:	3001      	adds	r0, #1
 8008464:	d14a      	bne.n	80084fc <_printf_i+0x1f0>
 8008466:	f04f 30ff 	mov.w	r0, #4294967295
 800846a:	b004      	add	sp, #16
 800846c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	f043 0320 	orr.w	r3, r3, #32
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	4832      	ldr	r0, [pc, #200]	@ (8008544 <_printf_i+0x238>)
 800847a:	2778      	movs	r7, #120	@ 0x78
 800847c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	6831      	ldr	r1, [r6, #0]
 8008484:	061f      	lsls	r7, r3, #24
 8008486:	f851 5b04 	ldr.w	r5, [r1], #4
 800848a:	d402      	bmi.n	8008492 <_printf_i+0x186>
 800848c:	065f      	lsls	r7, r3, #25
 800848e:	bf48      	it	mi
 8008490:	b2ad      	uxthmi	r5, r5
 8008492:	6031      	str	r1, [r6, #0]
 8008494:	07d9      	lsls	r1, r3, #31
 8008496:	bf44      	itt	mi
 8008498:	f043 0320 	orrmi.w	r3, r3, #32
 800849c:	6023      	strmi	r3, [r4, #0]
 800849e:	b11d      	cbz	r5, 80084a8 <_printf_i+0x19c>
 80084a0:	2310      	movs	r3, #16
 80084a2:	e7ad      	b.n	8008400 <_printf_i+0xf4>
 80084a4:	4826      	ldr	r0, [pc, #152]	@ (8008540 <_printf_i+0x234>)
 80084a6:	e7e9      	b.n	800847c <_printf_i+0x170>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	f023 0320 	bic.w	r3, r3, #32
 80084ae:	6023      	str	r3, [r4, #0]
 80084b0:	e7f6      	b.n	80084a0 <_printf_i+0x194>
 80084b2:	4616      	mov	r6, r2
 80084b4:	e7bd      	b.n	8008432 <_printf_i+0x126>
 80084b6:	6833      	ldr	r3, [r6, #0]
 80084b8:	6825      	ldr	r5, [r4, #0]
 80084ba:	6961      	ldr	r1, [r4, #20]
 80084bc:	1d18      	adds	r0, r3, #4
 80084be:	6030      	str	r0, [r6, #0]
 80084c0:	062e      	lsls	r6, r5, #24
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	d501      	bpl.n	80084ca <_printf_i+0x1be>
 80084c6:	6019      	str	r1, [r3, #0]
 80084c8:	e002      	b.n	80084d0 <_printf_i+0x1c4>
 80084ca:	0668      	lsls	r0, r5, #25
 80084cc:	d5fb      	bpl.n	80084c6 <_printf_i+0x1ba>
 80084ce:	8019      	strh	r1, [r3, #0]
 80084d0:	2300      	movs	r3, #0
 80084d2:	6123      	str	r3, [r4, #16]
 80084d4:	4616      	mov	r6, r2
 80084d6:	e7bc      	b.n	8008452 <_printf_i+0x146>
 80084d8:	6833      	ldr	r3, [r6, #0]
 80084da:	1d1a      	adds	r2, r3, #4
 80084dc:	6032      	str	r2, [r6, #0]
 80084de:	681e      	ldr	r6, [r3, #0]
 80084e0:	6862      	ldr	r2, [r4, #4]
 80084e2:	2100      	movs	r1, #0
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7f7 fe83 	bl	80001f0 <memchr>
 80084ea:	b108      	cbz	r0, 80084f0 <_printf_i+0x1e4>
 80084ec:	1b80      	subs	r0, r0, r6
 80084ee:	6060      	str	r0, [r4, #4]
 80084f0:	6863      	ldr	r3, [r4, #4]
 80084f2:	6123      	str	r3, [r4, #16]
 80084f4:	2300      	movs	r3, #0
 80084f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084fa:	e7aa      	b.n	8008452 <_printf_i+0x146>
 80084fc:	6923      	ldr	r3, [r4, #16]
 80084fe:	4632      	mov	r2, r6
 8008500:	4649      	mov	r1, r9
 8008502:	4640      	mov	r0, r8
 8008504:	47d0      	blx	sl
 8008506:	3001      	adds	r0, #1
 8008508:	d0ad      	beq.n	8008466 <_printf_i+0x15a>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	079b      	lsls	r3, r3, #30
 800850e:	d413      	bmi.n	8008538 <_printf_i+0x22c>
 8008510:	68e0      	ldr	r0, [r4, #12]
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	4298      	cmp	r0, r3
 8008516:	bfb8      	it	lt
 8008518:	4618      	movlt	r0, r3
 800851a:	e7a6      	b.n	800846a <_printf_i+0x15e>
 800851c:	2301      	movs	r3, #1
 800851e:	4632      	mov	r2, r6
 8008520:	4649      	mov	r1, r9
 8008522:	4640      	mov	r0, r8
 8008524:	47d0      	blx	sl
 8008526:	3001      	adds	r0, #1
 8008528:	d09d      	beq.n	8008466 <_printf_i+0x15a>
 800852a:	3501      	adds	r5, #1
 800852c:	68e3      	ldr	r3, [r4, #12]
 800852e:	9903      	ldr	r1, [sp, #12]
 8008530:	1a5b      	subs	r3, r3, r1
 8008532:	42ab      	cmp	r3, r5
 8008534:	dcf2      	bgt.n	800851c <_printf_i+0x210>
 8008536:	e7eb      	b.n	8008510 <_printf_i+0x204>
 8008538:	2500      	movs	r5, #0
 800853a:	f104 0619 	add.w	r6, r4, #25
 800853e:	e7f5      	b.n	800852c <_printf_i+0x220>
 8008540:	08008abf 	.word	0x08008abf
 8008544:	08008ad0 	.word	0x08008ad0

08008548 <__swbuf_r>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	460e      	mov	r6, r1
 800854c:	4614      	mov	r4, r2
 800854e:	4605      	mov	r5, r0
 8008550:	b118      	cbz	r0, 800855a <__swbuf_r+0x12>
 8008552:	6a03      	ldr	r3, [r0, #32]
 8008554:	b90b      	cbnz	r3, 800855a <__swbuf_r+0x12>
 8008556:	f7ff f963 	bl	8007820 <__sinit>
 800855a:	69a3      	ldr	r3, [r4, #24]
 800855c:	60a3      	str	r3, [r4, #8]
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	071a      	lsls	r2, r3, #28
 8008562:	d501      	bpl.n	8008568 <__swbuf_r+0x20>
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	b943      	cbnz	r3, 800857a <__swbuf_r+0x32>
 8008568:	4621      	mov	r1, r4
 800856a:	4628      	mov	r0, r5
 800856c:	f000 f82a 	bl	80085c4 <__swsetup_r>
 8008570:	b118      	cbz	r0, 800857a <__swbuf_r+0x32>
 8008572:	f04f 37ff 	mov.w	r7, #4294967295
 8008576:	4638      	mov	r0, r7
 8008578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	6922      	ldr	r2, [r4, #16]
 800857e:	1a98      	subs	r0, r3, r2
 8008580:	6963      	ldr	r3, [r4, #20]
 8008582:	b2f6      	uxtb	r6, r6
 8008584:	4283      	cmp	r3, r0
 8008586:	4637      	mov	r7, r6
 8008588:	dc05      	bgt.n	8008596 <__swbuf_r+0x4e>
 800858a:	4621      	mov	r1, r4
 800858c:	4628      	mov	r0, r5
 800858e:	f7ff fcbd 	bl	8007f0c <_fflush_r>
 8008592:	2800      	cmp	r0, #0
 8008594:	d1ed      	bne.n	8008572 <__swbuf_r+0x2a>
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	3b01      	subs	r3, #1
 800859a:	60a3      	str	r3, [r4, #8]
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	6022      	str	r2, [r4, #0]
 80085a2:	701e      	strb	r6, [r3, #0]
 80085a4:	6962      	ldr	r2, [r4, #20]
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d004      	beq.n	80085b6 <__swbuf_r+0x6e>
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	07db      	lsls	r3, r3, #31
 80085b0:	d5e1      	bpl.n	8008576 <__swbuf_r+0x2e>
 80085b2:	2e0a      	cmp	r6, #10
 80085b4:	d1df      	bne.n	8008576 <__swbuf_r+0x2e>
 80085b6:	4621      	mov	r1, r4
 80085b8:	4628      	mov	r0, r5
 80085ba:	f7ff fca7 	bl	8007f0c <_fflush_r>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d0d9      	beq.n	8008576 <__swbuf_r+0x2e>
 80085c2:	e7d6      	b.n	8008572 <__swbuf_r+0x2a>

080085c4 <__swsetup_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4b29      	ldr	r3, [pc, #164]	@ (800866c <__swsetup_r+0xa8>)
 80085c8:	4605      	mov	r5, r0
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	460c      	mov	r4, r1
 80085ce:	b118      	cbz	r0, 80085d8 <__swsetup_r+0x14>
 80085d0:	6a03      	ldr	r3, [r0, #32]
 80085d2:	b90b      	cbnz	r3, 80085d8 <__swsetup_r+0x14>
 80085d4:	f7ff f924 	bl	8007820 <__sinit>
 80085d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085dc:	0719      	lsls	r1, r3, #28
 80085de:	d422      	bmi.n	8008626 <__swsetup_r+0x62>
 80085e0:	06da      	lsls	r2, r3, #27
 80085e2:	d407      	bmi.n	80085f4 <__swsetup_r+0x30>
 80085e4:	2209      	movs	r2, #9
 80085e6:	602a      	str	r2, [r5, #0]
 80085e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295
 80085f2:	e033      	b.n	800865c <__swsetup_r+0x98>
 80085f4:	0758      	lsls	r0, r3, #29
 80085f6:	d512      	bpl.n	800861e <__swsetup_r+0x5a>
 80085f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085fa:	b141      	cbz	r1, 800860e <__swsetup_r+0x4a>
 80085fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008600:	4299      	cmp	r1, r3
 8008602:	d002      	beq.n	800860a <__swsetup_r+0x46>
 8008604:	4628      	mov	r0, r5
 8008606:	f7ff fafd 	bl	8007c04 <_free_r>
 800860a:	2300      	movs	r3, #0
 800860c:	6363      	str	r3, [r4, #52]	@ 0x34
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	2300      	movs	r3, #0
 8008618:	6063      	str	r3, [r4, #4]
 800861a:	6923      	ldr	r3, [r4, #16]
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	f043 0308 	orr.w	r3, r3, #8
 8008624:	81a3      	strh	r3, [r4, #12]
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	b94b      	cbnz	r3, 800863e <__swsetup_r+0x7a>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008634:	d003      	beq.n	800863e <__swsetup_r+0x7a>
 8008636:	4621      	mov	r1, r4
 8008638:	4628      	mov	r0, r5
 800863a:	f000 f883 	bl	8008744 <__smakebuf_r>
 800863e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008642:	f013 0201 	ands.w	r2, r3, #1
 8008646:	d00a      	beq.n	800865e <__swsetup_r+0x9a>
 8008648:	2200      	movs	r2, #0
 800864a:	60a2      	str	r2, [r4, #8]
 800864c:	6962      	ldr	r2, [r4, #20]
 800864e:	4252      	negs	r2, r2
 8008650:	61a2      	str	r2, [r4, #24]
 8008652:	6922      	ldr	r2, [r4, #16]
 8008654:	b942      	cbnz	r2, 8008668 <__swsetup_r+0xa4>
 8008656:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800865a:	d1c5      	bne.n	80085e8 <__swsetup_r+0x24>
 800865c:	bd38      	pop	{r3, r4, r5, pc}
 800865e:	0799      	lsls	r1, r3, #30
 8008660:	bf58      	it	pl
 8008662:	6962      	ldrpl	r2, [r4, #20]
 8008664:	60a2      	str	r2, [r4, #8]
 8008666:	e7f4      	b.n	8008652 <__swsetup_r+0x8e>
 8008668:	2000      	movs	r0, #0
 800866a:	e7f7      	b.n	800865c <__swsetup_r+0x98>
 800866c:	20000024 	.word	0x20000024

08008670 <_raise_r>:
 8008670:	291f      	cmp	r1, #31
 8008672:	b538      	push	{r3, r4, r5, lr}
 8008674:	4605      	mov	r5, r0
 8008676:	460c      	mov	r4, r1
 8008678:	d904      	bls.n	8008684 <_raise_r+0x14>
 800867a:	2316      	movs	r3, #22
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	f04f 30ff 	mov.w	r0, #4294967295
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008686:	b112      	cbz	r2, 800868e <_raise_r+0x1e>
 8008688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800868c:	b94b      	cbnz	r3, 80086a2 <_raise_r+0x32>
 800868e:	4628      	mov	r0, r5
 8008690:	f000 f830 	bl	80086f4 <_getpid_r>
 8008694:	4622      	mov	r2, r4
 8008696:	4601      	mov	r1, r0
 8008698:	4628      	mov	r0, r5
 800869a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800869e:	f000 b817 	b.w	80086d0 <_kill_r>
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d00a      	beq.n	80086bc <_raise_r+0x4c>
 80086a6:	1c59      	adds	r1, r3, #1
 80086a8:	d103      	bne.n	80086b2 <_raise_r+0x42>
 80086aa:	2316      	movs	r3, #22
 80086ac:	6003      	str	r3, [r0, #0]
 80086ae:	2001      	movs	r0, #1
 80086b0:	e7e7      	b.n	8008682 <_raise_r+0x12>
 80086b2:	2100      	movs	r1, #0
 80086b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086b8:	4620      	mov	r0, r4
 80086ba:	4798      	blx	r3
 80086bc:	2000      	movs	r0, #0
 80086be:	e7e0      	b.n	8008682 <_raise_r+0x12>

080086c0 <raise>:
 80086c0:	4b02      	ldr	r3, [pc, #8]	@ (80086cc <raise+0xc>)
 80086c2:	4601      	mov	r1, r0
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	f7ff bfd3 	b.w	8008670 <_raise_r>
 80086ca:	bf00      	nop
 80086cc:	20000024 	.word	0x20000024

080086d0 <_kill_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	@ (80086f0 <_kill_r+0x20>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	4611      	mov	r1, r2
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	f7f9 f83f 	bl	8001760 <_kill>
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	d102      	bne.n	80086ec <_kill_r+0x1c>
 80086e6:	682b      	ldr	r3, [r5, #0]
 80086e8:	b103      	cbz	r3, 80086ec <_kill_r+0x1c>
 80086ea:	6023      	str	r3, [r4, #0]
 80086ec:	bd38      	pop	{r3, r4, r5, pc}
 80086ee:	bf00      	nop
 80086f0:	20004e4c 	.word	0x20004e4c

080086f4 <_getpid_r>:
 80086f4:	f7f9 b82c 	b.w	8001750 <_getpid>

080086f8 <__swhatbuf_r>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	460c      	mov	r4, r1
 80086fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008700:	2900      	cmp	r1, #0
 8008702:	b096      	sub	sp, #88	@ 0x58
 8008704:	4615      	mov	r5, r2
 8008706:	461e      	mov	r6, r3
 8008708:	da0d      	bge.n	8008726 <__swhatbuf_r+0x2e>
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008710:	f04f 0100 	mov.w	r1, #0
 8008714:	bf14      	ite	ne
 8008716:	2340      	movne	r3, #64	@ 0x40
 8008718:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800871c:	2000      	movs	r0, #0
 800871e:	6031      	str	r1, [r6, #0]
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	b016      	add	sp, #88	@ 0x58
 8008724:	bd70      	pop	{r4, r5, r6, pc}
 8008726:	466a      	mov	r2, sp
 8008728:	f000 f848 	bl	80087bc <_fstat_r>
 800872c:	2800      	cmp	r0, #0
 800872e:	dbec      	blt.n	800870a <__swhatbuf_r+0x12>
 8008730:	9901      	ldr	r1, [sp, #4]
 8008732:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008736:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800873a:	4259      	negs	r1, r3
 800873c:	4159      	adcs	r1, r3
 800873e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008742:	e7eb      	b.n	800871c <__swhatbuf_r+0x24>

08008744 <__smakebuf_r>:
 8008744:	898b      	ldrh	r3, [r1, #12]
 8008746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008748:	079d      	lsls	r5, r3, #30
 800874a:	4606      	mov	r6, r0
 800874c:	460c      	mov	r4, r1
 800874e:	d507      	bpl.n	8008760 <__smakebuf_r+0x1c>
 8008750:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	6123      	str	r3, [r4, #16]
 8008758:	2301      	movs	r3, #1
 800875a:	6163      	str	r3, [r4, #20]
 800875c:	b003      	add	sp, #12
 800875e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008760:	ab01      	add	r3, sp, #4
 8008762:	466a      	mov	r2, sp
 8008764:	f7ff ffc8 	bl	80086f8 <__swhatbuf_r>
 8008768:	9f00      	ldr	r7, [sp, #0]
 800876a:	4605      	mov	r5, r0
 800876c:	4639      	mov	r1, r7
 800876e:	4630      	mov	r0, r6
 8008770:	f7ff fabc 	bl	8007cec <_malloc_r>
 8008774:	b948      	cbnz	r0, 800878a <__smakebuf_r+0x46>
 8008776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877a:	059a      	lsls	r2, r3, #22
 800877c:	d4ee      	bmi.n	800875c <__smakebuf_r+0x18>
 800877e:	f023 0303 	bic.w	r3, r3, #3
 8008782:	f043 0302 	orr.w	r3, r3, #2
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	e7e2      	b.n	8008750 <__smakebuf_r+0xc>
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	6020      	str	r0, [r4, #0]
 800878e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008792:	81a3      	strh	r3, [r4, #12]
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800879a:	b15b      	cbz	r3, 80087b4 <__smakebuf_r+0x70>
 800879c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087a0:	4630      	mov	r0, r6
 80087a2:	f000 f81d 	bl	80087e0 <_isatty_r>
 80087a6:	b128      	cbz	r0, 80087b4 <__smakebuf_r+0x70>
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	f023 0303 	bic.w	r3, r3, #3
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	431d      	orrs	r5, r3
 80087b8:	81a5      	strh	r5, [r4, #12]
 80087ba:	e7cf      	b.n	800875c <__smakebuf_r+0x18>

080087bc <_fstat_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d07      	ldr	r5, [pc, #28]	@ (80087dc <_fstat_r+0x20>)
 80087c0:	2300      	movs	r3, #0
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	4611      	mov	r1, r2
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	f7f9 f829 	bl	8001820 <_fstat>
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	d102      	bne.n	80087d8 <_fstat_r+0x1c>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	b103      	cbz	r3, 80087d8 <_fstat_r+0x1c>
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	bd38      	pop	{r3, r4, r5, pc}
 80087da:	bf00      	nop
 80087dc:	20004e4c 	.word	0x20004e4c

080087e0 <_isatty_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d06      	ldr	r5, [pc, #24]	@ (80087fc <_isatty_r+0x1c>)
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	f7f9 f828 	bl	8001840 <_isatty>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_isatty_r+0x1a>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_isatty_r+0x1a>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	20004e4c 	.word	0x20004e4c

08008800 <_init>:
 8008800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008802:	bf00      	nop
 8008804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008806:	bc08      	pop	{r3}
 8008808:	469e      	mov	lr, r3
 800880a:	4770      	bx	lr

0800880c <_fini>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr
