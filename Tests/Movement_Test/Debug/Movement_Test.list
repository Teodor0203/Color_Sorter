
Movement_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d38  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ed0  08003ed0  00004ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee8  08003ee8  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ee8  08003ee8  00004ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ef0  08003ef0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef0  08003ef0  00004ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ef4  08003ef4  00004ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003ef8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000014  08003f0c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003f0c  000051a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbf3  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c17  00000000  00000000  00011c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00013850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c9  00000000  00000000  000144c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015828  00000000  00000000  00014e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9a4  00000000  00000000  0002a6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa38  00000000  00000000  00038055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2a8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b0  00000000  00000000  000c2ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c5f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003eb8 	.word	0x08003eb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08003eb8 	.word	0x08003eb8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Set_Servo_Angle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_Servo_Angle (TIM_HandleTypeDef *htim, uint8_t channel, uint8_t angle)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
 8000510:	4613      	mov	r3, r2
 8000512:	70bb      	strb	r3, [r7, #2]
	//MCU clock freq - 84Mhz and prescaler = 200
	//TIM_CLK = 84000000 / 200 = 420000 Hz = 2.38 us
	//0.5 ms <=> 0 degrees => 500 / 2.38 = 210 counts
	//2.5 ms <=> 180 degrees => 2500 / 2.38 = 1050 counts

	uint32_t pulse_length = 210 + (angle * (1050 - 210 )/180);
 8000514:	78bb      	ldrb	r3, [r7, #2]
 8000516:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <Set_Servo_Angle+0x70>)
 8000520:	fb82 1203 	smull	r1, r2, r2, r3
 8000524:	441a      	add	r2, r3
 8000526:	11d2      	asrs	r2, r2, #7
 8000528:	17db      	asrs	r3, r3, #31
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	33d2      	adds	r3, #210	@ 0xd2
 800052e:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d104      	bne.n	8000540 <Set_Servo_Angle+0x3c>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800053e:	e013      	b.n	8000568 <Set_Servo_Angle+0x64>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2b04      	cmp	r3, #4
 8000544:	d104      	bne.n	8000550 <Set_Servo_Angle+0x4c>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800054e:	e00b      	b.n	8000568 <Set_Servo_Angle+0x64>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	2b08      	cmp	r3, #8
 8000554:	d104      	bne.n	8000560 <Set_Servo_Angle+0x5c>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800055e:	e003      	b.n	8000568 <Set_Servo_Angle+0x64>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	b60b60b7 	.word	0xb60b60b7

08000578 <init_arm>:


void init_arm ()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <init_arm+0x84>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	481e      	ldr	r0, [pc, #120]	@ (8000600 <init_arm+0x88>)
 8000586:	f7ff ffbd 	bl	8000504 <Set_Servo_Angle>
    HAL_Delay(250);
 800058a:	20fa      	movs	r0, #250	@ 0xfa
 800058c:	f000 ff16 	bl	80013bc <HAL_Delay>

	Set_Servo_Angle(&htim4, TIM_CHANNEL_1, current_value_shoulder + 45);
 8000590:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <init_arm+0x8c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	332d      	adds	r3, #45	@ 0x2d
 8000596:	b2db      	uxtb	r3, r3
 8000598:	461a      	mov	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	481a      	ldr	r0, [pc, #104]	@ (8000608 <init_arm+0x90>)
 800059e:	f7ff ffb1 	bl	8000504 <Set_Servo_Angle>
    HAL_Delay(250);
 80005a2:	20fa      	movs	r0, #250	@ 0xfa
 80005a4:	f000 ff0a 	bl	80013bc <HAL_Delay>

	Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 80005a8:	4b18      	ldr	r3, [pc, #96]	@ (800060c <init_arm+0x94>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	2104      	movs	r1, #4
 80005b0:	4817      	ldr	r0, [pc, #92]	@ (8000610 <init_arm+0x98>)
 80005b2:	f7ff ffa7 	bl	8000504 <Set_Servo_Angle>
    HAL_Delay(250);
 80005b6:	20fa      	movs	r0, #250	@ 0xfa
 80005b8:	f000 ff00 	bl	80013bc <HAL_Delay>

	Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 80005bc:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <init_arm+0x9c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	2108      	movs	r1, #8
 80005c4:	480e      	ldr	r0, [pc, #56]	@ (8000600 <init_arm+0x88>)
 80005c6:	f7ff ff9d 	bl	8000504 <Set_Servo_Angle>
    HAL_Delay(250);
 80005ca:	20fa      	movs	r0, #250	@ 0xfa
 80005cc:	f000 fef6 	bl	80013bc <HAL_Delay>

	Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <init_arm+0xa0>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	480d      	ldr	r0, [pc, #52]	@ (8000610 <init_arm+0x98>)
 80005da:	f7ff ff93 	bl	8000504 <Set_Servo_Angle>
    HAL_Delay(250);
 80005de:	20fa      	movs	r0, #250	@ 0xfa
 80005e0:	f000 feec 	bl	80013bc <HAL_Delay>

	Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <init_arm+0xa4>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	2104      	movs	r1, #4
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <init_arm+0x88>)
 80005ee:	f7ff ff89 	bl	8000504 <Set_Servo_Angle>
    HAL_Delay(250);
 80005f2:	20fa      	movs	r0, #250	@ 0xfa
 80005f4:	f000 fee2 	bl	80013bc <HAL_Delay>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000198 	.word	0x20000198
 8000600:	20000030 	.word	0x20000030
 8000604:	20000000 	.word	0x20000000
 8000608:	200000c0 	.word	0x200000c0
 800060c:	20000001 	.word	0x20000001
 8000610:	20000078 	.word	0x20000078
 8000614:	20000002 	.word	0x20000002
 8000618:	20000003 	.word	0x20000003
 800061c:	20000004 	.word	0x20000004

08000620 <move_base>:

void move_base (uint8_t angle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
    while(current_value_base != angle)
 800062a:	e01b      	b.n	8000664 <move_base+0x44>
        	{
        		if(current_value_base > angle)
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <move_base+0x58>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	79fa      	ldrb	r2, [r7, #7]
 8000632:	429a      	cmp	r2, r3
 8000634:	d206      	bcs.n	8000644 <move_base+0x24>
        		{
        			current_value_base--;
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <move_base+0x58>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <move_base+0x58>)
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e005      	b.n	8000650 <move_base+0x30>
        		}
        		else
        		{
        			current_value_base++;
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <move_base+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <move_base+0x58>)
 800064e:	701a      	strb	r2, [r3, #0]
        		}

        		Set_Servo_Angle(&htim2, TIM_CHANNEL_1, current_value_base);
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <move_base+0x58>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <move_base+0x5c>)
 800065a:	f7ff ff53 	bl	8000504 <Set_Servo_Angle>
        	    HAL_Delay(25);
 800065e:	2019      	movs	r0, #25
 8000660:	f000 feac 	bl	80013bc <HAL_Delay>
    while(current_value_base != angle)
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <move_base+0x58>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	429a      	cmp	r2, r3
 800066c:	d1de      	bne.n	800062c <move_base+0xc>
        	}
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000198 	.word	0x20000198
 800067c:	20000030 	.word	0x20000030

08000680 <move_shoulder>:

void move_shoulder (uint8_t angle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    while((current_value_shoulder + 45) != angle)
 800068a:	e01f      	b.n	80006cc <move_shoulder+0x4c>
    	{
    		if((current_value_shoulder + 45) > angle)
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <move_shoulder+0x64>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	429a      	cmp	r2, r3
 8000698:	db06      	blt.n	80006a8 <move_shoulder+0x28>
    		{
    			current_value_shoulder--;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <move_shoulder+0x64>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3b01      	subs	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <move_shoulder+0x64>)
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	e005      	b.n	80006b4 <move_shoulder+0x34>
    		}
    		else
    		{
    			current_value_shoulder++;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <move_shoulder+0x64>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <move_shoulder+0x64>)
 80006b2:	701a      	strb	r2, [r3, #0]
    		}

    		Set_Servo_Angle(&htim4, TIM_CHANNEL_1, (current_value_shoulder + 45));
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <move_shoulder+0x64>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	332d      	adds	r3, #45	@ 0x2d
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <move_shoulder+0x68>)
 80006c2:	f7ff ff1f 	bl	8000504 <Set_Servo_Angle>
    	    HAL_Delay(25);
 80006c6:	2019      	movs	r0, #25
 80006c8:	f000 fe78 	bl	80013bc <HAL_Delay>
    while((current_value_shoulder + 45) != angle)
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <move_shoulder+0x64>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d1d8      	bne.n	800068c <move_shoulder+0xc>
    	}
}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	200000c0 	.word	0x200000c0

080006ec <move_elbow>:

void move_elbow (uint8_t angle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	while(current_value_elbow != angle)
 80006f6:	e01b      	b.n	8000730 <move_elbow+0x44>
	{
		if(current_value_elbow > angle)
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <move_elbow+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	79fa      	ldrb	r2, [r7, #7]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d206      	bcs.n	8000710 <move_elbow+0x24>
		{
			current_value_elbow--;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <move_elbow+0x58>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3b01      	subs	r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <move_elbow+0x58>)
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e005      	b.n	800071c <move_elbow+0x30>
		}
		else
		{
			current_value_elbow++;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <move_elbow+0x58>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <move_elbow+0x58>)
 800071a:	701a      	strb	r2, [r3, #0]
		}

		Set_Servo_Angle(&htim3, TIM_CHANNEL_2, current_value_elbow);
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <move_elbow+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	2104      	movs	r1, #4
 8000724:	4808      	ldr	r0, [pc, #32]	@ (8000748 <move_elbow+0x5c>)
 8000726:	f7ff feed 	bl	8000504 <Set_Servo_Angle>
	    HAL_Delay(25);
 800072a:	2019      	movs	r0, #25
 800072c:	f000 fe46 	bl	80013bc <HAL_Delay>
	while(current_value_elbow != angle)
 8000730:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <move_elbow+0x58>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	429a      	cmp	r2, r3
 8000738:	d1de      	bne.n	80006f8 <move_elbow+0xc>
	}
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000001 	.word	0x20000001
 8000748:	20000078 	.word	0x20000078

0800074c <move_wrist_ver>:

void move_wrist_ver (uint8_t angle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
     while(current_value_wrist_ver != angle)
 8000756:	e01b      	b.n	8000790 <move_wrist_ver+0x44>
     	{
     		if(current_value_wrist_ver > angle)
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <move_wrist_ver+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	79fa      	ldrb	r2, [r7, #7]
 800075e:	429a      	cmp	r2, r3
 8000760:	d206      	bcs.n	8000770 <move_wrist_ver+0x24>
     		{
     			current_value_wrist_ver--;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <move_wrist_ver+0x58>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	3b01      	subs	r3, #1
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <move_wrist_ver+0x58>)
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e005      	b.n	800077c <move_wrist_ver+0x30>
     		}
     		else
     		{
     			current_value_wrist_ver++;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <move_wrist_ver+0x58>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <move_wrist_ver+0x58>)
 800077a:	701a      	strb	r2, [r3, #0]
     		}

     		Set_Servo_Angle(&htim2, TIM_CHANNEL_3, current_value_wrist_ver);
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <move_wrist_ver+0x58>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	2108      	movs	r1, #8
 8000784:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <move_wrist_ver+0x5c>)
 8000786:	f7ff febd 	bl	8000504 <Set_Servo_Angle>
     	    HAL_Delay(25);
 800078a:	2019      	movs	r0, #25
 800078c:	f000 fe16 	bl	80013bc <HAL_Delay>
     while(current_value_wrist_ver != angle)
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <move_wrist_ver+0x58>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	429a      	cmp	r2, r3
 8000798:	d1de      	bne.n	8000758 <move_wrist_ver+0xc>
     	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000002 	.word	0x20000002
 80007a8:	20000030 	.word	0x20000030

080007ac <move_wrist_rot>:
void move_wrist_rot (uint8_t angle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
    while(current_value_wrist_rot != angle)
 80007b6:	e01b      	b.n	80007f0 <move_wrist_rot+0x44>
        	{
        		if(current_value_wrist_rot > angle)
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <move_wrist_rot+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d206      	bcs.n	80007d0 <move_wrist_rot+0x24>
        		{
        			current_value_wrist_rot--;
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <move_wrist_rot+0x58>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <move_wrist_rot+0x58>)
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e005      	b.n	80007dc <move_wrist_rot+0x30>
        		}
        		else
        		{
        			current_value_wrist_rot++;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <move_wrist_rot+0x58>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <move_wrist_rot+0x58>)
 80007da:	701a      	strb	r2, [r3, #0]
        		}

        		Set_Servo_Angle(&htim3, TIM_CHANNEL_1, current_value_wrist_rot);
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <move_wrist_rot+0x58>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	4808      	ldr	r0, [pc, #32]	@ (8000808 <move_wrist_rot+0x5c>)
 80007e6:	f7ff fe8d 	bl	8000504 <Set_Servo_Angle>
        	    HAL_Delay(25);
 80007ea:	2019      	movs	r0, #25
 80007ec:	f000 fde6 	bl	80013bc <HAL_Delay>
    while(current_value_wrist_rot != angle)
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <move_wrist_rot+0x58>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d1de      	bne.n	80007b8 <move_wrist_rot+0xc>
        	}
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000003 	.word	0x20000003
 8000808:	20000078 	.word	0x20000078

0800080c <move_gripper>:

void move_gripper (uint8_t angle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
    while(current_value_gripper != angle)
 8000816:	e01b      	b.n	8000850 <move_gripper+0x44>
            	{
            		if(current_value_gripper > angle)
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <move_gripper+0x58>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	429a      	cmp	r2, r3
 8000820:	d206      	bcs.n	8000830 <move_gripper+0x24>
            		{
            			current_value_gripper--;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <move_gripper+0x58>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <move_gripper+0x58>)
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e005      	b.n	800083c <move_gripper+0x30>
            		}
            		else
            		{
            			current_value_gripper++;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <move_gripper+0x58>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <move_gripper+0x58>)
 800083a:	701a      	strb	r2, [r3, #0]
            		}

            		Set_Servo_Angle(&htim2, TIM_CHANNEL_2, current_value_gripper);
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <move_gripper+0x58>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	2104      	movs	r1, #4
 8000844:	4808      	ldr	r0, [pc, #32]	@ (8000868 <move_gripper+0x5c>)
 8000846:	f7ff fe5d 	bl	8000504 <Set_Servo_Angle>
            	    HAL_Delay(25);
 800084a:	2019      	movs	r0, #25
 800084c:	f000 fdb6 	bl	80013bc <HAL_Delay>
    while(current_value_gripper != angle)
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <move_gripper+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	429a      	cmp	r2, r3
 8000858:	d1de      	bne.n	8000818 <move_gripper+0xc>
            	}
}
 800085a:	bf00      	nop
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000004 	.word	0x20000004
 8000868:	20000030 	.word	0x20000030

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 fd32 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f848 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f000 fa88 	bl	8000d8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800087c:	f000 fa5c 	bl	8000d38 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000880:	f000 f8ac 	bl	80009dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000884:	f000 f936 	bl	8000af4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000888:	f000 f9b6 	bl	8000bf8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800088c:	f000 fa2a 	bl	8000ce4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000890:	2201      	movs	r2, #1
 8000892:	2140      	movs	r1, #64	@ 0x40
 8000894:	4818      	ldr	r0, [pc, #96]	@ (80008f8 <main+0x8c>)
 8000896:	f001 f8dd 	bl	8001a54 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // A0  - M1
 800089a:	2100      	movs	r1, #0
 800089c:	4817      	ldr	r0, [pc, #92]	@ (80008fc <main+0x90>)
 800089e:	f001 fe33 	bl	8002508 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // D10 - M2
 80008a2:	2100      	movs	r1, #0
 80008a4:	4816      	ldr	r0, [pc, #88]	@ (8000900 <main+0x94>)
 80008a6:	f001 fe2f 	bl	8002508 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // D9  - M3
 80008aa:	2104      	movs	r1, #4
 80008ac:	4815      	ldr	r0, [pc, #84]	@ (8000904 <main+0x98>)
 80008ae:	f001 fe2b 	bl	8002508 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // D6  - M4
 80008b2:	2108      	movs	r1, #8
 80008b4:	4811      	ldr	r0, [pc, #68]	@ (80008fc <main+0x90>)
 80008b6:	f001 fe27 	bl	8002508 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // D5  - M5
 80008ba:	2100      	movs	r1, #0
 80008bc:	4811      	ldr	r0, [pc, #68]	@ (8000904 <main+0x98>)
 80008be:	f001 fe23 	bl	8002508 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // D3  - M6
 80008c2:	2104      	movs	r1, #4
 80008c4:	480d      	ldr	r0, [pc, #52]	@ (80008fc <main+0x90>)
 80008c6:	f001 fe1f 	bl	8002508 <HAL_TIM_PWM_Start>


  init_arm();
 80008ca:	f7ff fe55 	bl	8000578 <init_arm>


  move_elbow(90);
 80008ce:	205a      	movs	r0, #90	@ 0x5a
 80008d0:	f7ff ff0c 	bl	80006ec <move_elbow>

  move_base(45);
 80008d4:	202d      	movs	r0, #45	@ 0x2d
 80008d6:	f7ff fea3 	bl	8000620 <move_base>

  move_shoulder(45);
 80008da:	202d      	movs	r0, #45	@ 0x2d
 80008dc:	f7ff fed0 	bl	8000680 <move_shoulder>

  move_wrist_ver(70);
 80008e0:	2046      	movs	r0, #70	@ 0x46
 80008e2:	f7ff ff33 	bl	800074c <move_wrist_ver>

  move_wrist_rot(45);
 80008e6:	202d      	movs	r0, #45	@ 0x2d
 80008e8:	f7ff ff60 	bl	80007ac <move_wrist_rot>

  move_gripper(30);
 80008ec:	201e      	movs	r0, #30
 80008ee:	f7ff ff8d 	bl	800080c <move_gripper>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f2:	bf00      	nop
 80008f4:	e7fd      	b.n	80008f2 <main+0x86>
 80008f6:	bf00      	nop
 80008f8:	40020000 	.word	0x40020000
 80008fc:	20000030 	.word	0x20000030
 8000900:	200000c0 	.word	0x200000c0
 8000904:	20000078 	.word	0x20000078

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	@ 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2230      	movs	r2, #48	@ 0x30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f003 faa2 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <SystemClock_Config+0xcc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <SystemClock_Config+0xcc>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	@ 0x40
 800093c:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <SystemClock_Config+0xcc>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <SystemClock_Config+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a21      	ldr	r2, [pc, #132]	@ (80009d8 <SystemClock_Config+0xd0>)
 8000952:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <SystemClock_Config+0xd0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2310      	movs	r3, #16
 800096e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000978:	2310      	movs	r3, #16
 800097a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800097c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000980:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000982:	2304      	movs	r3, #4
 8000984:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000986:	2304      	movs	r3, #4
 8000988:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f87a 	bl	8001a88 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800099a:	f000 fa65 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	230f      	movs	r3, #15
 80009a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2302      	movs	r3, #2
 80009a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2102      	movs	r1, #2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 fadc 	bl	8001f78 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009c6:	f000 fa4f 	bl	8000e68 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	@ 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	@ 0x38
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
 8000a08:	615a      	str	r2, [r3, #20]
 8000a0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a0c:	4b38      	ldr	r3, [pc, #224]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000a14:	4b36      	ldr	r3, [pc, #216]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a16:	22c7      	movs	r2, #199	@ 0xc7
 8000a18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b35      	ldr	r3, [pc, #212]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8000a20:	4b33      	ldr	r3, [pc, #204]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a22:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000a26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a2e:	4b30      	ldr	r3, [pc, #192]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a30:	2280      	movs	r2, #128	@ 0x80
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a34:	482e      	ldr	r0, [pc, #184]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a36:	f001 fcbf 	bl	80023b8 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a40:	f000 fa12 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4827      	ldr	r0, [pc, #156]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a52:	f001 fecb 	bl	80027ec <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a5c:	f000 fa04 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a60:	4823      	ldr	r0, [pc, #140]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a62:	f001 fcf8 	bl	8002456 <HAL_TIM_PWM_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a6c:	f000 f9fc 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a78:	f107 0320 	add.w	r3, r7, #32
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481c      	ldr	r0, [pc, #112]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000a80:	f002 fa4e 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a8a:	f000 f9ed 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	2360      	movs	r3, #96	@ 0x60
 8000a90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4812      	ldr	r0, [pc, #72]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000aa6:	f001 fddf 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ab0:	f000 f9da 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000abc:	f001 fdd4 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000ac6:	f000 f9cf 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2208      	movs	r2, #8
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000ad2:	f001 fdc9 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000adc:	f000 f9c4 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ae0:	4803      	ldr	r0, [pc, #12]	@ (8000af0 <MX_TIM2_Init+0x114>)
 8000ae2:	f000 fa3b 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	@ 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000030 	.word	0x20000030

08000af4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	@ 0x38
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b24:	4b32      	ldr	r3, [pc, #200]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b26:	4a33      	ldr	r2, [pc, #204]	@ (8000bf4 <MX_TIM3_Init+0x100>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8000b2a:	4b31      	ldr	r3, [pc, #196]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b2c:	22c7      	movs	r2, #199	@ 0xc7
 8000b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8000b36:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b38:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b44:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b4a:	4829      	ldr	r0, [pc, #164]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b4c:	f001 fc34 	bl	80023b8 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b56:	f000 f987 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4822      	ldr	r0, [pc, #136]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b68:	f001 fe40 	bl	80027ec <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b72:	f000 f979 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b76:	481e      	ldr	r0, [pc, #120]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b78:	f001 fc6d 	bl	8002456 <HAL_TIM_PWM_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b82:	f000 f971 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	4619      	mov	r1, r3
 8000b94:	4816      	ldr	r0, [pc, #88]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000b96:	f002 f9c3 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ba0:	f000 f962 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba4:	2360      	movs	r3, #96	@ 0x60
 8000ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000bbc:	f001 fd54 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bc6:	f000 f94f 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2204      	movs	r2, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000bd2:	f001 fd49 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000bdc:	f000 f944 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <MX_TIM3_Init+0xfc>)
 8000be2:	f000 f9bb 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000be6:	bf00      	nop
 8000be8:	3738      	adds	r7, #56	@ 0x38
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000078 	.word	0x20000078
 8000bf4:	40000400 	.word	0x40000400

08000bf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	@ 0x38
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c28:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c30:	22c7      	movs	r2, #199	@ 0xc7
 8000c32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c3a:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c4e:	4823      	ldr	r0, [pc, #140]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c50:	f001 fbb2 	bl	80023b8 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000c5a:	f000 f905 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481c      	ldr	r0, [pc, #112]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c6c:	f001 fdbe 	bl	80027ec <HAL_TIM_ConfigClockSource>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000c76:	f000 f8f7 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c7a:	4818      	ldr	r0, [pc, #96]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c7c:	f001 fbeb 	bl	8002456 <HAL_TIM_PWM_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000c86:	f000 f8ef 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	4619      	mov	r1, r3
 8000c98:	4810      	ldr	r0, [pc, #64]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000c9a:	f002 f941 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ca4:	f000 f8e0 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca8:	2360      	movs	r3, #96	@ 0x60
 8000caa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000cc0:	f001 fcd2 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000cca:	f000 f8cd 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cce:	4803      	ldr	r0, [pc, #12]	@ (8000cdc <MX_TIM4_Init+0xe4>)
 8000cd0:	f000 f944 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000cd4:	bf00      	nop
 8000cd6:	3738      	adds	r7, #56	@ 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000c0 	.word	0x200000c0
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <MX_USART1_UART_Init+0x50>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000cf0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	f002 f96e 	bl	8002ffc <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d26:	f000 f89f 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000108 	.word	0x20000108
 8000d34:	40011000 	.word	0x40011000

08000d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <MX_USART2_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f002 f944 	bl	8002ffc <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f000 f875 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000150 	.word	0x20000150
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a2c      	ldr	r2, [pc, #176]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a25      	ldr	r2, [pc, #148]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b23      	ldr	r3, [pc, #140]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2160      	movs	r1, #96	@ 0x60
 8000e16:	4812      	ldr	r0, [pc, #72]	@ (8000e60 <MX_GPIO_Init+0xd4>)
 8000e18:	f000 fe1c 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <MX_GPIO_Init+0xd8>)
 8000e34:	f000 fc8a 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000e38:	2360      	movs	r3, #96	@ 0x60
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_GPIO_Init+0xd4>)
 8000e50:	f000 fc7c 	bl	800174c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020800 	.word	0x40020800

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x8>

08000e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <HAL_MspInit+0x4c>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <HAL_MspInit+0x4c>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <HAL_MspInit+0x4c>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ec0 <HAL_MspInit+0x4c>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eb2:	2007      	movs	r0, #7
 8000eb4:	f000 fb76 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800

08000ec4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ef2:	e026      	b.n	8000f42 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a16      	ldr	r2, [pc, #88]	@ (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10e      	bne.n	8000f1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
}
 8000f1a:	e012      	b.n	8000f42 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <HAL_TIM_Base_MspInit+0x94>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10d      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
}
 8000f42:	bf00      	nop
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40000800 	.word	0x40000800

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f7c:	d13d      	bne.n	8000ffa <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	4b52      	ldr	r3, [pc, #328]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a51      	ldr	r2, [pc, #324]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	4b4b      	ldr	r3, [pc, #300]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b48      	ldr	r3, [pc, #288]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	483f      	ldr	r0, [pc, #252]	@ (80010d0 <HAL_TIM_MspPostInit+0x174>)
 8000fd2:	f000 fbbb 	bl	800174c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000fd6:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4838      	ldr	r0, [pc, #224]	@ (80010d4 <HAL_TIM_MspPostInit+0x178>)
 8000ff4:	f000 fbaa 	bl	800174c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ff8:	e064      	b.n	80010c4 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a36      	ldr	r2, [pc, #216]	@ (80010d8 <HAL_TIM_MspPostInit+0x17c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d13c      	bne.n	800107e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	4b30      	ldr	r3, [pc, #192]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	4a2f      	ldr	r2, [pc, #188]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6313      	str	r3, [r2, #48]	@ 0x30
 8001014:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b29      	ldr	r3, [pc, #164]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001028:	4a28      	ldr	r2, [pc, #160]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001030:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800103c:	2380      	movs	r3, #128	@ 0x80
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800104c:	2302      	movs	r3, #2
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4821      	ldr	r0, [pc, #132]	@ (80010dc <HAL_TIM_MspPostInit+0x180>)
 8001058:	f000 fb78 	bl	800174c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800105c:	2310      	movs	r3, #16
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800106c:	2302      	movs	r3, #2
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4817      	ldr	r0, [pc, #92]	@ (80010d4 <HAL_TIM_MspPostInit+0x178>)
 8001078:	f000 fb68 	bl	800174c <HAL_GPIO_Init>
}
 800107c:	e022      	b.n	80010c4 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <HAL_TIM_MspPostInit+0x184>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d11d      	bne.n	80010c4 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	4a0e      	ldr	r2, [pc, #56]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	6313      	str	r3, [r2, #48]	@ 0x30
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <HAL_TIM_MspPostInit+0x170>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a4:	2340      	movs	r3, #64	@ 0x40
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_TIM_MspPostInit+0x178>)
 80010c0:	f000 fb44 	bl	800174c <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3730      	adds	r7, #48	@ 0x30
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40000400 	.word	0x40000400
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40000800 	.word	0x40000800

080010e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	@ 0x30
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a36      	ldr	r2, [pc, #216]	@ (80011dc <HAL_UART_MspInit+0xf8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d135      	bne.n	8001172 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	4b35      	ldr	r3, [pc, #212]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	4a34      	ldr	r2, [pc, #208]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	6453      	str	r3, [r2, #68]	@ 0x44
 8001116:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a2d      	ldr	r2, [pc, #180]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800113e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001150:	2307      	movs	r3, #7
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4822      	ldr	r0, [pc, #136]	@ (80011e4 <HAL_UART_MspInit+0x100>)
 800115c:	f000 faf6 	bl	800174c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2025      	movs	r0, #37	@ 0x25
 8001166:	f000 fa28 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800116a:	2025      	movs	r0, #37	@ 0x25
 800116c:	f000 fa41 	bl	80015f2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001170:	e030      	b.n	80011d4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <HAL_UART_MspInit+0x104>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d12b      	bne.n	80011d4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	4a16      	ldr	r2, [pc, #88]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 8001186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118a:	6413      	str	r3, [r2, #64]	@ 0x40
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a0:	4a0f      	ldr	r2, [pc, #60]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a8:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <HAL_UART_MspInit+0xfc>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011b4:	230c      	movs	r3, #12
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c4:	2307      	movs	r3, #7
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <HAL_UART_MspInit+0x100>)
 80011d0:	f000 fabc 	bl	800174c <HAL_GPIO_Init>
}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	@ 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40011000 	.word	0x40011000
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40004400 	.word	0x40004400

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 f89b 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <USART1_IRQHandler+0x10>)
 8001252:	f001 ff23 	bl	800309c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000108 	.word	0x20000108

08001260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001288:	f7ff ffea 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	@ (80012c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f002 fddd 	bl	8003e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b6:	f7ff fad9 	bl	800086c <main>
  bx  lr    
 80012ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80012c8:	08003ef8 	.word	0x08003ef8
  ldr r2, =_sbss
 80012cc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80012d0:	200001a0 	.word	0x200001a0

080012d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001318 <HAL_Init+0x40>)
 80012e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_Init+0x40>)
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	@ (8001318 <HAL_Init+0x40>)
 80012fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f94f 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff fdb2 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023c00 	.word	0x40023c00

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f967 	bl	800160e <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f000 f92f 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	@ (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000008 	.word	0x20000008
 8001374:	20000010 	.word	0x20000010
 8001378:	2000000c 	.word	0x2000000c

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000010 	.word	0x20000010
 80013a0:	2000019c 	.word	0x2000019c

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000019c 	.word	0x2000019c

080013bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffee 	bl	80013a4 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_Delay+0x44>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000010 	.word	0x20000010

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	@ (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	@ 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff3e 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff31 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff feb6 	bl	80013a4 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d008      	beq.n	8001658 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2280      	movs	r2, #128	@ 0x80
 800164a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e052      	b.n	80016fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0216 	bic.w	r2, r2, #22
 8001666:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001676:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	2b00      	cmp	r3, #0
 800167e:	d103      	bne.n	8001688 <HAL_DMA_Abort+0x62>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0208 	bic.w	r2, r2, #8
 8001696:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a8:	e013      	b.n	80016d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016aa:	f7ff fe7b 	bl	80013a4 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d90c      	bls.n	80016d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2220      	movs	r2, #32
 80016bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2203      	movs	r2, #3
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e015      	b.n	80016fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1e4      	bne.n	80016aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e4:	223f      	movs	r2, #63	@ 0x3f
 80016e6:	409a      	lsls	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d004      	beq.n	8001724 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2280      	movs	r2, #128	@ 0x80
 800171e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e00c      	b.n	800173e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2205      	movs	r2, #5
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	@ 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	e159      	b.n	8001a1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	429a      	cmp	r2, r3
 8001782:	f040 8148 	bne.w	8001a16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d005      	beq.n	800179e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	2b02      	cmp	r3, #2
 800179c:	d130      	bne.n	8001800 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d4:	2201      	movs	r2, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 0201 	and.w	r2, r3, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b03      	cmp	r3, #3
 800180a:	d017      	beq.n	800183c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d123      	bne.n	8001890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	69b9      	ldr	r1, [r7, #24]
 800188c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80a2 	beq.w	8001a16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b57      	ldr	r3, [pc, #348]	@ (8001a34 <HAL_GPIO_Init+0x2e8>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	4a56      	ldr	r2, [pc, #344]	@ (8001a34 <HAL_GPIO_Init+0x2e8>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e2:	4b54      	ldr	r3, [pc, #336]	@ (8001a34 <HAL_GPIO_Init+0x2e8>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ee:	4a52      	ldr	r2, [pc, #328]	@ (8001a38 <HAL_GPIO_Init+0x2ec>)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a49      	ldr	r2, [pc, #292]	@ (8001a3c <HAL_GPIO_Init+0x2f0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x202>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a48      	ldr	r2, [pc, #288]	@ (8001a40 <HAL_GPIO_Init+0x2f4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x1fe>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a47      	ldr	r2, [pc, #284]	@ (8001a44 <HAL_GPIO_Init+0x2f8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x1fa>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a46      	ldr	r2, [pc, #280]	@ (8001a48 <HAL_GPIO_Init+0x2fc>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x1f6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a45      	ldr	r2, [pc, #276]	@ (8001a4c <HAL_GPIO_Init+0x300>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x1f2>
 800193a:	2304      	movs	r3, #4
 800193c:	e008      	b.n	8001950 <HAL_GPIO_Init+0x204>
 800193e:	2307      	movs	r3, #7
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x204>
 8001942:	2303      	movs	r3, #3
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x204>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x204>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x204>
 800194e:	2300      	movs	r3, #0
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f002 0203 	and.w	r2, r2, #3
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001960:	4935      	ldr	r1, [pc, #212]	@ (8001a38 <HAL_GPIO_Init+0x2ec>)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196e:	4b38      	ldr	r3, [pc, #224]	@ (8001a50 <HAL_GPIO_Init+0x304>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001992:	4a2f      	ldr	r2, [pc, #188]	@ (8001a50 <HAL_GPIO_Init+0x304>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001998:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <HAL_GPIO_Init+0x304>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019bc:	4a24      	ldr	r2, [pc, #144]	@ (8001a50 <HAL_GPIO_Init+0x304>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c2:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_GPIO_Init+0x304>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001a50 <HAL_GPIO_Init+0x304>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <HAL_GPIO_Init+0x304>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a10:	4a0f      	ldr	r2, [pc, #60]	@ (8001a50 <HAL_GPIO_Init+0x304>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b0f      	cmp	r3, #15
 8001a20:	f67f aea2 	bls.w	8001768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3724      	adds	r7, #36	@ 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40013c00 	.word	0x40013c00

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a70:	e003      	b.n	8001a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	041a      	lsls	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	619a      	str	r2, [r3, #24]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e267      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d075      	beq.n	8001b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aa6:	4b88      	ldr	r3, [pc, #544]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d00c      	beq.n	8001acc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab2:	4b85      	ldr	r3, [pc, #532]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d112      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001abe:	4b82      	ldr	r3, [pc, #520]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aca:	d10b      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	4b7e      	ldr	r3, [pc, #504]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d05b      	beq.n	8001b90 <HAL_RCC_OscConfig+0x108>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d157      	bne.n	8001b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e242      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aec:	d106      	bne.n	8001afc <HAL_RCC_OscConfig+0x74>
 8001aee:	4b76      	ldr	r3, [pc, #472]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a75      	ldr	r2, [pc, #468]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xb0>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x98>
 8001b06:	4b70      	ldr	r3, [pc, #448]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6f      	ldr	r2, [pc, #444]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6d      	ldr	r3, [pc, #436]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6c      	ldr	r2, [pc, #432]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xb0>
 8001b20:	4b69      	ldr	r3, [pc, #420]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a68      	ldr	r2, [pc, #416]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b66      	ldr	r3, [pc, #408]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a65      	ldr	r2, [pc, #404]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fc30 	bl	80013a4 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fc2c 	bl	80013a4 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	@ 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e207      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xc0>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fc1c 	bl	80013a4 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fc18 	bl	80013a4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	@ 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1f3      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b51      	ldr	r3, [pc, #324]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0xe8>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001baa:	4b47      	ldr	r3, [pc, #284]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb6:	4b44      	ldr	r3, [pc, #272]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b41      	ldr	r3, [pc, #260]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x152>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1c7      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4937      	ldr	r1, [pc, #220]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <HAL_RCC_OscConfig+0x244>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fbd1 	bl	80013a4 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fbcd 	bl	80013a4 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1a8      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4925      	ldr	r1, [pc, #148]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <HAL_RCC_OscConfig+0x244>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fbb0 	bl	80013a4 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff fbac 	bl	80013a4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e187      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d036      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d016      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <HAL_RCC_OscConfig+0x248>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff fb90 	bl	80013a4 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff fb8c 	bl	80013a4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e167      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x200>
 8001ca6:	e01b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_RCC_OscConfig+0x248>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb79 	bl	80013a4 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb4:	e00e      	b.n	8001cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fb75 	bl	80013a4 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d907      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e150      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	42470000 	.word	0x42470000
 8001cd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	4b88      	ldr	r3, [pc, #544]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ea      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8097 	beq.w	8001e1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf2:	4b81      	ldr	r3, [pc, #516]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10f      	bne.n	8001d1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	4a7c      	ldr	r2, [pc, #496]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	4b77      	ldr	r3, [pc, #476]	@ (8001efc <HAL_RCC_OscConfig+0x474>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2a:	4b74      	ldr	r3, [pc, #464]	@ (8001efc <HAL_RCC_OscConfig+0x474>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a73      	ldr	r2, [pc, #460]	@ (8001efc <HAL_RCC_OscConfig+0x474>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fb35 	bl	80013a4 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff fb31 	bl	80013a4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e10c      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b6a      	ldr	r3, [pc, #424]	@ (8001efc <HAL_RCC_OscConfig+0x474>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x2ea>
 8001d64:	4b64      	ldr	r3, [pc, #400]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d68:	4a63      	ldr	r2, [pc, #396]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d70:	e01c      	b.n	8001dac <HAL_RCC_OscConfig+0x324>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x30c>
 8001d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d86:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0x324>
 8001d94:	4b58      	ldr	r3, [pc, #352]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d98:	4a57      	ldr	r2, [pc, #348]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da0:	4b55      	ldr	r3, [pc, #340]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da4:	4a54      	ldr	r2, [pc, #336]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d015      	beq.n	8001de0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff faf6 	bl	80013a4 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7ff faf2 	bl	80013a4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0cb      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	4b49      	ldr	r3, [pc, #292]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0ee      	beq.n	8001dbc <HAL_RCC_OscConfig+0x334>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7ff fae0 	bl	80013a4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7ff fadc 	bl	80013a4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e0b5      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ee      	bne.n	8001de8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d105      	bne.n	8001e1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e10:	4b39      	ldr	r3, [pc, #228]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	4a38      	ldr	r2, [pc, #224]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80a1 	beq.w	8001f68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e26:	4b34      	ldr	r3, [pc, #208]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d05c      	beq.n	8001eec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d141      	bne.n	8001ebe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b31      	ldr	r3, [pc, #196]	@ (8001f00 <HAL_RCC_OscConfig+0x478>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fab0 	bl	80013a4 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff faac 	bl	80013a4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e087      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	019b      	lsls	r3, r3, #6
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	491b      	ldr	r1, [pc, #108]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <HAL_RCC_OscConfig+0x478>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff fa85 	bl	80013a4 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff fa81 	bl	80013a4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e05c      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x416>
 8001ebc:	e054      	b.n	8001f68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <HAL_RCC_OscConfig+0x478>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fa6e 	bl	80013a4 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff fa6a 	bl	80013a4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e045      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x444>
 8001eea:	e03d      	b.n	8001f68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e038      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000
 8001f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <HAL_RCC_OscConfig+0x4ec>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d028      	beq.n	8001f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d121      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d11a      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d111      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d107      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0cc      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b68      	ldr	r3, [pc, #416]	@ (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d90c      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b65      	ldr	r3, [pc, #404]	@ (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	@ (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b8      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fcc:	4b59      	ldr	r3, [pc, #356]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a58      	ldr	r2, [pc, #352]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe4:	4b53      	ldr	r3, [pc, #332]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b50      	ldr	r3, [pc, #320]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	494d      	ldr	r1, [pc, #308]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d044      	beq.n	8002098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b47      	ldr	r3, [pc, #284]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d119      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002032:	2b03      	cmp	r3, #3
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002036:	4b3f      	ldr	r3, [pc, #252]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	4b3b      	ldr	r3, [pc, #236]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e067      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002056:	4b37      	ldr	r3, [pc, #220]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f023 0203 	bic.w	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4934      	ldr	r1, [pc, #208]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002068:	f7ff f99c 	bl	80013a4 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	e00a      	b.n	8002086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002070:	f7ff f998 	bl	80013a4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e04f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	4b2b      	ldr	r3, [pc, #172]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 020c 	and.w	r2, r3, #12
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	429a      	cmp	r2, r3
 8002096:	d1eb      	bne.n	8002070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002098:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d20c      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e032      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4916      	ldr	r1, [pc, #88]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ea:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	490e      	ldr	r1, [pc, #56]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fe:	f000 f821 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002102:	4602      	mov	r2, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	490a      	ldr	r1, [pc, #40]	@ (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	5ccb      	ldrb	r3, [r1, r3]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	4a09      	ldr	r2, [pc, #36]	@ (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f8fc 	bl	800131c <HAL_InitTick>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023c00 	.word	0x40023c00
 8002134:	40023800 	.word	0x40023800
 8002138:	08003ed0 	.word	0x08003ed0
 800213c:	20000008 	.word	0x20000008
 8002140:	2000000c 	.word	0x2000000c

08002144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002148:	b094      	sub	sp, #80	@ 0x50
 800214a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800215c:	4b79      	ldr	r3, [pc, #484]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x200>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d00d      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x40>
 8002168:	2b08      	cmp	r3, #8
 800216a:	f200 80e1 	bhi.w	8002330 <HAL_RCC_GetSysClockFreq+0x1ec>
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x34>
 8002172:	2b04      	cmp	r3, #4
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x3a>
 8002176:	e0db      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4b73      	ldr	r3, [pc, #460]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x204>)
 800217a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800217c:	e0db      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800217e:	4b73      	ldr	r3, [pc, #460]	@ (800234c <HAL_RCC_GetSysClockFreq+0x208>)
 8002180:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002182:	e0d8      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002184:	4b6f      	ldr	r3, [pc, #444]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x200>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800218c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800218e:	4b6d      	ldr	r3, [pc, #436]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x200>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d063      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219a:	4b6a      	ldr	r3, [pc, #424]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x200>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	099b      	lsrs	r3, r3, #6
 80021a0:	2200      	movs	r2, #0
 80021a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80021ae:	2300      	movs	r3, #0
 80021b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80021b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021b6:	4622      	mov	r2, r4
 80021b8:	462b      	mov	r3, r5
 80021ba:	f04f 0000 	mov.w	r0, #0
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	0159      	lsls	r1, r3, #5
 80021c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c8:	0150      	lsls	r0, r2, #5
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4621      	mov	r1, r4
 80021d0:	1a51      	subs	r1, r2, r1
 80021d2:	6139      	str	r1, [r7, #16]
 80021d4:	4629      	mov	r1, r5
 80021d6:	eb63 0301 	sbc.w	r3, r3, r1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021e8:	4659      	mov	r1, fp
 80021ea:	018b      	lsls	r3, r1, #6
 80021ec:	4651      	mov	r1, sl
 80021ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021f2:	4651      	mov	r1, sl
 80021f4:	018a      	lsls	r2, r1, #6
 80021f6:	4651      	mov	r1, sl
 80021f8:	ebb2 0801 	subs.w	r8, r2, r1
 80021fc:	4659      	mov	r1, fp
 80021fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800220e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002216:	4690      	mov	r8, r2
 8002218:	4699      	mov	r9, r3
 800221a:	4623      	mov	r3, r4
 800221c:	eb18 0303 	adds.w	r3, r8, r3
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	462b      	mov	r3, r5
 8002224:	eb49 0303 	adc.w	r3, r9, r3
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002236:	4629      	mov	r1, r5
 8002238:	024b      	lsls	r3, r1, #9
 800223a:	4621      	mov	r1, r4
 800223c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002240:	4621      	mov	r1, r4
 8002242:	024a      	lsls	r2, r1, #9
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224a:	2200      	movs	r2, #0
 800224c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800224e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002254:	f7fd ffc0 	bl	80001d8 <__aeabi_uldivmod>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4613      	mov	r3, r2
 800225e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002260:	e058      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002262:	4b38      	ldr	r3, [pc, #224]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x200>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	099b      	lsrs	r3, r3, #6
 8002268:	2200      	movs	r2, #0
 800226a:	4618      	mov	r0, r3
 800226c:	4611      	mov	r1, r2
 800226e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002272:	623b      	str	r3, [r7, #32]
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
 8002278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800227c:	4642      	mov	r2, r8
 800227e:	464b      	mov	r3, r9
 8002280:	f04f 0000 	mov.w	r0, #0
 8002284:	f04f 0100 	mov.w	r1, #0
 8002288:	0159      	lsls	r1, r3, #5
 800228a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228e:	0150      	lsls	r0, r2, #5
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4641      	mov	r1, r8
 8002296:	ebb2 0a01 	subs.w	sl, r2, r1
 800229a:	4649      	mov	r1, r9
 800229c:	eb63 0b01 	sbc.w	fp, r3, r1
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022b4:	ebb2 040a 	subs.w	r4, r2, sl
 80022b8:	eb63 050b 	sbc.w	r5, r3, fp
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	00eb      	lsls	r3, r5, #3
 80022c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ca:	00e2      	lsls	r2, r4, #3
 80022cc:	4614      	mov	r4, r2
 80022ce:	461d      	mov	r5, r3
 80022d0:	4643      	mov	r3, r8
 80022d2:	18e3      	adds	r3, r4, r3
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	464b      	mov	r3, r9
 80022d8:	eb45 0303 	adc.w	r3, r5, r3
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ea:	4629      	mov	r1, r5
 80022ec:	028b      	lsls	r3, r1, #10
 80022ee:	4621      	mov	r1, r4
 80022f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f4:	4621      	mov	r1, r4
 80022f6:	028a      	lsls	r2, r1, #10
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022fe:	2200      	movs	r2, #0
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	61fa      	str	r2, [r7, #28]
 8002304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002308:	f7fd ff66 	bl	80001d8 <__aeabi_uldivmod>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4613      	mov	r3, r2
 8002312:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x200>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800232e:	e002      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x204>)
 8002332:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002338:	4618      	mov	r0, r3
 800233a:	3750      	adds	r7, #80	@ 0x50
 800233c:	46bd      	mov	sp, r7
 800233e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	00f42400 	.word	0x00f42400
 800234c:	007a1200 	.word	0x007a1200

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <HAL_RCC_GetHCLKFreq+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000008 	.word	0x20000008

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff0 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	0a9b      	lsrs	r3, r3, #10
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	@ (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800
 800238c:	08003ee0 	.word	0x08003ee0

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002394:	f7ff ffdc 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0b5b      	lsrs	r3, r3, #13
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	@ (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	08003ee0 	.word	0x08003ee0

080023b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e041      	b.n	800244e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe fd70 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	4610      	mov	r0, r2
 80023f8:	f000 fac0 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e041      	b.n	80024ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f839 	bl	80024f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3304      	adds	r3, #4
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f000 fa71 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_TIM_PWM_Start+0x24>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e022      	b.n	8002572 <HAL_TIM_PWM_Start+0x6a>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d109      	bne.n	8002546 <HAL_TIM_PWM_Start+0x3e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	e015      	b.n	8002572 <HAL_TIM_PWM_Start+0x6a>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d109      	bne.n	8002560 <HAL_TIM_PWM_Start+0x58>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e008      	b.n	8002572 <HAL_TIM_PWM_Start+0x6a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e068      	b.n	800264c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_TIM_PWM_Start+0x82>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002588:	e013      	b.n	80025b2 <HAL_TIM_PWM_Start+0xaa>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d104      	bne.n	800259a <HAL_TIM_PWM_Start+0x92>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002598:	e00b      	b.n	80025b2 <HAL_TIM_PWM_Start+0xaa>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d104      	bne.n	80025aa <HAL_TIM_PWM_Start+0xa2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025a8:	e003      	b.n	80025b2 <HAL_TIM_PWM_Start+0xaa>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fc8a 	bl	8002ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a23      	ldr	r2, [pc, #140]	@ (8002654 <HAL_TIM_PWM_Start+0x14c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d107      	bne.n	80025da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <HAL_TIM_PWM_Start+0x14c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d018      	beq.n	8002616 <HAL_TIM_PWM_Start+0x10e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ec:	d013      	beq.n	8002616 <HAL_TIM_PWM_Start+0x10e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a19      	ldr	r2, [pc, #100]	@ (8002658 <HAL_TIM_PWM_Start+0x150>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_TIM_PWM_Start+0x10e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a17      	ldr	r2, [pc, #92]	@ (800265c <HAL_TIM_PWM_Start+0x154>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_TIM_PWM_Start+0x10e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a16      	ldr	r2, [pc, #88]	@ (8002660 <HAL_TIM_PWM_Start+0x158>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_TIM_PWM_Start+0x10e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <HAL_TIM_PWM_Start+0x15c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d111      	bne.n	800263a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d010      	beq.n	800264a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002638:	e007      	b.n	800264a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40010000 	.word	0x40010000
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800
 8002660:	40000c00 	.word	0x40000c00
 8002664:	40014000 	.word	0x40014000

08002668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002682:	2302      	movs	r3, #2
 8002684:	e0ae      	b.n	80027e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b0c      	cmp	r3, #12
 8002692:	f200 809f 	bhi.w	80027d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002696:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026d1 	.word	0x080026d1
 80026a0:	080027d5 	.word	0x080027d5
 80026a4:	080027d5 	.word	0x080027d5
 80026a8:	080027d5 	.word	0x080027d5
 80026ac:	08002711 	.word	0x08002711
 80026b0:	080027d5 	.word	0x080027d5
 80026b4:	080027d5 	.word	0x080027d5
 80026b8:	080027d5 	.word	0x080027d5
 80026bc:	08002753 	.word	0x08002753
 80026c0:	080027d5 	.word	0x080027d5
 80026c4:	080027d5 	.word	0x080027d5
 80026c8:	080027d5 	.word	0x080027d5
 80026cc:	08002793 	.word	0x08002793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f9d6 	bl	8002a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0208 	orr.w	r2, r2, #8
 80026ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6999      	ldr	r1, [r3, #24]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	619a      	str	r2, [r3, #24]
      break;
 800270e:	e064      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fa1c 	bl	8002b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800272a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800273a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6999      	ldr	r1, [r3, #24]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	021a      	lsls	r2, r3, #8
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	619a      	str	r2, [r3, #24]
      break;
 8002750:	e043      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fa67 	bl	8002c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0208 	orr.w	r2, r2, #8
 800276c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0204 	bic.w	r2, r2, #4
 800277c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69d9      	ldr	r1, [r3, #28]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	61da      	str	r2, [r3, #28]
      break;
 8002790:	e023      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fab1 	bl	8002d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69da      	ldr	r2, [r3, #28]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69d9      	ldr	r1, [r3, #28]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	021a      	lsls	r2, r3, #8
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	61da      	str	r2, [r3, #28]
      break;
 80027d2:	e002      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	75fb      	strb	r3, [r7, #23]
      break;
 80027d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIM_ConfigClockSource+0x1c>
 8002804:	2302      	movs	r3, #2
 8002806:	e0b4      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x186>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800282e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002840:	d03e      	beq.n	80028c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002846:	f200 8087 	bhi.w	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800284e:	f000 8086 	beq.w	800295e <HAL_TIM_ConfigClockSource+0x172>
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002856:	d87f      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b70      	cmp	r3, #112	@ 0x70
 800285a:	d01a      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xa6>
 800285c:	2b70      	cmp	r3, #112	@ 0x70
 800285e:	d87b      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b60      	cmp	r3, #96	@ 0x60
 8002862:	d050      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x11a>
 8002864:	2b60      	cmp	r3, #96	@ 0x60
 8002866:	d877      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b50      	cmp	r3, #80	@ 0x50
 800286a:	d03c      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xfa>
 800286c:	2b50      	cmp	r3, #80	@ 0x50
 800286e:	d873      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b40      	cmp	r3, #64	@ 0x40
 8002872:	d058      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x13a>
 8002874:	2b40      	cmp	r3, #64	@ 0x40
 8002876:	d86f      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b30      	cmp	r3, #48	@ 0x30
 800287a:	d064      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 800287c:	2b30      	cmp	r3, #48	@ 0x30
 800287e:	d86b      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b20      	cmp	r3, #32
 8002882:	d060      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 8002884:	2b20      	cmp	r3, #32
 8002886:	d867      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05c      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 800288c:	2b10      	cmp	r3, #16
 800288e:	d05a      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 8002890:	e062      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a2:	f000 faf7 	bl	8002e94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	609a      	str	r2, [r3, #8]
      break;
 80028be:	e04f      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028d0:	f000 fae0 	bl	8002e94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028e2:	609a      	str	r2, [r3, #8]
      break;
 80028e4:	e03c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 fa54 	bl	8002da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2150      	movs	r1, #80	@ 0x50
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 faad 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002904:	e02c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002912:	461a      	mov	r2, r3
 8002914:	f000 fa73 	bl	8002dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2160      	movs	r1, #96	@ 0x60
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fa9d 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002924:	e01c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	461a      	mov	r2, r3
 8002934:	f000 fa34 	bl	8002da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2140      	movs	r1, #64	@ 0x40
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fa8d 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002944:	e00c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f000 fa84 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002956:	e003      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      break;
 800295c:	e000      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800295e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a37      	ldr	r2, [pc, #220]	@ (8002a6c <TIM_Base_SetConfig+0xf0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00f      	beq.n	80029b4 <TIM_Base_SetConfig+0x38>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299a:	d00b      	beq.n	80029b4 <TIM_Base_SetConfig+0x38>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a34      	ldr	r2, [pc, #208]	@ (8002a70 <TIM_Base_SetConfig+0xf4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <TIM_Base_SetConfig+0x38>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a33      	ldr	r2, [pc, #204]	@ (8002a74 <TIM_Base_SetConfig+0xf8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_Base_SetConfig+0x38>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a32      	ldr	r2, [pc, #200]	@ (8002a78 <TIM_Base_SetConfig+0xfc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d108      	bne.n	80029c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a28      	ldr	r2, [pc, #160]	@ (8002a6c <TIM_Base_SetConfig+0xf0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01b      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d4:	d017      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a25      	ldr	r2, [pc, #148]	@ (8002a70 <TIM_Base_SetConfig+0xf4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a24      	ldr	r2, [pc, #144]	@ (8002a74 <TIM_Base_SetConfig+0xf8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00f      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a23      	ldr	r2, [pc, #140]	@ (8002a78 <TIM_Base_SetConfig+0xfc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00b      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a22      	ldr	r2, [pc, #136]	@ (8002a7c <TIM_Base_SetConfig+0x100>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a21      	ldr	r2, [pc, #132]	@ (8002a80 <TIM_Base_SetConfig+0x104>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a20      	ldr	r2, [pc, #128]	@ (8002a84 <TIM_Base_SetConfig+0x108>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d108      	bne.n	8002a18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <TIM_Base_SetConfig+0xf0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d103      	bne.n	8002a46 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f043 0204 	orr.w	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40000c00 	.word	0x40000c00
 8002a7c:	40014000 	.word	0x40014000
 8002a80:	40014400 	.word	0x40014400
 8002a84:	40014800 	.word	0x40014800

08002a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f023 0201 	bic.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f023 0302 	bic.w	r3, r3, #2
 8002ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <TIM_OC1_SetConfig+0xc8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10c      	bne.n	8002afe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 0308 	bic.w	r3, r3, #8
 8002aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <TIM_OC1_SetConfig+0xc8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d111      	bne.n	8002b2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	621a      	str	r2, [r3, #32]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40010000 	.word	0x40010000

08002b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f023 0210 	bic.w	r2, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f023 0320 	bic.w	r3, r3, #32
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <TIM_OC2_SetConfig+0xd4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d10d      	bne.n	8002bd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a15      	ldr	r2, [pc, #84]	@ (8002c28 <TIM_OC2_SetConfig+0xd4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d113      	bne.n	8002c00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	621a      	str	r2, [r3, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000

08002c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <TIM_OC3_SetConfig+0xd0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10d      	bne.n	8002ca6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <TIM_OC3_SetConfig+0xd0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d113      	bne.n	8002cd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	621a      	str	r2, [r3, #32]
}
 8002cf0:	bf00      	nop
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40010000 	.word	0x40010000

08002d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	031b      	lsls	r3, r3, #12
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a10      	ldr	r2, [pc, #64]	@ (8002d9c <TIM_OC4_SetConfig+0x9c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d109      	bne.n	8002d74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000

08002da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0201 	bic.w	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 030a 	bic.w	r3, r3, #10
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b087      	sub	sp, #28
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f023 0210 	bic.w	r2, r3, #16
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	031b      	lsls	r3, r3, #12
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f043 0307 	orr.w	r3, r3, #7
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	021a      	lsls	r2, r3, #8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e050      	b.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d018      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f84:	d013      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a18      	ldr	r2, [pc, #96]	@ (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a16      	ldr	r2, [pc, #88]	@ (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a15      	ldr	r2, [pc, #84]	@ (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a13      	ldr	r2, [pc, #76]	@ (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10c      	bne.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40014000 	.word	0x40014000

08002ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e042      	b.n	8003094 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe f85e 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	@ 0x24
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800303e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fc99 	bl	8003978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0ba      	sub	sp, #232	@ 0xe8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_UART_IRQHandler+0x66>
 80030ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fb7e 	bl	80037fc <UART_Receive_IT>
      return;
 8003100:	e273      	b.n	80035ea <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80de 	beq.w	80032c8 <HAL_UART_IRQHandler+0x22c>
 800310c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800311c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80d1 	beq.w	80032c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_UART_IRQHandler+0xae>
 8003132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_UART_IRQHandler+0xd2>
 8003156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xf6>
 800317a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d011      	beq.n	80031c2 <HAL_UART_IRQHandler+0x126>
 800319e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 820a 	beq.w	80035e0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_UART_IRQHandler+0x14e>
 80031d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fb09 	bl	80037fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f4:	2b40      	cmp	r3, #64	@ 0x40
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_UART_IRQHandler+0x17a>
 800320e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d04f      	beq.n	80032b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa14 	bl	8003644 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003226:	2b40      	cmp	r3, #64	@ 0x40
 8003228:	d141      	bne.n	80032ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3314      	adds	r3, #20
 8003230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3314      	adds	r3, #20
 8003252:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003256:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800325a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003262:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800326e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1d9      	bne.n	800322a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d013      	beq.n	80032a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003282:	4a8a      	ldr	r2, [pc, #552]	@ (80034ac <HAL_UART_IRQHandler+0x410>)
 8003284:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fa3b 	bl	8001706 <HAL_DMA_Abort_IT>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032a0:	4610      	mov	r0, r2
 80032a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e00e      	b.n	80032c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9b6 	bl	8003618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e00a      	b.n	80032c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9b2 	bl	8003618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	e006      	b.n	80032c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f9ae 	bl	8003618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032c2:	e18d      	b.n	80035e0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	bf00      	nop
    return;
 80032c6:	e18b      	b.n	80035e0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 8167 	bne.w	80035a0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8160 	beq.w	80035a0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80032e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8159 	beq.w	80035a0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	f040 80ce 	bne.w	80034b0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003320:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a9 	beq.w	800347c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800332e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003332:	429a      	cmp	r2, r3
 8003334:	f080 80a2 	bcs.w	800347c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800333e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800334a:	f000 8088 	beq.w	800345e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003364:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800336c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800337a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800337e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003386:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1d9      	bne.n	800334e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e1      	bne.n	800339a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003400:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e3      	bne.n	80033d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800342c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800342e:	f023 0310 	bic.w	r3, r3, #16
 8003432:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003440:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003442:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003446:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800344e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e3      	bne.n	800341c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe f8e4 	bl	8001626 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800346c:	b29b      	uxth	r3, r3
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	b29b      	uxth	r3, r3
 8003472:	4619      	mov	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8d9 	bl	800362c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800347a:	e0b3      	b.n	80035e4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003480:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003484:	429a      	cmp	r2, r3
 8003486:	f040 80ad 	bne.w	80035e4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003494:	f040 80a6 	bne.w	80035e4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8c1 	bl	800362c <HAL_UARTEx_RxEventCallback>
      return;
 80034aa:	e09b      	b.n	80035e4 <HAL_UART_IRQHandler+0x548>
 80034ac:	0800370b 	.word	0x0800370b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 808e 	beq.w	80035e8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80034cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8089 	beq.w	80035e8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80034fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e3      	bne.n	80034d6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3314      	adds	r3, #20
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	623b      	str	r3, [r7, #32]
   return(result);
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3314      	adds	r3, #20
 800352e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003532:	633a      	str	r2, [r7, #48]	@ 0x30
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e3      	bne.n	800350e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	60fb      	str	r3, [r7, #12]
   return(result);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0310 	bic.w	r3, r3, #16
 800356a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003578:	61fa      	str	r2, [r7, #28]
 800357a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	69b9      	ldr	r1, [r7, #24]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	617b      	str	r3, [r7, #20]
   return(result);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e3      	bne.n	8003554 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f847 	bl	800362c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800359e:	e023      	b.n	80035e8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <HAL_UART_IRQHandler+0x524>
 80035ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f8b7 	bl	800372c <UART_Transmit_IT>
    return;
 80035be:	e014      	b.n	80035ea <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_UART_IRQHandler+0x54e>
 80035cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8f7 	bl	80037cc <UART_EndTransmit_IT>
    return;
 80035de:	e004      	b.n	80035ea <HAL_UART_IRQHandler+0x54e>
    return;
 80035e0:	bf00      	nop
 80035e2:	e002      	b.n	80035ea <HAL_UART_IRQHandler+0x54e>
      return;
 80035e4:	bf00      	nop
 80035e6:	e000      	b.n	80035ea <HAL_UART_IRQHandler+0x54e>
      return;
 80035e8:	bf00      	nop
  }
}
 80035ea:	37e8      	adds	r7, #232	@ 0xe8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b095      	sub	sp, #84	@ 0x54
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800366c:	643a      	str	r2, [r7, #64]	@ 0x40
 800366e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003672:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3314      	adds	r3, #20
 800369e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e5      	bne.n	8003680 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d119      	bne.n	80036f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f023 0310 	bic.w	r3, r3, #16
 80036d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036dc:	61ba      	str	r2, [r7, #24]
 80036de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6979      	ldr	r1, [r7, #20]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036fe:	bf00      	nop
 8003700:	3754      	adds	r7, #84	@ 0x54
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff ff7a 	bl	8003618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b21      	cmp	r3, #33	@ 0x21
 800373e:	d13e      	bne.n	80037be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003748:	d114      	bne.n	8003774 <UART_Transmit_IT+0x48>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d110      	bne.n	8003774 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003766:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	1c9a      	adds	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]
 8003772:	e008      	b.n	8003786 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	1c59      	adds	r1, r3, #1
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6211      	str	r1, [r2, #32]
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29b      	uxth	r3, r3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4619      	mov	r1, r3
 8003794:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff feff 	bl	80035f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08c      	sub	sp, #48	@ 0x30
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b22      	cmp	r3, #34	@ 0x22
 8003816:	f040 80aa 	bne.w	800396e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003822:	d115      	bne.n	8003850 <UART_Receive_IT+0x54>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	b29b      	uxth	r3, r3
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	b29a      	uxth	r2, r3
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	629a      	str	r2, [r3, #40]	@ 0x28
 800384e:	e024      	b.n	800389a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385e:	d007      	beq.n	8003870 <UART_Receive_IT+0x74>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <UART_Receive_IT+0x82>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	e008      	b.n	8003890 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800388a:	b2da      	uxtb	r2, r3
 800388c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4619      	mov	r1, r3
 80038a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d15d      	bne.n	800396a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0220 	bic.w	r2, r2, #32
 80038bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d135      	bne.n	8003960 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	613b      	str	r3, [r7, #16]
   return(result);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f023 0310 	bic.w	r3, r3, #16
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391a:	623a      	str	r2, [r7, #32]
 800391c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	69f9      	ldr	r1, [r7, #28]
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	61bb      	str	r3, [r7, #24]
   return(result);
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e5      	bne.n	80038fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b10      	cmp	r3, #16
 800393a:	d10a      	bne.n	8003952 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003956:	4619      	mov	r1, r3
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff fe67 	bl	800362c <HAL_UARTEx_RxEventCallback>
 800395e:	e002      	b.n	8003966 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fe4f 	bl	8003604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e002      	b.n	8003970 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	3730      	adds	r7, #48	@ 0x30
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b0c0      	sub	sp, #256	@ 0x100
 800397e:	af00      	add	r7, sp, #0
 8003980:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	68d9      	ldr	r1, [r3, #12]
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	ea40 0301 	orr.w	r3, r0, r1
 80039a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039d0:	f021 010c 	bic.w	r1, r1, #12
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039de:	430b      	orrs	r3, r1
 80039e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f2:	6999      	ldr	r1, [r3, #24]
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	ea40 0301 	orr.w	r3, r0, r1
 80039fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b8f      	ldr	r3, [pc, #572]	@ (8003c44 <UART_SetConfig+0x2cc>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d005      	beq.n	8003a18 <UART_SetConfig+0xa0>
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b8d      	ldr	r3, [pc, #564]	@ (8003c48 <UART_SetConfig+0x2d0>)
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d104      	bne.n	8003a22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a18:	f7fe fcba 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8003a1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a20:	e003      	b.n	8003a2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a22:	f7fe fca1 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8003a26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a34:	f040 810c 	bne.w	8003c50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	1891      	adds	r1, r2, r2
 8003a50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a52:	415b      	adcs	r3, r3
 8003a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	eb12 0801 	adds.w	r8, r2, r1
 8003a60:	4629      	mov	r1, r5
 8003a62:	eb43 0901 	adc.w	r9, r3, r1
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7a:	4690      	mov	r8, r2
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	4623      	mov	r3, r4
 8003a80:	eb18 0303 	adds.w	r3, r8, r3
 8003a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a88:	462b      	mov	r3, r5
 8003a8a:	eb49 0303 	adc.w	r3, r9, r3
 8003a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003aa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	18db      	adds	r3, r3, r3
 8003aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aac:	4613      	mov	r3, r2
 8003aae:	eb42 0303 	adc.w	r3, r2, r3
 8003ab2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ab4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ab8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003abc:	f7fc fb8c 	bl	80001d8 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4b61      	ldr	r3, [pc, #388]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	011c      	lsls	r4, r3, #4
 8003ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ad8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003adc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	1891      	adds	r1, r2, r2
 8003ae6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ae8:	415b      	adcs	r3, r3
 8003aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003af0:	4641      	mov	r1, r8
 8003af2:	eb12 0a01 	adds.w	sl, r2, r1
 8003af6:	4649      	mov	r1, r9
 8003af8:	eb43 0b01 	adc.w	fp, r3, r1
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b10:	4692      	mov	sl, r2
 8003b12:	469b      	mov	fp, r3
 8003b14:	4643      	mov	r3, r8
 8003b16:	eb1a 0303 	adds.w	r3, sl, r3
 8003b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	eb4b 0303 	adc.w	r3, fp, r3
 8003b24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	18db      	adds	r3, r3, r3
 8003b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b42:	4613      	mov	r3, r2
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b52:	f7fc fb41 	bl	80001d8 <__aeabi_uldivmod>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2264      	movs	r2, #100	@ 0x64
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	1acb      	subs	r3, r1, r3
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b72:	4b36      	ldr	r3, [pc, #216]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003b74:	fba3 2302 	umull	r2, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b80:	441c      	add	r4, r3
 8003b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b94:	4642      	mov	r2, r8
 8003b96:	464b      	mov	r3, r9
 8003b98:	1891      	adds	r1, r2, r2
 8003b9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b9c:	415b      	adcs	r3, r3
 8003b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	1851      	adds	r1, r2, r1
 8003ba8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003baa:	4649      	mov	r1, r9
 8003bac:	414b      	adcs	r3, r1
 8003bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bbc:	4659      	mov	r1, fp
 8003bbe:	00cb      	lsls	r3, r1, #3
 8003bc0:	4651      	mov	r1, sl
 8003bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	00ca      	lsls	r2, r1, #3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bd8:	464b      	mov	r3, r9
 8003bda:	460a      	mov	r2, r1
 8003bdc:	eb42 0303 	adc.w	r3, r2, r3
 8003be0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bf0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	18db      	adds	r3, r3, r3
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bfe:	4613      	mov	r3, r2
 8003c00:	eb42 0303 	adc.w	r3, r2, r3
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c0e:	f7fc fae3 	bl	80001d8 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003c18:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	2164      	movs	r1, #100	@ 0x64
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	3332      	adds	r3, #50	@ 0x32
 8003c2a:	4a08      	ldr	r2, [pc, #32]	@ (8003c4c <UART_SetConfig+0x2d4>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	f003 0207 	and.w	r2, r3, #7
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4422      	add	r2, r4
 8003c3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c40:	e106      	b.n	8003e50 <UART_SetConfig+0x4d8>
 8003c42:	bf00      	nop
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c62:	4642      	mov	r2, r8
 8003c64:	464b      	mov	r3, r9
 8003c66:	1891      	adds	r1, r2, r2
 8003c68:	6239      	str	r1, [r7, #32]
 8003c6a:	415b      	adcs	r3, r3
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c72:	4641      	mov	r1, r8
 8003c74:	1854      	adds	r4, r2, r1
 8003c76:	4649      	mov	r1, r9
 8003c78:	eb43 0501 	adc.w	r5, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	00eb      	lsls	r3, r5, #3
 8003c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c8a:	00e2      	lsls	r2, r4, #3
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	461d      	mov	r5, r3
 8003c90:	4643      	mov	r3, r8
 8003c92:	18e3      	adds	r3, r4, r3
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c98:	464b      	mov	r3, r9
 8003c9a:	eb45 0303 	adc.w	r3, r5, r3
 8003c9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	008b      	lsls	r3, r1, #2
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc8:	4621      	mov	r1, r4
 8003cca:	008a      	lsls	r2, r1, #2
 8003ccc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cd0:	f7fc fa82 	bl	80001d8 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4b60      	ldr	r3, [pc, #384]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003cda:	fba3 2302 	umull	r2, r3, r3, r2
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	011c      	lsls	r4, r3, #4
 8003ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	1891      	adds	r1, r2, r2
 8003cfa:	61b9      	str	r1, [r7, #24]
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d04:	4641      	mov	r1, r8
 8003d06:	1851      	adds	r1, r2, r1
 8003d08:	6139      	str	r1, [r7, #16]
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	414b      	adcs	r3, r1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	00cb      	lsls	r3, r1, #3
 8003d20:	4651      	mov	r1, sl
 8003d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d26:	4651      	mov	r1, sl
 8003d28:	00ca      	lsls	r2, r1, #3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4642      	mov	r2, r8
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d38:	464b      	mov	r3, r9
 8003d3a:	460a      	mov	r2, r1
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	008b      	lsls	r3, r1, #2
 8003d60:	4641      	mov	r1, r8
 8003d62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d66:	4641      	mov	r1, r8
 8003d68:	008a      	lsls	r2, r1, #2
 8003d6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d6e:	f7fc fa33 	bl	80001d8 <__aeabi_uldivmod>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	4b38      	ldr	r3, [pc, #224]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2264      	movs	r2, #100	@ 0x64
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	1acb      	subs	r3, r1, r3
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	3332      	adds	r3, #50	@ 0x32
 8003d8c:	4a33      	ldr	r2, [pc, #204]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d98:	441c      	add	r4, r3
 8003d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d9e:	2200      	movs	r2, #0
 8003da0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003da2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003da4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003da8:	4642      	mov	r2, r8
 8003daa:	464b      	mov	r3, r9
 8003dac:	1891      	adds	r1, r2, r2
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	415b      	adcs	r3, r3
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003db8:	4641      	mov	r1, r8
 8003dba:	1851      	adds	r1, r2, r1
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	414b      	adcs	r3, r1
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dd0:	4659      	mov	r1, fp
 8003dd2:	00cb      	lsls	r3, r1, #3
 8003dd4:	4651      	mov	r1, sl
 8003dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dda:	4651      	mov	r1, sl
 8003ddc:	00ca      	lsls	r2, r1, #3
 8003dde:	4610      	mov	r0, r2
 8003de0:	4619      	mov	r1, r3
 8003de2:	4603      	mov	r3, r0
 8003de4:	4642      	mov	r2, r8
 8003de6:	189b      	adds	r3, r3, r2
 8003de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dea:	464b      	mov	r3, r9
 8003dec:	460a      	mov	r2, r1
 8003dee:	eb42 0303 	adc.w	r3, r2, r3
 8003df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dfe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	008b      	lsls	r3, r1, #2
 8003e10:	4641      	mov	r1, r8
 8003e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e16:	4641      	mov	r1, r8
 8003e18:	008a      	lsls	r2, r1, #2
 8003e1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e1e:	f7fc f9db 	bl	80001d8 <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003e28:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	2164      	movs	r1, #100	@ 0x64
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	3332      	adds	r3, #50	@ 0x32
 8003e3a:	4a08      	ldr	r2, [pc, #32]	@ (8003e5c <UART_SetConfig+0x4e4>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4422      	add	r2, r4
 8003e4e:	609a      	str	r2, [r3, #8]
}
 8003e50:	bf00      	nop
 8003e52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e56:	46bd      	mov	sp, r7
 8003e58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5c:	51eb851f 	.word	0x51eb851f

08003e60 <memset>:
 8003e60:	4402      	add	r2, r0
 8003e62:	4603      	mov	r3, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <__libc_init_array>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	4d0d      	ldr	r5, [pc, #52]	@ (8003ea8 <__libc_init_array+0x38>)
 8003e74:	4c0d      	ldr	r4, [pc, #52]	@ (8003eac <__libc_init_array+0x3c>)
 8003e76:	1b64      	subs	r4, r4, r5
 8003e78:	10a4      	asrs	r4, r4, #2
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	42a6      	cmp	r6, r4
 8003e7e:	d109      	bne.n	8003e94 <__libc_init_array+0x24>
 8003e80:	4d0b      	ldr	r5, [pc, #44]	@ (8003eb0 <__libc_init_array+0x40>)
 8003e82:	4c0c      	ldr	r4, [pc, #48]	@ (8003eb4 <__libc_init_array+0x44>)
 8003e84:	f000 f818 	bl	8003eb8 <_init>
 8003e88:	1b64      	subs	r4, r4, r5
 8003e8a:	10a4      	asrs	r4, r4, #2
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	42a6      	cmp	r6, r4
 8003e90:	d105      	bne.n	8003e9e <__libc_init_array+0x2e>
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e98:	4798      	blx	r3
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	e7ee      	b.n	8003e7c <__libc_init_array+0xc>
 8003e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea2:	4798      	blx	r3
 8003ea4:	3601      	adds	r6, #1
 8003ea6:	e7f2      	b.n	8003e8e <__libc_init_array+0x1e>
 8003ea8:	08003ef0 	.word	0x08003ef0
 8003eac:	08003ef0 	.word	0x08003ef0
 8003eb0:	08003ef0 	.word	0x08003ef0
 8003eb4:	08003ef4 	.word	0x08003ef4

08003eb8 <_init>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr

08003ec4 <_fini>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr
