
HC-05 Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004160  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004330  08004330  00005330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004550  08004550  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004550  08004550  00005550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004558  08004558  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800455c  0800455c  0000555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004560  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000068  080045c8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  080045c8  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009721  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aff  00000000  00000000  0000f7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  000112b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000061a  00000000  00000000  00011ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dfd  00000000  00000000  000120da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a98f  00000000  00000000  00033ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca67b  00000000  00000000  0003e866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108ee1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a14  00000000  00000000  00108f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0010b938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004318 	.word	0x08004318

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004318 	.word	0x08004318

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fbe1 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f825 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8bb 	bl	8000774 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005fe:	f000 f88f 	bl	8000720 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char temp_msg[32];
  strcpy(temp_msg, "HC-05 Initialised!\n");
 8000602:	463b      	mov	r3, r7
 8000604:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <main+0x4c>)
 8000606:	461c      	mov	r4, r3
 8000608:	4615      	mov	r5, r2
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	682b      	ldr	r3, [r5, #0]
 8000610:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*) temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000612:	463b      	mov	r3, r7
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fdfb 	bl	8000210 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	4639      	mov	r1, r7
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <main+0x50>)
 8000626:	f001 fdc3 	bl	80021b0 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, buffer, 21);
 800062a:	2215      	movs	r2, #21
 800062c:	4904      	ldr	r1, [pc, #16]	@ (8000640 <main+0x54>)
 800062e:	4803      	ldr	r0, [pc, #12]	@ (800063c <main+0x50>)
 8000630:	f001 fe49 	bl	80022c6 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <main+0x48>
 8000638:	08004330 	.word	0x08004330
 800063c:	20000084 	.word	0x20000084
 8000640:	20000178 	.word	0x20000178

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	@ 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 ff55 	bl	8003502 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a29      	ldr	r2, [pc, #164]	@ (8000718 <SystemClock_Config+0xd4>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b24      	ldr	r3, [pc, #144]	@ (800071c <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000690:	4a22      	ldr	r2, [pc, #136]	@ (800071c <SystemClock_Config+0xd8>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b8:	2310      	movs	r3, #16
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fa7e 	bl	8001bd4 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006de:	f000 f9b1 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 ff1e 	bl	8001540 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070a:	f000 f99b 	bl	8000a44 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_USART1_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 800072c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000758:	f001 fcda 	bl	8002110 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f96f 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000084 	.word	0x20000084
 8000770:	40011000 	.word	0x40011000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b35      	ldr	r3, [pc, #212]	@ (8000864 <MX_GPIO_Init+0xf0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a34      	ldr	r2, [pc, #208]	@ (8000864 <MX_GPIO_Init+0xf0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b32      	ldr	r3, [pc, #200]	@ (8000864 <MX_GPIO_Init+0xf0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000864 <MX_GPIO_Init+0xf0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000864 <MX_GPIO_Init+0xf0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <MX_GPIO_Init+0xf0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a26      	ldr	r2, [pc, #152]	@ (8000864 <MX_GPIO_Init+0xf0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <MX_GPIO_Init+0xf0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000864 <MX_GPIO_Init+0xf0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	481a      	ldr	r0, [pc, #104]	@ (8000868 <MX_GPIO_Init+0xf4>)
 8000800:	f000 fe84 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4814      	ldr	r0, [pc, #80]	@ (800086c <MX_GPIO_Init+0xf8>)
 800081c:	f000 fce2 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000820:	230c      	movs	r3, #12
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000830:	2307      	movs	r3, #7
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	480b      	ldr	r0, [pc, #44]	@ (8000868 <MX_GPIO_Init+0xf4>)
 800083c:	f000 fcd2 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000840:	2320      	movs	r3, #32
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_GPIO_Init+0xf4>)
 8000858:	f000 fcc4 	bl	80011e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800

08000870 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000870:	b580      	push	{r7, lr}
 8000872:	b0a4      	sub	sp, #144	@ 0x90
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a64      	ldr	r2, [pc, #400]	@ (8000a10 <HAL_UART_RxCpltCallback+0x1a0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	f040 80c2 	bne.w	8000a08 <HAL_UART_RxCpltCallback+0x198>
	        char response_msg[100];
	        char temp_buffer[21]; // Create a copy if you need to preserve the original
	        strcpy(temp_buffer, buffer); // Copy the original string
 8000884:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000888:	4962      	ldr	r1, [pc, #392]	@ (8000a14 <HAL_UART_RxCpltCallback+0x1a4>)
 800088a:	4618      	mov	r0, r3
 800088c:	f002 ff1f 	bl	80036ce <strcpy>

	        for(int i = 0; i < 21; i++)
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000896:	e017      	b.n	80008c8 <HAL_UART_RxCpltCallback+0x58>
	        	buffer_q[index_buffer][i] = buffer[i];
 8000898:	4b5f      	ldr	r3, [pc, #380]	@ (8000a18 <HAL_UART_RxCpltCallback+0x1a8>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	495d      	ldr	r1, [pc, #372]	@ (8000a14 <HAL_UART_RxCpltCallback+0x1a4>)
 800089e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008a2:	440b      	add	r3, r1
 80008a4:	7818      	ldrb	r0, [r3, #0]
 80008a6:	495d      	ldr	r1, [pc, #372]	@ (8000a1c <HAL_UART_RxCpltCallback+0x1ac>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	00da      	lsls	r2, r3, #3
 80008b0:	1ad2      	subs	r2, r2, r3
 80008b2:	440a      	add	r2, r1
 80008b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008b8:	4413      	add	r3, r2
 80008ba:	4602      	mov	r2, r0
 80008bc:	701a      	strb	r2, [r3, #0]
	        for(int i = 0; i < 21; i++)
 80008be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008c2:	3301      	adds	r3, #1
 80008c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80008c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008cc:	2b14      	cmp	r3, #20
 80008ce:	dde3      	ble.n	8000898 <HAL_UART_RxCpltCallback+0x28>

	        if(++index_buffer == 8)
 80008d0:	4b51      	ldr	r3, [pc, #324]	@ (8000a18 <HAL_UART_RxCpltCallback+0x1a8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a50      	ldr	r2, [pc, #320]	@ (8000a18 <HAL_UART_RxCpltCallback+0x1a8>)
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b4f      	ldr	r3, [pc, #316]	@ (8000a18 <HAL_UART_RxCpltCallback+0x1a8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b08      	cmp	r3, #8
 80008e0:	d102      	bne.n	80008e8 <HAL_UART_RxCpltCallback+0x78>
	        	index_buffer = 0;
 80008e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000a18 <HAL_UART_RxCpltCallback+0x1a8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]

	        char *token;

	            token = strtok(temp_buffer, ",");
 80008e8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80008ec:	494c      	ldr	r1, [pc, #304]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1b0>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fe1e 	bl	8003530 <strtok>
 80008f4:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 80008f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d007      	beq.n	8000910 <HAL_UART_RxCpltCallback+0xa0>
	                base = atoi(token);
 8000900:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000904:	f002 fc70 	bl	80031e8 <atoi>
 8000908:	4603      	mov	r3, r0
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b45      	ldr	r3, [pc, #276]	@ (8000a24 <HAL_UART_RxCpltCallback+0x1b4>)
 800090e:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000910:	4943      	ldr	r1, [pc, #268]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1b0>)
 8000912:	2000      	movs	r0, #0
 8000914:	f002 fe0c 	bl	8003530 <strtok>
 8000918:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 800091c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000920:	2b00      	cmp	r3, #0
 8000922:	d007      	beq.n	8000934 <HAL_UART_RxCpltCallback+0xc4>
	                shoulder = atoi(token);
 8000924:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000928:	f002 fc5e 	bl	80031e8 <atoi>
 800092c:	4603      	mov	r3, r0
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b3d      	ldr	r3, [pc, #244]	@ (8000a28 <HAL_UART_RxCpltCallback+0x1b8>)
 8000932:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000934:	493a      	ldr	r1, [pc, #232]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1b0>)
 8000936:	2000      	movs	r0, #0
 8000938:	f002 fdfa 	bl	8003530 <strtok>
 800093c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000940:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <HAL_UART_RxCpltCallback+0xe8>
	                elbow = atoi(token);
 8000948:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800094c:	f002 fc4c 	bl	80031e8 <atoi>
 8000950:	4603      	mov	r3, r0
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b35      	ldr	r3, [pc, #212]	@ (8000a2c <HAL_UART_RxCpltCallback+0x1bc>)
 8000956:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 8000958:	4931      	ldr	r1, [pc, #196]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1b0>)
 800095a:	2000      	movs	r0, #0
 800095c:	f002 fde8 	bl	8003530 <strtok>
 8000960:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000964:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000968:	2b00      	cmp	r3, #0
 800096a:	d007      	beq.n	800097c <HAL_UART_RxCpltCallback+0x10c>
	                wrist_pitch = atoi(token);
 800096c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000970:	f002 fc3a 	bl	80031e8 <atoi>
 8000974:	4603      	mov	r3, r0
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <HAL_UART_RxCpltCallback+0x1c0>)
 800097a:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 800097c:	4928      	ldr	r1, [pc, #160]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1b0>)
 800097e:	2000      	movs	r0, #0
 8000980:	f002 fdd6 	bl	8003530 <strtok>
 8000984:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 8000988:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800098c:	2b00      	cmp	r3, #0
 800098e:	d007      	beq.n	80009a0 <HAL_UART_RxCpltCallback+0x130>
	            	wrist_roll = atoi(token);
 8000990:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000994:	f002 fc28 	bl	80031e8 <atoi>
 8000998:	4603      	mov	r3, r0
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <HAL_UART_RxCpltCallback+0x1c4>)
 800099e:	701a      	strb	r2, [r3, #0]
	            }

	            token = strtok(NULL, ",");
 80009a0:	491f      	ldr	r1, [pc, #124]	@ (8000a20 <HAL_UART_RxCpltCallback+0x1b0>)
 80009a2:	2000      	movs	r0, #0
 80009a4:	f002 fdc4 	bl	8003530 <strtok>
 80009a8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	            if (token != NULL) {
 80009ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d007      	beq.n	80009c4 <HAL_UART_RxCpltCallback+0x154>
	                detected_class = atoi(token);
 80009b4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80009b8:	f002 fc16 	bl	80031e8 <atoi>
 80009bc:	4603      	mov	r3, r0
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <HAL_UART_RxCpltCallback+0x1c8>)
 80009c2:	701a      	strb	r2, [r3, #0]
	            }
	        // Construct the response message
	        strcpy(response_msg, "Received: ");
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a3c <HAL_UART_RxCpltCallback+0x1cc>)
 80009ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80009cc:	c303      	stmia	r3!, {r0, r1}
 80009ce:	801a      	strh	r2, [r3, #0]
 80009d0:	3302      	adds	r3, #2
 80009d2:	0c12      	lsrs	r2, r2, #16
 80009d4:	701a      	strb	r2, [r3, #0]
	        strcat(response_msg, (char*)buffer); // Cast to char* is fine here as it's null-terminated
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	490e      	ldr	r1, [pc, #56]	@ (8000a14 <HAL_UART_RxCpltCallback+0x1a4>)
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fd98 	bl	8003512 <strcat>

	        // Transmit the response
	        HAL_UART_Transmit(&huart1, (uint8_t*) response_msg, strlen(response_msg), HAL_MAX_DELAY);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc12 	bl	8000210 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	f107 010c 	add.w	r1, r7, #12
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <HAL_UART_RxCpltCallback+0x1d0>)
 80009fa:	f001 fbd9 	bl	80021b0 <HAL_UART_Transmit>

	        // Re-enable the receive interrupt *after* processing the current data
	        HAL_UART_Receive_IT(&huart1, buffer, 21);
 80009fe:	2215      	movs	r2, #21
 8000a00:	4904      	ldr	r1, [pc, #16]	@ (8000a14 <HAL_UART_RxCpltCallback+0x1a4>)
 8000a02:	480f      	ldr	r0, [pc, #60]	@ (8000a40 <HAL_UART_RxCpltCallback+0x1d0>)
 8000a04:	f001 fc5f 	bl	80022c6 <HAL_UART_Receive_IT>
	}
}
 8000a08:	bf00      	nop
 8000a0a:	3790      	adds	r7, #144	@ 0x90
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40011000 	.word	0x40011000
 8000a14:	20000178 	.word	0x20000178
 8000a18:	20000174 	.word	0x20000174
 8000a1c:	200000cc 	.word	0x200000cc
 8000a20:	08004344 	.word	0x08004344
 8000a24:	2000018d 	.word	0x2000018d
 8000a28:	2000018e 	.word	0x2000018e
 8000a2c:	2000018f 	.word	0x2000018f
 8000a30:	20000190 	.word	0x20000190
 8000a34:	20000191 	.word	0x20000191
 8000a38:	20000192 	.word	0x20000192
 8000a3c:	08004348 	.word	0x08004348
 8000a40:	20000084 	.word	0x20000084

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <Error_Handler+0x8>

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a66:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a8e:	2007      	movs	r0, #7
 8000a90:	f000 fad4 	bl	800103c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b34 <HAL_UART_MspInit+0x94>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d134      	bne.n	8000b2c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000acc:	f043 0310 	orr.w	r3, r3, #16
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_UART_MspInit+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000afa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4809      	ldr	r0, [pc, #36]	@ (8000b3c <HAL_UART_MspInit+0x9c>)
 8000b18:	f000 fb64 	bl	80011e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2025      	movs	r0, #37	@ 0x25
 8000b22:	f000 fa96 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b26:	2025      	movs	r0, #37	@ 0x25
 8000b28:	f000 faaf 	bl	800108a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40011000 	.word	0x40011000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <MemManage_Handler+0x4>

08000b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f000 f961 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <USART1_IRQHandler+0x10>)
 8000ba6:	f001 fbb3 	bl	8002310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000084 	.word	0x20000084

08000bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return 1;
 8000bb8:	2301      	movs	r3, #1
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_kill>:

int _kill(int pid, int sig)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bce:	f002 fd51 	bl	8003674 <__errno>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2216      	movs	r2, #22
 8000bd6:	601a      	str	r2, [r3, #0]
  return -1;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_exit>:

void _exit (int status)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ffe7 	bl	8000bc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bf6:	bf00      	nop
 8000bf8:	e7fd      	b.n	8000bf6 <_exit+0x12>

08000bfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e00a      	b.n	8000c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0c:	f3af 8000 	nop.w
 8000c10:	4601      	mov	r1, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	60ba      	str	r2, [r7, #8]
 8000c18:	b2ca      	uxtb	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	dbf0      	blt.n	8000c0c <_read+0x12>
  }

  return len;
 8000c2a:	687b      	ldr	r3, [r7, #4]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e009      	b.n	8000c5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	60ba      	str	r2, [r7, #8]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbf1      	blt.n	8000c46 <_write+0x12>
  }
  return len;
 8000c62:	687b      	ldr	r3, [r7, #4]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_close>:

int _close(int file)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c94:	605a      	str	r2, [r3, #4]
  return 0;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_isatty>:

int _isatty(int file)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f002 fcb6 	bl	8003674 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20020000 	.word	0x20020000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000194 	.word	0x20000194
 8000d3c:	200002e8 	.word	0x200002e8

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f002 fc75 	bl	8003680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fc29 	bl	80005ec <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da8:	08004560 	.word	0x08004560
  ldr r2, =_sbss
 8000dac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000db0:	200002e8 	.word	0x200002e8

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f92b 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe30 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f943 	bl	80010a6 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f90b 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	@ (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000198 	.word	0x20000198

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000198 	.word	0x20000198

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	@ (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff29 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff3e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff31 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff feda 	bl	8000e84 <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d008      	beq.n	80010f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e052      	b.n	8001196 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0216 	bic.w	r2, r2, #22
 80010fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800110e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	2b00      	cmp	r3, #0
 8001116:	d103      	bne.n	8001120 <HAL_DMA_Abort+0x62>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0208 	bic.w	r2, r2, #8
 800112e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001140:	e013      	b.n	800116a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001142:	f7ff fe9f 	bl	8000e84 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b05      	cmp	r3, #5
 800114e:	d90c      	bls.n	800116a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2220      	movs	r2, #32
 8001154:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e015      	b.n	8001196 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e4      	bne.n	8001142 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117c:	223f      	movs	r2, #63	@ 0x3f
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d004      	beq.n	80011bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2280      	movs	r2, #128	@ 0x80
 80011b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e00c      	b.n	80011d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2205      	movs	r2, #5
 80011c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e165      	b.n	80014cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8154 	bne.w	80014c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	2b02      	cmp	r3, #2
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d017      	beq.n	80012d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80ae 	beq.w	80014c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b5d      	ldr	r3, [pc, #372]	@ (80014e4 <HAL_GPIO_Init+0x300>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	4a5c      	ldr	r2, [pc, #368]	@ (80014e4 <HAL_GPIO_Init+0x300>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001378:	6453      	str	r3, [r2, #68]	@ 0x44
 800137a:	4b5a      	ldr	r3, [pc, #360]	@ (80014e4 <HAL_GPIO_Init+0x300>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a58      	ldr	r2, [pc, #352]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4f      	ldr	r2, [pc, #316]	@ (80014ec <HAL_GPIO_Init+0x308>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d025      	beq.n	80013fe <HAL_GPIO_Init+0x21a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4e      	ldr	r2, [pc, #312]	@ (80014f0 <HAL_GPIO_Init+0x30c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01f      	beq.n	80013fa <HAL_GPIO_Init+0x216>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4d      	ldr	r2, [pc, #308]	@ (80014f4 <HAL_GPIO_Init+0x310>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0x212>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4c      	ldr	r2, [pc, #304]	@ (80014f8 <HAL_GPIO_Init+0x314>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x20e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4b      	ldr	r2, [pc, #300]	@ (80014fc <HAL_GPIO_Init+0x318>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x20a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001500 <HAL_GPIO_Init+0x31c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x206>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a49      	ldr	r2, [pc, #292]	@ (8001504 <HAL_GPIO_Init+0x320>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x202>
 80013e2:	2306      	movs	r3, #6
 80013e4:	e00c      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e00a      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x21c>
 80013fe:	2300      	movs	r3, #0
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f002 0203 	and.w	r2, r2, #3
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b3a      	ldr	r3, [pc, #232]	@ (8001508 <HAL_GPIO_Init+0x324>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a31      	ldr	r2, [pc, #196]	@ (8001508 <HAL_GPIO_Init+0x324>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <HAL_GPIO_Init+0x324>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a26      	ldr	r2, [pc, #152]	@ (8001508 <HAL_GPIO_Init+0x324>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001472:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <HAL_GPIO_Init+0x324>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001496:	4a1c      	ldr	r2, [pc, #112]	@ (8001508 <HAL_GPIO_Init+0x324>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <HAL_GPIO_Init+0x324>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c0:	4a11      	ldr	r2, [pc, #68]	@ (8001508 <HAL_GPIO_Init+0x324>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	f67f ae96 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	@ 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021400 	.word	0x40021400
 8001504:	40021800 	.word	0x40021800
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0cc      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d90c      	bls.n	800157c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b65      	ldr	r3, [pc, #404]	@ (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0b8      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001594:	4b59      	ldr	r3, [pc, #356]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a58      	ldr	r2, [pc, #352]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800159e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ac:	4b53      	ldr	r3, [pc, #332]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a52      	ldr	r2, [pc, #328]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b8:	4b50      	ldr	r3, [pc, #320]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	494d      	ldr	r1, [pc, #308]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d044      	beq.n	8001660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	4b47      	ldr	r3, [pc, #284]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d119      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e07f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d003      	beq.n	80015fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e06f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	4b3b      	ldr	r3, [pc, #236]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e067      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161e:	4b37      	ldr	r3, [pc, #220]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f023 0203 	bic.w	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4934      	ldr	r1, [pc, #208]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001630:	f7ff fc28 	bl	8000e84 <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	e00a      	b.n	800164e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001638:	f7ff fc24 	bl	8000e84 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e04f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	4b2b      	ldr	r3, [pc, #172]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 020c 	and.w	r2, r3, #12
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	429a      	cmp	r2, r3
 800165e:	d1eb      	bne.n	8001638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001660:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d20c      	bcs.n	8001688 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e032      	b.n	80016ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4916      	ldr	r1, [pc, #88]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	490e      	ldr	r1, [pc, #56]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016c6:	f000 f855 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	490a      	ldr	r1, [pc, #40]	@ (8001700 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	5ccb      	ldrb	r3, [r1, r3]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fb88 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023c00 	.word	0x40023c00
 80016fc:	40023800 	.word	0x40023800
 8001700:	08004354 	.word	0x08004354
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001710:	4b03      	ldr	r3, [pc, #12]	@ (8001720 <HAL_RCC_GetHCLKFreq+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001728:	f7ff fff0 	bl	800170c <HAL_RCC_GetHCLKFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	0a9b      	lsrs	r3, r3, #10
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	4903      	ldr	r1, [pc, #12]	@ (8001748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	08004364 	.word	0x08004364

0800174c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001750:	f7ff ffdc 	bl	800170c <HAL_RCC_GetHCLKFreq>
 8001754:	4602      	mov	r2, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0b5b      	lsrs	r3, r3, #13
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4903      	ldr	r1, [pc, #12]	@ (8001770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001762:	5ccb      	ldrb	r3, [r1, r3]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	08004364 	.word	0x08004364

08001774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001778:	b0ae      	sub	sp, #184	@ 0xb8
 800177a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800179a:	4bcb      	ldr	r3, [pc, #812]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	f200 8206 	bhi.w	8001bb4 <HAL_RCC_GetSysClockFreq+0x440>
 80017a8:	a201      	add	r2, pc, #4	@ (adr r2, 80017b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017e5 	.word	0x080017e5
 80017b4:	08001bb5 	.word	0x08001bb5
 80017b8:	08001bb5 	.word	0x08001bb5
 80017bc:	08001bb5 	.word	0x08001bb5
 80017c0:	080017ed 	.word	0x080017ed
 80017c4:	08001bb5 	.word	0x08001bb5
 80017c8:	08001bb5 	.word	0x08001bb5
 80017cc:	08001bb5 	.word	0x08001bb5
 80017d0:	080017f5 	.word	0x080017f5
 80017d4:	08001bb5 	.word	0x08001bb5
 80017d8:	08001bb5 	.word	0x08001bb5
 80017dc:	08001bb5 	.word	0x08001bb5
 80017e0:	080019e5 	.word	0x080019e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4bb9      	ldr	r3, [pc, #740]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x358>)
 80017e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ea:	e1e7      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ec:	4bb8      	ldr	r3, [pc, #736]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017f2:	e1e3      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f4:	4bb4      	ldr	r3, [pc, #720]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001800:	4bb1      	ldr	r3, [pc, #708]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d071      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180c:	4bae      	ldr	r3, [pc, #696]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	2200      	movs	r2, #0
 8001814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001818:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800181c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800182e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001832:	4622      	mov	r2, r4
 8001834:	462b      	mov	r3, r5
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	0159      	lsls	r1, r3, #5
 8001840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001844:	0150      	lsls	r0, r2, #5
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4621      	mov	r1, r4
 800184c:	1a51      	subs	r1, r2, r1
 800184e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001850:	4629      	mov	r1, r5
 8001852:	eb63 0301 	sbc.w	r3, r3, r1
 8001856:	647b      	str	r3, [r7, #68]	@ 0x44
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001864:	4649      	mov	r1, r9
 8001866:	018b      	lsls	r3, r1, #6
 8001868:	4641      	mov	r1, r8
 800186a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186e:	4641      	mov	r1, r8
 8001870:	018a      	lsls	r2, r1, #6
 8001872:	4641      	mov	r1, r8
 8001874:	1a51      	subs	r1, r2, r1
 8001876:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001878:	4649      	mov	r1, r9
 800187a:	eb63 0301 	sbc.w	r3, r3, r1
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800188c:	4649      	mov	r1, r9
 800188e:	00cb      	lsls	r3, r1, #3
 8001890:	4641      	mov	r1, r8
 8001892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001896:	4641      	mov	r1, r8
 8001898:	00ca      	lsls	r2, r1, #3
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	4622      	mov	r2, r4
 80018a2:	189b      	adds	r3, r3, r2
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018a6:	462b      	mov	r3, r5
 80018a8:	460a      	mov	r2, r1
 80018aa:	eb42 0303 	adc.w	r3, r2, r3
 80018ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018bc:	4629      	mov	r1, r5
 80018be:	024b      	lsls	r3, r1, #9
 80018c0:	4621      	mov	r1, r4
 80018c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018c6:	4621      	mov	r1, r4
 80018c8:	024a      	lsls	r2, r1, #9
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018d2:	2200      	movs	r2, #0
 80018d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80018e0:	f7fe fcee 	bl	80002c0 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018ee:	e067      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f0:	4b75      	ldr	r3, [pc, #468]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	2200      	movs	r2, #0
 80018f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001900:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800190a:	2300      	movs	r3, #0
 800190c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800190e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001912:	4622      	mov	r2, r4
 8001914:	462b      	mov	r3, r5
 8001916:	f04f 0000 	mov.w	r0, #0
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	0159      	lsls	r1, r3, #5
 8001920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001924:	0150      	lsls	r0, r2, #5
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4621      	mov	r1, r4
 800192c:	1a51      	subs	r1, r2, r1
 800192e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001930:	4629      	mov	r1, r5
 8001932:	eb63 0301 	sbc.w	r3, r3, r1
 8001936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001944:	4649      	mov	r1, r9
 8001946:	018b      	lsls	r3, r1, #6
 8001948:	4641      	mov	r1, r8
 800194a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800194e:	4641      	mov	r1, r8
 8001950:	018a      	lsls	r2, r1, #6
 8001952:	4641      	mov	r1, r8
 8001954:	ebb2 0a01 	subs.w	sl, r2, r1
 8001958:	4649      	mov	r1, r9
 800195a:	eb63 0b01 	sbc.w	fp, r3, r1
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800196a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800196e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001972:	4692      	mov	sl, r2
 8001974:	469b      	mov	fp, r3
 8001976:	4623      	mov	r3, r4
 8001978:	eb1a 0303 	adds.w	r3, sl, r3
 800197c:	623b      	str	r3, [r7, #32]
 800197e:	462b      	mov	r3, r5
 8001980:	eb4b 0303 	adc.w	r3, fp, r3
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001992:	4629      	mov	r1, r5
 8001994:	028b      	lsls	r3, r1, #10
 8001996:	4621      	mov	r1, r4
 8001998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800199c:	4621      	mov	r1, r4
 800199e:	028a      	lsls	r2, r1, #10
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019a8:	2200      	movs	r2, #0
 80019aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80019ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80019ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80019b2:	f7fe fc85 	bl	80002c0 <__aeabi_uldivmod>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4613      	mov	r3, r2
 80019bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019c0:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	3301      	adds	r3, #1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80019d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019e2:	e0eb      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e4:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f0:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d06b      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fc:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	2200      	movs	r2, #0
 8001a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a10:	2300      	movs	r3, #0
 8001a12:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a18:	4622      	mov	r2, r4
 8001a1a:	462b      	mov	r3, r5
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	0159      	lsls	r1, r3, #5
 8001a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2a:	0150      	lsls	r0, r2, #5
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4621      	mov	r1, r4
 8001a32:	1a51      	subs	r1, r2, r1
 8001a34:	61b9      	str	r1, [r7, #24]
 8001a36:	4629      	mov	r1, r5
 8001a38:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a4a:	4659      	mov	r1, fp
 8001a4c:	018b      	lsls	r3, r1, #6
 8001a4e:	4651      	mov	r1, sl
 8001a50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a54:	4651      	mov	r1, sl
 8001a56:	018a      	lsls	r2, r1, #6
 8001a58:	4651      	mov	r1, sl
 8001a5a:	ebb2 0801 	subs.w	r8, r2, r1
 8001a5e:	4659      	mov	r1, fp
 8001a60:	eb63 0901 	sbc.w	r9, r3, r1
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a78:	4690      	mov	r8, r2
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	eb18 0303 	adds.w	r3, r8, r3
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	462b      	mov	r3, r5
 8001a86:	eb49 0303 	adc.w	r3, r9, r3
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a98:	4629      	mov	r1, r5
 8001a9a:	024b      	lsls	r3, r1, #9
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	024a      	lsls	r2, r1, #9
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aae:	2200      	movs	r2, #0
 8001ab0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ab2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ab4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ab8:	f7fe fc02 	bl	80002c0 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ac6:	e065      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x420>
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	00f42400 	.word	0x00f42400
 8001ad0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x458>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	2200      	movs	r2, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	4611      	mov	r1, r2
 8001ae0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001aea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001aee:	4642      	mov	r2, r8
 8001af0:	464b      	mov	r3, r9
 8001af2:	f04f 0000 	mov.w	r0, #0
 8001af6:	f04f 0100 	mov.w	r1, #0
 8001afa:	0159      	lsls	r1, r3, #5
 8001afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b00:	0150      	lsls	r0, r2, #5
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4641      	mov	r1, r8
 8001b08:	1a51      	subs	r1, r2, r1
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	4649      	mov	r1, r9
 8001b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b20:	4659      	mov	r1, fp
 8001b22:	018b      	lsls	r3, r1, #6
 8001b24:	4651      	mov	r1, sl
 8001b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b2a:	4651      	mov	r1, sl
 8001b2c:	018a      	lsls	r2, r1, #6
 8001b2e:	4651      	mov	r1, sl
 8001b30:	1a54      	subs	r4, r2, r1
 8001b32:	4659      	mov	r1, fp
 8001b34:	eb63 0501 	sbc.w	r5, r3, r1
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	00eb      	lsls	r3, r5, #3
 8001b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b46:	00e2      	lsls	r2, r4, #3
 8001b48:	4614      	mov	r4, r2
 8001b4a:	461d      	mov	r5, r3
 8001b4c:	4643      	mov	r3, r8
 8001b4e:	18e3      	adds	r3, r4, r3
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	464b      	mov	r3, r9
 8001b54:	eb45 0303 	adc.w	r3, r5, r3
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b66:	4629      	mov	r1, r5
 8001b68:	028b      	lsls	r3, r1, #10
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b70:	4621      	mov	r1, r4
 8001b72:	028a      	lsls	r2, r1, #10
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b80:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b86:	f7fe fb9b 	bl	80002c0 <__aeabi_uldivmod>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4613      	mov	r3, r2
 8001b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b94:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x458>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	0f1b      	lsrs	r3, r3, #28
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bb2:	e003      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	37b8      	adds	r7, #184	@ 0xb8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	00f42400 	.word	0x00f42400

08001bd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e28d      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8083 	beq.w	8001cfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bf4:	4b94      	ldr	r3, [pc, #592]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d019      	beq.n	8001c34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c00:	4b91      	ldr	r3, [pc, #580]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c0c:	4b8e      	ldr	r3, [pc, #568]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c18:	d00c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d112      	bne.n	8001c4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c26:	4b88      	ldr	r3, [pc, #544]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b84      	ldr	r3, [pc, #528]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d05b      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x124>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d157      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e25a      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x90>
 8001c56:	4b7c      	ldr	r3, [pc, #496]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a7b      	ldr	r2, [pc, #492]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xcc>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0xb4>
 8001c6e:	4b76      	ldr	r3, [pc, #472]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a75      	ldr	r2, [pc, #468]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b73      	ldr	r3, [pc, #460]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a72      	ldr	r2, [pc, #456]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xcc>
 8001c88:	4b6f      	ldr	r3, [pc, #444]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b6c      	ldr	r3, [pc, #432]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a6b      	ldr	r2, [pc, #428]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f8ec 	bl	8000e84 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff f8e8 	bl	8000e84 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	@ 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e21f      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b61      	ldr	r3, [pc, #388]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xdc>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f8d8 	bl	8000e84 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f8d4 	bl	8000e84 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	@ 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e20b      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b57      	ldr	r3, [pc, #348]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x104>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d06f      	beq.n	8001de6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d06:	4b50      	ldr	r3, [pc, #320]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d017      	beq.n	8001d42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d12:	4b4d      	ldr	r3, [pc, #308]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d105      	bne.n	8001d2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b47      	ldr	r3, [pc, #284]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d36:	4b44      	ldr	r3, [pc, #272]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b41      	ldr	r3, [pc, #260]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x186>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1d3      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4937      	ldr	r1, [pc, #220]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <HAL_RCC_OscConfig+0x278>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f881 	bl	8000e84 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff f87d 	bl	8000e84 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1b4      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4925      	ldr	r1, [pc, #148]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_RCC_OscConfig+0x278>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f860 	bl	8000e84 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f85c 	bl	8000e84 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e193      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d036      	beq.n	8001e60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_RCC_OscConfig+0x27c>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f840 	bl	8000e84 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff f83c 	bl	8000e84 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e173      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x234>
 8001e26:	e01b      	b.n	8001e60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f829 	bl	8000e84 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	e00e      	b.n	8001e54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff f825 	bl	8000e84 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d907      	bls.n	8001e54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e15c      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	42470000 	.word	0x42470000
 8001e50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b8a      	ldr	r3, [pc, #552]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ea      	bne.n	8001e36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8097 	beq.w	8001f9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b83      	ldr	r3, [pc, #524]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b7f      	ldr	r3, [pc, #508]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a7e      	ldr	r2, [pc, #504]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b79      	ldr	r3, [pc, #484]	@ (8002084 <HAL_RCC_OscConfig+0x4b0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b76      	ldr	r3, [pc, #472]	@ (8002084 <HAL_RCC_OscConfig+0x4b0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a75      	ldr	r2, [pc, #468]	@ (8002084 <HAL_RCC_OscConfig+0x4b0>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe ffe5 	bl	8000e84 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7fe ffe1 	bl	8000e84 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e118      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b6c      	ldr	r3, [pc, #432]	@ (8002084 <HAL_RCC_OscConfig+0x4b0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x31e>
 8001ee4:	4b66      	ldr	r3, [pc, #408]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee8:	4a65      	ldr	r2, [pc, #404]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef0:	e01c      	b.n	8001f2c <HAL_RCC_OscConfig+0x358>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x340>
 8001efa:	4b61      	ldr	r3, [pc, #388]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efe:	4a60      	ldr	r2, [pc, #384]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f06:	4b5e      	ldr	r3, [pc, #376]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0a:	4a5d      	ldr	r2, [pc, #372]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0x358>
 8001f14:	4b5a      	ldr	r3, [pc, #360]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f18:	4a59      	ldr	r2, [pc, #356]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f20:	4b57      	ldr	r3, [pc, #348]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f24:	4a56      	ldr	r2, [pc, #344]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f26:	f023 0304 	bic.w	r3, r3, #4
 8001f2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7fe ffa6 	bl	8000e84 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7fe ffa2 	bl	8000e84 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0d7      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f52:	4b4b      	ldr	r3, [pc, #300]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0ee      	beq.n	8001f3c <HAL_RCC_OscConfig+0x368>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f60:	f7fe ff90 	bl	8000e84 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe ff8c 	bl	8000e84 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0c1      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7e:	4b40      	ldr	r3, [pc, #256]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ee      	bne.n	8001f68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	4b3b      	ldr	r3, [pc, #236]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	4a3a      	ldr	r2, [pc, #232]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80ad 	beq.w	8002100 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa6:	4b36      	ldr	r3, [pc, #216]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d060      	beq.n	8002074 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d145      	bne.n	8002046 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_RCC_OscConfig+0x4b4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff60 	bl	8000e84 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe ff5c 	bl	8000e84 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e093      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b29      	ldr	r3, [pc, #164]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	3b01      	subs	r3, #1
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	071b      	lsls	r3, r3, #28
 8002012:	491b      	ldr	r1, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <HAL_RCC_OscConfig+0x4b4>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe ff31 	bl	8000e84 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7fe ff2d 	bl	8000e84 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e064      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x452>
 8002044:	e05c      	b.n	8002100 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_RCC_OscConfig+0x4b4>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe ff1a 	bl	8000e84 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe ff16 	bl	8000e84 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e04d      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_RCC_OscConfig+0x4ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x480>
 8002072:	e045      	b.n	8002100 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e040      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
 8002080:	40023800 	.word	0x40023800
 8002084:	40007000 	.word	0x40007000
 8002088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800208c:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <HAL_RCC_OscConfig+0x538>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d030      	beq.n	80020fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d129      	bne.n	80020fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d122      	bne.n	80020fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020bc:	4013      	ands	r3, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d119      	bne.n	80020fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	3b01      	subs	r3, #1
 80020d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d10f      	bne.n	80020fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800

08002110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e042      	b.n	80021a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fcb2 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	@ 0x24
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fdd3 	bl	8002d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	@ 0x28
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d175      	bne.n	80022bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_UART_Transmit+0x2c>
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e06e      	b.n	80022be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	@ 0x21
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ee:	f7fe fe49 	bl	8000e84 <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002208:	d108      	bne.n	800221c <HAL_UART_Transmit+0x6c>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e003      	b.n	8002224 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002224:	e02e      	b.n	8002284 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	@ 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fb37 	bl	80028a4 <UART_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e03a      	b.n	80022be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10b      	bne.n	8002266 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800225c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	3302      	adds	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e007      	b.n	8002276 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1cb      	bne.n	8002226 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	2140      	movs	r1, #64	@ 0x40
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fb03 	bl	80028a4 <UART_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e006      	b.n	80022be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	4613      	mov	r3, r2
 80022d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d112      	bne.n	8002306 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_UART_Receive_IT+0x26>
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e00b      	b.n	8002308 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fb2a 	bl	8002956 <UART_Start_Receive_IT>
 8002302:	4603      	mov	r3, r0
 8002304:	e000      	b.n	8002308 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b0ba      	sub	sp, #232	@ 0xe8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800234e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_UART_IRQHandler+0x66>
 8002362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fc07 	bl	8002b82 <UART_Receive_IT>
      return;
 8002374:	e273      	b.n	800285e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80de 	beq.w	800253c <HAL_UART_IRQHandler+0x22c>
 8002380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d106      	bne.n	800239a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800238c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002390:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80d1 	beq.w	800253c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800239a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_UART_IRQHandler+0xae>
 80023a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_UART_IRQHandler+0xd2>
 80023ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f043 0202 	orr.w	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_UART_IRQHandler+0xf6>
 80023ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f043 0204 	orr.w	r2, r3, #4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d011      	beq.n	8002436 <HAL_UART_IRQHandler+0x126>
 8002412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800241e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	f043 0208 	orr.w	r2, r3, #8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 820a 	beq.w	8002854 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_UART_IRQHandler+0x14e>
 800244c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fb92 	bl	8002b82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002468:	2b40      	cmp	r3, #64	@ 0x40
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_UART_IRQHandler+0x17a>
 8002482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d04f      	beq.n	800252a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa9d 	bl	80029ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249a:	2b40      	cmp	r3, #64	@ 0x40
 800249c:	d141      	bne.n	8002522 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3314      	adds	r3, #20
 80024a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024ac:	e853 3f00 	ldrex	r3, [r3]
 80024b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80024b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3314      	adds	r3, #20
 80024c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80024ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80024ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80024d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80024da:	e841 2300 	strex	r3, r2, [r1]
 80024de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80024e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1d9      	bne.n	800249e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d013      	beq.n	800251a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	4a8a      	ldr	r2, [pc, #552]	@ (8002720 <HAL_UART_IRQHandler+0x410>)
 80024f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fe4d 	bl	800119e <HAL_DMA_Abort_IT>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002514:	4610      	mov	r0, r2
 8002516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002518:	e00e      	b.n	8002538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f9ac 	bl	8002878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	e00a      	b.n	8002538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f9a8 	bl	8002878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002528:	e006      	b.n	8002538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f9a4 	bl	8002878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002536:	e18d      	b.n	8002854 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002538:	bf00      	nop
    return;
 800253a:	e18b      	b.n	8002854 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	2b01      	cmp	r3, #1
 8002542:	f040 8167 	bne.w	8002814 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8160 	beq.w	8002814 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8159 	beq.w	8002814 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002582:	2b40      	cmp	r3, #64	@ 0x40
 8002584:	f040 80ce 	bne.w	8002724 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002594:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a9 	beq.w	80026f0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025a6:	429a      	cmp	r2, r3
 80025a8:	f080 80a2 	bcs.w	80026f0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025be:	f000 8088 	beq.w	80026d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	330c      	adds	r3, #12
 80025c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025d0:	e853 3f00 	ldrex	r3, [r3]
 80025d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80025d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80025ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80025fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025fe:	e841 2300 	strex	r3, r2, [r1]
 8002602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1d9      	bne.n	80025c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3314      	adds	r3, #20
 8002614:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002618:	e853 3f00 	ldrex	r3, [r3]
 800261c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800261e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3314      	adds	r3, #20
 800262e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002632:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002636:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002638:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800263a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800263e:	e841 2300 	strex	r3, r2, [r1]
 8002642:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1e1      	bne.n	800260e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3314      	adds	r3, #20
 8002650:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002654:	e853 3f00 	ldrex	r3, [r3]
 8002658:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800265a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800265c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3314      	adds	r3, #20
 800266a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800266e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002670:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002672:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002674:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002676:	e841 2300 	strex	r3, r2, [r1]
 800267a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800267c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e3      	bne.n	800264a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	330c      	adds	r3, #12
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800269a:	e853 3f00 	ldrex	r3, [r3]
 800269e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80026a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a2:	f023 0310 	bic.w	r3, r3, #16
 80026a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80026b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80026b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026bc:	e841 2300 	strex	r3, r2, [r1]
 80026c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80026c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e3      	bne.n	8002690 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fcf6 	bl	80010be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f8cf 	bl	800288c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80026ee:	e0b3      	b.n	8002858 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026f8:	429a      	cmp	r2, r3
 80026fa:	f040 80ad 	bne.w	8002858 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002708:	f040 80a6 	bne.w	8002858 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f8b7 	bl	800288c <HAL_UARTEx_RxEventCallback>
      return;
 800271e:	e09b      	b.n	8002858 <HAL_UART_IRQHandler+0x548>
 8002720:	08002a91 	.word	0x08002a91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800272c:	b29b      	uxth	r3, r3
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 808e 	beq.w	800285c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8089 	beq.w	800285c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002754:	e853 3f00 	ldrex	r3, [r3]
 8002758:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800275a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800275c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800276e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002770:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002772:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002776:	e841 2300 	strex	r3, r2, [r1]
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800277c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e3      	bne.n	800274a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3314      	adds	r3, #20
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	623b      	str	r3, [r7, #32]
   return(result);
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80027a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ae:	e841 2300 	strex	r3, r2, [r1]
 80027b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e3      	bne.n	8002782 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0310 	bic.w	r3, r3, #16
 80027de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80027ec:	61fa      	str	r2, [r7, #28]
 80027ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f0:	69b9      	ldr	r1, [r7, #24]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	e841 2300 	strex	r3, r2, [r1]
 80027f8:	617b      	str	r3, [r7, #20]
   return(result);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1e3      	bne.n	80027c8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f83d 	bl	800288c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002812:	e023      	b.n	800285c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281c:	2b00      	cmp	r3, #0
 800281e:	d009      	beq.n	8002834 <HAL_UART_IRQHandler+0x524>
 8002820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f940 	bl	8002ab2 <UART_Transmit_IT>
    return;
 8002832:	e014      	b.n	800285e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00e      	beq.n	800285e <HAL_UART_IRQHandler+0x54e>
 8002840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f980 	bl	8002b52 <UART_EndTransmit_IT>
    return;
 8002852:	e004      	b.n	800285e <HAL_UART_IRQHandler+0x54e>
    return;
 8002854:	bf00      	nop
 8002856:	e002      	b.n	800285e <HAL_UART_IRQHandler+0x54e>
      return;
 8002858:	bf00      	nop
 800285a:	e000      	b.n	800285e <HAL_UART_IRQHandler+0x54e>
      return;
 800285c:	bf00      	nop
  }
}
 800285e:	37e8      	adds	r7, #232	@ 0xe8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b4:	e03b      	b.n	800292e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d037      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7fe fae1 	bl	8000e84 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e03a      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d023      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0x8a>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b80      	cmp	r3, #128	@ 0x80
 80028ea:	d020      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0x8a>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b40      	cmp	r3, #64	@ 0x40
 80028f0:	d01d      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d116      	bne.n	800292e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f857 	bl	80029ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2208      	movs	r2, #8
 8002920:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e00f      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4013      	ands	r3, r2
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	429a      	cmp	r2, r3
 800294a:	d0b4      	beq.n	80028b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2222      	movs	r2, #34	@ 0x22
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800299a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0220 	orr.w	r2, r2, #32
 80029ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b095      	sub	sp, #84	@ 0x54
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80029f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029fa:	e841 2300 	strex	r3, r2, [r1]
 80029fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1e5      	bne.n	80029d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3314      	adds	r3, #20
 8002a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e5      	bne.n	8002a06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d119      	bne.n	8002a76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	e853 3f00 	ldrex	r3, [r3]
 8002a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f023 0310 	bic.w	r3, r3, #16
 8002a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a62:	61ba      	str	r2, [r7, #24]
 8002a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1e5      	bne.n	8002a42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a84:	bf00      	nop
 8002a86:	3754      	adds	r7, #84	@ 0x54
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff fee7 	bl	8002878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b21      	cmp	r3, #33	@ 0x21
 8002ac4:	d13e      	bne.n	8002b44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ace:	d114      	bne.n	8002afa <UART_Transmit_IT+0x48>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d110      	bne.n	8002afa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	1c9a      	adds	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	621a      	str	r2, [r3, #32]
 8002af8:	e008      	b.n	8002b0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	1c59      	adds	r1, r3, #1
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6211      	str	r1, [r2, #32]
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10f      	bne.n	8002b40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fe76 	bl	8002864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b08c      	sub	sp, #48	@ 0x30
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b22      	cmp	r3, #34	@ 0x22
 8002b9c:	f040 80aa 	bne.w	8002cf4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ba8:	d115      	bne.n	8002bd6 <UART_Receive_IT+0x54>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d111      	bne.n	8002bd6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bce:	1c9a      	adds	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bd4:	e024      	b.n	8002c20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be4:	d007      	beq.n	8002bf6 <UART_Receive_IT+0x74>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <UART_Receive_IT+0x82>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e008      	b.n	8002c16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d15d      	bne.n	8002cf0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d135      	bne.n	8002ce6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f023 0310 	bic.w	r3, r3, #16
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca0:	623a      	str	r2, [r7, #32]
 8002ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	69f9      	ldr	r1, [r7, #28]
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e5      	bne.n	8002c80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d10a      	bne.n	8002cd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fdd4 	bl	800288c <HAL_UARTEx_RxEventCallback>
 8002ce4:	e002      	b.n	8002cec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fdc2 	bl	8000870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e002      	b.n	8002cf6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3730      	adds	r7, #48	@ 0x30
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d04:	b0c0      	sub	sp, #256	@ 0x100
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	68d9      	ldr	r1, [r3, #12]
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	ea40 0301 	orr.w	r3, r0, r1
 8002d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d58:	f021 010c 	bic.w	r1, r1, #12
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d66:	430b      	orrs	r3, r1
 8002d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7a:	6999      	ldr	r1, [r3, #24]
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	ea40 0301 	orr.w	r3, r0, r1
 8002d86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4b8f      	ldr	r3, [pc, #572]	@ (8002fcc <UART_SetConfig+0x2cc>)
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d005      	beq.n	8002da0 <UART_SetConfig+0xa0>
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8002fd0 <UART_SetConfig+0x2d0>)
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d104      	bne.n	8002daa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002da0:	f7fe fcd4 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8002da4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002da8:	e003      	b.n	8002db2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002daa:	f7fe fcbb 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8002dae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dbc:	f040 810c 	bne.w	8002fd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002dca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	462b      	mov	r3, r5
 8002dd6:	1891      	adds	r1, r2, r2
 8002dd8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002dda:	415b      	adcs	r3, r3
 8002ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002de2:	4621      	mov	r1, r4
 8002de4:	eb12 0801 	adds.w	r8, r2, r1
 8002de8:	4629      	mov	r1, r5
 8002dea:	eb43 0901 	adc.w	r9, r3, r1
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e02:	4690      	mov	r8, r2
 8002e04:	4699      	mov	r9, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	eb18 0303 	adds.w	r3, r8, r3
 8002e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e10:	462b      	mov	r3, r5
 8002e12:	eb49 0303 	adc.w	r3, r9, r3
 8002e16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e2e:	460b      	mov	r3, r1
 8002e30:	18db      	adds	r3, r3, r3
 8002e32:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e34:	4613      	mov	r3, r2
 8002e36:	eb42 0303 	adc.w	r3, r2, r3
 8002e3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e44:	f7fd fa3c 	bl	80002c0 <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4b61      	ldr	r3, [pc, #388]	@ (8002fd4 <UART_SetConfig+0x2d4>)
 8002e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	011c      	lsls	r4, r3, #4
 8002e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e68:	4642      	mov	r2, r8
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	1891      	adds	r1, r2, r2
 8002e6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e70:	415b      	adcs	r3, r3
 8002e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e78:	4641      	mov	r1, r8
 8002e7a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e7e:	4649      	mov	r1, r9
 8002e80:	eb43 0b01 	adc.w	fp, r3, r1
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e98:	4692      	mov	sl, r2
 8002e9a:	469b      	mov	fp, r3
 8002e9c:	4643      	mov	r3, r8
 8002e9e:	eb1a 0303 	adds.w	r3, sl, r3
 8002ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8002eac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ebc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	18db      	adds	r3, r3, r3
 8002ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eca:	4613      	mov	r3, r2
 8002ecc:	eb42 0303 	adc.w	r3, r2, r3
 8002ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002eda:	f7fd f9f1 	bl	80002c0 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd4 <UART_SetConfig+0x2d4>)
 8002ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2264      	movs	r2, #100	@ 0x64
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	1acb      	subs	r3, r1, r3
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002efa:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <UART_SetConfig+0x2d4>)
 8002efc:	fba3 2302 	umull	r2, r3, r3, r2
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f08:	441c      	add	r4, r3
 8002f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	464b      	mov	r3, r9
 8002f20:	1891      	adds	r1, r2, r2
 8002f22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f24:	415b      	adcs	r3, r3
 8002f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	1851      	adds	r1, r2, r1
 8002f30:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f32:	4649      	mov	r1, r9
 8002f34:	414b      	adcs	r3, r1
 8002f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f44:	4659      	mov	r1, fp
 8002f46:	00cb      	lsls	r3, r1, #3
 8002f48:	4651      	mov	r1, sl
 8002f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f4e:	4651      	mov	r1, sl
 8002f50:	00ca      	lsls	r2, r1, #3
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	4642      	mov	r2, r8
 8002f5a:	189b      	adds	r3, r3, r2
 8002f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f60:	464b      	mov	r3, r9
 8002f62:	460a      	mov	r2, r1
 8002f64:	eb42 0303 	adc.w	r3, r2, r3
 8002f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f80:	460b      	mov	r3, r1
 8002f82:	18db      	adds	r3, r3, r3
 8002f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f86:	4613      	mov	r3, r2
 8002f88:	eb42 0303 	adc.w	r3, r2, r3
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f96:	f7fd f993 	bl	80002c0 <__aeabi_uldivmod>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <UART_SetConfig+0x2d4>)
 8002fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	2164      	movs	r1, #100	@ 0x64
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	3332      	adds	r3, #50	@ 0x32
 8002fb2:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <UART_SetConfig+0x2d4>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	f003 0207 	and.w	r2, r3, #7
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4422      	add	r2, r4
 8002fc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fc8:	e106      	b.n	80031d8 <UART_SetConfig+0x4d8>
 8002fca:	bf00      	nop
 8002fcc:	40011000 	.word	0x40011000
 8002fd0:	40011400 	.word	0x40011400
 8002fd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002fea:	4642      	mov	r2, r8
 8002fec:	464b      	mov	r3, r9
 8002fee:	1891      	adds	r1, r2, r2
 8002ff0:	6239      	str	r1, [r7, #32]
 8002ff2:	415b      	adcs	r3, r3
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ffa:	4641      	mov	r1, r8
 8002ffc:	1854      	adds	r4, r2, r1
 8002ffe:	4649      	mov	r1, r9
 8003000:	eb43 0501 	adc.w	r5, r3, r1
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	00eb      	lsls	r3, r5, #3
 800300e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003012:	00e2      	lsls	r2, r4, #3
 8003014:	4614      	mov	r4, r2
 8003016:	461d      	mov	r5, r3
 8003018:	4643      	mov	r3, r8
 800301a:	18e3      	adds	r3, r4, r3
 800301c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003020:	464b      	mov	r3, r9
 8003022:	eb45 0303 	adc.w	r3, r5, r3
 8003026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003036:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003046:	4629      	mov	r1, r5
 8003048:	008b      	lsls	r3, r1, #2
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003050:	4621      	mov	r1, r4
 8003052:	008a      	lsls	r2, r1, #2
 8003054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003058:	f7fd f932 	bl	80002c0 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4b60      	ldr	r3, [pc, #384]	@ (80031e4 <UART_SetConfig+0x4e4>)
 8003062:	fba3 2302 	umull	r2, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	011c      	lsls	r4, r3, #4
 800306a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003074:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	1891      	adds	r1, r2, r2
 8003082:	61b9      	str	r1, [r7, #24]
 8003084:	415b      	adcs	r3, r3
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800308c:	4641      	mov	r1, r8
 800308e:	1851      	adds	r1, r2, r1
 8003090:	6139      	str	r1, [r7, #16]
 8003092:	4649      	mov	r1, r9
 8003094:	414b      	adcs	r3, r1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030a4:	4659      	mov	r1, fp
 80030a6:	00cb      	lsls	r3, r1, #3
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ae:	4651      	mov	r1, sl
 80030b0:	00ca      	lsls	r2, r1, #3
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	4642      	mov	r2, r8
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030c0:	464b      	mov	r3, r9
 80030c2:	460a      	mov	r2, r1
 80030c4:	eb42 0303 	adc.w	r3, r2, r3
 80030c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80030e4:	4649      	mov	r1, r9
 80030e6:	008b      	lsls	r3, r1, #2
 80030e8:	4641      	mov	r1, r8
 80030ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ee:	4641      	mov	r1, r8
 80030f0:	008a      	lsls	r2, r1, #2
 80030f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030f6:	f7fd f8e3 	bl	80002c0 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	4b38      	ldr	r3, [pc, #224]	@ (80031e4 <UART_SetConfig+0x4e4>)
 8003102:	fba3 2301 	umull	r2, r3, r3, r1
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2264      	movs	r2, #100	@ 0x64
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	1acb      	subs	r3, r1, r3
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	3332      	adds	r3, #50	@ 0x32
 8003114:	4a33      	ldr	r2, [pc, #204]	@ (80031e4 <UART_SetConfig+0x4e4>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003120:	441c      	add	r4, r3
 8003122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003126:	2200      	movs	r2, #0
 8003128:	673b      	str	r3, [r7, #112]	@ 0x70
 800312a:	677a      	str	r2, [r7, #116]	@ 0x74
 800312c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003130:	4642      	mov	r2, r8
 8003132:	464b      	mov	r3, r9
 8003134:	1891      	adds	r1, r2, r2
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	415b      	adcs	r3, r3
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003140:	4641      	mov	r1, r8
 8003142:	1851      	adds	r1, r2, r1
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	4649      	mov	r1, r9
 8003148:	414b      	adcs	r3, r1
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003158:	4659      	mov	r1, fp
 800315a:	00cb      	lsls	r3, r1, #3
 800315c:	4651      	mov	r1, sl
 800315e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003162:	4651      	mov	r1, sl
 8003164:	00ca      	lsls	r2, r1, #3
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	4603      	mov	r3, r0
 800316c:	4642      	mov	r2, r8
 800316e:	189b      	adds	r3, r3, r2
 8003170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003172:	464b      	mov	r3, r9
 8003174:	460a      	mov	r2, r1
 8003176:	eb42 0303 	adc.w	r3, r2, r3
 800317a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	663b      	str	r3, [r7, #96]	@ 0x60
 8003186:	667a      	str	r2, [r7, #100]	@ 0x64
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003194:	4649      	mov	r1, r9
 8003196:	008b      	lsls	r3, r1, #2
 8003198:	4641      	mov	r1, r8
 800319a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800319e:	4641      	mov	r1, r8
 80031a0:	008a      	lsls	r2, r1, #2
 80031a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80031a6:	f7fd f88b 	bl	80002c0 <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <UART_SetConfig+0x4e4>)
 80031b0:	fba3 1302 	umull	r1, r3, r3, r2
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	2164      	movs	r1, #100	@ 0x64
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	3332      	adds	r3, #50	@ 0x32
 80031c2:	4a08      	ldr	r2, [pc, #32]	@ (80031e4 <UART_SetConfig+0x4e4>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	f003 020f 	and.w	r2, r3, #15
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4422      	add	r2, r4
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80031de:	46bd      	mov	sp, r7
 80031e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031e4:	51eb851f 	.word	0x51eb851f

080031e8 <atoi>:
 80031e8:	220a      	movs	r2, #10
 80031ea:	2100      	movs	r1, #0
 80031ec:	f000 b87a 	b.w	80032e4 <strtol>

080031f0 <_strtol_l.isra.0>:
 80031f0:	2b24      	cmp	r3, #36	@ 0x24
 80031f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f6:	4686      	mov	lr, r0
 80031f8:	4690      	mov	r8, r2
 80031fa:	d801      	bhi.n	8003200 <_strtol_l.isra.0+0x10>
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <_strtol_l.isra.0+0x1e>
 8003200:	f000 fa38 	bl	8003674 <__errno>
 8003204:	2316      	movs	r3, #22
 8003206:	6003      	str	r3, [r0, #0]
 8003208:	2000      	movs	r0, #0
 800320a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800320e:	4834      	ldr	r0, [pc, #208]	@ (80032e0 <_strtol_l.isra.0+0xf0>)
 8003210:	460d      	mov	r5, r1
 8003212:	462a      	mov	r2, r5
 8003214:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003218:	5d06      	ldrb	r6, [r0, r4]
 800321a:	f016 0608 	ands.w	r6, r6, #8
 800321e:	d1f8      	bne.n	8003212 <_strtol_l.isra.0+0x22>
 8003220:	2c2d      	cmp	r4, #45	@ 0x2d
 8003222:	d110      	bne.n	8003246 <_strtol_l.isra.0+0x56>
 8003224:	782c      	ldrb	r4, [r5, #0]
 8003226:	2601      	movs	r6, #1
 8003228:	1c95      	adds	r5, r2, #2
 800322a:	f033 0210 	bics.w	r2, r3, #16
 800322e:	d115      	bne.n	800325c <_strtol_l.isra.0+0x6c>
 8003230:	2c30      	cmp	r4, #48	@ 0x30
 8003232:	d10d      	bne.n	8003250 <_strtol_l.isra.0+0x60>
 8003234:	782a      	ldrb	r2, [r5, #0]
 8003236:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800323a:	2a58      	cmp	r2, #88	@ 0x58
 800323c:	d108      	bne.n	8003250 <_strtol_l.isra.0+0x60>
 800323e:	786c      	ldrb	r4, [r5, #1]
 8003240:	3502      	adds	r5, #2
 8003242:	2310      	movs	r3, #16
 8003244:	e00a      	b.n	800325c <_strtol_l.isra.0+0x6c>
 8003246:	2c2b      	cmp	r4, #43	@ 0x2b
 8003248:	bf04      	itt	eq
 800324a:	782c      	ldrbeq	r4, [r5, #0]
 800324c:	1c95      	addeq	r5, r2, #2
 800324e:	e7ec      	b.n	800322a <_strtol_l.isra.0+0x3a>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f6      	bne.n	8003242 <_strtol_l.isra.0+0x52>
 8003254:	2c30      	cmp	r4, #48	@ 0x30
 8003256:	bf14      	ite	ne
 8003258:	230a      	movne	r3, #10
 800325a:	2308      	moveq	r3, #8
 800325c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003260:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003264:	2200      	movs	r2, #0
 8003266:	fbbc f9f3 	udiv	r9, ip, r3
 800326a:	4610      	mov	r0, r2
 800326c:	fb03 ca19 	mls	sl, r3, r9, ip
 8003270:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003274:	2f09      	cmp	r7, #9
 8003276:	d80f      	bhi.n	8003298 <_strtol_l.isra.0+0xa8>
 8003278:	463c      	mov	r4, r7
 800327a:	42a3      	cmp	r3, r4
 800327c:	dd1b      	ble.n	80032b6 <_strtol_l.isra.0+0xc6>
 800327e:	1c57      	adds	r7, r2, #1
 8003280:	d007      	beq.n	8003292 <_strtol_l.isra.0+0xa2>
 8003282:	4581      	cmp	r9, r0
 8003284:	d314      	bcc.n	80032b0 <_strtol_l.isra.0+0xc0>
 8003286:	d101      	bne.n	800328c <_strtol_l.isra.0+0x9c>
 8003288:	45a2      	cmp	sl, r4
 800328a:	db11      	blt.n	80032b0 <_strtol_l.isra.0+0xc0>
 800328c:	fb00 4003 	mla	r0, r0, r3, r4
 8003290:	2201      	movs	r2, #1
 8003292:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003296:	e7eb      	b.n	8003270 <_strtol_l.isra.0+0x80>
 8003298:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800329c:	2f19      	cmp	r7, #25
 800329e:	d801      	bhi.n	80032a4 <_strtol_l.isra.0+0xb4>
 80032a0:	3c37      	subs	r4, #55	@ 0x37
 80032a2:	e7ea      	b.n	800327a <_strtol_l.isra.0+0x8a>
 80032a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80032a8:	2f19      	cmp	r7, #25
 80032aa:	d804      	bhi.n	80032b6 <_strtol_l.isra.0+0xc6>
 80032ac:	3c57      	subs	r4, #87	@ 0x57
 80032ae:	e7e4      	b.n	800327a <_strtol_l.isra.0+0x8a>
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295
 80032b4:	e7ed      	b.n	8003292 <_strtol_l.isra.0+0xa2>
 80032b6:	1c53      	adds	r3, r2, #1
 80032b8:	d108      	bne.n	80032cc <_strtol_l.isra.0+0xdc>
 80032ba:	2322      	movs	r3, #34	@ 0x22
 80032bc:	f8ce 3000 	str.w	r3, [lr]
 80032c0:	4660      	mov	r0, ip
 80032c2:	f1b8 0f00 	cmp.w	r8, #0
 80032c6:	d0a0      	beq.n	800320a <_strtol_l.isra.0+0x1a>
 80032c8:	1e69      	subs	r1, r5, #1
 80032ca:	e006      	b.n	80032da <_strtol_l.isra.0+0xea>
 80032cc:	b106      	cbz	r6, 80032d0 <_strtol_l.isra.0+0xe0>
 80032ce:	4240      	negs	r0, r0
 80032d0:	f1b8 0f00 	cmp.w	r8, #0
 80032d4:	d099      	beq.n	800320a <_strtol_l.isra.0+0x1a>
 80032d6:	2a00      	cmp	r2, #0
 80032d8:	d1f6      	bne.n	80032c8 <_strtol_l.isra.0+0xd8>
 80032da:	f8c8 1000 	str.w	r1, [r8]
 80032de:	e794      	b.n	800320a <_strtol_l.isra.0+0x1a>
 80032e0:	0800436d 	.word	0x0800436d

080032e4 <strtol>:
 80032e4:	4613      	mov	r3, r2
 80032e6:	460a      	mov	r2, r1
 80032e8:	4601      	mov	r1, r0
 80032ea:	4802      	ldr	r0, [pc, #8]	@ (80032f4 <strtol+0x10>)
 80032ec:	6800      	ldr	r0, [r0, #0]
 80032ee:	f7ff bf7f 	b.w	80031f0 <_strtol_l.isra.0>
 80032f2:	bf00      	nop
 80032f4:	20000018 	.word	0x20000018

080032f8 <std>:
 80032f8:	2300      	movs	r3, #0
 80032fa:	b510      	push	{r4, lr}
 80032fc:	4604      	mov	r4, r0
 80032fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003306:	6083      	str	r3, [r0, #8]
 8003308:	8181      	strh	r1, [r0, #12]
 800330a:	6643      	str	r3, [r0, #100]	@ 0x64
 800330c:	81c2      	strh	r2, [r0, #14]
 800330e:	6183      	str	r3, [r0, #24]
 8003310:	4619      	mov	r1, r3
 8003312:	2208      	movs	r2, #8
 8003314:	305c      	adds	r0, #92	@ 0x5c
 8003316:	f000 f8f4 	bl	8003502 <memset>
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <std+0x58>)
 800331c:	6263      	str	r3, [r4, #36]	@ 0x24
 800331e:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <std+0x5c>)
 8003320:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <std+0x60>)
 8003324:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003326:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <std+0x64>)
 8003328:	6323      	str	r3, [r4, #48]	@ 0x30
 800332a:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <std+0x68>)
 800332c:	6224      	str	r4, [r4, #32]
 800332e:	429c      	cmp	r4, r3
 8003330:	d006      	beq.n	8003340 <std+0x48>
 8003332:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003336:	4294      	cmp	r4, r2
 8003338:	d002      	beq.n	8003340 <std+0x48>
 800333a:	33d0      	adds	r3, #208	@ 0xd0
 800333c:	429c      	cmp	r4, r3
 800333e:	d105      	bne.n	800334c <std+0x54>
 8003340:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003348:	f000 b9be 	b.w	80036c8 <__retarget_lock_init_recursive>
 800334c:	bd10      	pop	{r4, pc}
 800334e:	bf00      	nop
 8003350:	0800347d 	.word	0x0800347d
 8003354:	0800349f 	.word	0x0800349f
 8003358:	080034d7 	.word	0x080034d7
 800335c:	080034fb 	.word	0x080034fb
 8003360:	2000019c 	.word	0x2000019c

08003364 <stdio_exit_handler>:
 8003364:	4a02      	ldr	r2, [pc, #8]	@ (8003370 <stdio_exit_handler+0xc>)
 8003366:	4903      	ldr	r1, [pc, #12]	@ (8003374 <stdio_exit_handler+0x10>)
 8003368:	4803      	ldr	r0, [pc, #12]	@ (8003378 <stdio_exit_handler+0x14>)
 800336a:	f000 b869 	b.w	8003440 <_fwalk_sglue>
 800336e:	bf00      	nop
 8003370:	2000000c 	.word	0x2000000c
 8003374:	08003a25 	.word	0x08003a25
 8003378:	2000001c 	.word	0x2000001c

0800337c <cleanup_stdio>:
 800337c:	6841      	ldr	r1, [r0, #4]
 800337e:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <cleanup_stdio+0x34>)
 8003380:	4299      	cmp	r1, r3
 8003382:	b510      	push	{r4, lr}
 8003384:	4604      	mov	r4, r0
 8003386:	d001      	beq.n	800338c <cleanup_stdio+0x10>
 8003388:	f000 fb4c 	bl	8003a24 <_fflush_r>
 800338c:	68a1      	ldr	r1, [r4, #8]
 800338e:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <cleanup_stdio+0x38>)
 8003390:	4299      	cmp	r1, r3
 8003392:	d002      	beq.n	800339a <cleanup_stdio+0x1e>
 8003394:	4620      	mov	r0, r4
 8003396:	f000 fb45 	bl	8003a24 <_fflush_r>
 800339a:	68e1      	ldr	r1, [r4, #12]
 800339c:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <cleanup_stdio+0x3c>)
 800339e:	4299      	cmp	r1, r3
 80033a0:	d004      	beq.n	80033ac <cleanup_stdio+0x30>
 80033a2:	4620      	mov	r0, r4
 80033a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a8:	f000 bb3c 	b.w	8003a24 <_fflush_r>
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	bf00      	nop
 80033b0:	2000019c 	.word	0x2000019c
 80033b4:	20000204 	.word	0x20000204
 80033b8:	2000026c 	.word	0x2000026c

080033bc <global_stdio_init.part.0>:
 80033bc:	b510      	push	{r4, lr}
 80033be:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <global_stdio_init.part.0+0x30>)
 80033c0:	4c0b      	ldr	r4, [pc, #44]	@ (80033f0 <global_stdio_init.part.0+0x34>)
 80033c2:	4a0c      	ldr	r2, [pc, #48]	@ (80033f4 <global_stdio_init.part.0+0x38>)
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	4620      	mov	r0, r4
 80033c8:	2200      	movs	r2, #0
 80033ca:	2104      	movs	r1, #4
 80033cc:	f7ff ff94 	bl	80032f8 <std>
 80033d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033d4:	2201      	movs	r2, #1
 80033d6:	2109      	movs	r1, #9
 80033d8:	f7ff ff8e 	bl	80032f8 <std>
 80033dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033e0:	2202      	movs	r2, #2
 80033e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e6:	2112      	movs	r1, #18
 80033e8:	f7ff bf86 	b.w	80032f8 <std>
 80033ec:	200002d4 	.word	0x200002d4
 80033f0:	2000019c 	.word	0x2000019c
 80033f4:	08003365 	.word	0x08003365

080033f8 <__sfp_lock_acquire>:
 80033f8:	4801      	ldr	r0, [pc, #4]	@ (8003400 <__sfp_lock_acquire+0x8>)
 80033fa:	f000 b966 	b.w	80036ca <__retarget_lock_acquire_recursive>
 80033fe:	bf00      	nop
 8003400:	200002dd 	.word	0x200002dd

08003404 <__sfp_lock_release>:
 8003404:	4801      	ldr	r0, [pc, #4]	@ (800340c <__sfp_lock_release+0x8>)
 8003406:	f000 b961 	b.w	80036cc <__retarget_lock_release_recursive>
 800340a:	bf00      	nop
 800340c:	200002dd 	.word	0x200002dd

08003410 <__sinit>:
 8003410:	b510      	push	{r4, lr}
 8003412:	4604      	mov	r4, r0
 8003414:	f7ff fff0 	bl	80033f8 <__sfp_lock_acquire>
 8003418:	6a23      	ldr	r3, [r4, #32]
 800341a:	b11b      	cbz	r3, 8003424 <__sinit+0x14>
 800341c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003420:	f7ff bff0 	b.w	8003404 <__sfp_lock_release>
 8003424:	4b04      	ldr	r3, [pc, #16]	@ (8003438 <__sinit+0x28>)
 8003426:	6223      	str	r3, [r4, #32]
 8003428:	4b04      	ldr	r3, [pc, #16]	@ (800343c <__sinit+0x2c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f5      	bne.n	800341c <__sinit+0xc>
 8003430:	f7ff ffc4 	bl	80033bc <global_stdio_init.part.0>
 8003434:	e7f2      	b.n	800341c <__sinit+0xc>
 8003436:	bf00      	nop
 8003438:	0800337d 	.word	0x0800337d
 800343c:	200002d4 	.word	0x200002d4

08003440 <_fwalk_sglue>:
 8003440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003444:	4607      	mov	r7, r0
 8003446:	4688      	mov	r8, r1
 8003448:	4614      	mov	r4, r2
 800344a:	2600      	movs	r6, #0
 800344c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003450:	f1b9 0901 	subs.w	r9, r9, #1
 8003454:	d505      	bpl.n	8003462 <_fwalk_sglue+0x22>
 8003456:	6824      	ldr	r4, [r4, #0]
 8003458:	2c00      	cmp	r4, #0
 800345a:	d1f7      	bne.n	800344c <_fwalk_sglue+0xc>
 800345c:	4630      	mov	r0, r6
 800345e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003462:	89ab      	ldrh	r3, [r5, #12]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d907      	bls.n	8003478 <_fwalk_sglue+0x38>
 8003468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800346c:	3301      	adds	r3, #1
 800346e:	d003      	beq.n	8003478 <_fwalk_sglue+0x38>
 8003470:	4629      	mov	r1, r5
 8003472:	4638      	mov	r0, r7
 8003474:	47c0      	blx	r8
 8003476:	4306      	orrs	r6, r0
 8003478:	3568      	adds	r5, #104	@ 0x68
 800347a:	e7e9      	b.n	8003450 <_fwalk_sglue+0x10>

0800347c <__sread>:
 800347c:	b510      	push	{r4, lr}
 800347e:	460c      	mov	r4, r1
 8003480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003484:	f000 f8d2 	bl	800362c <_read_r>
 8003488:	2800      	cmp	r0, #0
 800348a:	bfab      	itete	ge
 800348c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800348e:	89a3      	ldrhlt	r3, [r4, #12]
 8003490:	181b      	addge	r3, r3, r0
 8003492:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003496:	bfac      	ite	ge
 8003498:	6563      	strge	r3, [r4, #84]	@ 0x54
 800349a:	81a3      	strhlt	r3, [r4, #12]
 800349c:	bd10      	pop	{r4, pc}

0800349e <__swrite>:
 800349e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a2:	461f      	mov	r7, r3
 80034a4:	898b      	ldrh	r3, [r1, #12]
 80034a6:	05db      	lsls	r3, r3, #23
 80034a8:	4605      	mov	r5, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	4616      	mov	r6, r2
 80034ae:	d505      	bpl.n	80034bc <__swrite+0x1e>
 80034b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034b4:	2302      	movs	r3, #2
 80034b6:	2200      	movs	r2, #0
 80034b8:	f000 f8a6 	bl	8003608 <_lseek_r>
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	4632      	mov	r2, r6
 80034ca:	463b      	mov	r3, r7
 80034cc:	4628      	mov	r0, r5
 80034ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034d2:	f000 b8bd 	b.w	8003650 <_write_r>

080034d6 <__sseek>:
 80034d6:	b510      	push	{r4, lr}
 80034d8:	460c      	mov	r4, r1
 80034da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034de:	f000 f893 	bl	8003608 <_lseek_r>
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	bf15      	itete	ne
 80034e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80034ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80034ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80034f2:	81a3      	strheq	r3, [r4, #12]
 80034f4:	bf18      	it	ne
 80034f6:	81a3      	strhne	r3, [r4, #12]
 80034f8:	bd10      	pop	{r4, pc}

080034fa <__sclose>:
 80034fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fe:	f000 b873 	b.w	80035e8 <_close_r>

08003502 <memset>:
 8003502:	4402      	add	r2, r0
 8003504:	4603      	mov	r3, r0
 8003506:	4293      	cmp	r3, r2
 8003508:	d100      	bne.n	800350c <memset+0xa>
 800350a:	4770      	bx	lr
 800350c:	f803 1b01 	strb.w	r1, [r3], #1
 8003510:	e7f9      	b.n	8003506 <memset+0x4>

08003512 <strcat>:
 8003512:	b510      	push	{r4, lr}
 8003514:	4602      	mov	r2, r0
 8003516:	7814      	ldrb	r4, [r2, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	3201      	adds	r2, #1
 800351c:	2c00      	cmp	r4, #0
 800351e:	d1fa      	bne.n	8003516 <strcat+0x4>
 8003520:	3b01      	subs	r3, #1
 8003522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800352a:	2a00      	cmp	r2, #0
 800352c:	d1f9      	bne.n	8003522 <strcat+0x10>
 800352e:	bd10      	pop	{r4, pc}

08003530 <strtok>:
 8003530:	4b16      	ldr	r3, [pc, #88]	@ (800358c <strtok+0x5c>)
 8003532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003536:	681f      	ldr	r7, [r3, #0]
 8003538:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800353a:	4605      	mov	r5, r0
 800353c:	460e      	mov	r6, r1
 800353e:	b9ec      	cbnz	r4, 800357c <strtok+0x4c>
 8003540:	2050      	movs	r0, #80	@ 0x50
 8003542:	f000 f935 	bl	80037b0 <malloc>
 8003546:	4602      	mov	r2, r0
 8003548:	6478      	str	r0, [r7, #68]	@ 0x44
 800354a:	b920      	cbnz	r0, 8003556 <strtok+0x26>
 800354c:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <strtok+0x60>)
 800354e:	4811      	ldr	r0, [pc, #68]	@ (8003594 <strtok+0x64>)
 8003550:	215b      	movs	r1, #91	@ 0x5b
 8003552:	f000 f8c5 	bl	80036e0 <__assert_func>
 8003556:	e9c0 4400 	strd	r4, r4, [r0]
 800355a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800355e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003562:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8003566:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800356a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800356e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8003572:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8003576:	6184      	str	r4, [r0, #24]
 8003578:	7704      	strb	r4, [r0, #28]
 800357a:	6244      	str	r4, [r0, #36]	@ 0x24
 800357c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800357e:	4631      	mov	r1, r6
 8003580:	4628      	mov	r0, r5
 8003582:	2301      	movs	r3, #1
 8003584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003588:	f000 b806 	b.w	8003598 <__strtok_r>
 800358c:	20000018 	.word	0x20000018
 8003590:	0800446d 	.word	0x0800446d
 8003594:	08004484 	.word	0x08004484

08003598 <__strtok_r>:
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	4604      	mov	r4, r0
 800359c:	b908      	cbnz	r0, 80035a2 <__strtok_r+0xa>
 800359e:	6814      	ldr	r4, [r2, #0]
 80035a0:	b144      	cbz	r4, 80035b4 <__strtok_r+0x1c>
 80035a2:	4620      	mov	r0, r4
 80035a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80035a8:	460f      	mov	r7, r1
 80035aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80035ae:	b91e      	cbnz	r6, 80035b8 <__strtok_r+0x20>
 80035b0:	b965      	cbnz	r5, 80035cc <__strtok_r+0x34>
 80035b2:	6015      	str	r5, [r2, #0]
 80035b4:	2000      	movs	r0, #0
 80035b6:	e005      	b.n	80035c4 <__strtok_r+0x2c>
 80035b8:	42b5      	cmp	r5, r6
 80035ba:	d1f6      	bne.n	80035aa <__strtok_r+0x12>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <__strtok_r+0xa>
 80035c0:	6014      	str	r4, [r2, #0]
 80035c2:	7003      	strb	r3, [r0, #0]
 80035c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c6:	461c      	mov	r4, r3
 80035c8:	e00c      	b.n	80035e4 <__strtok_r+0x4c>
 80035ca:	b91d      	cbnz	r5, 80035d4 <__strtok_r+0x3c>
 80035cc:	4627      	mov	r7, r4
 80035ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 80035d2:	460e      	mov	r6, r1
 80035d4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80035d8:	42ab      	cmp	r3, r5
 80035da:	d1f6      	bne.n	80035ca <__strtok_r+0x32>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f2      	beq.n	80035c6 <__strtok_r+0x2e>
 80035e0:	2300      	movs	r3, #0
 80035e2:	703b      	strb	r3, [r7, #0]
 80035e4:	6014      	str	r4, [r2, #0]
 80035e6:	e7ed      	b.n	80035c4 <__strtok_r+0x2c>

080035e8 <_close_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4d06      	ldr	r5, [pc, #24]	@ (8003604 <_close_r+0x1c>)
 80035ec:	2300      	movs	r3, #0
 80035ee:	4604      	mov	r4, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	602b      	str	r3, [r5, #0]
 80035f4:	f7fd fb3a 	bl	8000c6c <_close>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d102      	bne.n	8003602 <_close_r+0x1a>
 80035fc:	682b      	ldr	r3, [r5, #0]
 80035fe:	b103      	cbz	r3, 8003602 <_close_r+0x1a>
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	bd38      	pop	{r3, r4, r5, pc}
 8003604:	200002d8 	.word	0x200002d8

08003608 <_lseek_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4d07      	ldr	r5, [pc, #28]	@ (8003628 <_lseek_r+0x20>)
 800360c:	4604      	mov	r4, r0
 800360e:	4608      	mov	r0, r1
 8003610:	4611      	mov	r1, r2
 8003612:	2200      	movs	r2, #0
 8003614:	602a      	str	r2, [r5, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	f7fd fb4f 	bl	8000cba <_lseek>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_lseek_r+0x1e>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b103      	cbz	r3, 8003626 <_lseek_r+0x1e>
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	200002d8 	.word	0x200002d8

0800362c <_read_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4d07      	ldr	r5, [pc, #28]	@ (800364c <_read_r+0x20>)
 8003630:	4604      	mov	r4, r0
 8003632:	4608      	mov	r0, r1
 8003634:	4611      	mov	r1, r2
 8003636:	2200      	movs	r2, #0
 8003638:	602a      	str	r2, [r5, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	f7fd fadd 	bl	8000bfa <_read>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d102      	bne.n	800364a <_read_r+0x1e>
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	b103      	cbz	r3, 800364a <_read_r+0x1e>
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	bd38      	pop	{r3, r4, r5, pc}
 800364c:	200002d8 	.word	0x200002d8

08003650 <_write_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4d07      	ldr	r5, [pc, #28]	@ (8003670 <_write_r+0x20>)
 8003654:	4604      	mov	r4, r0
 8003656:	4608      	mov	r0, r1
 8003658:	4611      	mov	r1, r2
 800365a:	2200      	movs	r2, #0
 800365c:	602a      	str	r2, [r5, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	f7fd fae8 	bl	8000c34 <_write>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d102      	bne.n	800366e <_write_r+0x1e>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	b103      	cbz	r3, 800366e <_write_r+0x1e>
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	200002d8 	.word	0x200002d8

08003674 <__errno>:
 8003674:	4b01      	ldr	r3, [pc, #4]	@ (800367c <__errno+0x8>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000018 	.word	0x20000018

08003680 <__libc_init_array>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	4d0d      	ldr	r5, [pc, #52]	@ (80036b8 <__libc_init_array+0x38>)
 8003684:	4c0d      	ldr	r4, [pc, #52]	@ (80036bc <__libc_init_array+0x3c>)
 8003686:	1b64      	subs	r4, r4, r5
 8003688:	10a4      	asrs	r4, r4, #2
 800368a:	2600      	movs	r6, #0
 800368c:	42a6      	cmp	r6, r4
 800368e:	d109      	bne.n	80036a4 <__libc_init_array+0x24>
 8003690:	4d0b      	ldr	r5, [pc, #44]	@ (80036c0 <__libc_init_array+0x40>)
 8003692:	4c0c      	ldr	r4, [pc, #48]	@ (80036c4 <__libc_init_array+0x44>)
 8003694:	f000 fe40 	bl	8004318 <_init>
 8003698:	1b64      	subs	r4, r4, r5
 800369a:	10a4      	asrs	r4, r4, #2
 800369c:	2600      	movs	r6, #0
 800369e:	42a6      	cmp	r6, r4
 80036a0:	d105      	bne.n	80036ae <__libc_init_array+0x2e>
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a8:	4798      	blx	r3
 80036aa:	3601      	adds	r6, #1
 80036ac:	e7ee      	b.n	800368c <__libc_init_array+0xc>
 80036ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b2:	4798      	blx	r3
 80036b4:	3601      	adds	r6, #1
 80036b6:	e7f2      	b.n	800369e <__libc_init_array+0x1e>
 80036b8:	08004558 	.word	0x08004558
 80036bc:	08004558 	.word	0x08004558
 80036c0:	08004558 	.word	0x08004558
 80036c4:	0800455c 	.word	0x0800455c

080036c8 <__retarget_lock_init_recursive>:
 80036c8:	4770      	bx	lr

080036ca <__retarget_lock_acquire_recursive>:
 80036ca:	4770      	bx	lr

080036cc <__retarget_lock_release_recursive>:
 80036cc:	4770      	bx	lr

080036ce <strcpy>:
 80036ce:	4603      	mov	r3, r0
 80036d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036d4:	f803 2b01 	strb.w	r2, [r3], #1
 80036d8:	2a00      	cmp	r2, #0
 80036da:	d1f9      	bne.n	80036d0 <strcpy+0x2>
 80036dc:	4770      	bx	lr
	...

080036e0 <__assert_func>:
 80036e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036e2:	4614      	mov	r4, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b09      	ldr	r3, [pc, #36]	@ (800370c <__assert_func+0x2c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4605      	mov	r5, r0
 80036ec:	68d8      	ldr	r0, [r3, #12]
 80036ee:	b14c      	cbz	r4, 8003704 <__assert_func+0x24>
 80036f0:	4b07      	ldr	r3, [pc, #28]	@ (8003710 <__assert_func+0x30>)
 80036f2:	9100      	str	r1, [sp, #0]
 80036f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80036f8:	4906      	ldr	r1, [pc, #24]	@ (8003714 <__assert_func+0x34>)
 80036fa:	462b      	mov	r3, r5
 80036fc:	f000 f9ba 	bl	8003a74 <fiprintf>
 8003700:	f000 f9da 	bl	8003ab8 <abort>
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <__assert_func+0x38>)
 8003706:	461c      	mov	r4, r3
 8003708:	e7f3      	b.n	80036f2 <__assert_func+0x12>
 800370a:	bf00      	nop
 800370c:	20000018 	.word	0x20000018
 8003710:	080044de 	.word	0x080044de
 8003714:	080044eb 	.word	0x080044eb
 8003718:	08004519 	.word	0x08004519

0800371c <_free_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4605      	mov	r5, r0
 8003720:	2900      	cmp	r1, #0
 8003722:	d041      	beq.n	80037a8 <_free_r+0x8c>
 8003724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003728:	1f0c      	subs	r4, r1, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	bfb8      	it	lt
 800372e:	18e4      	addlt	r4, r4, r3
 8003730:	f000 f8e8 	bl	8003904 <__malloc_lock>
 8003734:	4a1d      	ldr	r2, [pc, #116]	@ (80037ac <_free_r+0x90>)
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	b933      	cbnz	r3, 8003748 <_free_r+0x2c>
 800373a:	6063      	str	r3, [r4, #4]
 800373c:	6014      	str	r4, [r2, #0]
 800373e:	4628      	mov	r0, r5
 8003740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003744:	f000 b8e4 	b.w	8003910 <__malloc_unlock>
 8003748:	42a3      	cmp	r3, r4
 800374a:	d908      	bls.n	800375e <_free_r+0x42>
 800374c:	6820      	ldr	r0, [r4, #0]
 800374e:	1821      	adds	r1, r4, r0
 8003750:	428b      	cmp	r3, r1
 8003752:	bf01      	itttt	eq
 8003754:	6819      	ldreq	r1, [r3, #0]
 8003756:	685b      	ldreq	r3, [r3, #4]
 8003758:	1809      	addeq	r1, r1, r0
 800375a:	6021      	streq	r1, [r4, #0]
 800375c:	e7ed      	b.n	800373a <_free_r+0x1e>
 800375e:	461a      	mov	r2, r3
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	b10b      	cbz	r3, 8003768 <_free_r+0x4c>
 8003764:	42a3      	cmp	r3, r4
 8003766:	d9fa      	bls.n	800375e <_free_r+0x42>
 8003768:	6811      	ldr	r1, [r2, #0]
 800376a:	1850      	adds	r0, r2, r1
 800376c:	42a0      	cmp	r0, r4
 800376e:	d10b      	bne.n	8003788 <_free_r+0x6c>
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	4401      	add	r1, r0
 8003774:	1850      	adds	r0, r2, r1
 8003776:	4283      	cmp	r3, r0
 8003778:	6011      	str	r1, [r2, #0]
 800377a:	d1e0      	bne.n	800373e <_free_r+0x22>
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	6053      	str	r3, [r2, #4]
 8003782:	4408      	add	r0, r1
 8003784:	6010      	str	r0, [r2, #0]
 8003786:	e7da      	b.n	800373e <_free_r+0x22>
 8003788:	d902      	bls.n	8003790 <_free_r+0x74>
 800378a:	230c      	movs	r3, #12
 800378c:	602b      	str	r3, [r5, #0]
 800378e:	e7d6      	b.n	800373e <_free_r+0x22>
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	1821      	adds	r1, r4, r0
 8003794:	428b      	cmp	r3, r1
 8003796:	bf04      	itt	eq
 8003798:	6819      	ldreq	r1, [r3, #0]
 800379a:	685b      	ldreq	r3, [r3, #4]
 800379c:	6063      	str	r3, [r4, #4]
 800379e:	bf04      	itt	eq
 80037a0:	1809      	addeq	r1, r1, r0
 80037a2:	6021      	streq	r1, [r4, #0]
 80037a4:	6054      	str	r4, [r2, #4]
 80037a6:	e7ca      	b.n	800373e <_free_r+0x22>
 80037a8:	bd38      	pop	{r3, r4, r5, pc}
 80037aa:	bf00      	nop
 80037ac:	200002e4 	.word	0x200002e4

080037b0 <malloc>:
 80037b0:	4b02      	ldr	r3, [pc, #8]	@ (80037bc <malloc+0xc>)
 80037b2:	4601      	mov	r1, r0
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	f000 b825 	b.w	8003804 <_malloc_r>
 80037ba:	bf00      	nop
 80037bc:	20000018 	.word	0x20000018

080037c0 <sbrk_aligned>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4e0f      	ldr	r6, [pc, #60]	@ (8003800 <sbrk_aligned+0x40>)
 80037c4:	460c      	mov	r4, r1
 80037c6:	6831      	ldr	r1, [r6, #0]
 80037c8:	4605      	mov	r5, r0
 80037ca:	b911      	cbnz	r1, 80037d2 <sbrk_aligned+0x12>
 80037cc:	f000 f964 	bl	8003a98 <_sbrk_r>
 80037d0:	6030      	str	r0, [r6, #0]
 80037d2:	4621      	mov	r1, r4
 80037d4:	4628      	mov	r0, r5
 80037d6:	f000 f95f 	bl	8003a98 <_sbrk_r>
 80037da:	1c43      	adds	r3, r0, #1
 80037dc:	d103      	bne.n	80037e6 <sbrk_aligned+0x26>
 80037de:	f04f 34ff 	mov.w	r4, #4294967295
 80037e2:	4620      	mov	r0, r4
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
 80037e6:	1cc4      	adds	r4, r0, #3
 80037e8:	f024 0403 	bic.w	r4, r4, #3
 80037ec:	42a0      	cmp	r0, r4
 80037ee:	d0f8      	beq.n	80037e2 <sbrk_aligned+0x22>
 80037f0:	1a21      	subs	r1, r4, r0
 80037f2:	4628      	mov	r0, r5
 80037f4:	f000 f950 	bl	8003a98 <_sbrk_r>
 80037f8:	3001      	adds	r0, #1
 80037fa:	d1f2      	bne.n	80037e2 <sbrk_aligned+0x22>
 80037fc:	e7ef      	b.n	80037de <sbrk_aligned+0x1e>
 80037fe:	bf00      	nop
 8003800:	200002e0 	.word	0x200002e0

08003804 <_malloc_r>:
 8003804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003808:	1ccd      	adds	r5, r1, #3
 800380a:	f025 0503 	bic.w	r5, r5, #3
 800380e:	3508      	adds	r5, #8
 8003810:	2d0c      	cmp	r5, #12
 8003812:	bf38      	it	cc
 8003814:	250c      	movcc	r5, #12
 8003816:	2d00      	cmp	r5, #0
 8003818:	4606      	mov	r6, r0
 800381a:	db01      	blt.n	8003820 <_malloc_r+0x1c>
 800381c:	42a9      	cmp	r1, r5
 800381e:	d904      	bls.n	800382a <_malloc_r+0x26>
 8003820:	230c      	movs	r3, #12
 8003822:	6033      	str	r3, [r6, #0]
 8003824:	2000      	movs	r0, #0
 8003826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800382a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003900 <_malloc_r+0xfc>
 800382e:	f000 f869 	bl	8003904 <__malloc_lock>
 8003832:	f8d8 3000 	ldr.w	r3, [r8]
 8003836:	461c      	mov	r4, r3
 8003838:	bb44      	cbnz	r4, 800388c <_malloc_r+0x88>
 800383a:	4629      	mov	r1, r5
 800383c:	4630      	mov	r0, r6
 800383e:	f7ff ffbf 	bl	80037c0 <sbrk_aligned>
 8003842:	1c43      	adds	r3, r0, #1
 8003844:	4604      	mov	r4, r0
 8003846:	d158      	bne.n	80038fa <_malloc_r+0xf6>
 8003848:	f8d8 4000 	ldr.w	r4, [r8]
 800384c:	4627      	mov	r7, r4
 800384e:	2f00      	cmp	r7, #0
 8003850:	d143      	bne.n	80038da <_malloc_r+0xd6>
 8003852:	2c00      	cmp	r4, #0
 8003854:	d04b      	beq.n	80038ee <_malloc_r+0xea>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	4639      	mov	r1, r7
 800385a:	4630      	mov	r0, r6
 800385c:	eb04 0903 	add.w	r9, r4, r3
 8003860:	f000 f91a 	bl	8003a98 <_sbrk_r>
 8003864:	4581      	cmp	r9, r0
 8003866:	d142      	bne.n	80038ee <_malloc_r+0xea>
 8003868:	6821      	ldr	r1, [r4, #0]
 800386a:	1a6d      	subs	r5, r5, r1
 800386c:	4629      	mov	r1, r5
 800386e:	4630      	mov	r0, r6
 8003870:	f7ff ffa6 	bl	80037c0 <sbrk_aligned>
 8003874:	3001      	adds	r0, #1
 8003876:	d03a      	beq.n	80038ee <_malloc_r+0xea>
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	442b      	add	r3, r5
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	f8d8 3000 	ldr.w	r3, [r8]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	bb62      	cbnz	r2, 80038e0 <_malloc_r+0xdc>
 8003886:	f8c8 7000 	str.w	r7, [r8]
 800388a:	e00f      	b.n	80038ac <_malloc_r+0xa8>
 800388c:	6822      	ldr	r2, [r4, #0]
 800388e:	1b52      	subs	r2, r2, r5
 8003890:	d420      	bmi.n	80038d4 <_malloc_r+0xd0>
 8003892:	2a0b      	cmp	r2, #11
 8003894:	d917      	bls.n	80038c6 <_malloc_r+0xc2>
 8003896:	1961      	adds	r1, r4, r5
 8003898:	42a3      	cmp	r3, r4
 800389a:	6025      	str	r5, [r4, #0]
 800389c:	bf18      	it	ne
 800389e:	6059      	strne	r1, [r3, #4]
 80038a0:	6863      	ldr	r3, [r4, #4]
 80038a2:	bf08      	it	eq
 80038a4:	f8c8 1000 	streq.w	r1, [r8]
 80038a8:	5162      	str	r2, [r4, r5]
 80038aa:	604b      	str	r3, [r1, #4]
 80038ac:	4630      	mov	r0, r6
 80038ae:	f000 f82f 	bl	8003910 <__malloc_unlock>
 80038b2:	f104 000b 	add.w	r0, r4, #11
 80038b6:	1d23      	adds	r3, r4, #4
 80038b8:	f020 0007 	bic.w	r0, r0, #7
 80038bc:	1ac2      	subs	r2, r0, r3
 80038be:	bf1c      	itt	ne
 80038c0:	1a1b      	subne	r3, r3, r0
 80038c2:	50a3      	strne	r3, [r4, r2]
 80038c4:	e7af      	b.n	8003826 <_malloc_r+0x22>
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	42a3      	cmp	r3, r4
 80038ca:	bf0c      	ite	eq
 80038cc:	f8c8 2000 	streq.w	r2, [r8]
 80038d0:	605a      	strne	r2, [r3, #4]
 80038d2:	e7eb      	b.n	80038ac <_malloc_r+0xa8>
 80038d4:	4623      	mov	r3, r4
 80038d6:	6864      	ldr	r4, [r4, #4]
 80038d8:	e7ae      	b.n	8003838 <_malloc_r+0x34>
 80038da:	463c      	mov	r4, r7
 80038dc:	687f      	ldr	r7, [r7, #4]
 80038de:	e7b6      	b.n	800384e <_malloc_r+0x4a>
 80038e0:	461a      	mov	r2, r3
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	42a3      	cmp	r3, r4
 80038e6:	d1fb      	bne.n	80038e0 <_malloc_r+0xdc>
 80038e8:	2300      	movs	r3, #0
 80038ea:	6053      	str	r3, [r2, #4]
 80038ec:	e7de      	b.n	80038ac <_malloc_r+0xa8>
 80038ee:	230c      	movs	r3, #12
 80038f0:	6033      	str	r3, [r6, #0]
 80038f2:	4630      	mov	r0, r6
 80038f4:	f000 f80c 	bl	8003910 <__malloc_unlock>
 80038f8:	e794      	b.n	8003824 <_malloc_r+0x20>
 80038fa:	6005      	str	r5, [r0, #0]
 80038fc:	e7d6      	b.n	80038ac <_malloc_r+0xa8>
 80038fe:	bf00      	nop
 8003900:	200002e4 	.word	0x200002e4

08003904 <__malloc_lock>:
 8003904:	4801      	ldr	r0, [pc, #4]	@ (800390c <__malloc_lock+0x8>)
 8003906:	f7ff bee0 	b.w	80036ca <__retarget_lock_acquire_recursive>
 800390a:	bf00      	nop
 800390c:	200002dc 	.word	0x200002dc

08003910 <__malloc_unlock>:
 8003910:	4801      	ldr	r0, [pc, #4]	@ (8003918 <__malloc_unlock+0x8>)
 8003912:	f7ff bedb 	b.w	80036cc <__retarget_lock_release_recursive>
 8003916:	bf00      	nop
 8003918:	200002dc 	.word	0x200002dc

0800391c <__sflush_r>:
 800391c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003924:	0716      	lsls	r6, r2, #28
 8003926:	4605      	mov	r5, r0
 8003928:	460c      	mov	r4, r1
 800392a:	d454      	bmi.n	80039d6 <__sflush_r+0xba>
 800392c:	684b      	ldr	r3, [r1, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	dc02      	bgt.n	8003938 <__sflush_r+0x1c>
 8003932:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	dd48      	ble.n	80039ca <__sflush_r+0xae>
 8003938:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800393a:	2e00      	cmp	r6, #0
 800393c:	d045      	beq.n	80039ca <__sflush_r+0xae>
 800393e:	2300      	movs	r3, #0
 8003940:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003944:	682f      	ldr	r7, [r5, #0]
 8003946:	6a21      	ldr	r1, [r4, #32]
 8003948:	602b      	str	r3, [r5, #0]
 800394a:	d030      	beq.n	80039ae <__sflush_r+0x92>
 800394c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	0759      	lsls	r1, r3, #29
 8003952:	d505      	bpl.n	8003960 <__sflush_r+0x44>
 8003954:	6863      	ldr	r3, [r4, #4]
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800395a:	b10b      	cbz	r3, 8003960 <__sflush_r+0x44>
 800395c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	2300      	movs	r3, #0
 8003962:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003964:	6a21      	ldr	r1, [r4, #32]
 8003966:	4628      	mov	r0, r5
 8003968:	47b0      	blx	r6
 800396a:	1c43      	adds	r3, r0, #1
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	d106      	bne.n	800397e <__sflush_r+0x62>
 8003970:	6829      	ldr	r1, [r5, #0]
 8003972:	291d      	cmp	r1, #29
 8003974:	d82b      	bhi.n	80039ce <__sflush_r+0xb2>
 8003976:	4a2a      	ldr	r2, [pc, #168]	@ (8003a20 <__sflush_r+0x104>)
 8003978:	40ca      	lsrs	r2, r1
 800397a:	07d6      	lsls	r6, r2, #31
 800397c:	d527      	bpl.n	80039ce <__sflush_r+0xb2>
 800397e:	2200      	movs	r2, #0
 8003980:	6062      	str	r2, [r4, #4]
 8003982:	04d9      	lsls	r1, r3, #19
 8003984:	6922      	ldr	r2, [r4, #16]
 8003986:	6022      	str	r2, [r4, #0]
 8003988:	d504      	bpl.n	8003994 <__sflush_r+0x78>
 800398a:	1c42      	adds	r2, r0, #1
 800398c:	d101      	bne.n	8003992 <__sflush_r+0x76>
 800398e:	682b      	ldr	r3, [r5, #0]
 8003990:	b903      	cbnz	r3, 8003994 <__sflush_r+0x78>
 8003992:	6560      	str	r0, [r4, #84]	@ 0x54
 8003994:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003996:	602f      	str	r7, [r5, #0]
 8003998:	b1b9      	cbz	r1, 80039ca <__sflush_r+0xae>
 800399a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800399e:	4299      	cmp	r1, r3
 80039a0:	d002      	beq.n	80039a8 <__sflush_r+0x8c>
 80039a2:	4628      	mov	r0, r5
 80039a4:	f7ff feba 	bl	800371c <_free_r>
 80039a8:	2300      	movs	r3, #0
 80039aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80039ac:	e00d      	b.n	80039ca <__sflush_r+0xae>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4628      	mov	r0, r5
 80039b2:	47b0      	blx	r6
 80039b4:	4602      	mov	r2, r0
 80039b6:	1c50      	adds	r0, r2, #1
 80039b8:	d1c9      	bne.n	800394e <__sflush_r+0x32>
 80039ba:	682b      	ldr	r3, [r5, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0c6      	beq.n	800394e <__sflush_r+0x32>
 80039c0:	2b1d      	cmp	r3, #29
 80039c2:	d001      	beq.n	80039c8 <__sflush_r+0xac>
 80039c4:	2b16      	cmp	r3, #22
 80039c6:	d11e      	bne.n	8003a06 <__sflush_r+0xea>
 80039c8:	602f      	str	r7, [r5, #0]
 80039ca:	2000      	movs	r0, #0
 80039cc:	e022      	b.n	8003a14 <__sflush_r+0xf8>
 80039ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039d2:	b21b      	sxth	r3, r3
 80039d4:	e01b      	b.n	8003a0e <__sflush_r+0xf2>
 80039d6:	690f      	ldr	r7, [r1, #16]
 80039d8:	2f00      	cmp	r7, #0
 80039da:	d0f6      	beq.n	80039ca <__sflush_r+0xae>
 80039dc:	0793      	lsls	r3, r2, #30
 80039de:	680e      	ldr	r6, [r1, #0]
 80039e0:	bf08      	it	eq
 80039e2:	694b      	ldreq	r3, [r1, #20]
 80039e4:	600f      	str	r7, [r1, #0]
 80039e6:	bf18      	it	ne
 80039e8:	2300      	movne	r3, #0
 80039ea:	eba6 0807 	sub.w	r8, r6, r7
 80039ee:	608b      	str	r3, [r1, #8]
 80039f0:	f1b8 0f00 	cmp.w	r8, #0
 80039f4:	dde9      	ble.n	80039ca <__sflush_r+0xae>
 80039f6:	6a21      	ldr	r1, [r4, #32]
 80039f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80039fa:	4643      	mov	r3, r8
 80039fc:	463a      	mov	r2, r7
 80039fe:	4628      	mov	r0, r5
 8003a00:	47b0      	blx	r6
 8003a02:	2800      	cmp	r0, #0
 8003a04:	dc08      	bgt.n	8003a18 <__sflush_r+0xfc>
 8003a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a18:	4407      	add	r7, r0
 8003a1a:	eba8 0800 	sub.w	r8, r8, r0
 8003a1e:	e7e7      	b.n	80039f0 <__sflush_r+0xd4>
 8003a20:	20400001 	.word	0x20400001

08003a24 <_fflush_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	690b      	ldr	r3, [r1, #16]
 8003a28:	4605      	mov	r5, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	b913      	cbnz	r3, 8003a34 <_fflush_r+0x10>
 8003a2e:	2500      	movs	r5, #0
 8003a30:	4628      	mov	r0, r5
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	b118      	cbz	r0, 8003a3e <_fflush_r+0x1a>
 8003a36:	6a03      	ldr	r3, [r0, #32]
 8003a38:	b90b      	cbnz	r3, 8003a3e <_fflush_r+0x1a>
 8003a3a:	f7ff fce9 	bl	8003410 <__sinit>
 8003a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f3      	beq.n	8003a2e <_fflush_r+0xa>
 8003a46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a48:	07d0      	lsls	r0, r2, #31
 8003a4a:	d404      	bmi.n	8003a56 <_fflush_r+0x32>
 8003a4c:	0599      	lsls	r1, r3, #22
 8003a4e:	d402      	bmi.n	8003a56 <_fflush_r+0x32>
 8003a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a52:	f7ff fe3a 	bl	80036ca <__retarget_lock_acquire_recursive>
 8003a56:	4628      	mov	r0, r5
 8003a58:	4621      	mov	r1, r4
 8003a5a:	f7ff ff5f 	bl	800391c <__sflush_r>
 8003a5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a60:	07da      	lsls	r2, r3, #31
 8003a62:	4605      	mov	r5, r0
 8003a64:	d4e4      	bmi.n	8003a30 <_fflush_r+0xc>
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	059b      	lsls	r3, r3, #22
 8003a6a:	d4e1      	bmi.n	8003a30 <_fflush_r+0xc>
 8003a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a6e:	f7ff fe2d 	bl	80036cc <__retarget_lock_release_recursive>
 8003a72:	e7dd      	b.n	8003a30 <_fflush_r+0xc>

08003a74 <fiprintf>:
 8003a74:	b40e      	push	{r1, r2, r3}
 8003a76:	b503      	push	{r0, r1, lr}
 8003a78:	4601      	mov	r1, r0
 8003a7a:	ab03      	add	r3, sp, #12
 8003a7c:	4805      	ldr	r0, [pc, #20]	@ (8003a94 <fiprintf+0x20>)
 8003a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a82:	6800      	ldr	r0, [r0, #0]
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	f000 f847 	bl	8003b18 <_vfiprintf_r>
 8003a8a:	b002      	add	sp, #8
 8003a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a90:	b003      	add	sp, #12
 8003a92:	4770      	bx	lr
 8003a94:	20000018 	.word	0x20000018

08003a98 <_sbrk_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	4d06      	ldr	r5, [pc, #24]	@ (8003ab4 <_sbrk_r+0x1c>)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	f7fd f916 	bl	8000cd4 <_sbrk>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_sbrk_r+0x1a>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_sbrk_r+0x1a>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	200002d8 	.word	0x200002d8

08003ab8 <abort>:
 8003ab8:	b508      	push	{r3, lr}
 8003aba:	2006      	movs	r0, #6
 8003abc:	f000 fb8c 	bl	80041d8 <raise>
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	f7fd f88f 	bl	8000be4 <_exit>

08003ac6 <__sfputc_r>:
 8003ac6:	6893      	ldr	r3, [r2, #8]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	b410      	push	{r4}
 8003ace:	6093      	str	r3, [r2, #8]
 8003ad0:	da08      	bge.n	8003ae4 <__sfputc_r+0x1e>
 8003ad2:	6994      	ldr	r4, [r2, #24]
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	db01      	blt.n	8003adc <__sfputc_r+0x16>
 8003ad8:	290a      	cmp	r1, #10
 8003ada:	d103      	bne.n	8003ae4 <__sfputc_r+0x1e>
 8003adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ae0:	f000 babe 	b.w	8004060 <__swbuf_r>
 8003ae4:	6813      	ldr	r3, [r2, #0]
 8003ae6:	1c58      	adds	r0, r3, #1
 8003ae8:	6010      	str	r0, [r2, #0]
 8003aea:	7019      	strb	r1, [r3, #0]
 8003aec:	4608      	mov	r0, r1
 8003aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <__sfputs_r>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	4606      	mov	r6, r0
 8003af8:	460f      	mov	r7, r1
 8003afa:	4614      	mov	r4, r2
 8003afc:	18d5      	adds	r5, r2, r3
 8003afe:	42ac      	cmp	r4, r5
 8003b00:	d101      	bne.n	8003b06 <__sfputs_r+0x12>
 8003b02:	2000      	movs	r0, #0
 8003b04:	e007      	b.n	8003b16 <__sfputs_r+0x22>
 8003b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b0a:	463a      	mov	r2, r7
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	f7ff ffda 	bl	8003ac6 <__sfputc_r>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	d1f3      	bne.n	8003afe <__sfputs_r+0xa>
 8003b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b18 <_vfiprintf_r>:
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	b09d      	sub	sp, #116	@ 0x74
 8003b20:	4614      	mov	r4, r2
 8003b22:	4698      	mov	r8, r3
 8003b24:	4606      	mov	r6, r0
 8003b26:	b118      	cbz	r0, 8003b30 <_vfiprintf_r+0x18>
 8003b28:	6a03      	ldr	r3, [r0, #32]
 8003b2a:	b90b      	cbnz	r3, 8003b30 <_vfiprintf_r+0x18>
 8003b2c:	f7ff fc70 	bl	8003410 <__sinit>
 8003b30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b32:	07d9      	lsls	r1, r3, #31
 8003b34:	d405      	bmi.n	8003b42 <_vfiprintf_r+0x2a>
 8003b36:	89ab      	ldrh	r3, [r5, #12]
 8003b38:	059a      	lsls	r2, r3, #22
 8003b3a:	d402      	bmi.n	8003b42 <_vfiprintf_r+0x2a>
 8003b3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b3e:	f7ff fdc4 	bl	80036ca <__retarget_lock_acquire_recursive>
 8003b42:	89ab      	ldrh	r3, [r5, #12]
 8003b44:	071b      	lsls	r3, r3, #28
 8003b46:	d501      	bpl.n	8003b4c <_vfiprintf_r+0x34>
 8003b48:	692b      	ldr	r3, [r5, #16]
 8003b4a:	b99b      	cbnz	r3, 8003b74 <_vfiprintf_r+0x5c>
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f000 fac4 	bl	80040dc <__swsetup_r>
 8003b54:	b170      	cbz	r0, 8003b74 <_vfiprintf_r+0x5c>
 8003b56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b58:	07dc      	lsls	r4, r3, #31
 8003b5a:	d504      	bpl.n	8003b66 <_vfiprintf_r+0x4e>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	b01d      	add	sp, #116	@ 0x74
 8003b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b66:	89ab      	ldrh	r3, [r5, #12]
 8003b68:	0598      	lsls	r0, r3, #22
 8003b6a:	d4f7      	bmi.n	8003b5c <_vfiprintf_r+0x44>
 8003b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b6e:	f7ff fdad 	bl	80036cc <__retarget_lock_release_recursive>
 8003b72:	e7f3      	b.n	8003b5c <_vfiprintf_r+0x44>
 8003b74:	2300      	movs	r3, #0
 8003b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b78:	2320      	movs	r3, #32
 8003b7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b82:	2330      	movs	r3, #48	@ 0x30
 8003b84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003d34 <_vfiprintf_r+0x21c>
 8003b88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b8c:	f04f 0901 	mov.w	r9, #1
 8003b90:	4623      	mov	r3, r4
 8003b92:	469a      	mov	sl, r3
 8003b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b98:	b10a      	cbz	r2, 8003b9e <_vfiprintf_r+0x86>
 8003b9a:	2a25      	cmp	r2, #37	@ 0x25
 8003b9c:	d1f9      	bne.n	8003b92 <_vfiprintf_r+0x7a>
 8003b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8003ba2:	d00b      	beq.n	8003bbc <_vfiprintf_r+0xa4>
 8003ba4:	465b      	mov	r3, fp
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	4629      	mov	r1, r5
 8003baa:	4630      	mov	r0, r6
 8003bac:	f7ff ffa2 	bl	8003af4 <__sfputs_r>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	f000 80a7 	beq.w	8003d04 <_vfiprintf_r+0x1ec>
 8003bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bb8:	445a      	add	r2, fp
 8003bba:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 809f 	beq.w	8003d04 <_vfiprintf_r+0x1ec>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bd0:	f10a 0a01 	add.w	sl, sl, #1
 8003bd4:	9304      	str	r3, [sp, #16]
 8003bd6:	9307      	str	r3, [sp, #28]
 8003bd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bde:	4654      	mov	r4, sl
 8003be0:	2205      	movs	r2, #5
 8003be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be6:	4853      	ldr	r0, [pc, #332]	@ (8003d34 <_vfiprintf_r+0x21c>)
 8003be8:	f7fc fb1a 	bl	8000220 <memchr>
 8003bec:	9a04      	ldr	r2, [sp, #16]
 8003bee:	b9d8      	cbnz	r0, 8003c28 <_vfiprintf_r+0x110>
 8003bf0:	06d1      	lsls	r1, r2, #27
 8003bf2:	bf44      	itt	mi
 8003bf4:	2320      	movmi	r3, #32
 8003bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bfa:	0713      	lsls	r3, r2, #28
 8003bfc:	bf44      	itt	mi
 8003bfe:	232b      	movmi	r3, #43	@ 0x2b
 8003c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c04:	f89a 3000 	ldrb.w	r3, [sl]
 8003c08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c0a:	d015      	beq.n	8003c38 <_vfiprintf_r+0x120>
 8003c0c:	9a07      	ldr	r2, [sp, #28]
 8003c0e:	4654      	mov	r4, sl
 8003c10:	2000      	movs	r0, #0
 8003c12:	f04f 0c0a 	mov.w	ip, #10
 8003c16:	4621      	mov	r1, r4
 8003c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c1c:	3b30      	subs	r3, #48	@ 0x30
 8003c1e:	2b09      	cmp	r3, #9
 8003c20:	d94b      	bls.n	8003cba <_vfiprintf_r+0x1a2>
 8003c22:	b1b0      	cbz	r0, 8003c52 <_vfiprintf_r+0x13a>
 8003c24:	9207      	str	r2, [sp, #28]
 8003c26:	e014      	b.n	8003c52 <_vfiprintf_r+0x13a>
 8003c28:	eba0 0308 	sub.w	r3, r0, r8
 8003c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c30:	4313      	orrs	r3, r2
 8003c32:	9304      	str	r3, [sp, #16]
 8003c34:	46a2      	mov	sl, r4
 8003c36:	e7d2      	b.n	8003bde <_vfiprintf_r+0xc6>
 8003c38:	9b03      	ldr	r3, [sp, #12]
 8003c3a:	1d19      	adds	r1, r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	9103      	str	r1, [sp, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bfbb      	ittet	lt
 8003c44:	425b      	neglt	r3, r3
 8003c46:	f042 0202 	orrlt.w	r2, r2, #2
 8003c4a:	9307      	strge	r3, [sp, #28]
 8003c4c:	9307      	strlt	r3, [sp, #28]
 8003c4e:	bfb8      	it	lt
 8003c50:	9204      	strlt	r2, [sp, #16]
 8003c52:	7823      	ldrb	r3, [r4, #0]
 8003c54:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c56:	d10a      	bne.n	8003c6e <_vfiprintf_r+0x156>
 8003c58:	7863      	ldrb	r3, [r4, #1]
 8003c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c5c:	d132      	bne.n	8003cc4 <_vfiprintf_r+0x1ac>
 8003c5e:	9b03      	ldr	r3, [sp, #12]
 8003c60:	1d1a      	adds	r2, r3, #4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	9203      	str	r2, [sp, #12]
 8003c66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c6a:	3402      	adds	r4, #2
 8003c6c:	9305      	str	r3, [sp, #20]
 8003c6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003d44 <_vfiprintf_r+0x22c>
 8003c72:	7821      	ldrb	r1, [r4, #0]
 8003c74:	2203      	movs	r2, #3
 8003c76:	4650      	mov	r0, sl
 8003c78:	f7fc fad2 	bl	8000220 <memchr>
 8003c7c:	b138      	cbz	r0, 8003c8e <_vfiprintf_r+0x176>
 8003c7e:	9b04      	ldr	r3, [sp, #16]
 8003c80:	eba0 000a 	sub.w	r0, r0, sl
 8003c84:	2240      	movs	r2, #64	@ 0x40
 8003c86:	4082      	lsls	r2, r0
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	3401      	adds	r4, #1
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c92:	4829      	ldr	r0, [pc, #164]	@ (8003d38 <_vfiprintf_r+0x220>)
 8003c94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c98:	2206      	movs	r2, #6
 8003c9a:	f7fc fac1 	bl	8000220 <memchr>
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d03f      	beq.n	8003d22 <_vfiprintf_r+0x20a>
 8003ca2:	4b26      	ldr	r3, [pc, #152]	@ (8003d3c <_vfiprintf_r+0x224>)
 8003ca4:	bb1b      	cbnz	r3, 8003cee <_vfiprintf_r+0x1d6>
 8003ca6:	9b03      	ldr	r3, [sp, #12]
 8003ca8:	3307      	adds	r3, #7
 8003caa:	f023 0307 	bic.w	r3, r3, #7
 8003cae:	3308      	adds	r3, #8
 8003cb0:	9303      	str	r3, [sp, #12]
 8003cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cb4:	443b      	add	r3, r7
 8003cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cb8:	e76a      	b.n	8003b90 <_vfiprintf_r+0x78>
 8003cba:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	e7a8      	b.n	8003c16 <_vfiprintf_r+0xfe>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	3401      	adds	r4, #1
 8003cc8:	9305      	str	r3, [sp, #20]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f04f 0c0a 	mov.w	ip, #10
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cd6:	3a30      	subs	r2, #48	@ 0x30
 8003cd8:	2a09      	cmp	r2, #9
 8003cda:	d903      	bls.n	8003ce4 <_vfiprintf_r+0x1cc>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0c6      	beq.n	8003c6e <_vfiprintf_r+0x156>
 8003ce0:	9105      	str	r1, [sp, #20]
 8003ce2:	e7c4      	b.n	8003c6e <_vfiprintf_r+0x156>
 8003ce4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce8:	4604      	mov	r4, r0
 8003cea:	2301      	movs	r3, #1
 8003cec:	e7f0      	b.n	8003cd0 <_vfiprintf_r+0x1b8>
 8003cee:	ab03      	add	r3, sp, #12
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	462a      	mov	r2, r5
 8003cf4:	4b12      	ldr	r3, [pc, #72]	@ (8003d40 <_vfiprintf_r+0x228>)
 8003cf6:	a904      	add	r1, sp, #16
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	f3af 8000 	nop.w
 8003cfe:	4607      	mov	r7, r0
 8003d00:	1c78      	adds	r0, r7, #1
 8003d02:	d1d6      	bne.n	8003cb2 <_vfiprintf_r+0x19a>
 8003d04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d06:	07d9      	lsls	r1, r3, #31
 8003d08:	d405      	bmi.n	8003d16 <_vfiprintf_r+0x1fe>
 8003d0a:	89ab      	ldrh	r3, [r5, #12]
 8003d0c:	059a      	lsls	r2, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_vfiprintf_r+0x1fe>
 8003d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d12:	f7ff fcdb 	bl	80036cc <__retarget_lock_release_recursive>
 8003d16:	89ab      	ldrh	r3, [r5, #12]
 8003d18:	065b      	lsls	r3, r3, #25
 8003d1a:	f53f af1f 	bmi.w	8003b5c <_vfiprintf_r+0x44>
 8003d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d20:	e71e      	b.n	8003b60 <_vfiprintf_r+0x48>
 8003d22:	ab03      	add	r3, sp, #12
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	462a      	mov	r2, r5
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <_vfiprintf_r+0x228>)
 8003d2a:	a904      	add	r1, sp, #16
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	f000 f879 	bl	8003e24 <_printf_i>
 8003d32:	e7e4      	b.n	8003cfe <_vfiprintf_r+0x1e6>
 8003d34:	0800451a 	.word	0x0800451a
 8003d38:	08004524 	.word	0x08004524
 8003d3c:	00000000 	.word	0x00000000
 8003d40:	08003af5 	.word	0x08003af5
 8003d44:	08004520 	.word	0x08004520

08003d48 <_printf_common>:
 8003d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d4c:	4616      	mov	r6, r2
 8003d4e:	4698      	mov	r8, r3
 8003d50:	688a      	ldr	r2, [r1, #8]
 8003d52:	690b      	ldr	r3, [r1, #16]
 8003d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	bfb8      	it	lt
 8003d5c:	4613      	movlt	r3, r2
 8003d5e:	6033      	str	r3, [r6, #0]
 8003d60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d64:	4607      	mov	r7, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	b10a      	cbz	r2, 8003d6e <_printf_common+0x26>
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	6033      	str	r3, [r6, #0]
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	0699      	lsls	r1, r3, #26
 8003d72:	bf42      	ittt	mi
 8003d74:	6833      	ldrmi	r3, [r6, #0]
 8003d76:	3302      	addmi	r3, #2
 8003d78:	6033      	strmi	r3, [r6, #0]
 8003d7a:	6825      	ldr	r5, [r4, #0]
 8003d7c:	f015 0506 	ands.w	r5, r5, #6
 8003d80:	d106      	bne.n	8003d90 <_printf_common+0x48>
 8003d82:	f104 0a19 	add.w	sl, r4, #25
 8003d86:	68e3      	ldr	r3, [r4, #12]
 8003d88:	6832      	ldr	r2, [r6, #0]
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	42ab      	cmp	r3, r5
 8003d8e:	dc26      	bgt.n	8003dde <_printf_common+0x96>
 8003d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d94:	6822      	ldr	r2, [r4, #0]
 8003d96:	3b00      	subs	r3, #0
 8003d98:	bf18      	it	ne
 8003d9a:	2301      	movne	r3, #1
 8003d9c:	0692      	lsls	r2, r2, #26
 8003d9e:	d42b      	bmi.n	8003df8 <_printf_common+0xb0>
 8003da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003da4:	4641      	mov	r1, r8
 8003da6:	4638      	mov	r0, r7
 8003da8:	47c8      	blx	r9
 8003daa:	3001      	adds	r0, #1
 8003dac:	d01e      	beq.n	8003dec <_printf_common+0xa4>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	6922      	ldr	r2, [r4, #16]
 8003db2:	f003 0306 	and.w	r3, r3, #6
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	bf02      	ittt	eq
 8003dba:	68e5      	ldreq	r5, [r4, #12]
 8003dbc:	6833      	ldreq	r3, [r6, #0]
 8003dbe:	1aed      	subeq	r5, r5, r3
 8003dc0:	68a3      	ldr	r3, [r4, #8]
 8003dc2:	bf0c      	ite	eq
 8003dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dc8:	2500      	movne	r5, #0
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	bfc4      	itt	gt
 8003dce:	1a9b      	subgt	r3, r3, r2
 8003dd0:	18ed      	addgt	r5, r5, r3
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	341a      	adds	r4, #26
 8003dd6:	42b5      	cmp	r5, r6
 8003dd8:	d11a      	bne.n	8003e10 <_printf_common+0xc8>
 8003dda:	2000      	movs	r0, #0
 8003ddc:	e008      	b.n	8003df0 <_printf_common+0xa8>
 8003dde:	2301      	movs	r3, #1
 8003de0:	4652      	mov	r2, sl
 8003de2:	4641      	mov	r1, r8
 8003de4:	4638      	mov	r0, r7
 8003de6:	47c8      	blx	r9
 8003de8:	3001      	adds	r0, #1
 8003dea:	d103      	bne.n	8003df4 <_printf_common+0xac>
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df4:	3501      	adds	r5, #1
 8003df6:	e7c6      	b.n	8003d86 <_printf_common+0x3e>
 8003df8:	18e1      	adds	r1, r4, r3
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	2030      	movs	r0, #48	@ 0x30
 8003dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e02:	4422      	add	r2, r4
 8003e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	e7c7      	b.n	8003da0 <_printf_common+0x58>
 8003e10:	2301      	movs	r3, #1
 8003e12:	4622      	mov	r2, r4
 8003e14:	4641      	mov	r1, r8
 8003e16:	4638      	mov	r0, r7
 8003e18:	47c8      	blx	r9
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d0e6      	beq.n	8003dec <_printf_common+0xa4>
 8003e1e:	3601      	adds	r6, #1
 8003e20:	e7d9      	b.n	8003dd6 <_printf_common+0x8e>
	...

08003e24 <_printf_i>:
 8003e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e28:	7e0f      	ldrb	r7, [r1, #24]
 8003e2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e2c:	2f78      	cmp	r7, #120	@ 0x78
 8003e2e:	4691      	mov	r9, r2
 8003e30:	4680      	mov	r8, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	469a      	mov	sl, r3
 8003e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e3a:	d807      	bhi.n	8003e4c <_printf_i+0x28>
 8003e3c:	2f62      	cmp	r7, #98	@ 0x62
 8003e3e:	d80a      	bhi.n	8003e56 <_printf_i+0x32>
 8003e40:	2f00      	cmp	r7, #0
 8003e42:	f000 80d1 	beq.w	8003fe8 <_printf_i+0x1c4>
 8003e46:	2f58      	cmp	r7, #88	@ 0x58
 8003e48:	f000 80b8 	beq.w	8003fbc <_printf_i+0x198>
 8003e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e54:	e03a      	b.n	8003ecc <_printf_i+0xa8>
 8003e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e5a:	2b15      	cmp	r3, #21
 8003e5c:	d8f6      	bhi.n	8003e4c <_printf_i+0x28>
 8003e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e64 <_printf_i+0x40>)
 8003e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e64:	08003ebd 	.word	0x08003ebd
 8003e68:	08003ed1 	.word	0x08003ed1
 8003e6c:	08003e4d 	.word	0x08003e4d
 8003e70:	08003e4d 	.word	0x08003e4d
 8003e74:	08003e4d 	.word	0x08003e4d
 8003e78:	08003e4d 	.word	0x08003e4d
 8003e7c:	08003ed1 	.word	0x08003ed1
 8003e80:	08003e4d 	.word	0x08003e4d
 8003e84:	08003e4d 	.word	0x08003e4d
 8003e88:	08003e4d 	.word	0x08003e4d
 8003e8c:	08003e4d 	.word	0x08003e4d
 8003e90:	08003fcf 	.word	0x08003fcf
 8003e94:	08003efb 	.word	0x08003efb
 8003e98:	08003f89 	.word	0x08003f89
 8003e9c:	08003e4d 	.word	0x08003e4d
 8003ea0:	08003e4d 	.word	0x08003e4d
 8003ea4:	08003ff1 	.word	0x08003ff1
 8003ea8:	08003e4d 	.word	0x08003e4d
 8003eac:	08003efb 	.word	0x08003efb
 8003eb0:	08003e4d 	.word	0x08003e4d
 8003eb4:	08003e4d 	.word	0x08003e4d
 8003eb8:	08003f91 	.word	0x08003f91
 8003ebc:	6833      	ldr	r3, [r6, #0]
 8003ebe:	1d1a      	adds	r2, r3, #4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6032      	str	r2, [r6, #0]
 8003ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e09c      	b.n	800400a <_printf_i+0x1e6>
 8003ed0:	6833      	ldr	r3, [r6, #0]
 8003ed2:	6820      	ldr	r0, [r4, #0]
 8003ed4:	1d19      	adds	r1, r3, #4
 8003ed6:	6031      	str	r1, [r6, #0]
 8003ed8:	0606      	lsls	r6, r0, #24
 8003eda:	d501      	bpl.n	8003ee0 <_printf_i+0xbc>
 8003edc:	681d      	ldr	r5, [r3, #0]
 8003ede:	e003      	b.n	8003ee8 <_printf_i+0xc4>
 8003ee0:	0645      	lsls	r5, r0, #25
 8003ee2:	d5fb      	bpl.n	8003edc <_printf_i+0xb8>
 8003ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	da03      	bge.n	8003ef4 <_printf_i+0xd0>
 8003eec:	232d      	movs	r3, #45	@ 0x2d
 8003eee:	426d      	negs	r5, r5
 8003ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ef4:	4858      	ldr	r0, [pc, #352]	@ (8004058 <_printf_i+0x234>)
 8003ef6:	230a      	movs	r3, #10
 8003ef8:	e011      	b.n	8003f1e <_printf_i+0xfa>
 8003efa:	6821      	ldr	r1, [r4, #0]
 8003efc:	6833      	ldr	r3, [r6, #0]
 8003efe:	0608      	lsls	r0, r1, #24
 8003f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f04:	d402      	bmi.n	8003f0c <_printf_i+0xe8>
 8003f06:	0649      	lsls	r1, r1, #25
 8003f08:	bf48      	it	mi
 8003f0a:	b2ad      	uxthmi	r5, r5
 8003f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f0e:	4852      	ldr	r0, [pc, #328]	@ (8004058 <_printf_i+0x234>)
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	bf14      	ite	ne
 8003f14:	230a      	movne	r3, #10
 8003f16:	2308      	moveq	r3, #8
 8003f18:	2100      	movs	r1, #0
 8003f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f1e:	6866      	ldr	r6, [r4, #4]
 8003f20:	60a6      	str	r6, [r4, #8]
 8003f22:	2e00      	cmp	r6, #0
 8003f24:	db05      	blt.n	8003f32 <_printf_i+0x10e>
 8003f26:	6821      	ldr	r1, [r4, #0]
 8003f28:	432e      	orrs	r6, r5
 8003f2a:	f021 0104 	bic.w	r1, r1, #4
 8003f2e:	6021      	str	r1, [r4, #0]
 8003f30:	d04b      	beq.n	8003fca <_printf_i+0x1a6>
 8003f32:	4616      	mov	r6, r2
 8003f34:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f38:	fb03 5711 	mls	r7, r3, r1, r5
 8003f3c:	5dc7      	ldrb	r7, [r0, r7]
 8003f3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f42:	462f      	mov	r7, r5
 8003f44:	42bb      	cmp	r3, r7
 8003f46:	460d      	mov	r5, r1
 8003f48:	d9f4      	bls.n	8003f34 <_printf_i+0x110>
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d10b      	bne.n	8003f66 <_printf_i+0x142>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	07df      	lsls	r7, r3, #31
 8003f52:	d508      	bpl.n	8003f66 <_printf_i+0x142>
 8003f54:	6923      	ldr	r3, [r4, #16]
 8003f56:	6861      	ldr	r1, [r4, #4]
 8003f58:	4299      	cmp	r1, r3
 8003f5a:	bfde      	ittt	le
 8003f5c:	2330      	movle	r3, #48	@ 0x30
 8003f5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f66:	1b92      	subs	r2, r2, r6
 8003f68:	6122      	str	r2, [r4, #16]
 8003f6a:	f8cd a000 	str.w	sl, [sp]
 8003f6e:	464b      	mov	r3, r9
 8003f70:	aa03      	add	r2, sp, #12
 8003f72:	4621      	mov	r1, r4
 8003f74:	4640      	mov	r0, r8
 8003f76:	f7ff fee7 	bl	8003d48 <_printf_common>
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d14a      	bne.n	8004014 <_printf_i+0x1f0>
 8003f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f82:	b004      	add	sp, #16
 8003f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	f043 0320 	orr.w	r3, r3, #32
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	4832      	ldr	r0, [pc, #200]	@ (800405c <_printf_i+0x238>)
 8003f92:	2778      	movs	r7, #120	@ 0x78
 8003f94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	6831      	ldr	r1, [r6, #0]
 8003f9c:	061f      	lsls	r7, r3, #24
 8003f9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fa2:	d402      	bmi.n	8003faa <_printf_i+0x186>
 8003fa4:	065f      	lsls	r7, r3, #25
 8003fa6:	bf48      	it	mi
 8003fa8:	b2ad      	uxthmi	r5, r5
 8003faa:	6031      	str	r1, [r6, #0]
 8003fac:	07d9      	lsls	r1, r3, #31
 8003fae:	bf44      	itt	mi
 8003fb0:	f043 0320 	orrmi.w	r3, r3, #32
 8003fb4:	6023      	strmi	r3, [r4, #0]
 8003fb6:	b11d      	cbz	r5, 8003fc0 <_printf_i+0x19c>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	e7ad      	b.n	8003f18 <_printf_i+0xf4>
 8003fbc:	4826      	ldr	r0, [pc, #152]	@ (8004058 <_printf_i+0x234>)
 8003fbe:	e7e9      	b.n	8003f94 <_printf_i+0x170>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	f023 0320 	bic.w	r3, r3, #32
 8003fc6:	6023      	str	r3, [r4, #0]
 8003fc8:	e7f6      	b.n	8003fb8 <_printf_i+0x194>
 8003fca:	4616      	mov	r6, r2
 8003fcc:	e7bd      	b.n	8003f4a <_printf_i+0x126>
 8003fce:	6833      	ldr	r3, [r6, #0]
 8003fd0:	6825      	ldr	r5, [r4, #0]
 8003fd2:	6961      	ldr	r1, [r4, #20]
 8003fd4:	1d18      	adds	r0, r3, #4
 8003fd6:	6030      	str	r0, [r6, #0]
 8003fd8:	062e      	lsls	r6, r5, #24
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	d501      	bpl.n	8003fe2 <_printf_i+0x1be>
 8003fde:	6019      	str	r1, [r3, #0]
 8003fe0:	e002      	b.n	8003fe8 <_printf_i+0x1c4>
 8003fe2:	0668      	lsls	r0, r5, #25
 8003fe4:	d5fb      	bpl.n	8003fde <_printf_i+0x1ba>
 8003fe6:	8019      	strh	r1, [r3, #0]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6123      	str	r3, [r4, #16]
 8003fec:	4616      	mov	r6, r2
 8003fee:	e7bc      	b.n	8003f6a <_printf_i+0x146>
 8003ff0:	6833      	ldr	r3, [r6, #0]
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	6032      	str	r2, [r6, #0]
 8003ff6:	681e      	ldr	r6, [r3, #0]
 8003ff8:	6862      	ldr	r2, [r4, #4]
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f7fc f90f 	bl	8000220 <memchr>
 8004002:	b108      	cbz	r0, 8004008 <_printf_i+0x1e4>
 8004004:	1b80      	subs	r0, r0, r6
 8004006:	6060      	str	r0, [r4, #4]
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	2300      	movs	r3, #0
 800400e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004012:	e7aa      	b.n	8003f6a <_printf_i+0x146>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	4632      	mov	r2, r6
 8004018:	4649      	mov	r1, r9
 800401a:	4640      	mov	r0, r8
 800401c:	47d0      	blx	sl
 800401e:	3001      	adds	r0, #1
 8004020:	d0ad      	beq.n	8003f7e <_printf_i+0x15a>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	079b      	lsls	r3, r3, #30
 8004026:	d413      	bmi.n	8004050 <_printf_i+0x22c>
 8004028:	68e0      	ldr	r0, [r4, #12]
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	4298      	cmp	r0, r3
 800402e:	bfb8      	it	lt
 8004030:	4618      	movlt	r0, r3
 8004032:	e7a6      	b.n	8003f82 <_printf_i+0x15e>
 8004034:	2301      	movs	r3, #1
 8004036:	4632      	mov	r2, r6
 8004038:	4649      	mov	r1, r9
 800403a:	4640      	mov	r0, r8
 800403c:	47d0      	blx	sl
 800403e:	3001      	adds	r0, #1
 8004040:	d09d      	beq.n	8003f7e <_printf_i+0x15a>
 8004042:	3501      	adds	r5, #1
 8004044:	68e3      	ldr	r3, [r4, #12]
 8004046:	9903      	ldr	r1, [sp, #12]
 8004048:	1a5b      	subs	r3, r3, r1
 800404a:	42ab      	cmp	r3, r5
 800404c:	dcf2      	bgt.n	8004034 <_printf_i+0x210>
 800404e:	e7eb      	b.n	8004028 <_printf_i+0x204>
 8004050:	2500      	movs	r5, #0
 8004052:	f104 0619 	add.w	r6, r4, #25
 8004056:	e7f5      	b.n	8004044 <_printf_i+0x220>
 8004058:	0800452b 	.word	0x0800452b
 800405c:	0800453c 	.word	0x0800453c

08004060 <__swbuf_r>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	460e      	mov	r6, r1
 8004064:	4614      	mov	r4, r2
 8004066:	4605      	mov	r5, r0
 8004068:	b118      	cbz	r0, 8004072 <__swbuf_r+0x12>
 800406a:	6a03      	ldr	r3, [r0, #32]
 800406c:	b90b      	cbnz	r3, 8004072 <__swbuf_r+0x12>
 800406e:	f7ff f9cf 	bl	8003410 <__sinit>
 8004072:	69a3      	ldr	r3, [r4, #24]
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	071a      	lsls	r2, r3, #28
 800407a:	d501      	bpl.n	8004080 <__swbuf_r+0x20>
 800407c:	6923      	ldr	r3, [r4, #16]
 800407e:	b943      	cbnz	r3, 8004092 <__swbuf_r+0x32>
 8004080:	4621      	mov	r1, r4
 8004082:	4628      	mov	r0, r5
 8004084:	f000 f82a 	bl	80040dc <__swsetup_r>
 8004088:	b118      	cbz	r0, 8004092 <__swbuf_r+0x32>
 800408a:	f04f 37ff 	mov.w	r7, #4294967295
 800408e:	4638      	mov	r0, r7
 8004090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	6922      	ldr	r2, [r4, #16]
 8004096:	1a98      	subs	r0, r3, r2
 8004098:	6963      	ldr	r3, [r4, #20]
 800409a:	b2f6      	uxtb	r6, r6
 800409c:	4283      	cmp	r3, r0
 800409e:	4637      	mov	r7, r6
 80040a0:	dc05      	bgt.n	80040ae <__swbuf_r+0x4e>
 80040a2:	4621      	mov	r1, r4
 80040a4:	4628      	mov	r0, r5
 80040a6:	f7ff fcbd 	bl	8003a24 <_fflush_r>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d1ed      	bne.n	800408a <__swbuf_r+0x2a>
 80040ae:	68a3      	ldr	r3, [r4, #8]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	60a3      	str	r3, [r4, #8]
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	6022      	str	r2, [r4, #0]
 80040ba:	701e      	strb	r6, [r3, #0]
 80040bc:	6962      	ldr	r2, [r4, #20]
 80040be:	1c43      	adds	r3, r0, #1
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d004      	beq.n	80040ce <__swbuf_r+0x6e>
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	07db      	lsls	r3, r3, #31
 80040c8:	d5e1      	bpl.n	800408e <__swbuf_r+0x2e>
 80040ca:	2e0a      	cmp	r6, #10
 80040cc:	d1df      	bne.n	800408e <__swbuf_r+0x2e>
 80040ce:	4621      	mov	r1, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f7ff fca7 	bl	8003a24 <_fflush_r>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d0d9      	beq.n	800408e <__swbuf_r+0x2e>
 80040da:	e7d6      	b.n	800408a <__swbuf_r+0x2a>

080040dc <__swsetup_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4b29      	ldr	r3, [pc, #164]	@ (8004184 <__swsetup_r+0xa8>)
 80040e0:	4605      	mov	r5, r0
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	460c      	mov	r4, r1
 80040e6:	b118      	cbz	r0, 80040f0 <__swsetup_r+0x14>
 80040e8:	6a03      	ldr	r3, [r0, #32]
 80040ea:	b90b      	cbnz	r3, 80040f0 <__swsetup_r+0x14>
 80040ec:	f7ff f990 	bl	8003410 <__sinit>
 80040f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f4:	0719      	lsls	r1, r3, #28
 80040f6:	d422      	bmi.n	800413e <__swsetup_r+0x62>
 80040f8:	06da      	lsls	r2, r3, #27
 80040fa:	d407      	bmi.n	800410c <__swsetup_r+0x30>
 80040fc:	2209      	movs	r2, #9
 80040fe:	602a      	str	r2, [r5, #0]
 8004100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	f04f 30ff 	mov.w	r0, #4294967295
 800410a:	e033      	b.n	8004174 <__swsetup_r+0x98>
 800410c:	0758      	lsls	r0, r3, #29
 800410e:	d512      	bpl.n	8004136 <__swsetup_r+0x5a>
 8004110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004112:	b141      	cbz	r1, 8004126 <__swsetup_r+0x4a>
 8004114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004118:	4299      	cmp	r1, r3
 800411a:	d002      	beq.n	8004122 <__swsetup_r+0x46>
 800411c:	4628      	mov	r0, r5
 800411e:	f7ff fafd 	bl	800371c <_free_r>
 8004122:	2300      	movs	r3, #0
 8004124:	6363      	str	r3, [r4, #52]	@ 0x34
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	2300      	movs	r3, #0
 8004130:	6063      	str	r3, [r4, #4]
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	f043 0308 	orr.w	r3, r3, #8
 800413c:	81a3      	strh	r3, [r4, #12]
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	b94b      	cbnz	r3, 8004156 <__swsetup_r+0x7a>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800414c:	d003      	beq.n	8004156 <__swsetup_r+0x7a>
 800414e:	4621      	mov	r1, r4
 8004150:	4628      	mov	r0, r5
 8004152:	f000 f883 	bl	800425c <__smakebuf_r>
 8004156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800415a:	f013 0201 	ands.w	r2, r3, #1
 800415e:	d00a      	beq.n	8004176 <__swsetup_r+0x9a>
 8004160:	2200      	movs	r2, #0
 8004162:	60a2      	str	r2, [r4, #8]
 8004164:	6962      	ldr	r2, [r4, #20]
 8004166:	4252      	negs	r2, r2
 8004168:	61a2      	str	r2, [r4, #24]
 800416a:	6922      	ldr	r2, [r4, #16]
 800416c:	b942      	cbnz	r2, 8004180 <__swsetup_r+0xa4>
 800416e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004172:	d1c5      	bne.n	8004100 <__swsetup_r+0x24>
 8004174:	bd38      	pop	{r3, r4, r5, pc}
 8004176:	0799      	lsls	r1, r3, #30
 8004178:	bf58      	it	pl
 800417a:	6962      	ldrpl	r2, [r4, #20]
 800417c:	60a2      	str	r2, [r4, #8]
 800417e:	e7f4      	b.n	800416a <__swsetup_r+0x8e>
 8004180:	2000      	movs	r0, #0
 8004182:	e7f7      	b.n	8004174 <__swsetup_r+0x98>
 8004184:	20000018 	.word	0x20000018

08004188 <_raise_r>:
 8004188:	291f      	cmp	r1, #31
 800418a:	b538      	push	{r3, r4, r5, lr}
 800418c:	4605      	mov	r5, r0
 800418e:	460c      	mov	r4, r1
 8004190:	d904      	bls.n	800419c <_raise_r+0x14>
 8004192:	2316      	movs	r3, #22
 8004194:	6003      	str	r3, [r0, #0]
 8004196:	f04f 30ff 	mov.w	r0, #4294967295
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800419e:	b112      	cbz	r2, 80041a6 <_raise_r+0x1e>
 80041a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80041a4:	b94b      	cbnz	r3, 80041ba <_raise_r+0x32>
 80041a6:	4628      	mov	r0, r5
 80041a8:	f000 f830 	bl	800420c <_getpid_r>
 80041ac:	4622      	mov	r2, r4
 80041ae:	4601      	mov	r1, r0
 80041b0:	4628      	mov	r0, r5
 80041b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b6:	f000 b817 	b.w	80041e8 <_kill_r>
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d00a      	beq.n	80041d4 <_raise_r+0x4c>
 80041be:	1c59      	adds	r1, r3, #1
 80041c0:	d103      	bne.n	80041ca <_raise_r+0x42>
 80041c2:	2316      	movs	r3, #22
 80041c4:	6003      	str	r3, [r0, #0]
 80041c6:	2001      	movs	r0, #1
 80041c8:	e7e7      	b.n	800419a <_raise_r+0x12>
 80041ca:	2100      	movs	r1, #0
 80041cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80041d0:	4620      	mov	r0, r4
 80041d2:	4798      	blx	r3
 80041d4:	2000      	movs	r0, #0
 80041d6:	e7e0      	b.n	800419a <_raise_r+0x12>

080041d8 <raise>:
 80041d8:	4b02      	ldr	r3, [pc, #8]	@ (80041e4 <raise+0xc>)
 80041da:	4601      	mov	r1, r0
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	f7ff bfd3 	b.w	8004188 <_raise_r>
 80041e2:	bf00      	nop
 80041e4:	20000018 	.word	0x20000018

080041e8 <_kill_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4d07      	ldr	r5, [pc, #28]	@ (8004208 <_kill_r+0x20>)
 80041ec:	2300      	movs	r3, #0
 80041ee:	4604      	mov	r4, r0
 80041f0:	4608      	mov	r0, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	f7fc fce5 	bl	8000bc4 <_kill>
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d102      	bne.n	8004204 <_kill_r+0x1c>
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	b103      	cbz	r3, 8004204 <_kill_r+0x1c>
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	bd38      	pop	{r3, r4, r5, pc}
 8004206:	bf00      	nop
 8004208:	200002d8 	.word	0x200002d8

0800420c <_getpid_r>:
 800420c:	f7fc bcd2 	b.w	8000bb4 <_getpid>

08004210 <__swhatbuf_r>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	460c      	mov	r4, r1
 8004214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004218:	2900      	cmp	r1, #0
 800421a:	b096      	sub	sp, #88	@ 0x58
 800421c:	4615      	mov	r5, r2
 800421e:	461e      	mov	r6, r3
 8004220:	da0d      	bge.n	800423e <__swhatbuf_r+0x2e>
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	bf14      	ite	ne
 800422e:	2340      	movne	r3, #64	@ 0x40
 8004230:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004234:	2000      	movs	r0, #0
 8004236:	6031      	str	r1, [r6, #0]
 8004238:	602b      	str	r3, [r5, #0]
 800423a:	b016      	add	sp, #88	@ 0x58
 800423c:	bd70      	pop	{r4, r5, r6, pc}
 800423e:	466a      	mov	r2, sp
 8004240:	f000 f848 	bl	80042d4 <_fstat_r>
 8004244:	2800      	cmp	r0, #0
 8004246:	dbec      	blt.n	8004222 <__swhatbuf_r+0x12>
 8004248:	9901      	ldr	r1, [sp, #4]
 800424a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800424e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004252:	4259      	negs	r1, r3
 8004254:	4159      	adcs	r1, r3
 8004256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800425a:	e7eb      	b.n	8004234 <__swhatbuf_r+0x24>

0800425c <__smakebuf_r>:
 800425c:	898b      	ldrh	r3, [r1, #12]
 800425e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004260:	079d      	lsls	r5, r3, #30
 8004262:	4606      	mov	r6, r0
 8004264:	460c      	mov	r4, r1
 8004266:	d507      	bpl.n	8004278 <__smakebuf_r+0x1c>
 8004268:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	2301      	movs	r3, #1
 8004272:	6163      	str	r3, [r4, #20]
 8004274:	b003      	add	sp, #12
 8004276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004278:	ab01      	add	r3, sp, #4
 800427a:	466a      	mov	r2, sp
 800427c:	f7ff ffc8 	bl	8004210 <__swhatbuf_r>
 8004280:	9f00      	ldr	r7, [sp, #0]
 8004282:	4605      	mov	r5, r0
 8004284:	4639      	mov	r1, r7
 8004286:	4630      	mov	r0, r6
 8004288:	f7ff fabc 	bl	8003804 <_malloc_r>
 800428c:	b948      	cbnz	r0, 80042a2 <__smakebuf_r+0x46>
 800428e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004292:	059a      	lsls	r2, r3, #22
 8004294:	d4ee      	bmi.n	8004274 <__smakebuf_r+0x18>
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	e7e2      	b.n	8004268 <__smakebuf_r+0xc>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	6020      	str	r0, [r4, #0]
 80042a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042aa:	81a3      	strh	r3, [r4, #12]
 80042ac:	9b01      	ldr	r3, [sp, #4]
 80042ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042b2:	b15b      	cbz	r3, 80042cc <__smakebuf_r+0x70>
 80042b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 f81d 	bl	80042f8 <_isatty_r>
 80042be:	b128      	cbz	r0, 80042cc <__smakebuf_r+0x70>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	81a3      	strh	r3, [r4, #12]
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	431d      	orrs	r5, r3
 80042d0:	81a5      	strh	r5, [r4, #12]
 80042d2:	e7cf      	b.n	8004274 <__smakebuf_r+0x18>

080042d4 <_fstat_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4d07      	ldr	r5, [pc, #28]	@ (80042f4 <_fstat_r+0x20>)
 80042d8:	2300      	movs	r3, #0
 80042da:	4604      	mov	r4, r0
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	602b      	str	r3, [r5, #0]
 80042e2:	f7fc fccf 	bl	8000c84 <_fstat>
 80042e6:	1c43      	adds	r3, r0, #1
 80042e8:	d102      	bne.n	80042f0 <_fstat_r+0x1c>
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	b103      	cbz	r3, 80042f0 <_fstat_r+0x1c>
 80042ee:	6023      	str	r3, [r4, #0]
 80042f0:	bd38      	pop	{r3, r4, r5, pc}
 80042f2:	bf00      	nop
 80042f4:	200002d8 	.word	0x200002d8

080042f8 <_isatty_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4d06      	ldr	r5, [pc, #24]	@ (8004314 <_isatty_r+0x1c>)
 80042fc:	2300      	movs	r3, #0
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f7fc fcce 	bl	8000ca4 <_isatty>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_isatty_r+0x1a>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_isatty_r+0x1a>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	200002d8 	.word	0x200002d8

08004318 <_init>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	bf00      	nop
 800431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	469e      	mov	lr, r3
 8004322:	4770      	bx	lr

08004324 <_fini>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	bf00      	nop
 8004328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432a:	bc08      	pop	{r3}
 800432c:	469e      	mov	lr, r3
 800432e:	4770      	bx	lr
